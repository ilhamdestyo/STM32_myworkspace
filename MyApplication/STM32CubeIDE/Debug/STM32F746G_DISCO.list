
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b9bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ed8  0802bb90  0802bb90  0003bb90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000001c  08032a68  08032a68  00042a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08032a84  08032a84  003de738  2**0
                  CONTENTS
  5 .ARM          00000008  08032a84  08032a84  00042a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08032a8c  08032a8c  003de738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  08032a8c  08032a8c  00042a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08032aa8  08032aa8  00042aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  08032ab0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00015520  20000124  08032bd4  00050124  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20015644  08032bd4  00055644  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  003de738  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  003e0000  2**2
                  ALLOC
 14 ExtFlashSection 0037d790  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 00000f54  9037d790  9037d790  003dd790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000054  9037e6e4  9037e6e4  003de6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   000e8207  00000000  00000000  003de768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0001a3d7  00000000  00000000  004c696f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000033e8  00000000  00000000  004e0d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00005ab8  00000000  00000000  004e4130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003a2a7  00000000  00000000  004e9be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00073118  00000000  00000000  00523e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001279cc  00000000  00000000  00596fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  006be973  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009fbc  00000000  00000000  006bea44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    00051776  00000000  00000000  006c8a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000124 	.word	0x20000124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802bb74 	.word	0x0802bb74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000128 	.word	0x20000128
 800020c:	0802bb74 	.word	0x0802bb74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000df0:	4901      	ldr	r1, [pc, #4]	; (8000df8 <vApplicationIdleHook+0x8>)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f008 b9c0 	b.w	8009178 <vTaskSetApplicationTaskTag>
 8000df8:	08001de5 	.word	0x08001de5

08000dfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000dfe:	2064      	movs	r0, #100	; 0x64
 8000e00:	f006 fbba 	bl	8007578 <osDelay>
  for(;;)
 8000e04:	e7fb      	b.n	8000dfe <StartDefaultTask+0x2>
	...

08000e08 <SystemClock_Config>:
{
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e10:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	a80a      	add	r0, sp, #40	; 0x28
 8000e14:	f029 fcae 	bl	802a774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	2214      	movs	r2, #20
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	a803      	add	r0, sp, #12
 8000e1e:	f029 fca9 	bl	802a774 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e24:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <SystemClock_Config+0x94>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5c:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e60:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e64:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e68:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f005 fb42 	bl	80064f4 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e70:	f004 fff4 	bl	8005e5c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e76:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e78:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e82:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8e:	f005 fd1d 	bl	80068cc <HAL_RCC_ClockConfig>
}
 8000e92:	b014      	add	sp, #80	; 0x50
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <main>:
{
 8000ea0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000ea4:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eaa:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eac:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000eae:	f04f 4910 	mov.w	r9, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eb2:	f029 fc5f 	bl	802a774 <memset>
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000eb6:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000eb8:	f003 fefa 	bl	8004cb0 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ebc:	4bc6      	ldr	r3, [pc, #792]	; (80011d8 <main+0x338>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ebe:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ec0:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ec4:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ec6:	e9cd 930e 	strd	r9, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eca:	f003 ff0f 	bl	8004cec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ece:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ed0:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ed2:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ed6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000eda:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ede:	f003 ff05 	bl	8004cec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ee2:	2004      	movs	r0, #4
 8000ee4:	f003 fef2 	bl	8004ccc <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eec:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ef0:	4aba      	ldr	r2, [pc, #744]	; (80011dc <main+0x33c>)
 8000ef2:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000efa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000efe:	6953      	ldr	r3, [r2, #20]
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f0e:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f12:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f1a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f1e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f22:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000f26:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f28:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f2c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f2e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f32:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f34:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000f38:	d2f9      	bcs.n	8000f2e <main+0x8e>
    } while(sets-- != 0U);
 8000f3a:	3b20      	subs	r3, #32
 8000f3c:	f113 0f20 	cmn.w	r3, #32
 8000f40:	d1f2      	bne.n	8000f28 <main+0x88>
 8000f42:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f46:	6953      	ldr	r3, [r2, #20]
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f56:	f003 fe0f 	bl	8004b78 <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2400      	movs	r4, #0
  SystemClock_Config();
 8000f5c:	f7ff ff54 	bl	8000e08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	2214      	movs	r2, #20
 8000f62:	2100      	movs	r1, #0
 8000f64:	a80d      	add	r0, sp, #52	; 0x34
 8000f66:	f029 fc05 	bl	802a774 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4b9d      	ldr	r3, [pc, #628]	; (80011e0 <main+0x340>)
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	489d      	ldr	r0, [pc, #628]	; (80011e4 <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2701      	movs	r7, #1
 8000f74:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000f80:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  hdma2d.Instance = DMA2D;
 8000f84:	4d98      	ldr	r5, [pc, #608]	; (80011e8 <main+0x348>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f86:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8e:	4e97      	ldr	r6, [pc, #604]	; (80011ec <main+0x34c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f90:	f002 0210 	and.w	r2, r2, #16
 8000f94:	9202      	str	r2, [sp, #8]
 8000f96:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9a:	f042 0202 	orr.w	r2, r2, #2
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa2:	f002 0202 	and.w	r2, r2, #2
 8000fa6:	9203      	str	r2, [sp, #12]
 8000fa8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb4:	f002 0201 	and.w	r2, r2, #1
 8000fb8:	9204      	str	r2, [sp, #16]
 8000fba:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000fca:	9205      	str	r2, [sp, #20]
 8000fcc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fdc:	9206      	str	r2, [sp, #24]
 8000fde:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe2:	f042 0208 	orr.w	r2, r2, #8
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fea:	f002 0208 	and.w	r2, r2, #8
 8000fee:	9207      	str	r2, [sp, #28]
 8000ff0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001000:	9208      	str	r2, [sp, #32]
 8001002:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001006:	f042 0220 	orr.w	r2, r2, #32
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
 800100c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100e:	f002 0220 	and.w	r2, r2, #32
 8001012:	9209      	str	r2, [sp, #36]	; 0x24
 8001014:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
 800101e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001020:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001024:	920a      	str	r2, [sp, #40]	; 0x28
 8001026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
 8001030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001032:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001036:	920b      	str	r2, [sp, #44]	; 0x2c
 8001038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103c:	f042 0204 	orr.w	r2, r2, #4
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	930c      	str	r3, [sp, #48]	; 0x30
 800104c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800104e:	f004 f9a1 	bl	8005394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2108      	movs	r1, #8
 8001056:	4866      	ldr	r0, [pc, #408]	; (80011f0 <main+0x350>)
 8001058:	f004 f99c 	bl	8005394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	4864      	ldr	r0, [pc, #400]	; (80011f4 <main+0x354>)
 8001064:	f004 f996 	bl	8005394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	21c0      	movs	r1, #192	; 0xc0
 800106c:	4862      	ldr	r0, [pc, #392]	; (80011f8 <main+0x358>)
 800106e:	f004 f991 	bl	8005394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	4861      	ldr	r0, [pc, #388]	; (80011fc <main+0x35c>)
 8001078:	f004 f98c 	bl	8005394 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 800107c:	a90d      	add	r1, sp, #52	; 0x34
 800107e:	4859      	ldr	r0, [pc, #356]	; (80011e4 <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001088:	f003 fffe 	bl	8005088 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800108c:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800108e:	a90d      	add	r1, sp, #52	; 0x34
 8001090:	4857      	ldr	r0, [pc, #348]	; (80011f0 <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800109a:	f003 fff5 	bl	8005088 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800109e:	a90d      	add	r1, sp, #52	; 0x34
 80010a0:	4854      	ldr	r0, [pc, #336]	; (80011f4 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f003 ffed 	bl	8005088 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 80010ae:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	a90d      	add	r1, sp, #52	; 0x34
 80010b2:	4851      	ldr	r0, [pc, #324]	; (80011f8 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f003 ffe4 	bl	8005088 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80010c0:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010c2:	a90d      	add	r1, sp, #52	; 0x34
 80010c4:	484d      	ldr	r0, [pc, #308]	; (80011fc <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f003 ffdb 	bl	8005088 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80010d2:	484b      	ldr	r0, [pc, #300]	; (8001200 <main+0x360>)
 80010d4:	494b      	ldr	r1, [pc, #300]	; (8001204 <main+0x364>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010d6:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 80010d8:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010da:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010dc:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010e0:	f003 fe30 	bl	8004d44 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 80010e4:	4948      	ldr	r1, [pc, #288]	; (8001208 <main+0x368>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010e6:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010e8:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010ec:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 80010f0:	e9c5 1400 	strd	r1, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80010f4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010f8:	f003 fec6 	bl	8004e88 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010fc:	4639      	mov	r1, r7
 80010fe:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001100:	4d42      	ldr	r5, [pc, #264]	; (800120c <main+0x36c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001102:	f003 ff79 	bl	8004ff8 <HAL_DMA2D_ConfigLayer>
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800110c:	4940      	ldr	r1, [pc, #256]	; (8001210 <main+0x370>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800110e:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001110:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001112:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001114:	62b4      	str	r4, [r6, #40]	; 0x28
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001116:	e9c6 3205 	strd	r3, r2, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800111a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800111e:	e9c6 2a08 	strd	r2, sl, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001122:	f04f 0a02 	mov.w	sl, #2
 8001126:	2207      	movs	r2, #7
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001128:	e9c6 1400 	strd	r1, r4, [r6]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800112c:	a90d      	add	r1, sp, #52	; 0x34
  SdramTiming.RCDDelay = 2;
 800112e:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001132:	e9c6 9803 	strd	r9, r8, [r6, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001136:	e9cd a20d 	strd	sl, r2, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 800113a:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 800113e:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001142:	f005 ff19 	bl	8006f78 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001146:	4629      	mov	r1, r5
 8001148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114c:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 800114e:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001150:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001154:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001158:	f005 ff2e 	bl	8006fb8 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800115c:	4638      	mov	r0, r7
 800115e:	f003 fd2f 	bl	8004bc0 <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001162:	4629      	mov	r1, r5
 8001164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001168:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800116a:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 800116e:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001172:	f005 ff21 	bl	8006fb8 <HAL_SDRAM_SendCommand>
    Command.AutoRefreshNumber      = 8;
 8001176:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001178:	4629      	mov	r1, r5
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001180:	e9c5 b800 	strd	fp, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001184:	e9c5 3402 	strd	r3, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001188:	f005 ff16 	bl	8006fb8 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800118c:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001196:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001198:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 800119a:	9b01      	ldr	r3, [sp, #4]
    Command.AutoRefreshNumber      = 1;
 800119c:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800119e:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011a0:	e9c5 9800 	strd	r9, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011a4:	f005 ff08 	bl	8006fb8 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011a8:	f240 712b 	movw	r1, #1835	; 0x72b
 80011ac:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 80011ae:	4d19      	ldr	r5, [pc, #100]	; (8001214 <main+0x374>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011b0:	f005 ff21 	bl	8006ff6 <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011b4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011bc:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 80011be:	f240 2615 	movw	r6, #533	; 0x215
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011c2:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <main+0x378>)
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <main+0x37c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c8:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x20404768;
 80011ca:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	e9c5 4702 	strd	r4, r7, [r5, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80011d2:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80011d6:	e023      	b.n	8001220 <main+0x380>
 80011d8:	0300001b 	.word	0x0300001b
 80011dc:	e000ed00 	.word	0xe000ed00
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020400 	.word	0x40020400
 80011e8:	2000017c 	.word	0x2000017c
 80011ec:	200002fc 	.word	0x200002fc
 80011f0:	40022800 	.word	0x40022800
 80011f4:	40022000 	.word	0x40022000
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40021800 	.word	0x40021800
 8001200:	20000158 	.word	0x20000158
 8001204:	40023000 	.word	0x40023000
 8001208:	4002b000 	.word	0x4002b000
 800120c:	20000140 	.word	0x20000140
 8001210:	a0000140 	.word	0xa0000140
 8001214:	200001bc 	.word	0x200001bc
 8001218:	20404768 	.word	0x20404768
 800121c:	40005c00 	.word	0x40005c00
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001220:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001224:	f004 fa55 	bl	80056d2 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001228:	4621      	mov	r1, r4
 800122a:	4628      	mov	r0, r5
 800122c:	f004 fc2e 	bl	8005a8c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001230:	4621      	mov	r1, r4
 8001232:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 8001234:	4d3d      	ldr	r5, [pc, #244]	; (800132c <main+0x48c>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001236:	f004 fc4f 	bl	8005ad8 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800123a:	2234      	movs	r2, #52	; 0x34
 800123c:	4621      	mov	r1, r4
 800123e:	eb0d 0002 	add.w	r0, sp, r2
 8001242:	f029 fa97 	bl	802a774 <memset>
  hltdc.Instance = LTDC;
 8001246:	4b3a      	ldr	r3, [pc, #232]	; (8001330 <main+0x490>)
  hltdc.Init.VerticalSync = 9;
 8001248:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 800124a:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.TotalHeigh = 285;
 800124c:	f240 2c35 	movw	ip, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8001250:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001252:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8001254:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001258:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 800125c:	2309      	movs	r3, #9
 800125e:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8001262:	230b      	movs	r3, #11
 8001264:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8001268:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800126c:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 800126e:	e9c5 6309 	strd	r6, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8001272:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001276:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 800127a:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800127e:	f004 fcd7 	bl	8005c30 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001282:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001284:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 8001288:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 800128c:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001290:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 8001292:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.ImageHeight = 272;
 8001294:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001296:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 800129a:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.Alpha0 = 0;
 800129e:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012a2:	2105      	movs	r1, #5
 80012a4:	e9cd e114 	strd	lr, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 80012a8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 80012ac:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 80012b0:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012b4:	4622      	mov	r2, r4
 80012b6:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012b8:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012bc:	f004 fd83 	bl	8005dc6 <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 80012c0:	481c      	ldr	r0, [pc, #112]	; (8001334 <main+0x494>)
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <main+0x498>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012c4:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 80012c6:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012ca:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012ce:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012d2:	f04f 0818 	mov.w	r8, #24
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012d6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012da:	e9c0 8304 	strd	r8, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012de:	f004 fecd 	bl	800607c <HAL_QSPI_Init>
  BSP_QSPI_Init();
 80012e2:	f003 fac7 	bl	8004874 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 80012e6:	f003 fa0b 	bl	8004700 <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80012ea:	205c      	movs	r0, #92	; 0x5c
 80012ec:	f003 fccc 	bl	8004c88 <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 80012f0:	f000 fb4a 	bl	8001988 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 80012f4:	f000 fb73 	bl	80019de <MX_TouchGFX_Init>
  osKernelInitialize();
 80012f8:	f006 f8ae 	bl	8007458 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <main+0x49c>)
 80012fe:	4621      	mov	r1, r4
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <main+0x4a0>)
 8001302:	f006 f8e3 	bl	80074cc <osThreadNew>
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <main+0x4a4>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001308:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <main+0x4a8>)
 800130a:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800130c:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800130e:	480f      	ldr	r0, [pc, #60]	; (800134c <main+0x4ac>)
 8001310:	f006 f8dc 	bl	80074cc <osThreadNew>
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <main+0x4b0>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <main+0x4b4>)
 8001318:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800131a:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <main+0x4b8>)
 800131e:	f006 f8d5 	bl	80074cc <osThreadNew>
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <main+0x4bc>)
 8001324:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001326:	f006 f8b1 	bl	800748c <osKernelStart>
  while (1)
 800132a:	e7fe      	b.n	800132a <main+0x48a>
 800132c:	20000208 	.word	0x20000208
 8001330:	40016800 	.word	0x40016800
 8001334:	200002b0 	.word	0x200002b0
 8001338:	a0001000 	.word	0xa0001000
 800133c:	0802bc18 	.word	0x0802bc18
 8001340:	08000dfd 	.word	0x08000dfd
 8001344:	20000154 	.word	0x20000154
 8001348:	0802bbf4 	.word	0x0802bbf4
 800134c:	080019e3 	.word	0x080019e3
 8001350:	20000150 	.word	0x20000150
 8001354:	0802bc3c 	.word	0x0802bc3c
 8001358:	08003185 	.word	0x08003185
 800135c:	20000330 	.word	0x20000330

08001360 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001360:	6802      	ldr	r2, [r0, #0]
 8001362:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001364:	429a      	cmp	r2, r3
 8001366:	d101      	bne.n	800136c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001368:	f003 bc18 	b.w	8004b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40001000 	.word	0x40001000

08001374 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001374:	4770      	bx	lr
	...

08001378 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_MspInit+0x38>)
{
 800137a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800137c:	210f      	movs	r1, #15
 800137e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001384:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
 800138a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800139c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a8:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013aa:	f003 bc2d 	b.w	8004c08 <HAL_NVIC_SetPriority>
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013b4:	6802      	ldr	r2, [r0, #0]
{
 80013b6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_CRC_MspInit+0x28>)
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d10b      	bne.n	80013d6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013be:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80013c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013d6:	b002      	add	sp, #8
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023000 	.word	0x40023000

080013e0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_DMA2D_MspInit+0x3c>)
{
 80013e2:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80013e4:	6802      	ldr	r2, [r0, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d115      	bne.n	8001416 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013ea:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013ee:	2105      	movs	r1, #5
 80013f0:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013fa:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001406:	f003 fbff 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800140a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800140c:	b003      	add	sp, #12
 800140e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001412:	f003 bc2b 	b.w	8004c6c <HAL_NVIC_EnableIRQ>
}
 8001416:	b003      	add	sp, #12
 8001418:	f85d fb04 	ldr.w	pc, [sp], #4
 800141c:	4002b000 	.word	0x4002b000

08001420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001420:	b510      	push	{r4, lr}
 8001422:	b0a8      	sub	sp, #160	; 0xa0
 8001424:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	2214      	movs	r2, #20
 8001428:	2100      	movs	r1, #0
 800142a:	a802      	add	r0, sp, #8
 800142c:	f029 f9a2 	bl	802a774 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	2284      	movs	r2, #132	; 0x84
 8001432:	2100      	movs	r1, #0
 8001434:	a807      	add	r0, sp, #28
 8001436:	f029 f99d 	bl	802a774 <memset>
  if(hi2c->Instance==I2C3)
 800143a:	6822      	ldr	r2, [r4, #0]
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_I2C_MspInit+0x7c>)
 800143e:	429a      	cmp	r2, r3
 8001440:	d12a      	bne.n	8001498 <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001446:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001448:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144a:	f005 fb0d 	bl	8006a68 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	b108      	cbz	r0, 8001454 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001450:	f7ff ff90 	bl	8001374 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001454:	4c12      	ldr	r4, [pc, #72]	; (80014a0 <HAL_I2C_MspInit+0x80>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001456:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800145c:	4811      	ldr	r0, [pc, #68]	; (80014a4 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	6323      	str	r3, [r4, #48]	; 0x30
 8001466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001470:	2312      	movs	r3, #18
 8001472:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800147c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800147e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001480:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001482:	f003 fe01 	bl	8005088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800148c:	6423      	str	r3, [r4, #64]	; 0x40
 800148e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001498:	b028      	add	sp, #160	; 0xa0
 800149a:	bd10      	pop	{r4, pc}
 800149c:	40005c00 	.word	0x40005c00
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40021c00 	.word	0x40021c00

080014a8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 80014a8:	6802      	ldr	r2, [r0, #0]
{
 80014aa:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_I2C_MspDeInit+0x2c>)
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d10f      	bne.n	80014d2 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	4809      	ldr	r0, [pc, #36]	; (80014dc <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014b8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014c0:	f003 fec6 	bl	8005250 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80014ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014ce:	f003 bebf 	b.w	8005250 <HAL_GPIO_DeInit>
}
 80014d2:	bd08      	pop	{r3, pc}
 80014d4:	40005c00 	.word	0x40005c00
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40021c00 	.word	0x40021c00

080014e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	b0ac      	sub	sp, #176	; 0xb0
 80014e4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	2214      	movs	r2, #20
 80014e8:	2100      	movs	r1, #0
 80014ea:	a806      	add	r0, sp, #24
 80014ec:	f029 f942 	bl	802a774 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f0:	2284      	movs	r2, #132	; 0x84
 80014f2:	2100      	movs	r1, #0
 80014f4:	a80b      	add	r0, sp, #44	; 0x2c
 80014f6:	f029 f93d 	bl	802a774 <memset>
  if(hltdc->Instance==LTDC)
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	4b48      	ldr	r3, [pc, #288]	; (8001620 <HAL_LTDC_MspInit+0x140>)
 80014fe:	429a      	cmp	r2, r3
 8001500:	f040 808c 	bne.w	800161c <HAL_LTDC_MspInit+0x13c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001504:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001506:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001508:	2401      	movs	r4, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800150a:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800150c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001510:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001512:	2302      	movs	r3, #2
 8001514:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800151e:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001522:	f005 faa1 	bl	8006a68 <HAL_RCCEx_PeriphCLKConfig>
 8001526:	b108      	cbz	r0, 800152c <HAL_LTDC_MspInit+0x4c>
    {
      Error_Handler();
 8001528:	f7ff ff24 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800152c:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <HAL_LTDC_MspInit+0x144>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001532:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001536:	a906      	add	r1, sp, #24
 8001538:	483b      	ldr	r0, [pc, #236]	; (8001628 <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800153a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
 8001540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001542:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800154c:	f042 0210 	orr.w	r2, r2, #16
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
 8001552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001554:	f002 0210 	and.w	r2, r2, #16
 8001558:	9201      	str	r2, [sp, #4]
 800155a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800155c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800155e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
 8001564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001566:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800156a:	9202      	str	r2, [sp, #8]
 800156c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800156e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
 8001576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001578:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800157c:	9203      	str	r2, [sp, #12]
 800157e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
 8001588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800158e:	9204      	str	r2, [sp, #16]
 8001590:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	9305      	str	r3, [sp, #20]
 80015a2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2310      	movs	r3, #16
 80015a6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ae:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b0:	f003 fd6a 	bl	8005088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80015b4:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015b8:	a906      	add	r1, sp, #24
 80015ba:	481c      	ldr	r0, [pc, #112]	; (800162c <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015bc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015c6:	f003 fd5f 	bl	8005088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80015ca:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015cc:	a906      	add	r1, sp, #24
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015d0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015da:	f003 fd55 	bl	8005088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e2:	a906      	add	r1, sp, #24
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015ea:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015f0:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f2:	f003 fd49 	bl	8005088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80015f6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015fa:	a906      	add	r1, sp, #24
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015fe:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001608:	f003 fd3e 	bl	8005088 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800160c:	2058      	movs	r0, #88	; 0x58
 800160e:	4622      	mov	r2, r4
 8001610:	2105      	movs	r1, #5
 8001612:	f003 faf9 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001616:	2058      	movs	r0, #88	; 0x58
 8001618:	f003 fb28 	bl	8004c6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800161c:	b02c      	add	sp, #176	; 0xb0
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	40016800 	.word	0x40016800
 8001624:	40023800 	.word	0x40023800
 8001628:	40021000 	.word	0x40021000
 800162c:	40022400 	.word	0x40022400
 8001630:	40022800 	.word	0x40022800
 8001634:	40021800 	.word	0x40021800
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	2214      	movs	r2, #20
 800163e:	2100      	movs	r1, #0
{
 8001640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001644:	b08a      	sub	sp, #40	; 0x28
 8001646:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	eb0d 0002 	add.w	r0, sp, r2
 800164c:	f029 f892 	bl	802a774 <memset>
  if(hqspi->Instance==QUADSPI)
 8001650:	6822      	ldr	r2, [r4, #0]
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_QSPI_MspInit+0xc8>)
 8001654:	429a      	cmp	r2, r3
 8001656:	d151      	bne.n	80016fc <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800165c:	2403      	movs	r4, #3
 800165e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	a905      	add	r1, sp, #20
 8001668:	4828      	ldr	r0, [pc, #160]	; (800170c <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800166a:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001670:	639a      	str	r2, [r3, #56]	; 0x38
 8001672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001674:	f002 0202 	and.w	r2, r2, #2
 8001678:	9201      	str	r2, [sp, #4]
 800167a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167e:	f042 0210 	orr.w	r2, r2, #16
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
 8001684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001686:	f002 0210 	and.w	r2, r2, #16
 800168a:	9202      	str	r2, [sp, #8]
 800168c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001690:	f042 0202 	orr.w	r2, r2, #2
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
 8001696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001698:	f002 0202 	and.w	r2, r2, #2
 800169c:	9203      	str	r2, [sp, #12]
 800169e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a2:	f042 0208 	orr.w	r2, r2, #8
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	9304      	str	r3, [sp, #16]
 80016b0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016b6:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ba:	f003 fce5 	bl	8005088 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016be:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	a905      	add	r1, sp, #20
 80016c2:	4813      	ldr	r0, [pc, #76]	; (8001710 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016c8:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016ce:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f003 fcda 	bl	8005088 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	a905      	add	r1, sp, #20
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016d8:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f003 fcd1 	bl	8005088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 80016e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ea:	a905      	add	r1, sp, #20
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ee:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f8:	f003 fcc6 	bl	8005088 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80016fc:	b00a      	add	sp, #40	; 0x28
 80016fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001702:	bf00      	nop
 8001704:	a0001000 	.word	0xa0001000
 8001708:	40023800 	.word	0x40023800
 800170c:	40021000 	.word	0x40021000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020c00 	.word	0x40020c00

08001718 <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 8001718:	6802      	ldr	r2, [r0, #0]
{
 800171a:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_QSPI_MspDeInit+0x34>)
 800171e:	429a      	cmp	r2, r3
 8001720:	d113      	bne.n	800174a <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001724:	2104      	movs	r1, #4
 8001726:	480b      	ldr	r0, [pc, #44]	; (8001754 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001728:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800172a:	f023 0302 	bic.w	r3, r3, #2
 800172e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001730:	f003 fd8e 	bl	8005250 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8001734:	2144      	movs	r1, #68	; 0x44
 8001736:	4808      	ldr	r0, [pc, #32]	; (8001758 <HAL_QSPI_MspDeInit+0x40>)
 8001738:	f003 fd8a 	bl	8005250 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 800173c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8001746:	f003 bd83 	b.w	8005250 <HAL_GPIO_DeInit>
}
 800174a:	bd08      	pop	{r3, pc}
 800174c:	a0001000 	.word	0xa0001000
 8001750:	40023800 	.word	0x40023800
 8001754:	40021000 	.word	0x40021000
 8001758:	40020400 	.word	0x40020400
 800175c:	40020c00 	.word	0x40020c00

08001760 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001762:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001764:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001766:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <HAL_SDRAM_MspInit+0xb0>)
 800176a:	681e      	ldr	r6, [r3, #0]
 800176c:	2e00      	cmp	r6, #0
 800176e:	d14d      	bne.n	800180c <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 8001770:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001774:	2503      	movs	r5, #3
 8001776:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8001778:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177a:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 800177c:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177e:	4826      	ldr	r0, [pc, #152]	; (8001818 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	639a      	str	r2, [r3, #56]	; 0x38
 8001788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001796:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179e:	f003 fc73 	bl	8005088 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80017a2:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a6:	a901      	add	r1, sp, #4
 80017a8:	481c      	ldr	r0, [pc, #112]	; (800181c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017aa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b4:	f003 fc68 	bl	8005088 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80017b8:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017bc:	a901      	add	r1, sp, #4
 80017be:	4818      	ldr	r0, [pc, #96]	; (8001820 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ca:	f003 fc5d 	bl	8005088 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d2:	a901      	add	r1, sp, #4
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e0:	f003 fc52 	bl	8005088 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80017e4:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017e6:	a901      	add	r1, sp, #4
 80017e8:	480f      	ldr	r0, [pc, #60]	; (8001828 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ea:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017f4:	f003 fc48 	bl	8005088 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017f8:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	a901      	add	r1, sp, #4
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017fe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f003 fc3e 	bl	8005088 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800180c:	b007      	add	sp, #28
 800180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001810:	20000334 	.word	0x20000334
 8001814:	40023800 	.word	0x40023800
 8001818:	40021000 	.word	0x40021000
 800181c:	40021800 	.word	0x40021800
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40021400 	.word	0x40021400
 8001828:	40021c00 	.word	0x40021c00
 800182c:	40020800 	.word	0x40020800

08001830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b510      	push	{r4, lr}
 8001832:	4601      	mov	r1, r0
 8001834:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001836:	2200      	movs	r2, #0
 8001838:	2036      	movs	r0, #54	; 0x36
 800183a:	f003 f9e5 	bl	8004c08 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800183e:	2036      	movs	r0, #54	; 0x36
 8001840:	f003 fa14 	bl	8004c6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001846:	a901      	add	r1, sp, #4
 8001848:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800184a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800184c:	4c13      	ldr	r4, [pc, #76]	; (800189c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800184e:	f042 0210 	orr.w	r2, r2, #16
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800185e:	f005 f8e5 	bl	8006a2c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001862:	f005 f8d3 	bl	8006a0c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001868:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 800186a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800186c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001870:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_InitTick+0x74>)
 8001874:	fbb0 f0f3 	udiv	r0, r0, r3
 8001878:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800187a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800187c:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800187e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001880:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001884:	f005 fd28 	bl	80072d8 <HAL_TIM_Base_Init>
 8001888:	b920      	cbnz	r0, 8001894 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800188a:	4620      	mov	r0, r4
 800188c:	f005 fbcc 	bl	8007028 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001890:	b008      	add	sp, #32
 8001892:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	e7fb      	b.n	8001890 <HAL_InitTick+0x60>
 8001898:	40023800 	.word	0x40023800
 800189c:	20000338 	.word	0x20000338
 80018a0:	40001000 	.word	0x40001000
 80018a4:	000f4240 	.word	0x000f4240

080018a8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018a8:	4770      	bx	lr

080018aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler>

080018ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler>

080018ae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler>

080018b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <UsageFault_Handler>

080018b2 <DebugMon_Handler>:
 80018b2:	4770      	bx	lr

080018b4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b4:	4801      	ldr	r0, [pc, #4]	; (80018bc <TIM6_DAC_IRQHandler+0x8>)
 80018b6:	f005 bbf9 	b.w	80070ac <HAL_TIM_IRQHandler>
 80018ba:	bf00      	nop
 80018bc:	20000338 	.word	0x20000338

080018c0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018c0:	4801      	ldr	r0, [pc, #4]	; (80018c8 <LTDC_IRQHandler+0x8>)
 80018c2:	f004 ba23 	b.w	8005d0c <HAL_LTDC_IRQHandler>
 80018c6:	bf00      	nop
 80018c8:	20000208 	.word	0x20000208

080018cc <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018cc:	4801      	ldr	r0, [pc, #4]	; (80018d4 <DMA2D_IRQHandler+0x8>)
 80018ce:	f003 bb09 	b.w	8004ee4 <HAL_DMA2D_IRQHandler>
 80018d2:	bf00      	nop
 80018d4:	2000017c 	.word	0x2000017c

080018d8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80018d8:	2001      	movs	r0, #1
 80018da:	4770      	bx	lr

080018dc <_kill>:

int _kill(int pid, int sig)
{
 80018dc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80018de:	f028 feeb 	bl	802a6b8 <__errno>
 80018e2:	2316      	movs	r3, #22
 80018e4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018ea:	bd08      	pop	{r3, pc}

080018ec <_exit>:

void _exit (int status)
{
 80018ec:	b508      	push	{r3, lr}
	errno = EINVAL;
 80018ee:	f028 fee3 	bl	802a6b8 <__errno>
 80018f2:	2316      	movs	r3, #22
 80018f4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80018f6:	e7fe      	b.n	80018f6 <_exit+0xa>

080018f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	460d      	mov	r5, r1
 80018fc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	460e      	mov	r6, r1
 8001900:	1b73      	subs	r3, r6, r5
 8001902:	429c      	cmp	r4, r3
 8001904:	dc01      	bgt.n	800190a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001906:	4620      	mov	r0, r4
 8001908:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800190a:	f3af 8000 	nop.w
 800190e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	e7f5      	b.n	8001900 <_read+0x8>

08001914 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	460d      	mov	r5, r1
 8001918:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	460e      	mov	r6, r1
 800191c:	1b73      	subs	r3, r6, r5
 800191e:	429c      	cmp	r4, r3
 8001920:	dc01      	bgt.n	8001926 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001922:	4620      	mov	r0, r4
 8001924:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001926:	f816 0b01 	ldrb.w	r0, [r6], #1
 800192a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	e7f5      	b.n	800191c <_write+0x8>

08001930 <_close>:

int _close(int file)
{
	return -1;
}
 8001930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001934:	4770      	bx	lr

08001936 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800193a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800193c:	604b      	str	r3, [r1, #4]
}
 800193e:	4770      	bx	lr

08001940 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001940:	2001      	movs	r0, #1
 8001942:	4770      	bx	lr

08001944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001944:	2000      	movs	r0, #0
 8001946:	4770      	bx	lr

08001948 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <_sbrk+0x30>)
{
 800194a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800194c:	6811      	ldr	r1, [r2, #0]
{
 800194e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001950:	b909      	cbnz	r1, 8001956 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001952:	490a      	ldr	r1, [pc, #40]	; (800197c <_sbrk+0x34>)
 8001954:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	6810      	ldr	r0, [r2, #0]
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <_sbrk+0x38>)
 800195a:	4c0a      	ldr	r4, [pc, #40]	; (8001984 <_sbrk+0x3c>)
 800195c:	4403      	add	r3, r0
 800195e:	1b09      	subs	r1, r1, r4
 8001960:	428b      	cmp	r3, r1
 8001962:	d906      	bls.n	8001972 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001964:	f028 fea8 	bl	802a6b8 <__errno>
 8001968:	230c      	movs	r3, #12
 800196a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800196c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001970:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001972:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001974:	e7fc      	b.n	8001970 <_sbrk+0x28>
 8001976:	bf00      	nop
 8001978:	20000384 	.word	0x20000384
 800197c:	20015648 	.word	0x20015648
 8001980:	20050000 	.word	0x20050000
 8001984:	00000a00 	.word	0x00000a00

08001988 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8001988:	4770      	bx	lr
	...

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001990:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001992:	e003      	b.n	800199c <LoopCopyDataInit>

08001994 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001996:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001998:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800199a:	3104      	adds	r1, #4

0800199c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019a4:	d3f6      	bcc.n	8001994 <CopyDataInit>
  ldr  r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019a8:	e002      	b.n	80019b0 <LoopFillZerobss>

080019aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019ac:	f842 3b04 	str.w	r3, [r2], #4

080019b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019b4:	d3f9      	bcc.n	80019aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019b6:	f002 fff5 	bl	80049a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f028 fe95 	bl	802a6e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff fa6f 	bl	8000ea0 <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80019c8:	08032ab0 	.word	0x08032ab0
  ldr  r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019d0:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 80019d4:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 80019d8:	20015644 	.word	0x20015644

080019dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>

080019de <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80019de:	f001 b82f 	b.w	8002a40 <touchgfx_init>

080019e2 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80019e2:	f001 b89d 	b.w	8002b20 <touchgfx_taskEntry>

080019e6 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80019e6:	6840      	ldr	r0, [r0, #4]
    }
 80019e8:	4770      	bx	lr

080019ea <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80019ea:	6041      	str	r1, [r0, #4]
    }
 80019ec:	4770      	bx	lr
	...

080019f0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80019f0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80019f4:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 80019f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fc:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001a04:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
}
 8001a16:	4770      	bx	lr
 8001a18:	e0001000 	.word	0xe0001000
 8001a1c:	c5acce55 	.word	0xc5acce55

08001a20 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001a20:	1a51      	subs	r1, r2, r1
 8001a22:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001a26:	fbb1 f0f3 	udiv	r0, r1, r3
 8001a2a:	4770      	bx	lr

08001a2c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001a2c:	4b01      	ldr	r3, [pc, #4]	; (8001a34 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001a2e:	6858      	ldr	r0, [r3, #4]
}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e0001000 	.word	0xe0001000

08001a38 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001a38:	4770      	bx	lr

08001a3a <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001a3a:	b510      	push	{r4, lr}
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	210c      	movs	r1, #12
 8001a40:	f028 fdd9 	bl	802a5f6 <_ZdlPvj>
 8001a44:	4620      	mov	r0, r4
 8001a46:	bd10      	pop	{r4, pc}

08001a48 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a48:	6803      	ldr	r3, [r0, #0]
{
 8001a4a:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a4c:	691b      	ldr	r3, [r3, #16]
{
 8001a4e:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001a50:	b131      	cbz	r1, 8001a60 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a52:	4798      	blx	r3
 8001a54:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001a56:	6863      	ldr	r3, [r4, #4]
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	4418      	add	r0, r3
 8001a5c:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001a5e:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001a60:	4798      	blx	r3
 8001a62:	60a0      	str	r0, [r4, #8]
}
 8001a64:	e7fb      	b.n	8001a5e <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001a68 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a6a:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001a6c:	4a02      	ldr	r2, [pc, #8]	; (8001a78 <_ZN20STM32TouchController4initEv+0x10>)
 8001a6e:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	4718      	bx	r3
 8001a74:	20000010 	.word	0x20000010
 8001a78:	20000388 	.word	0x20000388

08001a7c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001a7c:	4770      	bx	lr

08001a7e <_ZN20STM32TouchControllerD0Ev>:
 8001a7e:	b510      	push	{r4, lr}
 8001a80:	4604      	mov	r4, r0
 8001a82:	2104      	movs	r1, #4
 8001a84:	f028 fdb7 	bl	802a5f6 <_ZdlPvj>
 8001a88:	4620      	mov	r0, r4
 8001a8a:	bd10      	pop	{r4, pc}

08001a8c <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001a8e:	4d0a      	ldr	r5, [pc, #40]	; (8001ab8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001a90:	460c      	mov	r4, r1
    if (tsDriver)
 8001a92:	682b      	ldr	r3, [r5, #0]
 8001a94:	b913      	cbnz	r3, 8001a9c <_ZN20STM32TouchController11sampleTouchERlS0_+0x10>
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
            return true;
        }
    }
    return false;
 8001a96:	2000      	movs	r0, #0
}
 8001a98:	b003      	add	sp, #12
 8001a9a:	bd30      	pop	{r4, r5, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2070      	movs	r0, #112	; 0x70
 8001aa0:	9201      	str	r2, [sp, #4]
 8001aa2:	4798      	blx	r3
 8001aa4:	9901      	ldr	r1, [sp, #4]
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d0f5      	beq.n	8001a96 <_ZN20STM32TouchController11sampleTouchERlS0_+0xa>
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	2070      	movs	r0, #112	; 0x70
 8001aae:	4622      	mov	r2, r4
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4798      	blx	r3
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	e7ef      	b.n	8001a98 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
 8001ab8:	20000388 	.word	0x20000388

08001abc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001abc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001abe:	2301      	movs	r3, #1
{
 8001ac0:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001acc:	f10d 0217 	add.w	r2, sp, #23
 8001ad0:	9200      	str	r2, [sp, #0]
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <TS_IO_Write+0x30>)
 8001ad8:	f003 fe65 	bl	80057a6 <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001adc:	b110      	cbz	r0, 8001ae4 <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <TS_IO_Write+0x30>)
 8001ae0:	f003 fe48 	bl	8005774 <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001ae4:	b007      	add	sp, #28
 8001ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aea:	bf00      	nop
 8001aec:	200001bc 	.word	0x200001bc

08001af0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001af0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001af2:	2300      	movs	r3, #0
{
 8001af4:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001afa:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001afe:	2301      	movs	r3, #1
 8001b00:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001b04:	f10d 0117 	add.w	r1, sp, #23
 8001b08:	9100      	str	r1, [sp, #0]
 8001b0a:	4601      	mov	r1, r0
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <TS_IO_Read+0x34>)
 8001b0e:	f003 ff01 	bl	8005914 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001b12:	b110      	cbz	r0, 8001b1a <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <TS_IO_Read+0x34>)
 8001b16:	f003 fe2d 	bl	8005774 <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001b1a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001b1e:	b007      	add	sp, #28
 8001b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b24:	200001bc 	.word	0x200001bc

08001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001b28:	2801      	cmp	r0, #1
 8001b2a:	d00e      	beq.n	8001b4a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x22>
 8001b2c:	2803      	cmp	r0, #3
 8001b2e:	d014      	beq.n	8001b5a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x32>
 8001b30:	b9d8      	cbnz	r0, 8001b6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x42>
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x44>)
 8001b34:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001b38:	2110      	movs	r1, #16
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8001b40:	fab2 f282 	clz	r2, r2
 8001b44:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b46:	f003 bc25 	b.w	8005394 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x44>)
 8001b4c:	2140      	movs	r1, #64	; 0x40
 8001b4e:	4808      	ldr	r0, [pc, #32]	; (8001b70 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>)
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	fab2 f282 	clz	r2, r2
 8001b56:	0952      	lsrs	r2, r2, #5
 8001b58:	e7f5      	b.n	8001b46 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1e>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x44>)
 8001b5c:	2140      	movs	r1, #64	; 0x40
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	fab2 f282 	clz	r2, r2
 8001b66:	0952      	lsrs	r2, r2, #5
 8001b68:	e7ed      	b.n	8001b46 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1e>
#endif
        break;
    }
}
 8001b6a:	4770      	bx	lr
 8001b6c:	2000038c 	.word	0x2000038c
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40021800 	.word	0x40021800

08001b78 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001b78:	2801      	cmp	r0, #1
 8001b7a:	d00e      	beq.n	8001b9a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x22>
 8001b7c:	2803      	cmp	r0, #3
 8001b7e:	d014      	beq.n	8001baa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x32>
 8001b80:	b9d8      	cbnz	r0, 8001bba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x42>
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x44>)
 8001b84:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001b88:	2110      	movs	r1, #16
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8001b90:	3a00      	subs	r2, #0
 8001b92:	bf18      	it	ne
 8001b94:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001b96:	f003 bbfd 	b.w	8005394 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x44>)
 8001b9c:	2140      	movs	r1, #64	; 0x40
 8001b9e:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>)
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	3a00      	subs	r2, #0
 8001ba4:	bf18      	it	ne
 8001ba6:	2201      	movne	r2, #1
 8001ba8:	e7f5      	b.n	8001b96 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1e>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x44>)
 8001bac:	2140      	movs	r1, #64	; 0x40
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	3a00      	subs	r2, #0
 8001bb4:	bf18      	it	ne
 8001bb6:	2201      	movne	r2, #1
 8001bb8:	e7ed      	b.n	8001b96 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1e>
#endif
        break;
    }
}
 8001bba:	4770      	bx	lr
 8001bbc:	2000038c 	.word	0x2000038c
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40021800 	.word	0x40021800

08001bc8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001bc8:	2801      	cmp	r0, #1
 8001bca:	d009      	beq.n	8001be0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 8001bcc:	2803      	cmp	r0, #3
 8001bce:	d00a      	beq.n	8001be6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1e>
 8001bd0:	b960      	cbnz	r0, 8001bec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001bd2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
        HAL_GPIO_TogglePin(FRAME_RATE_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001bdc:	f003 bbdf 	b.w	800539e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001be0:	2140      	movs	r1, #64	; 0x40
 8001be2:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
 8001be4:	e7fa      	b.n	8001bdc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001be6:	2140      	movs	r1, #64	; 0x40
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001bea:	e7f7      	b.n	8001bdc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>
#endif
        break;
    }
}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	40021800 	.word	0x40021800

08001bf8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001bf8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001bfa:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001bfe:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001c02:	4770      	bx	lr

08001c04 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8001c04:	2000      	movs	r0, #0
 8001c06:	4770      	bx	lr

08001c08 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001c08:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001c0a:	3900      	subs	r1, #0
 8001c0c:	4b02      	ldr	r3, [pc, #8]	; (8001c18 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001c0e:	bf18      	it	ne
 8001c10:	2101      	movne	r1, #1
 8001c12:	7019      	strb	r1, [r3, #0]
    }
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	2001539f 	.word	0x2001539f

08001c1c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	4770      	bx	lr

08001c20 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001c20:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c22:	b10b      	cbz	r3, 8001c28 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001c24:	4608      	mov	r0, r1
 8001c26:	4718      	bx	r3
        }
    }
 8001c28:	4770      	bx	lr

08001c2a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001c2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c2e:	4770      	bx	lr

08001c30 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001c30:	6840      	ldr	r0, [r0, #4]
 8001c32:	6803      	ldr	r3, [r0, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	4718      	bx	r3

08001c38 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001c38:	4770      	bx	lr
	...

08001c3c <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001c3c:	b538      	push	{r3, r4, r5, lr}
 8001c3e:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001c40:	f001 f84a 	bl	8002cd8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	4620      	mov	r0, r4
 8001c48:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001c4e:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8001c52:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001c54:	2300      	movs	r3, #0
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001c56:	4d06      	ldr	r5, [pc, #24]	; (8001c70 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001c58:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	f7ff fec7 	bl	80019f0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001c62:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001c64:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001c66:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001c6a:	bd38      	pop	{r3, r4, r5, pc}
 8001c6c:	c0000000 	.word	0xc0000000
 8001c70:	2000039c 	.word	0x2000039c

08001c74 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001c74:	f001 b80a 	b.w	8002c8c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001c78 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001c78:	f001 b80e 	b.w	8002c98 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001c7c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001c7c:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001c7e:	f001 f85d 	bl	8002d3c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001c82:	4910      	ldr	r1, [pc, #64]	; (8001cc4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c8e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001c92:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c96:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c9a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001c9e:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ca0:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ca4:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ca6:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001caa:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cac:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001cb0:	d2f9      	bcs.n	8001ca6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001cb2:	3b20      	subs	r3, #32
 8001cb4:	f113 0f20 	cmn.w	r3, #32
 8001cb8:	d1f2      	bne.n	8001ca0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001cba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cbe:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001cc2:	bd70      	pop	{r4, r5, r6, pc}
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001cc8:	f001 b846 	b.w	8002d58 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001ccc <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001ccc:	f000 bfba 	b.w	8002c44 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001cd0 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001cd0:	f001 b960 	b.w	8002f94 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001cd4 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001cd4:	f001 b968 	b.w	8002fa8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001cd8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001cd8:	f000 bfbe 	b.w	8002c58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001cdc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001cdc:	b510      	push	{r4, lr}
 8001cde:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001ce0:	f016 fe8e 	bl	8018a00 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001cf0:	4718      	bx	r3

08001cf2 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001cf2:	f016 b802 	b.w	8017cfa <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001cf6 <_ZN11TouchGFXHALD0Ev>:
 8001cf6:	b510      	push	{r4, lr}
 8001cf8:	4604      	mov	r4, r0
 8001cfa:	217c      	movs	r1, #124	; 0x7c
 8001cfc:	f028 fc7b 	bl	802a5f6 <_ZdlPvj>
 8001d00:	4620      	mov	r0, r4
 8001d02:	bd10      	pop	{r4, pc}

08001d04 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001d04:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001d08:	b11b      	cbz	r3, 8001d12 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001d0a:	6840      	ldr	r0, [r0, #4]
 8001d0c:	6803      	ldr	r3, [r0, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4718      	bx	r3
    }
 8001d12:	4618      	mov	r0, r3
 8001d14:	4770      	bx	lr
	...

08001d18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001d18:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001d1e:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001d20:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001d24:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001d26:	428c      	cmp	r4, r1
 8001d28:	d009      	beq.n	8001d3e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001d2a:	b93a      	cbnz	r2, 8001d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d2c:	490a      	ldr	r1, [pc, #40]	; (8001d58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d30:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d32:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001d34:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001d36:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d38:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001d3a:	701a      	strb	r2, [r3, #0]
        }
    }
 8001d3c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001d3e:	2a00      	cmp	r2, #0
 8001d40:	d0fc      	beq.n	8001d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d42:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d44:	4904      	ldr	r1, [pc, #16]	; (8001d58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d46:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d48:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d4a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001d4c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001d4e:	2200      	movs	r2, #0
 8001d50:	e7f3      	b.n	8001d3a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001d52:	bf00      	nop
 8001d54:	20015398 	.word	0x20015398
 8001d58:	20015396 	.word	0x20015396
 8001d5c:	20015394 	.word	0x20015394

08001d60 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001d60:	b570      	push	{r4, r5, r6, lr}
 8001d62:	460d      	mov	r5, r1
 8001d64:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001d66:	b935      	cbnz	r5, 8001d76 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001d6a:	f240 21bb 	movw	r1, #699	; 0x2bb
 8001d6e:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001d70:	4809      	ldr	r0, [pc, #36]	; (8001d98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001d72:	f028 fc6f 	bl	802a654 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001d76:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001d7a:	3a00      	subs	r2, #0
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001d7e:	bf18      	it	ne
 8001d80:	2201      	movne	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001d84:	6803      	ldr	r3, [r0, #0]
    }
 8001d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d8e:	4718      	bx	r3
 8001d90:	0802bca0 	.word	0x0802bca0
 8001d94:	0802bcd8 	.word	0x0802bcd8
 8001d98:	0802bd26 	.word	0x0802bd26
 8001d9c:	2001539e 	.word	0x2001539e

08001da0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001da0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	428b      	cmp	r3, r1
 8001da8:	d803      	bhi.n	8001db2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d905      	bls.n	8001dbe <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001db4:	219e      	movs	r1, #158	; 0x9e
 8001db6:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001dba:	f028 fc4b 	bl	802a654 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001dc0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001dc4:	801a      	strh	r2, [r3, #0]
    }
 8001dc6:	bd08      	pop	{r3, pc}
 8001dc8:	20015394 	.word	0x20015394
 8001dcc:	20015396 	.word	0x20015396
 8001dd0:	0802bd6b 	.word	0x0802bd6b
 8001dd4:	0802bdce 	.word	0x0802bdce
 8001dd8:	0802bd26 	.word	0x0802bd26
 8001ddc:	2001539a 	.word	0x2001539a
 8001de0:	2001539c 	.word	0x2001539c

08001de4 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001de4:	4601      	mov	r1, r0
 8001de6:	b508      	push	{r3, lr}
        return instance;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <IdleTaskHook+0x14>)
 8001dea:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001dec:	b101      	cbz	r1, 8001df0 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001dee:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001df0:	f016 fe20 	bl	8018a34 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001df4:	2001      	movs	r0, #1
 8001df6:	bd08      	pop	{r3, pc}
 8001df8:	200153a0 	.word	0x200153a0

08001dfc <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <_GLOBAL__sub_I_instrumentation+0x10>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	4a02      	ldr	r2, [pc, #8]	; (8001e10 <_GLOBAL__sub_I_instrumentation+0x14>)
 8001e06:	601a      	str	r2, [r3, #0]
}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	2000039c 	.word	0x2000039c
 8001e10:	0802bc68 	.word	0x0802bc68

08001e14 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e14:	2101      	movs	r1, #1
 8001e16:	2200      	movs	r2, #0
{
 8001e18:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e1a:	4608      	mov	r0, r1
 8001e1c:	f005 fc62 	bl	80076e4 <osSemaphoreNew>
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e22:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e24:	b928      	cbnz	r0, 8001e32 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e28:	2128      	movs	r1, #40	; 0x28
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e2c:	480a      	ldr	r0, [pc, #40]	; (8001e58 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e2e:	f028 fc11 	bl	802a654 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2104      	movs	r1, #4
 8001e36:	2001      	movs	r0, #1
 8001e38:	f005 fd1a 	bl	8007870 <osMessageQueueNew>
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e3e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e40:	b918      	cbnz	r0, 8001e4a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	4a03      	ldr	r2, [pc, #12]	; (8001e54 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e48:	e7f0      	b.n	8001e2c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e4a:	bd08      	pop	{r3, pc}
 8001e4c:	200003ac 	.word	0x200003ac
 8001e50:	0802beec 	.word	0x0802beec
 8001e54:	0802bf35 	.word	0x0802bf35
 8001e58:	0802bf64 	.word	0x0802bf64
 8001e5c:	200003a8 	.word	0x200003a8
 8001e60:	0802bfbe 	.word	0x0802bfbe

08001e64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001e66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	f005 bc90 	b.w	8007790 <osSemaphoreAcquire>
 8001e70:	200003ac 	.word	0x200003ac

08001e74 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001e74:	4b01      	ldr	r3, [pc, #4]	; (8001e7c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	f005 bcc4 	b.w	8007804 <osSemaphoreRelease>
 8001e7c:	200003ac 	.word	0x200003ac

08001e80 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001e82:	2100      	movs	r1, #0
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f005 bc83 	b.w	8007790 <osSemaphoreAcquire>
 8001e8a:	bf00      	nop
 8001e8c:	200003ac 	.word	0x200003ac

08001e90 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001e90:	f7ff bff0 	b.w	8001e74 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001e94 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001e94:	2300      	movs	r3, #0
 8001e96:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001e98:	4903      	ldr	r1, [pc, #12]	; (8001ea8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6800      	ldr	r0, [r0, #0]
 8001e9e:	f005 bd2d 	b.w	80078fc <osMessageQueuePut>
 8001ea2:	bf00      	nop
 8001ea4:	200003a8 	.word	0x200003a8
 8001ea8:	20000004 	.word	0x20000004

08001eac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001eac:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	4c07      	ldr	r4, [pc, #28]	; (8001ed0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001eb2:	a901      	add	r1, sp, #4
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6820      	ldr	r0, [r4, #0]
 8001eb8:	f005 fd62 	bl	8007980 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	a901      	add	r1, sp, #4
 8001ec4:	6820      	ldr	r0, [r4, #0]
 8001ec6:	f005 fd5b 	bl	8007980 <osMessageQueueGet>
}
 8001eca:	b002      	add	sp, #8
 8001ecc:	bd10      	pop	{r4, pc}
 8001ece:	bf00      	nop
 8001ed0:	200003a8 	.word	0x200003a8

08001ed4 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001ed4:	6803      	ldr	r3, [r0, #0]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	4718      	bx	r3

08001eda <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001eda:	2001      	movs	r0, #1
 8001edc:	4770      	bx	lr

08001ede <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001ede:	6803      	ldr	r3, [r0, #0]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	4718      	bx	r3

08001ee4 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001ee6:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eea:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef2:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001ef6:	9201      	str	r2, [sp, #4]
 8001ef8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f00:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001f08:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001f0c:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <_ZN8STM32DMA10initializeEv+0x40>)
 8001f0e:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <_ZN8STM32DMA10initializeEv+0x44>)
 8001f16:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001f18:	b002      	add	sp, #8
 8001f1a:	4770      	bx	lr
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	2000017c 	.word	0x2000017c
 8001f24:	08001f6d 	.word	0x08001f6d
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f2c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001f30:	4770      	bx	lr
	...

08001f34 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f3a:	6003      	str	r3, [r0, #0]
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <_ZN8STM32DMAD1Ev+0x1c>)
 8001f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001f42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f46:	f3bf 8f6f 	isb	sy
}
 8001f4a:	4770      	bx	lr
 8001f4c:	0802c168 	.word	0x0802c168
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001f54:	b510      	push	{r4, lr}
 8001f56:	4604      	mov	r4, r0
}
 8001f58:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001f5c:	f7ff ffea 	bl	8001f34 <_ZN8STM32DMAD1Ev>
 8001f60:	4620      	mov	r0, r4
 8001f62:	f028 fb48 	bl	802a5f6 <_ZdlPvj>
 8001f66:	4620      	mov	r0, r4
 8001f68:	bd10      	pop	{r4, pc}
	...

08001f6c <DMA2D_XferCpltCallback>:
 8001f6c:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <DMA2D_XferCpltCallback+0xc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001f72:	6803      	ldr	r3, [r0, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4718      	bx	r3
 8001f78:	200153a0 	.word	0x200153a0

08001f7c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <_ZN8STM32DMAC1Ev+0x30>)
 8001f82:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001f84:	2600      	movs	r6, #0
 8001f86:	4625      	mov	r5, r4
 8001f88:	2260      	movs	r2, #96	; 0x60
 8001f8a:	6060      	str	r0, [r4, #4]
 8001f8c:	7226      	strb	r6, [r4, #8]
 8001f8e:	7266      	strb	r6, [r4, #9]
 8001f90:	f845 3b20 	str.w	r3, [r5], #32
 8001f94:	4629      	mov	r1, r5
 8001f96:	f016 feb3 	bl	8018d00 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001f9a:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8001f9e:	60ee      	str	r6, [r5, #12]
 8001fa0:	3524      	adds	r5, #36	; 0x24
 8001fa2:	42ab      	cmp	r3, r5
 8001fa4:	d1fb      	bne.n	8001f9e <_ZN8STM32DMAC1Ev+0x22>
}
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	bf00      	nop
 8001fac:	0802c168 	.word	0x0802c168

08001fb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001fb0:	b508      	push	{r3, lr}
    switch (format)
 8001fb2:	290b      	cmp	r1, #11
 8001fb4:	d80b      	bhi.n	8001fce <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001fb6:	e8df f001 	tbb	[pc, r1]
 8001fba:	0612      	.short	0x0612
 8001fbc:	0a0a0a10 	.word	0x0a0a0a10
 8001fc0:	0808080a 	.word	0x0808080a
 8001fc4:	0808      	.short	0x0808
 8001fc6:	2001      	movs	r0, #1
}
 8001fc8:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001fca:	2005      	movs	r0, #5
        break;
 8001fcc:	e7fc      	b.n	8001fc8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001fd0:	2166      	movs	r1, #102	; 0x66
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001fd6:	f028 fb3d 	bl	802a654 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001fda:	2000      	movs	r0, #0
 8001fdc:	e7f4      	b.n	8001fc8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001fde:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001fe0:	e7f2      	b.n	8001fc8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001fe2:	bf00      	nop
 8001fe4:	0802c000 	.word	0x0802c000
 8001fe8:	0802c01b 	.word	0x0802c01b
 8001fec:	0802c065 	.word	0x0802c065

08001ff0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001ff0:	b508      	push	{r3, lr}
    switch (format)
 8001ff2:	290a      	cmp	r1, #10
 8001ff4:	d809      	bhi.n	800200a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8001ff6:	e8df f001 	tbb	[pc, r1]
 8001ffa:	0610      	.short	0x0610
 8001ffc:	0808080e 	.word	0x0808080e
 8002000:	06060608 	.word	0x06060608
 8002004:	06          	.byte	0x06
 8002005:	00          	.byte	0x00
 8002006:	2001      	movs	r0, #1
}
 8002008:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 800200c:	2187      	movs	r1, #135	; 0x87
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002012:	f028 fb1f 	bl	802a654 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002016:	2000      	movs	r0, #0
 8002018:	e7f6      	b.n	8002008 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800201a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800201c:	e7f4      	b.n	8002008 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800201e:	bf00      	nop
 8002020:	0802c000 	.word	0x0802c000
 8002024:	0802c0bd 	.word	0x0802c0bd
 8002028:	0802c065 	.word	0x0802c065

0800202c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800202c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002030:	7f4f      	ldrb	r7, [r1, #29]
{
 8002032:	460c      	mov	r4, r1
 8002034:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002036:	4639      	mov	r1, r7
 8002038:	f7ff ffba 	bl	8001fb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800203c:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002040:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002042:	4648      	mov	r0, r9
 8002044:	4641      	mov	r1, r8
 8002046:	f7ff ffb3 	bl	8001fb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800204a:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800204c:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800204e:	4648      	mov	r0, r9
 8002050:	f7ff ffce 	bl	8001ff0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002054:	8aa1      	ldrh	r1, [r4, #20]
 8002056:	8b62      	ldrh	r2, [r4, #26]
 8002058:	4b42      	ldr	r3, [pc, #264]	; (8002164 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800205a:	1a52      	subs	r2, r2, r1
 800205c:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800205e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002060:	8b22      	ldrh	r2, [r4, #24]
 8002062:	1a52      	subs	r2, r2, r1
 8002064:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002066:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002068:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800206a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800206e:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002070:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002072:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002074:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002076:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002078:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800207a:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 800207e:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002080:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8002084:	d026      	beq.n	80020d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8002086:	d810      	bhi.n	80020aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8002088:	2920      	cmp	r1, #32
 800208a:	ea45 0402 	orr.w	r4, r5, r2
 800208e:	d062      	beq.n	8002156 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8002090:	2940      	cmp	r1, #64	; 0x40
 8002092:	d060      	beq.n	8002156 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8002094:	2904      	cmp	r1, #4
 8002096:	d05e      	beq.n	8002156 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002098:	432a      	orrs	r2, r5
 800209a:	4b32      	ldr	r3, [pc, #200]	; (8002164 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800209c:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800209e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020a2:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020a4:	d05b      	beq.n	800215e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020a6:	4a30      	ldr	r2, [pc, #192]	; (8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020a8:	e040      	b.n	800212c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80020aa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80020ae:	d007      	beq.n	80020c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 80020b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80020b4:	d1f0      	bne.n	8002098 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020ba:	f042 0209 	orr.w	r2, r2, #9
 80020be:	e003      	b.n	80020c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020c4:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c8:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 80020ca:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80020cc:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80020ce:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020d0:	6158      	str	r0, [r3, #20]
 80020d2:	e02a      	b.n	800212a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80020d4:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020d6:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80020d8:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80020de:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020e0:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 80020e2:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80020e4:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020e6:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 80020e8:	b142      	cbz	r2, 80020fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80020ea:	2a01      	cmp	r2, #1
 80020ec:	d021      	beq.n	8002132 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 80020f0:	f240 1111 	movw	r1, #273	; 0x111
 80020f4:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80020f6:	481f      	ldr	r0, [pc, #124]	; (8002174 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 80020f8:	f028 faac 	bl	802a654 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020fc:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 80020fe:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002100:	8861      	ldrh	r1, [r4, #2]
 8002102:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002106:	3901      	subs	r1, #1
 8002108:	f022 0210 	bic.w	r2, r2, #16
 800210c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002110:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	f042 0220 	orr.w	r2, r2, #32
 800211a:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800211c:	69da      	ldr	r2, [r3, #28]
 800211e:	0692      	lsls	r2, r2, #26
 8002120:	d4fc      	bmi.n	800211c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002122:	2210      	movs	r2, #16
 8002124:	609a      	str	r2, [r3, #8]
            if (blend)
 8002126:	2800      	cmp	r0, #0
 8002128:	d0bd      	beq.n	80020a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800212a:	4a13      	ldr	r2, [pc, #76]	; (8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800212c:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 800212e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002132:	8862      	ldrh	r2, [r4, #2]
                if (blitOp.alpha == 255)
 8002134:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002138:	69d9      	ldr	r1, [r3, #28]
 800213a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
                if (blitOp.alpha == 255)
 800213e:	bf18      	it	ne
 8002140:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002142:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002146:	f022 0210 	bic.w	r2, r2, #16
 800214a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800214e:	f042 0210 	orr.w	r2, r2, #16
 8002152:	61da      	str	r2, [r3, #28]
                break;
 8002154:	e7dd      	b.n	8002112 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002156:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 800215a:	61dc      	str	r4, [r3, #28]
 800215c:	e7b7      	b.n	80020ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800215e:	f240 2201 	movw	r2, #513	; 0x201
 8002162:	e7e3      	b.n	800212c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002164:	4002b000 	.word	0x4002b000
 8002168:	00010201 	.word	0x00010201
 800216c:	0802c108 	.word	0x0802c108
 8002170:	0802c122 	.word	0x0802c122
 8002174:	0802c065 	.word	0x0802c065
 8002178:	00020201 	.word	0x00020201

0800217c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002180:	7f89      	ldrb	r1, [r1, #30]
 8002182:	f7ff ff35 	bl	8001ff0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002188:	8aa6      	ldrh	r6, [r4, #20]
 800218a:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800218c:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800218e:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002192:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002194:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002196:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002198:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800219a:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800219e:	6826      	ldr	r6, [r4, #0]
 80021a0:	68e1      	ldr	r1, [r4, #12]
 80021a2:	2e08      	cmp	r6, #8
 80021a4:	d10d      	bne.n	80021c2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021a6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021a8:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021aa:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 80021ac:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 80021ae:	7f20      	ldrb	r0, [r4, #28]
 80021b0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80021b4:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80021b6:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80021b8:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021ba:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021bc:	60dd      	str	r5, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80021be:	601a      	str	r2, [r3, #0]
    }
}
 80021c0:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80021c2:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021c4:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80021c6:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 80021c8:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80021ca:	0a0a      	lsrs	r2, r1, #8
 80021cc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80021d0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80021d4:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80021d8:	4302      	orrs	r2, r0
 80021da:	430a      	orrs	r2, r1
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 80021e0:	e7ed      	b.n	80021be <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80021e2:	bf00      	nop
 80021e4:	4002b000 	.word	0x4002b000
 80021e8:	00010009 	.word	0x00010009
 80021ec:	00020201 	.word	0x00020201
 80021f0:	00030201 	.word	0x00030201

080021f4 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80021f4:	6940      	ldr	r0, [r0, #20]
 80021f6:	4770      	bx	lr

080021f8 <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:
    }

    AVIErrors getLastError()
    {
        return lastError;
    }
 80021f8:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 80021fc:	4770      	bx	lr

080021fe <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80021fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002200:	b923      	cbnz	r3, 800220c <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 8002202:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002204:	3800      	subs	r0, #0
 8002206:	bf18      	it	ne
 8002208:	2001      	movne	r0, #1
 800220a:	4770      	bx	lr
 800220c:	2001      	movs	r0, #1
}
 800220e:	4770      	bx	lr

08002210 <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002210:	6880      	ldr	r0, [r0, #8]
 8002212:	4770      	bx	lr

08002214 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002214:	3004      	adds	r0, #4
{
 8002216:	b510      	push	{r4, lr}
 8002218:	460c      	mov	r4, r1
    *data = videoInfo;
 800221a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800221c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 8002220:	bd10      	pop	{r4, pc}

08002222 <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 8002222:	4770      	bx	lr

08002224 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002224:	b508      	push	{r3, lr}
    assert(0);
 8002226:	4a03      	ldr	r2, [pc, #12]	; (8002234 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002228:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800222c:	4b02      	ldr	r3, [pc, #8]	; (8002238 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800222e:	4803      	ldr	r0, [pc, #12]	; (800223c <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002230:	f028 fa10 	bl	802a654 <__assert_func>
 8002234:	0802c1b0 	.word	0x0802c1b0
 8002238:	08031dd2 	.word	0x08031dd2
 800223c:	0802c20b 	.word	0x0802c20b

08002240 <_ZN20SoftwareMJPEGDecoderD0Ev>:
 8002240:	b510      	push	{r4, lr}
 8002242:	4604      	mov	r4, r0
 8002244:	2148      	movs	r1, #72	; 0x48
 8002246:	f028 f9d6 	bl	802a5f6 <_ZdlPvj>
 800224a:	4620      	mov	r0, r4
 800224c:	bd10      	pop	{r4, pc}
	...

08002250 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8002250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002254:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002256:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8002258:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 800225c:	4605      	mov	r5, r0
 800225e:	460e      	mov	r6, r1
 8002260:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002262:	2b00      	cmp	r3, #0
 8002264:	d052      	beq.n	800230c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002266:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 8002268:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 800226a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002314 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800226e:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 8002272:	f00d fd0f 	bl	800fc94 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 8002276:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800227a:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 800227c:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 800227e:	a824      	add	r0, sp, #144	; 0x90
 8002280:	f007 fc29 	bl	8009ad6 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002284:	463a      	mov	r2, r7
 8002286:	4631      	mov	r1, r6
 8002288:	a824      	add	r0, sp, #144	; 0x90
 800228a:	f008 fbbd 	bl	800aa08 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 800228e:	2101      	movs	r1, #1
 8002290:	a824      	add	r0, sp, #144	; 0x90
 8002292:	f007 fd29 	bl	8009ce8 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 8002296:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 8002298:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 800229a:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 800229e:	f007 fdc7 	bl	8009e30 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80022a2:	f8bd 6298 	ldrh.w	r6, [sp, #664]	; 0x298
 80022a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80022a8:	f8bd 729c 	ldrh.w	r7, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80022ac:	429e      	cmp	r6, r3
 80022ae:	bf28      	it	cs
 80022b0:	461e      	movcs	r6, r3
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80022b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80022b4:	429f      	cmp	r7, r3
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 80022b6:	eb06 0846 	add.w	r8, r6, r6, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80022ba:	bf28      	it	cs
 80022bc:	461f      	movcs	r7, r3
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 80022be:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
 80022c0:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
        while (cinfo.output_scanline < height)
 80022c4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80022c6:	429f      	cmp	r7, r3
 80022c8:	d91a      	bls.n	8002300 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb0>
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80022ca:	2201      	movs	r2, #1
 80022cc:	a901      	add	r1, sp, #4
 80022ce:	a824      	add	r0, sp, #144	; 0x90
 80022d0:	f007 fdf7 	bl	8009ec2 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 80022d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 80022d6:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 80022da:	4298      	cmp	r0, r3
 80022dc:	d90e      	bls.n	80022fc <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xac>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 80022de:	7859      	ldrb	r1, [r3, #1]
 80022e0:	789a      	ldrb	r2, [r3, #2]
 80022e2:	00c9      	lsls	r1, r1, #3
 80022e4:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 80022e8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80022ec:	430a      	orrs	r2, r1
 80022ee:	f813 1b03 	ldrb.w	r1, [r3], #3
 80022f2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 80022f6:	f824 2b02 	strh.w	r2, [r4], #2
            while (RGB_matrix < RGB_end)
 80022fa:	e7ee      	b.n	80022da <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8a>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 80022fc:	4434      	add	r4, r6
        while (cinfo.output_scanline < height)
 80022fe:	e7e1      	b.n	80022c4 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
        jpeg_finish_decompress(&cinfo);
 8002300:	a824      	add	r0, sp, #144	; 0x90
 8002302:	f007 fd13 	bl	8009d2c <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 8002306:	a824      	add	r0, sp, #144	; 0x90
 8002308:	f007 fc32 	bl	8009b70 <jpeg_destroy_decompress>
}
 800230c:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 8002310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002314:	fffff800 	.word	0xfffff800

08002318 <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 800231a:	6002      	str	r2, [r0, #0]
 800231c:	2200      	movs	r2, #0
 800231e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002322:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002326:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 800232a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 800232e:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8002332:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8002336:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 800233a:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800233e:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 8002342:	4770      	bx	lr
 8002344:	0802c4f8 	.word	0x0802c4f8

08002348 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 8002348:	b420      	push	{r5}
 800234a:	460d      	mov	r5, r1
 800234c:	4611      	mov	r1, r2
 800234e:	461a      	mov	r2, r3
    if (reader != 0)
 8002350:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002352:	b13b      	cbz	r3, 8002364 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002354:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002356:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002358:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 800235a:	4428      	add	r0, r5
}
 800235c:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 8002360:	f028 be52 	b.w	802b008 <strncmp>
        src = (const char*)movieData + offset;
 8002364:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002366:	e7f8      	b.n	800235a <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

08002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002368:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 800236a:	b510      	push	{r4, lr}
    if (reader != 0)
 800236c:	b173      	cbz	r3, 800238c <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800236e:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002370:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 8002372:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002374:	1853      	adds	r3, r2, r1
 8002376:	5c52      	ldrb	r2, [r2, r1]
 8002378:	7898      	ldrb	r0, [r3, #2]
 800237a:	785c      	ldrb	r4, [r3, #1]
 800237c:	0400      	lsls	r0, r0, #16
 800237e:	78db      	ldrb	r3, [r3, #3]
 8002380:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002384:	4310      	orrs	r0, r2
 8002386:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800238a:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 800238c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800238e:	5858      	ldr	r0, [r3, r1]
 8002390:	e7fb      	b.n	800238a <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

08002392 <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8002392:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002394:	b143      	cbz	r3, 80023a8 <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002396:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002398:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 800239a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800239c:	185a      	adds	r2, r3, r1
 800239e:	5c58      	ldrb	r0, [r3, r1]
 80023a0:	7852      	ldrb	r2, [r2, #1]
 80023a2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80023a6:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 80023a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80023aa:	5a58      	ldrh	r0, [r3, r1]
}
 80023ac:	4770      	bx	lr
	...

080023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4604      	mov	r4, r0
    if (reader != 0)
 80023b4:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 80023b6:	460d      	mov	r5, r1
 80023b8:	4616      	mov	r6, r2
    if (reader != 0)
 80023ba:	b1d8      	cbz	r0, 80023f4 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80023bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023be:	4293      	cmp	r3, r2
 80023c0:	d208      	bcs.n	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80023c2:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 80023c6:	2153      	movs	r1, #83	; 0x53
 80023c8:	480d      	ldr	r0, [pc, #52]	; (8002400 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80023ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 80023d0:	f028 f940 	bl	802a654 <__assert_func>
        reader->seek(offset);
 80023d4:	6803      	ldr	r3, [r0, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80023da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80023dc:	4632      	mov	r2, r6
 80023de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80023e0:	6803      	ldr	r3, [r0, #0]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	4798      	blx	r3
 80023e6:	b910      	cbnz	r0, 80023ee <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80023e8:	230d      	movs	r3, #13
 80023ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 80023ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 80023f0:	6425      	str	r5, [r4, #64]	; 0x40
}
 80023f2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80023f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80023f6:	4408      	add	r0, r1
 80023f8:	e7fb      	b.n	80023f2 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 80023fa:	bf00      	nop
 80023fc:	0802c282 	.word	0x0802c282
 8002400:	0802c20b 	.word	0x0802c20b
 8002404:	0802c26f 	.word	0x0802c26f

08002408 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800240c:	6943      	ldr	r3, [r0, #20]
{
 800240e:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002410:	b92b      	cbnz	r3, 800241e <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002414:	2198      	movs	r1, #152	; 0x98
 8002416:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002418:	4823      	ldr	r0, [pc, #140]	; (80024a8 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 800241a:	f028 f91b 	bl	802a654 <__assert_func>
    readData(currentMovieOffset, 8);
 800241e:	2208      	movs	r2, #8
 8002420:	6981      	ldr	r1, [r0, #24]
 8002422:	f7ff ffc5 	bl	80023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002426:	69a1      	ldr	r1, [r4, #24]
 8002428:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800242a:	f243 0630 	movw	r6, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800242e:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002430:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002434:	f7ff ff98 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002438:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800243a:	69a1      	ldr	r1, [r4, #24]
 800243c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800243e:	440d      	add	r5, r1
 8002440:	f105 0208 	add.w	r2, r5, #8
 8002444:	429a      	cmp	r2, r3
 8002446:	d224      	bcs.n	8002492 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x8a>
        frameNumber++;
 8002448:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800244a:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 800244c:	2208      	movs	r2, #8
 800244e:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002450:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 8002454:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002456:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 8002458:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 800245a:	f7ff ffa9 	bl	80023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 800245e:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8002462:	4620      	mov	r0, r4
 8002464:	4641      	mov	r1, r8
 8002466:	f7ff ff94 	bl	8002392 <_ZN20SoftwareMJPEGDecoder6getU16Em>
 800246a:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800246c:	f108 0104 	add.w	r1, r8, #4
 8002470:	4620      	mov	r0, r4
 8002472:	f7ff ff79 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002476:	45b1      	cmp	r9, r6
        chunkSize = getU32(currentMovieOffset + 4);
 8002478:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800247a:	d1de      	bne.n	800243a <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800247c:	f108 0102 	add.w	r1, r8, #2
 8002480:	4620      	mov	r0, r4
 8002482:	f7ff ff86 	bl	8002392 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002486:	42b8      	cmp	r0, r7
 8002488:	d1d7      	bne.n	800243a <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
 800248a:	2d00      	cmp	r5, #0
 800248c:	d0d5      	beq.n	800243a <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 800248e:	2001      	movs	r0, #1
 8002490:	e004      	b.n	800249c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x94>
    frameNumber = 1;
 8002492:	2301      	movs	r3, #1
    return false;
 8002494:	2000      	movs	r0, #0
    frameNumber = 1;
 8002496:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8002498:	6a23      	ldr	r3, [r4, #32]
 800249a:	61a3      	str	r3, [r4, #24]
}
 800249c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024a0:	0802c2c4 	.word	0x0802c2c4
 80024a4:	0802c30d 	.word	0x0802c30d
 80024a8:	0802c20b 	.word	0x0802c20b

080024ac <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 80024ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b0:	4604      	mov	r4, r0
 80024b2:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80024b6:	468a      	mov	sl, r1
 80024b8:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 80024ba:	6981      	ldr	r1, [r0, #24]
 80024bc:	2208      	movs	r2, #8
{
 80024be:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 80024c0:	f7ff ff76 	bl	80023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80024c4:	69a7      	ldr	r7, [r4, #24]
 80024c6:	4620      	mov	r0, r4
 80024c8:	1d39      	adds	r1, r7, #4
 80024ca:	f7ff ff4d 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80024ce:	f107 0108 	add.w	r1, r7, #8
 80024d2:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 80024d4:	4606      	mov	r6, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80024d6:	4620      	mov	r0, r4
 80024d8:	f7ff ff6a 	bl	80023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80024dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80024de:	4607      	mov	r7, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80024e0:	b933      	cbnz	r3, 80024f0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 80024e2:	4b3c      	ldr	r3, [pc, #240]	; (80025d4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 80024e4:	f240 118d 	movw	r1, #397	; 0x18d
 80024e8:	4a3b      	ldr	r2, [pc, #236]	; (80025d8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 80024ea:	483c      	ldr	r0, [pc, #240]	; (80025dc <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 80024ec:	f028 f8b2 	bl	802a654 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80024f0:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 80024f2:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80024f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 80024f8:	f00d fbcc 	bl	800fc94 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 80024fc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002500:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 8002502:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 8002504:	a824      	add	r0, sp, #144	; 0x90
 8002506:	f007 fae6 	bl	8009ad6 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 800250a:	4632      	mov	r2, r6
 800250c:	4639      	mov	r1, r7
 800250e:	a824      	add	r0, sp, #144	; 0x90
 8002510:	f008 fa7a 	bl	800aa08 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 8002514:	2101      	movs	r1, #1
 8002516:	a824      	add	r0, sp, #144	; 0x90
 8002518:	f007 fbe6 	bl	8009ce8 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 800251c:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 800251e:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 8002520:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 8002524:	f007 fc84 	bl	8009e30 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 8002528:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
    while (cinfo.output_scanline < startY)
 800252c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800252e:	42b3      	cmp	r3, r6
 8002530:	d205      	bcs.n	800253e <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x92>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002532:	2201      	movs	r2, #1
 8002534:	a901      	add	r1, sp, #4
 8002536:	a824      	add	r0, sp, #144	; 0x90
 8002538:	f007 fcc3 	bl	8009ec2 <jpeg_read_scanlines>
    while (cinfo.output_scanline < startY)
 800253c:	e7f6      	b.n	800252c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
    const uint32_t startX = area.x;
 800253e:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 8002542:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8002546:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 800254a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 800254c:	fb08 5506 	mla	r5, r8, r6, r5
 8002550:	444f      	add	r7, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 8002552:	f8ba 6002 	ldrh.w	r6, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 8002556:	f8df b088 	ldr.w	fp, [pc, #136]	; 80025e0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 800255a:	b23f      	sxth	r7, r7
 800255c:	429f      	cmp	r7, r3
 800255e:	bf28      	it	cs
 8002560:	461f      	movcs	r7, r3
 8002562:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8002566:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800256a:	441e      	add	r6, r3
 800256c:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 800256e:	b236      	sxth	r6, r6
 8002570:	429e      	cmp	r6, r3
 8002572:	bf28      	it	cs
 8002574:	461e      	movcs	r6, r3
    while (cinfo.output_scanline < endY)
 8002576:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002578:	42b3      	cmp	r3, r6
 800257a:	d21f      	bcs.n	80025bc <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 800257c:	2201      	movs	r2, #1
 800257e:	a901      	add	r1, sp, #4
 8002580:	a824      	add	r0, sp, #144	; 0x90
 8002582:	f007 fc9e 	bl	8009ec2 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 8002586:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002588:	4649      	mov	r1, r9
 800258a:	4452      	add	r2, sl
 800258c:	42b9      	cmp	r1, r7
 800258e:	f102 0203 	add.w	r2, r2, #3
 8002592:	d211      	bcs.n	80025b8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 8002594:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8002598:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800259c:	00c0      	lsls	r0, r0, #3
 800259e:	ea0b 2303 	and.w	r3, fp, r3, lsl #8
 80025a2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80025a6:	4303      	orrs	r3, r0
 80025a8:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 80025ac:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
            *(lineptr + counter) = pix;
 80025b0:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 80025b4:	3101      	adds	r1, #1
 80025b6:	e7e9      	b.n	800258c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe0>
        lineptr += framebuffer_width; //move to next line
 80025b8:	4445      	add	r5, r8
    while (cinfo.output_scanline < endY)
 80025ba:	e7dc      	b.n	8002576 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xca>
    jpeg_finish_decompress(&cinfo);
 80025bc:	a824      	add	r0, sp, #144	; 0x90
 80025be:	f007 fbb5 	bl	8009d2c <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 80025c2:	a824      	add	r0, sp, #144	; 0x90
 80025c4:	f007 fad4 	bl	8009b70 <jpeg_destroy_decompress>
}
 80025c8:	2001      	movs	r0, #1
 80025ca:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 80025ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025d2:	bf00      	nop
 80025d4:	0802c340 	.word	0x0802c340
 80025d8:	0802c396 	.word	0x0802c396
 80025dc:	0802c20b 	.word	0x0802c20b
 80025e0:	fffff800 	.word	0xfffff800

080025e4 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80025e4:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80025e6:	6803      	ldr	r3, [r0, #0]
 80025e8:	bf38      	it	cc
 80025ea:	2101      	movcc	r1, #1
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80025ee:	b570      	push	{r4, r5, r6, lr}
 80025f0:	460d      	mov	r5, r1
 80025f2:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80025f4:	4798      	blx	r3
 80025f6:	42a8      	cmp	r0, r5
 80025f8:	d204      	bcs.n	8002604 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	4620      	mov	r0, r4
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	4798      	blx	r3
 8002602:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002604:	1e6b      	subs	r3, r5, #1
 8002606:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002608:	2210      	movs	r2, #16
 800260a:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 800260c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002610:	f106 0108 	add.w	r1, r6, #8
 8002614:	f7ff fecc 	bl	80023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002618:	f106 0110 	add.w	r1, r6, #16
 800261c:	4620      	mov	r0, r4
 800261e:	f7ff fea3 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002622:	6a23      	ldr	r3, [r4, #32]
 8002624:	3b04      	subs	r3, #4
 8002626:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002628:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 800262c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002630 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 8002630:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8002634:	2100      	movs	r1, #0
{
 8002636:	4604      	mov	r4, r0
    readData(0, 72);
 8002638:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 800263a:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 800263c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 8002640:	f7ff feb6 	bl	80023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002644:	69a7      	ldr	r7, [r4, #24]
 8002646:	2304      	movs	r3, #4
 8002648:	4a62      	ldr	r2, [pc, #392]	; (80027d4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a4>)
 800264a:	4639      	mov	r1, r7
 800264c:	4620      	mov	r0, r4
 800264e:	f7ff fe7b 	bl	8002348 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002652:	b140      	cbz	r0, 8002666 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 8002654:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 8002656:	4a60      	ldr	r2, [pc, #384]	; (80027d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002658:	21e0      	movs	r1, #224	; 0xe0
        lastError = AVI_ERROR_NOT_RIFF;
 800265a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 800265e:	4b5f      	ldr	r3, [pc, #380]	; (80027dc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
        assert(!"AVI header not found");
 8002660:	485f      	ldr	r0, [pc, #380]	; (80027e0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8002662:	f027 fff7 	bl	802a654 <__assert_func>
    currentMovieOffset += 8;
 8002666:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 800266a:	2304      	movs	r3, #4
 800266c:	4a5d      	ldr	r2, [pc, #372]	; (80027e4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800266e:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002670:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002672:	f7ff fe69 	bl	8002348 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002676:	b130      	cbz	r0, 8002686 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002678:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 800267a:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800267c:	21e8      	movs	r1, #232	; 0xe8
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800267e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 8002682:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002684:	e7ec      	b.n	8002660 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 8002686:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800268a:	2304      	movs	r3, #4
 800268c:	4a57      	ldr	r2, [pc, #348]	; (80027ec <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 800268e:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002690:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002692:	f7ff fe59 	bl	8002348 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002696:	4606      	mov	r6, r0
 8002698:	b130      	cbz	r0, 80026a8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x78>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800269a:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 800269c:	4a4e      	ldr	r2, [pc, #312]	; (80027d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800269e:	21ef      	movs	r1, #239	; 0xef
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80026a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 80026a4:	4b52      	ldr	r3, [pc, #328]	; (80027f0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80026a6:	e7db      	b.n	8002660 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80026a8:	f107 0110 	add.w	r1, r7, #16
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff fe5b 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80026b2:	4605      	mov	r5, r0
 80026b4:	b918      	cbnz	r0, 80026be <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x8e>
 80026b6:	4b4f      	ldr	r3, [pc, #316]	; (80027f4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80026b8:	21f5      	movs	r1, #245	; 0xf5
 80026ba:	4a47      	ldr	r2, [pc, #284]	; (80027d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80026bc:	e7d0      	b.n	8002660 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 80026be:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 80026c2:	2304      	movs	r3, #4
 80026c4:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80026c6:	4620      	mov	r0, r4
 80026c8:	4641      	mov	r1, r8
 80026ca:	f7ff fe3d 	bl	8002348 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d04b      	beq.n	800276a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80026d2:	2306      	movs	r3, #6
 80026d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 80026d8:	2304      	movs	r3, #4
 80026da:	4a48      	ldr	r2, [pc, #288]	; (80027fc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80026dc:	f107 0118 	add.w	r1, r7, #24
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7ff fe31 	bl	8002348 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d041      	beq.n	800276e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80026ea:	2307      	movs	r3, #7
 80026ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80026f0:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80026f2:	4f43      	ldr	r7, [pc, #268]	; (8002800 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
    readData(listOffset, 12);
 80026f4:	220c      	movs	r2, #12
 80026f6:	4620      	mov	r0, r4
 80026f8:	4629      	mov	r1, r5
 80026fa:	f7ff fe59 	bl	80023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80026fe:	f105 0608 	add.w	r6, r5, #8
 8002702:	2304      	movs	r3, #4
 8002704:	463a      	mov	r2, r7
 8002706:	4620      	mov	r0, r4
 8002708:	4631      	mov	r1, r6
 800270a:	f7ff fe1d 	bl	8002348 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800270e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002712:	2800      	cmp	r0, #0
 8002714:	d04a      	beq.n	80027ac <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x17c>
 8002716:	2b00      	cmp	r3, #0
 8002718:	d14a      	bne.n	80027b0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 800271a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 800271c:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800271e:	42ab      	cmp	r3, r5
 8002720:	d84a      	bhi.n	80027b8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x188>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002722:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002726:	1d29      	adds	r1, r5, #4
 8002728:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800272a:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800272c:	9101      	str	r1, [sp, #4]
 800272e:	f7ff fe1b 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002732:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002734:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002736:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002738:	4620      	mov	r0, r4
 800273a:	f7ff fe15 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800273e:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002740:	2204      	movs	r2, #4
 8002742:	4620      	mov	r0, r4
 8002744:	4631      	mov	r1, r6
 8002746:	f7ff fe33 	bl	80023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800274a:	2304      	movs	r3, #4
 800274c:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 800274e:	4631      	mov	r1, r6
 8002750:	4620      	mov	r0, r4
 8002752:	f7ff fdf9 	bl	8002348 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002756:	2800      	cmp	r0, #0
 8002758:	d139      	bne.n	80027ce <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x19e>
    frameNumber = 1; //next frame number is 1
 800275a:	2301      	movs	r3, #1
        indexOffset = listOffset;
 800275c:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 800275e:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002760:	69a3      	ldr	r3, [r4, #24]
 8002762:	6223      	str	r3, [r4, #32]
}
 8002764:	b002      	add	sp, #8
 8002766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 800276a:	2601      	movs	r6, #1
 800276c:	e7b4      	b.n	80026d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xa8>
    if (foundFrame)
 800276e:	2e00      	cmp	r6, #0
 8002770:	d0be      	beq.n	80026f0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc0>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002772:	f107 0120 	add.w	r1, r7, #32
 8002776:	4620      	mov	r0, r4
 8002778:	f7ff fdf6 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800277c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002780:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002784:	fbb0 f0f3 	udiv	r0, r0, r3
 8002788:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff fdec 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002790:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002794:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002796:	4620      	mov	r0, r4
 8002798:	f7ff fde6 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 800279c:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80027a0:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff fde0 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80027a8:	6120      	str	r0, [r4, #16]
 80027aa:	e7a1      	b.n	80026f0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc0>
    if (lastError != AVI_NO_ERROR)
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0b8      	beq.n	8002722 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80027b0:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80027b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 80027b6:	e7d5      	b.n	8002764 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x134>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7ff fdd5 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80027be:	3008      	adds	r0, #8
        readData(listOffset, 12);
 80027c0:	220c      	movs	r2, #12
        listOffset += listSize;
 80027c2:	4405      	add	r5, r0
        readData(listOffset, 12);
 80027c4:	4620      	mov	r0, r4
 80027c6:	4629      	mov	r1, r5
 80027c8:	f7ff fdf2 	bl	80023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027cc:	e797      	b.n	80026fe <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xce>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80027ce:	230b      	movs	r3, #11
 80027d0:	e7ef      	b.n	80027b2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x182>
 80027d2:	bf00      	nop
 80027d4:	0802c3f0 	.word	0x0802c3f0
 80027d8:	0802c40e 	.word	0x0802c40e
 80027dc:	0802c3f5 	.word	0x0802c3f5
 80027e0:	0802c20b 	.word	0x0802c20b
 80027e4:	0802c43b 	.word	0x0802c43b
 80027e8:	0802c440 	.word	0x0802c440
 80027ec:	0802c458 	.word	0x0802c458
 80027f0:	0802c45d 	.word	0x0802c45d
 80027f4:	0802c473 	.word	0x0802c473
 80027f8:	0802c47f 	.word	0x0802c47f
 80027fc:	0802c484 	.word	0x0802c484
 8002800:	0802c489 	.word	0x0802c489
 8002804:	0802c48e 	.word	0x0802c48e

08002808 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002808:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 800280c:	2200      	movs	r2, #0
 800280e:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8002810:	f7ff bf0e 	b.w	8002630 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002814 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002814:	b510      	push	{r4, lr}
    movieData = 0;
 8002816:	2300      	movs	r3, #0
{
 8002818:	4604      	mov	r4, r0
 800281a:	4608      	mov	r0, r1
    movieData = 0;
 800281c:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800281e:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002820:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4798      	blx	r3
 8002826:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8002828:	4620      	mov	r0, r4
}
 800282a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800282e:	f7ff beff 	b.w	8002630 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002832 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002832:	b4f0      	push	{r4, r5, r6, r7}
 8002834:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8002838:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 800283c:	b12a      	cbz	r2, 800284a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800283e:	b123      	cbz	r3, 800284a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 8002840:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 8002844:	bcf0      	pop	{r4, r5, r6, r7}
 8002846:	f7ff bd03 	b.w	8002250 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 800284a:	bcf0      	pop	{r4, r5, r6, r7}
 800284c:	4770      	bx	lr
	...

08002850 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002854:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002856:	6943      	ldr	r3, [r0, #20]
{
 8002858:	4604      	mov	r4, r0
 800285a:	460f      	mov	r7, r1
 800285c:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800285e:	b92b      	cbnz	r3, 800286c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002862:	2165      	movs	r1, #101	; 0x65
 8002864:	4a2a      	ldr	r2, [pc, #168]	; (8002910 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002866:	482b      	ldr	r0, [pc, #172]	; (8002914 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 8002868:	f027 fef4 	bl	802a654 <__assert_func>
    readData(currentMovieOffset, 8);
 800286c:	2208      	movs	r2, #8
 800286e:	6981      	ldr	r1, [r0, #24]
 8002870:	f7ff fd9e 	bl	80023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 8002874:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002876:	4620      	mov	r0, r4
 8002878:	f106 0a08 	add.w	sl, r6, #8
 800287c:	1d31      	adds	r1, r6, #4
 800287e:	f7ff fd73 	bl	8002368 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002882:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002884:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002888:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800288a:	429a      	cmp	r2, r3
 800288c:	d231      	bcs.n	80028f2 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo = getU16(currentMovieOffset);
 800288e:	4631      	mov	r1, r6
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff fd7e 	bl	8002392 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002896:	f243 0330 	movw	r3, #12336	; 0x3030
 800289a:	4298      	cmp	r0, r3
 800289c:	d11d      	bne.n	80028da <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800289e:	1cb1      	adds	r1, r6, #2
 80028a0:	4620      	mov	r0, r4
 80028a2:	f7ff fd76 	bl	8002392 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80028a6:	f246 3364 	movw	r3, #25444	; 0x6364
 80028aa:	4298      	cmp	r0, r3
 80028ac:	d115      	bne.n	80028da <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80028ae:	b1a5      	cbz	r5, 80028da <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80028b0:	462a      	mov	r2, r5
 80028b2:	4651      	mov	r1, sl
 80028b4:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 80028b6:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80028ba:	f7ff fd79 	bl	80023b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80028be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80028c0:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80028c2:	462a      	mov	r2, r5
 80028c4:	4620      	mov	r0, r4
 80028c6:	f8cd 8000 	str.w	r8, [sp]
 80028ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80028ce:	463b      	mov	r3, r7
 80028d0:	f7ff ffaf 	bl	8002832 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80028d4:	6963      	ldr	r3, [r4, #20]
 80028d6:	3301      	adds	r3, #1
 80028d8:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 80028da:	69a3      	ldr	r3, [r4, #24]
 80028dc:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 80028de:	b18d      	cbz	r5, 8002904 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
            currentMovieOffset += 8;
 80028e0:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80028e2:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80028e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80028e6:	3301      	adds	r3, #1
 80028e8:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80028ec:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80028ee:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80028f0:	d10a      	bne.n	8002908 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 80028f2:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 80028f4:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 80028f6:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 80028f8:	61a3      	str	r3, [r4, #24]
}
 80028fa:	f080 0001 	eor.w	r0, r0, #1
 80028fe:	b004      	add	sp, #16
 8002900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            currentMovieOffset += 8;
 8002904:	3308      	adds	r3, #8
 8002906:	e7eb      	b.n	80028e0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8002908:	2000      	movs	r0, #0
 800290a:	e7f6      	b.n	80028fa <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 800290c:	0802c2c4 	.word	0x0802c2c4
 8002910:	0802c493 	.word	0x0802c493
 8002914:	0802c20b 	.word	0x0802c20b

08002918 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002918:	2001      	movs	r0, #1
 800291a:	4770      	bx	lr

0800291c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 800291c:	200c      	movs	r0, #12
 800291e:	4770      	bx	lr

08002920 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002920:	230c      	movs	r3, #12
 8002922:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002926:	3008      	adds	r0, #8
 8002928:	4770      	bx	lr

0800292a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800292a:	230c      	movs	r3, #12
 800292c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002930:	3008      	adds	r0, #8
 8002932:	4770      	bx	lr

08002934 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002934:	2001      	movs	r0, #1
 8002936:	4770      	bx	lr

08002938 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002938:	f240 403c 	movw	r0, #1084	; 0x43c
 800293c:	4770      	bx	lr

0800293e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800293e:	f240 433c 	movw	r3, #1084	; 0x43c
 8002942:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002946:	3008      	adds	r0, #8
 8002948:	4770      	bx	lr

0800294a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800294a:	f240 433c 	movw	r3, #1084	; 0x43c
 800294e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002952:	3008      	adds	r0, #8
 8002954:	4770      	bx	lr

08002956 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002956:	2001      	movs	r0, #1
 8002958:	4770      	bx	lr

0800295a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800295a:	2010      	movs	r0, #16
 800295c:	4770      	bx	lr

0800295e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800295e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002962:	3008      	adds	r0, #8
 8002964:	4770      	bx	lr

08002966 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002966:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800296a:	3008      	adds	r0, #8
 800296c:	4770      	bx	lr

0800296e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 800296e:	4608      	mov	r0, r1
 8002970:	f000 bebe 	b.w	80036f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002974 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002976:	b510      	push	{r4, lr}
 8002978:	4604      	mov	r4, r0
 800297a:	6003      	str	r3, [r0, #0]
 800297c:	f014 fa36 	bl	8016dec <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002980:	4620      	mov	r0, r4
 8002982:	bd10      	pop	{r4, pc}
 8002984:	0802c5a0 	.word	0x0802c5a0

08002988 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002988:	b510      	push	{r4, lr}
 800298a:	4604      	mov	r4, r0
 800298c:	f7ff fff2 	bl	8002974 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002990:	2114      	movs	r1, #20
 8002992:	4620      	mov	r0, r4
 8002994:	f027 fe2f 	bl	802a5f6 <_ZdlPvj>
 8002998:	4620      	mov	r0, r4
 800299a:	bd10      	pop	{r4, pc}

0800299c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800299e:	b510      	push	{r4, lr}
 80029a0:	4604      	mov	r4, r0
 80029a2:	6003      	str	r3, [r0, #0]
 80029a4:	f014 fa22 	bl	8016dec <_ZN8touchgfx17AbstractPartitionD1Ev>
 80029a8:	4620      	mov	r0, r4
 80029aa:	bd10      	pop	{r4, pc}
 80029ac:	0802c56c 	.word	0x0802c56c

080029b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80029b0:	b510      	push	{r4, lr}
 80029b2:	4604      	mov	r4, r0
 80029b4:	f7ff fff2 	bl	800299c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80029b8:	f240 4144 	movw	r1, #1092	; 0x444
 80029bc:	4620      	mov	r0, r4
 80029be:	f027 fe1a 	bl	802a5f6 <_ZdlPvj>
 80029c2:	4620      	mov	r0, r4
 80029c4:	bd10      	pop	{r4, pc}
	...

080029c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80029ca:	b510      	push	{r4, lr}
 80029cc:	4604      	mov	r4, r0
 80029ce:	6003      	str	r3, [r0, #0]
 80029d0:	f014 fa0c 	bl	8016dec <_ZN8touchgfx17AbstractPartitionD1Ev>
 80029d4:	4620      	mov	r0, r4
 80029d6:	bd10      	pop	{r4, pc}
 80029d8:	0802c538 	.word	0x0802c538

080029dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80029dc:	b510      	push	{r4, lr}
 80029de:	4604      	mov	r4, r0
 80029e0:	f7ff fff2 	bl	80029c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80029e4:	2118      	movs	r1, #24
 80029e6:	4620      	mov	r0, r4
 80029e8:	f027 fe05 	bl	802a5f6 <_ZdlPvj>
 80029ec:	4620      	mov	r0, r4
 80029ee:	bd10      	pop	{r4, pc}

080029f0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <_ZN12FrontendHeapD1Ev+0x24>)
 80029f2:	b510      	push	{r4, lr}
 80029f4:	4604      	mov	r4, r0
 80029f6:	6003      	str	r3, [r0, #0]
 80029f8:	f500 608e 	add.w	r0, r0, #1136	; 0x470
 80029fc:	f7ff ffba 	bl	8002974 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a00:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002a04:	f7ff ffca 	bl	800299c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a08:	f104 0014 	add.w	r0, r4, #20
 8002a0c:	f7ff ffdc 	bl	80029c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a10:	4620      	mov	r0, r4
 8002a12:	bd10      	pop	{r4, pc}
 8002a14:	0802c5d4 	.word	0x0802c5d4

08002a18 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002a18:	b508      	push	{r3, lr}
 8002a1a:	4802      	ldr	r0, [pc, #8]	; (8002a24 <__tcf_0+0xc>)
 8002a1c:	f7ff ffe8 	bl	80029f0 <_ZN12FrontendHeapD1Ev>
 8002a20:	bd08      	pop	{r3, pc}
 8002a22:	bf00      	nop
 8002a24:	200003b4 	.word	0x200003b4

08002a28 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002a28:	b510      	push	{r4, lr}
 8002a2a:	4604      	mov	r4, r0
 8002a2c:	f7ff ffe0 	bl	80029f0 <_ZN12FrontendHeapD1Ev>
 8002a30:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8002a34:	4620      	mov	r0, r4
 8002a36:	f027 fdde 	bl	802a5f6 <_ZdlPvj>
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	bd10      	pop	{r4, pc}
	...

08002a40 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002a40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002a44:	f000 fc36 	bl	80032b4 <_ZN14BitmapDatabase11getInstanceEv>
 8002a48:	2400      	movs	r4, #0
 8002a4a:	4605      	mov	r5, r0
 8002a4c:	f000 fc36 	bl	80032bc <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002a50:	4623      	mov	r3, r4
 8002a52:	4601      	mov	r1, r0
 8002a54:	4622      	mov	r2, r4
 8002a56:	4628      	mov	r0, r5
 8002a58:	9400      	str	r4, [sp, #0]
 8002a5a:	f01b fbb3 	bl	801e1c4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002a5e:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <touchgfx_init+0xb4>)
 8002a60:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002a62:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002a64:	4d25      	ldr	r5, [pc, #148]	; (8002afc <touchgfx_init+0xbc>)
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	f001 fce4 	bl	8004434 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002a6c:	4824      	ldr	r0, [pc, #144]	; (8002b00 <touchgfx_init+0xc0>)
 8002a6e:	f01b faf5 	bl	801e05c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002a72:	782b      	ldrb	r3, [r5, #0]
 8002a74:	f3bf 8f5b 	dmb	ish
 8002a78:	07db      	lsls	r3, r3, #31
 8002a7a:	d435      	bmi.n	8002ae8 <touchgfx_init+0xa8>
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	f027 fdbc 	bl	802a5fa <__cxa_guard_acquire>
 8002a82:	b388      	cbz	r0, 8002ae8 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002a84:	4c1f      	ldr	r4, [pc, #124]	; (8002b04 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002a86:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <touchgfx_init+0xc8>)
 8002a88:	f504 6691 	add.w	r6, r4, #1160	; 0x488
 8002a8c:	f104 0014 	add.w	r0, r4, #20
 8002a90:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002a94:	f504 678e 	add.w	r7, r4, #1136	; 0x470
 8002a98:	6023      	str	r3, [r4, #0]
 8002a9a:	6060      	str	r0, [r4, #4]
 8002a9c:	f8c4 8008 	str.w	r8, [r4, #8]
 8002aa0:	60e7      	str	r7, [r4, #12]
 8002aa2:	6126      	str	r6, [r4, #16]
 8002aa4:	f014 f9a4 	bl	8016df0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002aa8:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <touchgfx_init+0xcc>)
 8002aaa:	4640      	mov	r0, r8
 8002aac:	6163      	str	r3, [r4, #20]
 8002aae:	f014 f99f 	bl	8016df0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <touchgfx_init+0xd0>)
 8002ab4:	4638      	mov	r0, r7
 8002ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ab8:	f014 f99a 	bl	8016df0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <touchgfx_init+0xd4>)
 8002abe:	f204 4084 	addw	r0, r4, #1156	; 0x484
 8002ac2:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
 8002ac6:	f001 fd31 	bl	800452c <_ZN5ModelC1Ev>
 8002aca:	4622      	mov	r2, r4
 8002acc:	f204 4184 	addw	r1, r4, #1156	; 0x484
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	f001 fd21 	bl	8004518 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002ad6:	4630      	mov	r0, r6
 8002ad8:	f000 fe0a 	bl	80036f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002adc:	480e      	ldr	r0, [pc, #56]	; (8002b18 <touchgfx_init+0xd8>)
 8002ade:	f027 fdd7 	bl	802a690 <atexit>
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f027 fd95 	bl	802a612 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002ae8:	480c      	ldr	r0, [pc, #48]	; (8002b1c <touchgfx_init+0xdc>)
}
 8002aea:	b002      	add	sp, #8
 8002aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002af0:	f7ff b8a4 	b.w	8001c3c <_ZN11TouchGFXHAL10initializeEv>
 8002af4:	200153fc 	.word	0x200153fc
 8002af8:	200017b4 	.word	0x200017b4
 8002afc:	200003b0 	.word	0x200003b0
 8002b00:	20000008 	.word	0x20000008
 8002b04:	200003b4 	.word	0x200003b4
 8002b08:	0802c5d4 	.word	0x0802c5d4
 8002b0c:	0802c538 	.word	0x0802c538
 8002b10:	0802c56c 	.word	0x0802c56c
 8002b14:	0802c5a0 	.word	0x0802c5a0
 8002b18:	08002a19 	.word	0x08002a19
 8002b1c:	20001738 	.word	0x20001738

08002b20 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002b20:	4801      	ldr	r0, [pc, #4]	; (8002b28 <touchgfx_taskEntry+0x8>)
 8002b22:	f015 b952 	b.w	8017dca <_ZN8touchgfx3HAL9taskEntryEv>
 8002b26:	bf00      	nop
 8002b28:	20001738 	.word	0x20001738

08002b2c <_GLOBAL__sub_I_touchgfx_init>:
}
 8002b2c:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002b2e:	4e23      	ldr	r6, [pc, #140]	; (8002bbc <_GLOBAL__sub_I_touchgfx_init+0x90>)
{
public:

    STM32TouchController() {}
 8002b30:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002b32:	4c24      	ldr	r4, [pc, #144]	; (8002bc4 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002b34:	4630      	mov	r0, r6
static LCD16bpp display;
 8002b36:	4d24      	ldr	r5, [pc, #144]	; (8002bc8 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8002b38:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002b3a:	f7ff fa1f 	bl	8001f7c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002b3e:	4628      	mov	r0, r5
 8002b40:	f01e fcee 	bl	8021520 <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002b44:	4b21      	ldr	r3, [pc, #132]	; (8002bcc <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002b4c:	4820      	ldr	r0, [pc, #128]	; (8002bd0 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002b4e:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002b50:	661a      	str	r2, [r3, #96]	; 0x60
 8002b52:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002b56:	671a      	str	r2, [r3, #112]	; 0x70
 8002b58:	60dc      	str	r4, [r3, #12]
 8002b5a:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8002b5e:	491d      	ldr	r1, [pc, #116]	; (8002bd4 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002b60:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002b64:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002b68:	6759      	str	r1, [r3, #116]	; 0x74
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002b70:	4919      	ldr	r1, [pc, #100]	; (8002bd8 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002b72:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002b74:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002b78:	8001      	strh	r1, [r0, #0]
 8002b7a:	4818      	ldr	r0, [pc, #96]	; (8002bdc <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002b7c:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002b7e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002b82:	4817      	ldr	r0, [pc, #92]	; (8002be0 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          lastRenderMethod(HARDWARE)
 8002b84:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002b88:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002b8c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002b90:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8002b94:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002b98:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002b9c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002ba0:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002ba4:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002ba8:	8001      	strh	r1, [r0, #0]
 8002baa:	480e      	ldr	r0, [pc, #56]	; (8002be4 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002bb0:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002bb2:	490d      	ldr	r1, [pc, #52]	; (8002be8 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002bb4:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002bb6:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002bb8:	601a      	str	r2, [r3, #0]
}
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
 8002bbc:	20000998 	.word	0x20000998
 8002bc0:	0802bc90 	.word	0x0802bc90
 8002bc4:	20000994 	.word	0x20000994
 8002bc8:	200017b8 	.word	0x200017b8
 8002bcc:	20001738 	.word	0x20001738
 8002bd0:	20015394 	.word	0x20015394
 8002bd4:	01000001 	.word	0x01000001
 8002bd8:	200153a0 	.word	0x200153a0
 8002bdc:	2001539a 	.word	0x2001539a
 8002be0:	20015396 	.word	0x20015396
 8002be4:	2001539c 	.word	0x2001539c
 8002be8:	20015398 	.word	0x20015398
 8002bec:	0802be1c 	.word	0x0802be1c

08002bf0 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002bf0:	4801      	ldr	r0, [pc, #4]	; (8002bf8 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002bf2:	f7ff b99f 	b.w	8001f34 <_ZN8STM32DMAD1Ev>
 8002bf6:	bf00      	nop
 8002bf8:	20000998 	.word	0x20000998

08002bfc <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002bfc:	4910      	ldr	r1, [pc, #64]	; (8002c40 <SCB_CleanInvalidateDCache+0x44>)
 8002bfe:	2300      	movs	r3, #0
{
 8002c00:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002c02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002c06:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002c0a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c0e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c12:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002c16:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002c1a:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c1c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c20:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c22:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 8002c26:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c28:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002c2c:	d2f9      	bcs.n	8002c22 <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
 8002c2e:	3b20      	subs	r3, #32
 8002c30:	f113 0f20 	cmn.w	r3, #32
 8002c34:	d1f2      	bne.n	8002c1c <SCB_CleanInvalidateDCache+0x20>
 8002c36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c3a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002c46:	2290      	movs	r2, #144	; 0x90
 8002c48:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002c4c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000e100 	.word	0xe000e100

08002c58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002c58:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002c5a:	490a      	ldr	r1, [pc, #40]	; (8002c84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002c5c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002c5e:	480a      	ldr	r0, [pc, #40]	; (8002c88 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002c60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002c6a:	6911      	ldr	r1, [r2, #16]
 8002c6c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002c70:	3901      	subs	r1, #1
 8002c72:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002c76:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002c7e:	4770      	bx	lr
 8002c80:	40016800 	.word	0x40016800
 8002c84:	20001834 	.word	0x20001834
 8002c88:	20001832 	.word	0x20001832

08002c8c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002c8c:	4b01      	ldr	r3, [pc, #4]	; (8002c94 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002c8e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002c92:	4770      	bx	lr
 8002c94:	40016800 	.word	0x40016800

08002c98 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002c9a:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002c9c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ca2:	4770      	bx	lr
 8002ca4:	40016800 	.word	0x40016800

08002ca8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	03db      	lsls	r3, r3, #15
 8002cae:	d501      	bpl.n	8002cb4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
    {
        SCB_CleanInvalidateDCache();
 8002cb0:	f7ff bfa4 	b.w	8002bfc <SCB_CleanInvalidateDCache>
    }
}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002cbc:	4770      	bx	lr

08002cbe <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 8002cbe:	2338      	movs	r3, #56	; 0x38
 8002cc0:	fb01 3103 	mla	r1, r1, r3, r3
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	5443      	strb	r3, [r0, r1]
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8002cc8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002ccc:	b90b      	cbnz	r3, 8002cd2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x14>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 8002cce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002cd0:	6483      	str	r3, [r0, #72]	; 0x48
        }
    }
 8002cd2:	4770      	bx	lr

08002cd4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8002cd4:	4770      	bx	lr
	...

08002cd8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	4604      	mov	r4, r0
    HAL::initialize();
 8002cdc:	f015 f863 	bl	8017da6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002ce4:	f018 fd36 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
 8002ce8:	4601      	mov	r1, r0
 8002cea:	4620      	mov	r0, r4
 8002cec:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8002cfe:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002d02:	4a06      	ldr	r2, [pc, #24]	; (8002d1c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002d04:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002d06:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
        topBufferRGB = bufferRGB;
 8002d0a:	649a      	str	r2, [r3, #72]	; 0x48
        sizeBufferRGB = sizeOfBuffer;
 8002d0c:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
 8002d14:	c007f800 	.word	0xc007f800
 8002d18:	20002000 	.word	0x20002000
 8002d1c:	20001fb8 	.word	0x20001fb8
 8002d20:	c00bf400 	.word	0xc00bf400

08002d24 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002d24:	f015 b826 	b.w	8017d74 <_ZN8touchgfx3HAL10beginFrameEv>

08002d28 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002d28:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8002d2c:	b113      	cbz	r3, 8002d34 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8002d2e:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8002d34:	f015 b82a 	b.w	8017d8c <_ZN8touchgfx3HAL8endFrameEv>
 8002d38:	20001830 	.word	0x20001830

08002d3c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002d3c:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002d3e:	f014 ffe2 	bl	8017d06 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	03db      	lsls	r3, r3, #15
 8002d48:	d503      	bpl.n	8002d52 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SCB_CleanInvalidateDCache();
 8002d4e:	f7ff bf55 	b.w	8002bfc <SCB_CleanInvalidateDCache>
}
 8002d52:	bd08      	pop	{r3, pc}
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002d58:	f015 b93f 	b.w	8017fda <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002d5c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	4604      	mov	r4, r0
 8002d60:	2158      	movs	r1, #88	; 0x58
 8002d62:	f027 fc48 	bl	802a5f6 <_ZdlPvj>
 8002d66:	4620      	mov	r0, r4
 8002d68:	bd10      	pop	{r4, pc}
	...

08002d6c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    bool getIsPlaying(const Handle handle)
 8002d6c:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002d6e:	b131      	cbz	r1, 8002d7e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002d72:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002d78:	4804      	ldr	r0, [pc, #16]	; (8002d8c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002d7a:	f027 fc6b 	bl	802a654 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002d7e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8002d82:	bd08      	pop	{r3, pc}
 8002d84:	0802c5e0 	.word	0x0802c5e0
 8002d88:	0802c5f4 	.word	0x0802c5f4
 8002d8c:	0802c781 	.word	0x0802c781

08002d90 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002d90:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002d92:	b131      	cbz	r1, 8002da2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002d96:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002d9a:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002d9c:	4806      	ldr	r0, [pc, #24]	; (8002db8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002d9e:	f027 fc59 	bl	802a654 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002da2:	6840      	ldr	r0, [r0, #4]
 8002da4:	4611      	mov	r1, r2
 8002da6:	6803      	ldr	r3, [r0, #0]
    }
 8002da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4718      	bx	r3
 8002db0:	0802c5e0 	.word	0x0802c5e0
 8002db4:	0802c7c3 	.word	0x0802c7c3
 8002db8:	0802c781 	.word	0x0802c781

08002dbc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    uint32_t getCurrentFrameNumber(const Handle handle)
 8002dbc:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002dbe:	b129      	cbz	r1, 8002dcc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002dc0:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002dc2:	2169      	movs	r1, #105	; 0x69
 8002dc4:	4a03      	ldr	r2, [pc, #12]	; (8002dd4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002dc6:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002dc8:	f027 fc44 	bl	802a654 <__assert_func>
    }
 8002dcc:	6900      	ldr	r0, [r0, #16]
 8002dce:	bd08      	pop	{r3, pc}
 8002dd0:	0802c5e0 	.word	0x0802c5e0
 8002dd4:	0802c974 	.word	0x0802c974
 8002dd8:	0802c781 	.word	0x0802c781

08002ddc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002ddc:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002dde:	b129      	cbz	r1, 8002dec <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002de2:	2172      	movs	r1, #114	; 0x72
 8002de4:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002de6:	4806      	ldr	r0, [pc, #24]	; (8002e00 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002de8:	f027 fc34 	bl	802a654 <__assert_func>
        stream.tickCount = 0;
 8002dec:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 8002dee:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 8002df0:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002df4:	bd08      	pop	{r3, pc}
 8002df6:	bf00      	nop
 8002df8:	0802c5e0 	.word	0x0802c5e0
 8002dfc:	0802cb2c 	.word	0x0802cb2c
 8002e00:	0802c781 	.word	0x0802c781

08002e04 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002e04:	b510      	push	{r4, lr}
 8002e06:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002e08:	b129      	cbz	r1, 8002e16 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002e0a:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa4>)
 8002e0c:	2193      	movs	r1, #147	; 0x93
 8002e0e:	4a27      	ldr	r2, [pc, #156]	; (8002eac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa8>)
 8002e10:	4827      	ldr	r0, [pc, #156]	; (8002eb0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xac>)
 8002e12:	f027 fc1f 	bl	802a654 <__assert_func>
        switch (cmd)
 8002e16:	2a05      	cmp	r2, #5
 8002e18:	d834      	bhi.n	8002e84 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002e1a:	e8df f002 	tbb	[pc, r2]
 8002e1e:	2903      	.short	0x2903
 8002e20:	3e39342f 	.word	0x3e39342f
            if (mjpegDecoders[handle]->hasVideo())
 8002e24:	6840      	ldr	r0, [r0, #4]
 8002e26:	6803      	ldr	r3, [r0, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	4798      	blx	r3
 8002e2c:	b350      	cbz	r0, 8002e84 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
                MUTEX_LOCK(mutexBuffers);
 8002e2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e34:	f004 fbfc 	bl	8007630 <osMutexAcquire>
                stream.cancelDecoding = false;
 8002e38:	2300      	movs	r3, #0
                stream.isPlaying = true;
 8002e3a:	2201      	movs	r2, #1
                if (stream.isStopped)
 8002e3c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
                stream.cancelDecoding = false;
 8002e40:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
                stream.isPlaying = true;
 8002e44:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
                stream.frameCount = 0;
 8002e48:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 8002e4a:	6163      	str	r3, [r4, #20]
                if (stream.isStopped)
 8002e4c:	b101      	cbz	r1, 8002e50 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x4c>
                    stream.seek_to_frame = 1;
 8002e4e:	6222      	str	r2, [r4, #32]
                stream.isStopped = false;
 8002e50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                stream.skip_frames = 0;
 8002e54:	6263      	str	r3, [r4, #36]	; 0x24
                if (stream.nextBuffer == 0)
 8002e56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e58:	b92b      	cbnz	r3, 8002e66 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x62>
                    stream.doDecodeNewFrame = true;
 8002e5a:	2301      	movs	r3, #1
                    SEM_POST(semDecode);
 8002e5c:	6d20      	ldr	r0, [r4, #80]	; 0x50
                    stream.doDecodeNewFrame = true;
 8002e5e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                    SEM_POST(semDecode);
 8002e62:	f004 fccf 	bl	8007804 <osSemaphoreRelease>
                MUTEX_UNLOCK(mutexBuffers);
 8002e66:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 8002e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MUTEX_UNLOCK(mutexBuffers);
 8002e6c:	f004 bc10 	b.w	8007690 <osMutexRelease>
            stream.isPlaying = false;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002e76:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            break;
 8002e7a:	e003      	b.n	8002e84 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
            stream.seek_to_frame = param;
 8002e7c:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002e82:	6143      	str	r3, [r0, #20]
    }
 8002e84:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002e86:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002e8c:	6143      	str	r3, [r0, #20]
 8002e8e:	e7f2      	b.n	8002e76 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.isPlaying = false;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e7ed      	b.n	8002e76 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.repeat = (param > 0);
 8002e9a:	3b00      	subs	r3, #0
 8002e9c:	bf18      	it	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
 8002ea4:	e7ee      	b.n	8002e84 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002ea6:	bf00      	nop
 8002ea8:	0802c5e0 	.word	0x0802c5e0
 8002eac:	0802cceb 	.word	0x0802cceb
 8002eb0:	0802c781 	.word	0x0802c781

08002eb4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	4616      	mov	r6, r2
        assert(handle < no_streams);
 8002eba:	b129      	cbz	r1, 8002ec8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd0>)
 8002ebe:	21d6      	movs	r1, #214	; 0xd6
 8002ec0:	4a31      	ldr	r2, [pc, #196]	; (8002f88 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd4>)
 8002ec2:	4832      	ldr	r0, [pc, #200]	; (8002f8c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd8>)
 8002ec4:	f027 fbc6 	bl	802a654 <__assert_func>
        if (stream.isPlaying)
 8002ec8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ecc:	b133      	cbz	r3, 8002edc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002ece:	4b30      	ldr	r3, [pc, #192]	; (8002f90 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xdc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8002ed6:	6943      	ldr	r3, [r0, #20]
 8002ed8:	4413      	add	r3, r2
 8002eda:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002edc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d04d      	beq.n	8002f7e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002ee2:	69e1      	ldr	r1, [r4, #28]
 8002ee4:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002ee8:	4353      	muls	r3, r2
 8002eea:	68a2      	ldr	r2, [r4, #8]
 8002eec:	434a      	muls	r2, r1
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d220      	bcs.n	8002f34 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x80>
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002ef2:	6a23      	ldr	r3, [r4, #32]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d042      	beq.n	8002f7e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
            MUTEX_LOCK(mutexBuffers);
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002efc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002efe:	f004 fb97 	bl	8007630 <osMutexAcquire>
            if (stream.seek_to_frame > 0)
 8002f02:	6a23      	ldr	r3, [r4, #32]
 8002f04:	b10b      	cbz	r3, 8002f0a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x56>
                stream.nextBuffer = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	62e3      	str	r3, [r4, #44]	; 0x2c
            if (stream.nextBuffer != 0)
 8002f0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f0c:	b9fb      	cbnz	r3, 8002f4e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9a>
        bool hasMoreFrames = true;
 8002f0e:	2501      	movs	r5, #1
            MUTEX_UNLOCK(mutexBuffers);
 8002f10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f12:	f004 fbbd 	bl	8007690 <osMutexRelease>
        if ((stream.isPlaying || stream.seek_to_frame > 0) && (stream.nextBuffer == 0))
 8002f16:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002f1a:	b90b      	cbnz	r3, 8002f20 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>
 8002f1c:	6a23      	ldr	r3, [r4, #32]
 8002f1e:	b13b      	cbz	r3, 8002f30 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
 8002f20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f22:	b92b      	cbnz	r3, 8002f30 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
            stream.doDecodeNewFrame = true;
 8002f24:	2301      	movs	r3, #1
            SEM_POST(semDecode);
 8002f26:	6d20      	ldr	r0, [r4, #80]	; 0x50
            stream.doDecodeNewFrame = true;
 8002f28:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
            SEM_POST(semDecode);
 8002f2c:	f004 fc6a 	bl	8007804 <osSemaphoreRelease>
    }
 8002f30:	4628      	mov	r0, r5
 8002f32:	bd70      	pop	{r4, r5, r6, pc}
        {
            if (allowSkipFrames)
 8002f34:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d0dd      	beq.n	8002ef8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8002f42:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8002f44:	bf98      	it	ls
 8002f46:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
 8002f4a:	6262      	str	r2, [r4, #36]	; 0x24
 8002f4c:	e7d4      	b.n	8002ef8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
                stream.nextBuffer = 0;
 8002f4e:	2200      	movs	r2, #0
                hasMoreFrames = stream.hasMoreFramesAfterNext;
 8002f50:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
                stream.currentBuffer = stream.nextBuffer;
 8002f54:	62a3      	str	r3, [r4, #40]	; 0x28
                widget.invalidate();
 8002f56:	4630      	mov	r0, r6
                stream.nextBuffer = 0;
 8002f58:	62e2      	str	r2, [r4, #44]	; 0x2c
                stream.frameNumberShown = stream.frameNumberNext;
 8002f5a:	68e2      	ldr	r2, [r4, #12]
 8002f5c:	6122      	str	r2, [r4, #16]
                stream.frameCount++;
 8002f5e:	68a2      	ldr	r2, [r4, #8]
 8002f60:	3201      	adds	r2, #1
 8002f62:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002f64:	6333      	str	r3, [r6, #48]	; 0x30
                widget.invalidate();
 8002f66:	6833      	ldr	r3, [r6, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	4798      	blx	r3
                if (!hasMoreFrames && !stream.repeat)
 8002f6c:	2d00      	cmp	r5, #0
 8002f6e:	d1ce      	bne.n	8002f0e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5a>
 8002f70:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1cb      	bne.n	8002f10 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
                    stream.isPlaying = false;
 8002f78:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8002f7c:	e7c8      	b.n	8002f10 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
        bool hasMoreFrames = true;
 8002f7e:	2501      	movs	r5, #1
 8002f80:	e7c9      	b.n	8002f16 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x62>
 8002f82:	bf00      	nop
 8002f84:	0802c5e0 	.word	0x0802c5e0
 8002f88:	0802cec2 	.word	0x0802cec2
 8002f8c:	0802c781 	.word	0x0802c781
 8002f90:	200153a0 	.word	0x200153a0

08002f94 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002f96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fa0:	609a      	str	r2, [r3, #8]
}
 8002fa2:	4770      	bx	lr
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa8:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002faa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002fb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002fc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fc6:	f3bf 8f6f 	isb	sy
}
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100

08002fd0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002fd0:	b538      	push	{r3, r4, r5, lr}
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002fd2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002fd6:	bb3b      	cbnz	r3, 8003028 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x58>
        streams[handle].isActive = true;
 8002fd8:	2201      	movs	r2, #1
            {
                // Reset stream parameters
                streams[i] = Stream();
 8002fda:	6083      	str	r3, [r0, #8]
 8002fdc:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 8002fde:	6382      	str	r2, [r0, #56]	; 0x38
                streams[i] = Stream();
 8002fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fe4:	6143      	str	r3, [r0, #20]
 8002fe6:	8782      	strh	r2, [r0, #60]	; 0x3c
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, uint16_t width, uint16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8002fe8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002fec:	6183      	str	r3, [r0, #24]
 8002fee:	61c3      	str	r3, [r0, #28]
 8002ff0:	6203      	str	r3, [r0, #32]
 8002ff2:	6243      	str	r3, [r0, #36]	; 0x24
 8002ff4:	6283      	str	r3, [r0, #40]	; 0x28
 8002ff6:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002ff8:	6303      	str	r3, [r0, #48]	; 0x30
 8002ffa:	6343      	str	r3, [r0, #52]	; 0x34
 8002ffc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003000:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8003002:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 8003006:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 800300a:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 800300c:	630b      	str	r3, [r1, #48]	; 0x30
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800300e:	6c82      	ldr	r2, [r0, #72]	; 0x48
        streams[handle].frameNumberShown = 0;
 8003010:	6103      	str	r3, [r0, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003012:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 8003016:	e9d0 1510 	ldrd	r1, r5, [r0, #64]	; 0x40
 800301a:	4429      	add	r1, r5
 800301c:	428c      	cmp	r4, r1
 800301e:	d90a      	bls.n	8003036 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x66>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 8003022:	2147      	movs	r1, #71	; 0x47
 8003024:	4a08      	ldr	r2, [pc, #32]	; (8003048 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003026:	e003      	b.n	8003030 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x60>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 800302a:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003030:	4808      	ldr	r0, [pc, #32]	; (8003054 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8003032:	f027 fb0f 	bl	802a654 <__assert_func>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 8003036:	6302      	str	r2, [r0, #48]	; 0x30
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003038:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 800303c:	6484      	str	r4, [r0, #72]	; 0x48
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 800303e:	6342      	str	r2, [r0, #52]	; 0x34
    }
 8003040:	4618      	mov	r0, r3
 8003042:	bd38      	pop	{r3, r4, r5, pc}
 8003044:	0802d220 	.word	0x0802d220
 8003048:	0802d260 	.word	0x0802d260
 800304c:	0802d066 	.word	0x0802d066
 8003050:	0802d096 	.word	0x0802d096
 8003054:	0802c781 	.word	0x0802c781

08003058 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003058:	b510      	push	{r4, lr}
        return instance;
 800305a:	4c14      	ldr	r4, [pc, #80]	; (80030ac <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	b323      	cbz	r3, 80030aa <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <HAL_LTDC_LineEventCallback+0x58>)
 8003062:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <HAL_LTDC_LineEventCallback+0x5c>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	8811      	ldrh	r1, [r2, #0]
 8003068:	428b      	cmp	r3, r1
 800306a:	d113      	bne.n	8003094 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_LTDC_LineEventCallback+0x60>)
 800306e:	8819      	ldrh	r1, [r3, #0]
 8003070:	f002 fed6 	bl	8005e20 <HAL_LTDC_ProgramLineEvent>
 8003074:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8003076:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800307a:	3301      	adds	r3, #1
 800307c:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8003080:	f7fe ff08 	bl	8001e94 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003084:	6820      	ldr	r0, [r4, #0]
 8003086:	f015 fcbb 	bl	8018a00 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800308a:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 800308c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8003090:	f7fe bd4a 	b.w	8001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003094:	f002 fec4 	bl	8005e20 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8003098:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800309a:	6803      	ldr	r3, [r0, #0]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 80030a0:	2000      	movs	r0, #0
    }
 80030a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80030a6:	f7fe bd67 	b.w	8001b78 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80030aa:	bd10      	pop	{r4, pc}
 80030ac:	200153a0 	.word	0x200153a0
 80030b0:	40016800 	.word	0x40016800
 80030b4:	20001834 	.word	0x20001834
 80030b8:	20001832 	.word	0x20001832

080030bc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 80030bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80030c0:	4604      	mov	r4, r0
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 80030c2:	f44f 7870 	mov.w	r8, #960	; 0x3c0
    uint32_t getStreamIndexToDecode()
    {
        for (uint32_t i = 0; i < no_streams; i++)
        {
            Stream& stream = streams[i];
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 80030c6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
            MUTEX_LOCK(mutexBuffers);
 80030ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 80030ce:	b91b      	cbnz	r3, 80030d8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x1c>
                SEM_WAIT(semDecode);
 80030d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80030d2:	f004 fb5d 	bl	8007790 <osSemaphoreAcquire>
                continue;
 80030d6:	e7f6      	b.n	80030c6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
            MUTEX_LOCK(mutexBuffers);
 80030d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030da:	f004 faa9 	bl	8007630 <osMutexAcquire>
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 80030de:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80030e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if (stream.seek_to_frame > 0)
 80030e2:	6a26      	ldr	r6, [r4, #32]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 80030e4:	42bb      	cmp	r3, r7
            MJPEGDecoder* const decoder = mjpegDecoders[stream_index];
 80030e6:	6865      	ldr	r5, [r4, #4]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 80030e8:	bf08      	it	eq
 80030ea:	6b67      	ldreq	r7, [r4, #52]	; 0x34
            if (stream.seek_to_frame > 0)
 80030ec:	b336      	cbz	r6, 800313c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                decoder->gotoFrame(stream.seek_to_frame);
 80030ee:	682b      	ldr	r3, [r5, #0]
 80030f0:	4631      	mov	r1, r6
 80030f2:	4628      	mov	r0, r5
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	4798      	blx	r3
                stream.seek_to_frame = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	6223      	str	r3, [r4, #32]
                stream.cancelDecoding = false;
 80030fc:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003102:	f004 fac5 	bl	8007690 <osMutexRelease>
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800310c:	4639      	mov	r1, r7
 800310e:	f8cd 8000 	str.w	r8, [sp]
 8003112:	4628      	mov	r0, r5
 8003114:	695e      	ldr	r6, [r3, #20]
 8003116:	f44f 7388 	mov.w	r3, #272	; 0x110
 800311a:	47b0      	blx	r6
            MUTEX_LOCK(mutexBuffers);
 800311c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003120:	4606      	mov	r6, r0
            MUTEX_LOCK(mutexBuffers);
 8003122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003124:	f004 fa84 	bl	8007630 <osMutexAcquire>
            if (stream.cancelDecoding)
 8003128:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800312c:	b1c3      	cbz	r3, 8003160 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                stream.cancelDecoding = false;
 800312e:	2300      	movs	r3, #0
 8003130:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003134:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003136:	f004 faab 	bl	8007690 <osMutexRelease>
 800313a:	e7c4      	b.n	80030c6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                if (stream.skip_frames > 0)
 800313c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0de      	beq.n	8003100 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                    decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003142:	682b      	ldr	r3, [r5, #0]
 8003144:	4628      	mov	r0, r5
 8003146:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 800314a:	4798      	blx	r3
 800314c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800314e:	4401      	add	r1, r0
 8003150:	4628      	mov	r0, r5
 8003152:	47c8      	blx	r9
                    stream.frameCount += stream.skip_frames;
 8003154:	68a3      	ldr	r3, [r4, #8]
 8003156:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    stream.skip_frames = 0;
 8003158:	6266      	str	r6, [r4, #36]	; 0x24
                    stream.frameCount += stream.skip_frames;
 800315a:	4413      	add	r3, r2
 800315c:	60a3      	str	r3, [r4, #8]
 800315e:	e7cf      	b.n	8003100 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                stream.nextBuffer = decodeBuffer;
 8003160:	62e7      	str	r7, [r4, #44]	; 0x2c
                if (hasMoreFrames)
 8003162:	b15e      	cbz	r6, 800317c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	4628      	mov	r0, r5
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	4798      	blx	r3
 800316c:	3801      	subs	r0, #1
 800316e:	60e0      	str	r0, [r4, #12]
                stream.doDecodeNewFrame = false;
 8003170:	2300      	movs	r3, #0
                stream.hasMoreFramesAfterNext = hasMoreFrames;
 8003172:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
                stream.doDecodeNewFrame = false;
 8003176:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 800317a:	e7db      	b.n	8003134 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    stream.frameNumberNext = 1;
 800317c:	2301      	movs	r3, #1
 800317e:	60e3      	str	r3, [r4, #12]
 8003180:	e7f6      	b.n	8003170 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb4>
	...

08003184 <videoTaskFunc>:
    videoController.decoderTaskEntry();
 8003184:	4801      	ldr	r0, [pc, #4]	; (800318c <videoTaskFunc+0x8>)
{
 8003186:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003188:	f7ff ff98 	bl	80030bc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 800318c:	20002000 	.word	0x20002000

08003190 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 8003190:	6803      	ldr	r3, [r0, #0]
 8003192:	2204      	movs	r2, #4
    void clearState(const Handle handle)
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 8003198:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800319a:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 800319c:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 800319e:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 80031a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031a6:	f004 fa43 	bl	8007630 <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 80031aa:	2138      	movs	r1, #56	; 0x38
 80031ac:	fb01 4305 	mla	r3, r1, r5, r4
 80031b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b2:	b10a      	cbz	r2, 80031b8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 80031b4:	2200      	movs	r2, #0
 80031b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80031b8:	fb01 4505 	mla	r5, r1, r5, r4
        }
        stream.cancelDecoding = true;
 80031bc:	2301      	movs	r3, #1
 80031be:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
        stream.isPlaying = false;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

        MUTEX_UNLOCK(mutexBuffers);
 80031c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 80031ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 80031ce:	f004 ba5f 	b.w	8007690 <osMutexRelease>

080031d2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    void setVideoData(const Handle handle, VideoDataReader& reader)
 80031d2:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 80031d4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    void setVideoData(const Handle handle, VideoDataReader& reader)
 80031d8:	4604      	mov	r4, r0
 80031da:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 80031dc:	4611      	mov	r1, r2
 80031de:	6858      	ldr	r0, [r3, #4]
 80031e0:	6803      	ldr	r3, [r0, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4798      	blx	r3
        clearState(handle);
 80031e6:	4629      	mov	r1, r5
 80031e8:	4620      	mov	r0, r4
 80031ea:	f7ff ffd1 	bl	8003190 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 80031ee:	bd38      	pop	{r3, r4, r5, pc}

080031f0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	460d      	mov	r5, r1
 80031f4:	4611      	mov	r1, r2
 80031f6:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 80031f8:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80031fc:	6850      	ldr	r0, [r2, #4]
 80031fe:	6802      	ldr	r2, [r0, #0]
 8003200:	6896      	ldr	r6, [r2, #8]
 8003202:	461a      	mov	r2, r3
 8003204:	47b0      	blx	r6
        clearState(handle);
 8003206:	4629      	mov	r1, r5
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff ffc1 	bl	8003190 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 800320e:	bd70      	pop	{r4, r5, r6, pc}

08003210 <_GLOBAL__sub_I_lineBuffer>:
}
 8003210:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 8003212:	4916      	ldr	r1, [pc, #88]	; (800326c <_GLOBAL__sub_I_lineBuffer+0x5c>)
          semDecode(0), mutexBuffers(0)
 8003214:	2500      	movs	r5, #0
 8003216:	4816      	ldr	r0, [pc, #88]	; (8003270 <_GLOBAL__sub_I_lineBuffer+0x60>)
 8003218:	f7ff f87e 	bl	8002318 <_ZN20SoftwareMJPEGDecoderC1EPh>
 800321c:	4c15      	ldr	r4, [pc, #84]	; (8003274 <_GLOBAL__sub_I_lineBuffer+0x64>)
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <_GLOBAL__sub_I_lineBuffer+0x68>)
 8003220:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 8003222:	462a      	mov	r2, r5
 8003224:	4629      	mov	r1, r5
          semDecode(0), mutexBuffers(0)
 8003226:	6023      	str	r3, [r4, #0]
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003228:	f44f 7380 	mov.w	r3, #256	; 0x100
          semDecode(0), mutexBuffers(0)
 800322c:	64a5      	str	r5, [r4, #72]	; 0x48
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 800322e:	87a3      	strh	r3, [r4, #60]	; 0x3c
          semDecode(0), mutexBuffers(0)
 8003230:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 8003234:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          semDecode(0), mutexBuffers(0)
 8003238:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 800323c:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 8003240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003244:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003248:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800324c:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8003250:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 8003254:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        semDecode = SEM_CREATE(); // Binary semaphore
 800325c:	f004 fa42 	bl	80076e4 <osSemaphoreNew>
 8003260:	6520      	str	r0, [r4, #80]	; 0x50
        mutexBuffers = MUTEX_CREATE();
 8003262:	4628      	mov	r0, r5
 8003264:	f004 f9a2 	bl	80075ac <osMutexNew>
 8003268:	6560      	str	r0, [r4, #84]	; 0x54
}
 800326a:	bd38      	pop	{r3, r4, r5, pc}
 800326c:	20001838 	.word	0x20001838
 8003270:	20001fb8 	.word	0x20001fb8
 8003274:	20002000 	.word	0x20002000
 8003278:	0802d410 	.word	0x0802d410

0800327c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800327c:	4770      	bx	lr

0800327e <_ZN23ApplicationFontProviderD0Ev>:
 800327e:	b510      	push	{r4, lr}
 8003280:	4604      	mov	r4, r0
 8003282:	2104      	movs	r1, #4
 8003284:	f027 f9b7 	bl	802a5f6 <_ZdlPvj>
 8003288:	4620      	mov	r0, r4
 800328a:	bd10      	pop	{r4, pc}

0800328c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 800328c:	2901      	cmp	r1, #1
{
 800328e:	b508      	push	{r3, lr}
    switch (typography)
 8003290:	d006      	beq.n	80032a0 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003292:	2902      	cmp	r1, #2
 8003294:	d008      	beq.n	80032a8 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003296:	b959      	cbnz	r1, 80032b0 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003298:	f001 f918 	bl	80044cc <_ZN17TypedTextDatabase8getFontsEv>
 800329c:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800329e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80032a0:	f001 f914 	bl	80044cc <_ZN17TypedTextDatabase8getFontsEv>
 80032a4:	6840      	ldr	r0, [r0, #4]
 80032a6:	e7fa      	b.n	800329e <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80032a8:	f001 f910 	bl	80044cc <_ZN17TypedTextDatabase8getFontsEv>
 80032ac:	6880      	ldr	r0, [r0, #8]
 80032ae:	e7f6      	b.n	800329e <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80032b0:	2000      	movs	r0, #0
 80032b2:	e7f4      	b.n	800329e <_ZN23ApplicationFontProvider7getFontEt+0x12>

080032b4 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80032b4:	4800      	ldr	r0, [pc, #0]	; (80032b8 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80032b6:	4770      	bx	lr
 80032b8:	0802d458 	.word	0x0802d458

080032bc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80032bc:	200e      	movs	r0, #14
 80032be:	4770      	bx	lr

080032c0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80032c0:	b513      	push	{r0, r1, r4, lr}
 80032c2:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80032c4:	b151      	cbz	r1, 80032dc <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80032c6:	6803      	ldr	r3, [r0, #0]
 80032c8:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80032ca:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80032cc:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80032d0:	689c      	ldr	r4, [r3, #8]
 80032d2:	f10d 0303 	add.w	r3, sp, #3
 80032d6:	47a0      	blx	r4
        return glyph;
    }
 80032d8:	b002      	add	sp, #8
 80032da:	bd10      	pop	{r4, pc}
            return 0;
 80032dc:	4608      	mov	r0, r1
 80032de:	e7fb      	b.n	80032d8 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080032e0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80032e0:	8940      	ldrh	r0, [r0, #10]
 80032e2:	4770      	bx	lr

080032e4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80032e4:	8980      	ldrh	r0, [r0, #12]
 80032e6:	4770      	bx	lr

080032e8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 80032e8:	8880      	ldrh	r0, [r0, #4]
 80032ea:	4770      	bx	lr

080032ec <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 80032ec:	7983      	ldrb	r3, [r0, #6]
 80032ee:	8880      	ldrh	r0, [r0, #4]
 80032f0:	4418      	add	r0, r3
    }
 80032f2:	b280      	uxth	r0, r0
 80032f4:	4770      	bx	lr

080032f6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80032f6:	79c0      	ldrb	r0, [r0, #7]
    }
 80032f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80032fc:	4770      	bx	lr

080032fe <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80032fe:	79c0      	ldrb	r0, [r0, #7]
    }
 8003300:	09c0      	lsrs	r0, r0, #7
 8003302:	4770      	bx	lr

08003304 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003304:	4770      	bx	lr

08003306 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003306:	b510      	push	{r4, lr}
 8003308:	4604      	mov	r4, r0
    }
 800330a:	2108      	movs	r1, #8
 800330c:	f027 f973 	bl	802a5f6 <_ZdlPvj>
 8003310:	4620      	mov	r0, r4
 8003312:	bd10      	pop	{r4, pc}

08003314 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003314:	4770      	bx	lr

08003316 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8003316:	4770      	bx	lr

08003318 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003318:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 800331c:	6808      	ldr	r0, [r1, #0]
 800331e:	6849      	ldr	r1, [r1, #4]
 8003320:	c303      	stmia	r3!, {r0, r1}
    }
 8003322:	4770      	bx	lr

08003324 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003324:	4770      	bx	lr

08003326 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003326:	4770      	bx	lr

08003328 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003328:	6041      	str	r1, [r0, #4]
    }
 800332a:	4770      	bx	lr

0800332c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800332c:	4770      	bx	lr
	...

08003330 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003332:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003336:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 800333a:	2300      	movs	r3, #0
 800333c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003340:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003344:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	08003541 	.word	0x08003541

08003350 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003350:	2301      	movs	r3, #1
 8003352:	7203      	strb	r3, [r0, #8]
    }
 8003354:	4770      	bx	lr

08003356 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003356:	4770      	bx	lr

08003358 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003358:	4770      	bx	lr

0800335a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800335a:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 800335c:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 800335e:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 8003360:	68c2      	ldr	r2, [r0, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	1054      	asrs	r4, r2, #1
 8003366:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800336a:	07d2      	lsls	r2, r2, #31
 800336c:	bf48      	it	mi
 800336e:	590a      	ldrmi	r2, [r1, r4]
    }
 8003370:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8003374:	bf48      	it	mi
 8003376:	58d3      	ldrmi	r3, [r2, r3]
 8003378:	4718      	bx	r3

0800337a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800337a:	6843      	ldr	r3, [r0, #4]
 800337c:	b12b      	cbz	r3, 800338a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 800337e:	6883      	ldr	r3, [r0, #8]
 8003380:	b92b      	cbnz	r3, 800338e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003382:	68c0      	ldr	r0, [r0, #12]
 8003384:	f000 0001 	and.w	r0, r0, #1
 8003388:	4770      	bx	lr
 800338a:	4618      	mov	r0, r3
 800338c:	4770      	bx	lr
 800338e:	2001      	movs	r0, #1
    }
 8003390:	4770      	bx	lr

08003392 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003392:	b510      	push	{r4, lr}
 8003394:	4604      	mov	r4, r0
 8003396:	210c      	movs	r1, #12
 8003398:	f027 f92d 	bl	802a5f6 <_ZdlPvj>
 800339c:	4620      	mov	r0, r4
 800339e:	bd10      	pop	{r4, pc}

080033a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80033a0:	b510      	push	{r4, lr}
 80033a2:	4604      	mov	r4, r0
 80033a4:	2110      	movs	r1, #16
 80033a6:	f027 f926 	bl	802a5f6 <_ZdlPvj>
 80033aa:	4620      	mov	r0, r4
 80033ac:	bd10      	pop	{r4, pc}

080033ae <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80033ae:	b510      	push	{r4, lr}
 80033b0:	4604      	mov	r4, r0
 80033b2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80033b6:	f027 f91e 	bl	802a5f6 <_ZdlPvj>
 80033ba:	4620      	mov	r0, r4
 80033bc:	bd10      	pop	{r4, pc}

080033be <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80033be:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80033c0:	f018 f9c8 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80033c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80033c8:	f018 bdd4 	b.w	801bf74 <_ZN8touchgfx11Application10invalidateEv>

080033cc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80033cc:	b510      	push	{r4, lr}
 80033ce:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80033d0:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 80033d4:	b158      	cbz	r0, 80033ee <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80033d6:	6803      	ldr	r3, [r0, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	4798      	blx	r3
 80033dc:	b138      	cbz	r0, 80033ee <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80033de:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80033e2:	6803      	ldr	r3, [r0, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 80033ee:	bd10      	pop	{r4, pc}

080033f0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 80033f0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80033f4:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 80033f8:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80033fa:	68a8      	ldr	r0, [r5, #8]
 80033fc:	6803      	ldr	r3, [r0, #0]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4798      	blx	r3
 8003402:	f5b0 7f4a 	cmp.w	r0, #808	; 0x328
 8003406:	d205      	bcs.n	8003414 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>
 8003408:	4b45      	ldr	r3, [pc, #276]	; (8003520 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 800340a:	21a3      	movs	r1, #163	; 0xa3
 800340c:	4a45      	ldr	r2, [pc, #276]	; (8003524 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800340e:	4846      	ldr	r0, [pc, #280]	; (8003528 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 8003410:	f027 f920 	bl	802a654 <__assert_func>
 8003414:	6868      	ldr	r0, [r5, #4]
 8003416:	6803      	ldr	r3, [r0, #0]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4798      	blx	r3
 800341c:	280f      	cmp	r0, #15
 800341e:	d803      	bhi.n	8003428 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x38>
 8003420:	4b42      	ldr	r3, [pc, #264]	; (800352c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 8003422:	21a4      	movs	r1, #164	; 0xa4
 8003424:	4a3f      	ldr	r2, [pc, #252]	; (8003524 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 8003426:	e7f2      	b.n	800340e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003428:	68e8      	ldr	r0, [r5, #12]
 800342a:	6803      	ldr	r3, [r0, #0]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4798      	blx	r3
 8003430:	280b      	cmp	r0, #11
 8003432:	d803      	bhi.n	800343c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4c>
 8003434:	4b3e      	ldr	r3, [pc, #248]	; (8003530 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 8003436:	21a5      	movs	r1, #165	; 0xa5
 8003438:	4a3a      	ldr	r2, [pc, #232]	; (8003524 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 800343a:	e7e8      	b.n	800340e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 800343c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003538 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 8003440:	f018 f988 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
 8003444:	f018 f9d4 	bl	801b7f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003448:	f8d9 0000 	ldr.w	r0, [r9]
 800344c:	b110      	cbz	r0, 8003454 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 800344e:	6803      	ldr	r3, [r0, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4798      	blx	r3
    if (*currentTrans)
 8003454:	f8d9 0000 	ldr.w	r0, [r9]
 8003458:	b110      	cbz	r0, 8003460 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 800345a:	6803      	ldr	r3, [r0, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4798      	blx	r3
    if (*currentScreen)
 8003460:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800353c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x14c>
 8003464:	f8d8 0000 	ldr.w	r0, [r8]
 8003468:	b110      	cbz	r0, 8003470 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 800346a:	6803      	ldr	r3, [r0, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	4798      	blx	r3
    if (*currentPresenter)
 8003470:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003474:	b110      	cbz	r0, 800347c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8003476:	6803      	ldr	r3, [r0, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4798      	blx	r3
    if (*currentScreen)
 800347c:	f8d8 0000 	ldr.w	r0, [r8]
 8003480:	b110      	cbz	r0, 8003488 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8003482:	6803      	ldr	r3, [r0, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4798      	blx	r3
    if (*currentPresenter)
 8003488:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800348c:	b110      	cbz	r0, 8003494 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 800348e:	6803      	ldr	r3, [r0, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003494:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003496:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003498:	f04f 0b00 	mov.w	fp, #0
 800349c:	6803      	ldr	r3, [r0, #0]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	4798      	blx	r3
 80034a2:	4b24      	ldr	r3, [pc, #144]	; (8003534 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>)
 80034a4:	4604      	mov	r4, r0
 80034a6:	f8c0 b004 	str.w	fp, [r0, #4]
 80034aa:	6003      	str	r3, [r0, #0]
 80034ac:	4659      	mov	r1, fp
 80034ae:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80034b2:	68a8      	ldr	r0, [r5, #8]
 80034b4:	6803      	ldr	r3, [r0, #0]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	4798      	blx	r3
 80034ba:	4606      	mov	r6, r0
 80034bc:	f001 f89c 	bl	80045f8 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80034c0:	6868      	ldr	r0, [r5, #4]
 80034c2:	4659      	mov	r1, fp
 80034c4:	6803      	ldr	r3, [r0, #0]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	4798      	blx	r3
 80034ca:	4605      	mov	r5, r0
 80034cc:	4631      	mov	r1, r6
 80034ce:	f001 f881 	bl	80045d4 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 80034d2:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80034d6:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 80034da:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80034de:	b1e5      	cbz	r5, 800351a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12a>
 80034e0:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80034e2:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80034e6:	4630      	mov	r0, r6
 80034e8:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80034ea:	f8c5 a008 	str.w	sl, [r5, #8]
 80034ee:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 80034f0:	63f5      	str	r5, [r6, #60]	; 0x3c
 80034f2:	4798      	blx	r3
    newPresenter->activate();
 80034f4:	682b      	ldr	r3, [r5, #0]
 80034f6:	4628      	mov	r0, r5
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80034fc:	4621      	mov	r1, r4
 80034fe:	4630      	mov	r0, r6
 8003500:	f019 fd4c 	bl	801cf9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	4620      	mov	r0, r4
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	4798      	blx	r3
    newTransition->invalidate();
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	4620      	mov	r0, r4
 8003510:	695b      	ldr	r3, [r3, #20]
}
 8003512:	b001      	add	sp, #4
 8003514:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003518:	4718      	bx	r3
    model->bind(newPresenter);
 800351a:	462b      	mov	r3, r5
 800351c:	e7e1      	b.n	80034e2 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xf2>
 800351e:	bf00      	nop
 8003520:	0802d580 	.word	0x0802d580
 8003524:	0802d60e 	.word	0x0802d60e
 8003528:	0802d712 	.word	0x0802d712
 800352c:	0802d759 	.word	0x0802d759
 8003530:	0802d7fc 	.word	0x0802d7fc
 8003534:	0802da10 	.word	0x0802da10
 8003538:	200153e0 	.word	0x200153e0
 800353c:	200153dc 	.word	0x200153dc

08003540 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 8003540:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003544:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8003548:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800354a:	68a8      	ldr	r0, [r5, #8]
 800354c:	6803      	ldr	r3, [r0, #0]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4798      	blx	r3
 8003552:	f240 433b 	movw	r3, #1083	; 0x43b
 8003556:	4298      	cmp	r0, r3
 8003558:	d805      	bhi.n	8003566 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 800355a:	4b45      	ldr	r3, [pc, #276]	; (8003670 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800355c:	21a3      	movs	r1, #163	; 0xa3
 800355e:	4a45      	ldr	r2, [pc, #276]	; (8003674 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003560:	4845      	ldr	r0, [pc, #276]	; (8003678 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003562:	f027 f877 	bl	802a654 <__assert_func>
 8003566:	6868      	ldr	r0, [r5, #4]
 8003568:	6803      	ldr	r3, [r0, #0]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4798      	blx	r3
 800356e:	280f      	cmp	r0, #15
 8003570:	d803      	bhi.n	800357a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8003572:	4b42      	ldr	r3, [pc, #264]	; (800367c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003574:	21a4      	movs	r1, #164	; 0xa4
 8003576:	4a3f      	ldr	r2, [pc, #252]	; (8003674 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003578:	e7f2      	b.n	8003560 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800357a:	68e8      	ldr	r0, [r5, #12]
 800357c:	6803      	ldr	r3, [r0, #0]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4798      	blx	r3
 8003582:	280b      	cmp	r0, #11
 8003584:	d803      	bhi.n	800358e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 8003586:	4b3e      	ldr	r3, [pc, #248]	; (8003680 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003588:	21a5      	movs	r1, #165	; 0xa5
 800358a:	4a3a      	ldr	r2, [pc, #232]	; (8003674 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 800358c:	e7e8      	b.n	8003560 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 800358e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003688 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 8003592:	f018 f8df 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
 8003596:	f018 f92b 	bl	801b7f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800359a:	f8d9 0000 	ldr.w	r0, [r9]
 800359e:	b110      	cbz	r0, 80035a6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80035a0:	6803      	ldr	r3, [r0, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4798      	blx	r3
    if (*currentTrans)
 80035a6:	f8d9 0000 	ldr.w	r0, [r9]
 80035aa:	b110      	cbz	r0, 80035b2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80035ac:	6803      	ldr	r3, [r0, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4798      	blx	r3
    if (*currentScreen)
 80035b2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800368c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
 80035b6:	f8d8 0000 	ldr.w	r0, [r8]
 80035ba:	b110      	cbz	r0, 80035c2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80035bc:	6803      	ldr	r3, [r0, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	4798      	blx	r3
    if (*currentPresenter)
 80035c2:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80035c6:	b110      	cbz	r0, 80035ce <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80035c8:	6803      	ldr	r3, [r0, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4798      	blx	r3
    if (*currentScreen)
 80035ce:	f8d8 0000 	ldr.w	r0, [r8]
 80035d2:	b110      	cbz	r0, 80035da <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80035d4:	6803      	ldr	r3, [r0, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4798      	blx	r3
    if (*currentPresenter)
 80035da:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80035de:	b110      	cbz	r0, 80035e6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80035e0:	6803      	ldr	r3, [r0, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80035e6:	68e8      	ldr	r0, [r5, #12]
 80035e8:	2100      	movs	r1, #0
 80035ea:	f04f 0b00 	mov.w	fp, #0
 80035ee:	6803      	ldr	r3, [r0, #0]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	4798      	blx	r3
 80035f4:	4b23      	ldr	r3, [pc, #140]	; (8003684 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 80035f6:	4604      	mov	r4, r0
 80035f8:	f8c0 b004 	str.w	fp, [r0, #4]
 80035fc:	6003      	str	r3, [r0, #0]
 80035fe:	4659      	mov	r1, fp
 8003600:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003604:	68a8      	ldr	r0, [r5, #8]
 8003606:	6803      	ldr	r3, [r0, #0]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	4798      	blx	r3
 800360c:	4606      	mov	r6, r0
 800360e:	f000 ffb1 	bl	8004574 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003612:	6868      	ldr	r0, [r5, #4]
 8003614:	4659      	mov	r1, fp
 8003616:	6803      	ldr	r3, [r0, #0]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	4798      	blx	r3
 800361c:	4605      	mov	r5, r0
 800361e:	4631      	mov	r1, r6
 8003620:	f000 ff96 	bl	8004550 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8003624:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003628:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 800362c:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8003630:	b1e5      	cbz	r5, 800366c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>
 8003632:	1d2b      	adds	r3, r5, #4
 8003634:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003638:	4630      	mov	r0, r6
 800363a:	6833      	ldr	r3, [r6, #0]
 800363c:	f8c5 a008 	str.w	sl, [r5, #8]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003644:	4798      	blx	r3
    newPresenter->activate();
 8003646:	682b      	ldr	r3, [r5, #0]
 8003648:	4628      	mov	r0, r5
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800364e:	4621      	mov	r1, r4
 8003650:	4630      	mov	r0, r6
 8003652:	f019 fca3 	bl	801cf9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	4620      	mov	r0, r4
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	4798      	blx	r3
    newTransition->invalidate();
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	4620      	mov	r0, r4
 8003662:	695b      	ldr	r3, [r3, #20]
}
 8003664:	b001      	add	sp, #4
 8003666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366a:	4718      	bx	r3
    model->bind(newPresenter);
 800366c:	462b      	mov	r3, r5
 800366e:	e7e1      	b.n	8003634 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf4>
 8003670:	0802d580 	.word	0x0802d580
 8003674:	0802d89f 	.word	0x0802d89f
 8003678:	0802d712 	.word	0x0802d712
 800367c:	0802d759 	.word	0x0802d759
 8003680:	0802d7fc 	.word	0x0802d7fc
 8003684:	0802da10 	.word	0x0802da10
 8003688:	200153e0 	.word	0x200153e0
 800368c:	200153dc 	.word	0x200153dc

08003690 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	4604      	mov	r4, r0
 8003694:	4617      	mov	r7, r2
 8003696:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003698:	f018 f8c6 	bl	801b828 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 800369e:	2500      	movs	r5, #0
        instance = this;
 80036a0:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80036a2:	4629      	mov	r1, r5
      model(m)
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80036a6:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 80036aa:	4e0f      	ldr	r6, [pc, #60]	; (80036e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80036b2:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 80036b6:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80036ba:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80036bc:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 feb5 	bl	8004434 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80036ca:	6833      	ldr	r3, [r6, #0]
 80036cc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80036d0:	b10a      	cbz	r2, 80036d6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80036d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80036d4:	b900      	cbnz	r0, 80036d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80036d6:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80036d8:	f01f fd6d 	bl	80231b6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80036dc:	4620      	mov	r0, r4
 80036de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036e0:	200153ec 	.word	0x200153ec
 80036e4:	0802d9c4 	.word	0x0802d9c4
 80036e8:	200153a0 	.word	0x200153a0
 80036ec:	0802d9ac 	.word	0x0802d9ac

080036f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80036f2:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80036f6:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80036fa:	2300      	movs	r3, #0
 80036fc:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 8003700:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003704:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	08003541 	.word	0x08003541

08003710 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8003712:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003716:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 800371a:	2300      	movs	r3, #0
 800371c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 8003720:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003724:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	080033f1 	.word	0x080033f1

08003730 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003730:	6a00      	ldr	r0, [r0, #32]
 8003732:	4770      	bx	lr

08003734 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003734:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003736:	4770      	bx	lr

08003738 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003738:	4770      	bx	lr

0800373a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800373a:	888b      	ldrh	r3, [r1, #4]
 800373c:	6980      	ldr	r0, [r0, #24]
 800373e:	0adb      	lsrs	r3, r3, #11
 8003740:	680a      	ldr	r2, [r1, #0]
 8003742:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003746:	4410      	add	r0, r2
 8003748:	4770      	bx	lr

0800374a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800374a:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 800374c:	b1c2      	cbz	r2, 8003780 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800374e:	7b13      	ldrb	r3, [r2, #12]
 8003750:	b1b3      	cbz	r3, 8003780 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003752:	7b54      	ldrb	r4, [r2, #13]
 8003754:	7ad2      	ldrb	r2, [r2, #11]
 8003756:	0224      	lsls	r4, r4, #8
 8003758:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800375c:	4314      	orrs	r4, r2
 800375e:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003760:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003762:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003766:	8813      	ldrh	r3, [r2, #0]
 8003768:	428b      	cmp	r3, r1
 800376a:	d102      	bne.n	8003772 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800376c:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8003770:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003772:	d805      	bhi.n	8003780 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003774:	3801      	subs	r0, #1
 8003776:	3204      	adds	r2, #4
 8003778:	b280      	uxth	r0, r0
 800377a:	2800      	cmp	r0, #0
 800377c:	d1f3      	bne.n	8003766 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800377e:	e7f7      	b.n	8003770 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003780:	2000      	movs	r0, #0
 8003782:	e7f5      	b.n	8003770 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003784 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003784:	b510      	push	{r4, lr}
 8003786:	4604      	mov	r4, r0
 8003788:	2128      	movs	r1, #40	; 0x28
 800378a:	f026 ff34 	bl	802a5f6 <_ZdlPvj>
 800378e:	4620      	mov	r0, r4
 8003790:	bd10      	pop	{r4, pc}
	...

08003794 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003794:	b530      	push	{r4, r5, lr}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800379a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800379e:	9506      	str	r5, [sp, #24]
 80037a0:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80037a4:	9505      	str	r5, [sp, #20]
 80037a6:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80037aa:	9504      	str	r5, [sp, #16]
 80037ac:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80037b0:	9503      	str	r5, [sp, #12]
 80037b2:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80037b6:	9502      	str	r5, [sp, #8]
 80037b8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80037bc:	9501      	str	r5, [sp, #4]
 80037be:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80037c2:	9500      	str	r5, [sp, #0]
 80037c4:	f019 f84a 	bl	801c85c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 80037ca:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80037d0:	61a3      	str	r3, [r4, #24]
 80037d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037d4:	61e3      	str	r3, [r4, #28]
 80037d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80037d8:	6223      	str	r3, [r4, #32]
 80037da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80037dc:	6263      	str	r3, [r4, #36]	; 0x24
}
 80037de:	b009      	add	sp, #36	; 0x24
 80037e0:	bd30      	pop	{r4, r5, pc}
 80037e2:	bf00      	nop
 80037e4:	0802da34 	.word	0x0802da34

080037e8 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80037e8:	2000      	movs	r0, #0
 80037ea:	4770      	bx	lr

080037ec <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80037ec:	8081      	strh	r1, [r0, #4]
    }
 80037ee:	4770      	bx	lr

080037f0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80037f0:	80c1      	strh	r1, [r0, #6]
    }
 80037f2:	4770      	bx	lr

080037f4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80037f4:	8101      	strh	r1, [r0, #8]
    }
 80037f6:	4770      	bx	lr

080037f8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80037f8:	8141      	strh	r1, [r0, #10]
    }
 80037fa:	4770      	bx	lr

080037fc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80037fc:	4770      	bx	lr

080037fe <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 80037fe:	4770      	bx	lr

08003800 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 8003800:	4770      	bx	lr

08003802 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 8003802:	4770      	bx	lr

08003804 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003804:	4770      	bx	lr

08003806 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003806:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003808:	88c4      	ldrh	r4, [r0, #6]
 800380a:	6803      	ldr	r3, [r0, #0]
 800380c:	1b12      	subs	r2, r2, r4
 800380e:	8884      	ldrh	r4, [r0, #4]
 8003810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003812:	1b09      	subs	r1, r1, r4
 8003814:	b212      	sxth	r2, r2
    }
 8003816:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800381a:	b209      	sxth	r1, r1
 800381c:	4718      	bx	r3

0800381e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800381e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003822:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003828:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800382e:	6010      	str	r0, [r2, #0]
    }
 8003830:	4770      	bx	lr

08003832 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003832:	4770      	bx	lr

08003834 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003834:	4770      	bx	lr

08003836 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003836:	4770      	bx	lr

08003838 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003838:	4770      	bx	lr

0800383a <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 800383a:	4770      	bx	lr

0800383c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800383c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003840:	b11a      	cbz	r2, 800384a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003842:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8003846:	b102      	cbz	r2, 800384a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003848:	6018      	str	r0, [r3, #0]
        }
    }
 800384a:	4770      	bx	lr

0800384c <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 800384c:	4770      	bx	lr

0800384e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800384e:	4770      	bx	lr

08003850 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003850:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003852:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003854:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003856:	68c2      	ldr	r2, [r0, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	1055      	asrs	r5, r2, #1
 800385c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003860:	07d2      	lsls	r2, r2, #31
 8003862:	bf48      	it	mi
 8003864:	5962      	ldrmi	r2, [r4, r5]
    }
 8003866:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003868:	bf48      	it	mi
 800386a:	58d3      	ldrmi	r3, [r2, r3]
 800386c:	4718      	bx	r3

0800386e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 800386e:	6843      	ldr	r3, [r0, #4]
 8003870:	b12b      	cbz	r3, 800387e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003872:	6883      	ldr	r3, [r0, #8]
 8003874:	b92b      	cbnz	r3, 8003882 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003876:	68c0      	ldr	r0, [r0, #12]
 8003878:	f000 0001 	and.w	r0, r0, #1
 800387c:	4770      	bx	lr
 800387e:	4618      	mov	r0, r3
 8003880:	4770      	bx	lr
 8003882:	2001      	movs	r0, #1
    }
 8003884:	4770      	bx	lr

08003886 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003886:	b510      	push	{r4, lr}
 8003888:	4604      	mov	r4, r0
 800388a:	2110      	movs	r1, #16
 800388c:	f026 feb3 	bl	802a5f6 <_ZdlPvj>
 8003890:	4620      	mov	r0, r4
 8003892:	bd10      	pop	{r4, pc}

08003894 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8003894:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003898:	b112      	cbz	r2, 80038a0 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 800389a:	6803      	ldr	r3, [r0, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	4718      	bx	r3
    }
 80038a0:	4770      	bx	lr

080038a2 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithIcon1)
 80038a2:	f500 707c 	add.w	r0, r0, #1008	; 0x3f0
 80038a6:	4288      	cmp	r0, r1
{
 80038a8:	b508      	push	{r3, lr}
    if (&src == &buttonWithIcon1)
 80038aa:	d105      	bne.n	80038b8 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~Screen1ViewBase() {}
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80038ac:	f017 ff52 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When buttonWithIcon1 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
    }
}
 80038b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenNoTransition();
 80038b4:	f7ff bf2c 	b.w	8003710 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
}
 80038b8:	bd08      	pop	{r3, pc}

080038ba <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80038ba:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4604      	mov	r4, r0
        setX(x);
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80038c2:	4615      	mov	r5, r2
        setX(x);
 80038c4:	4798      	blx	r3
        setY(y);
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	4620      	mov	r0, r4
 80038ca:	4629      	mov	r1, r5
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80038ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80038d2:	4718      	bx	r3

080038d4 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	4604      	mov	r4, r0
 80038d8:	461d      	mov	r5, r3
 80038da:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 80038de:	f7ff ffec 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	4629      	mov	r1, r5
 80038e6:	4620      	mov	r0, r4
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	4798      	blx	r3
        setHeight(height);
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	4631      	mov	r1, r6
 80038f0:	4620      	mov	r0, r4
 80038f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 80038f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80038f8:	4718      	bx	r3
	...

080038fc <_ZN8touchgfx9ContainerC1Ev>:
          visible(true)
 80038fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003900:	2200      	movs	r2, #0
 8003902:	8481      	strh	r1, [r0, #36]	; 0x24
class Container : public Drawable
{
public:
    Container()
        : Drawable(),
          firstChild(0)
 8003904:	4905      	ldr	r1, [pc, #20]	; (800391c <_ZN8touchgfx9ContainerC1Ev+0x20>)
 8003906:	6282      	str	r2, [r0, #40]	; 0x28
 8003908:	6001      	str	r1, [r0, #0]
 800390a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800390e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8003912:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003916:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 800391a:	4770      	bx	lr
 800391c:	080301b4 	.word	0x080301b4

08003920 <_ZN8touchgfx6WidgetC1Ev>:
 8003920:	2200      	movs	r2, #0
 8003922:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003926:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800392a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800392e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003936:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 8003938:	4a01      	ldr	r2, [pc, #4]	; (8003940 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800393a:	6002      	str	r2, [r0, #0]
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	0802da8c 	.word	0x0802da8c

08003944 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8003944:	b510      	push	{r4, lr}
 8003946:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8003948:	2226      	movs	r2, #38	; 0x26
 800394a:	2100      	movs	r1, #0
 800394c:	f026 ff12 	bl	802a774 <memset>
 8003950:	4620      	mov	r0, r4
 8003952:	f7ff ffe5 	bl	8003920 <_ZN8touchgfx6WidgetC1Ev>
 8003956:	4b04      	ldr	r3, [pc, #16]	; (8003968 <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 8003958:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 800395a:	6023      	str	r3, [r4, #0]
 800395c:	23ff      	movs	r3, #255	; 0xff
 800395e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 8003962:	2300      	movs	r3, #0
 8003964:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 8003966:	bd10      	pop	{r4, pc}
 8003968:	08030f88 	.word	0x08030f88

0800396c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800396c:	b510      	push	{r4, lr}
 800396e:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003970:	2226      	movs	r2, #38	; 0x26
 8003972:	2100      	movs	r1, #0
 8003974:	f026 fefe 	bl	802a774 <memset>
 8003978:	4620      	mov	r0, r4
 800397a:	f7ff ffd1 	bl	8003920 <_ZN8touchgfx6WidgetC1Ev>
 800397e:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8003980:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8003984:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003986:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 800398a:	62a3      	str	r3, [r4, #40]	; 0x28
 800398c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003990:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8003992:	2300      	movs	r3, #0
 8003994:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : x(x), y(y), width(width), height(height)
 8003998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800399c:	8723      	strh	r3, [r4, #56]	; 0x38
 800399e:	63e3      	str	r3, [r4, #60]	; 0x3c
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 80039a0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 80039a4:	bd10      	pop	{r4, pc}
 80039a6:	bf00      	nop
 80039a8:	08030ec8 	.word	0x08030ec8
 80039ac:	0802d578 	.word	0x0802d578

080039b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4604      	mov	r4, r0
 80039b4:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 80039b6:	2226      	movs	r2, #38	; 0x26
 80039b8:	2100      	movs	r1, #0
 80039ba:	f026 fedb 	bl	802a774 <memset>
 80039be:	4620      	mov	r0, r4
 80039c0:	f7ff ffae 	bl	8003920 <_ZN8touchgfx6WidgetC1Ev>
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bmp);
 80039c6:	4620      	mov	r0, r4
 80039c8:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 80039ca:	6023      	str	r3, [r4, #0]
 80039cc:	882b      	ldrh	r3, [r5, #0]
 80039ce:	84e3      	strh	r3, [r4, #38]	; 0x26
 80039d0:	23ff      	movs	r3, #255	; 0xff
 80039d2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        Image::setBitmap(bmp);
 80039d6:	f016 f94a 	bl	8019c6e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80039da:	4620      	mov	r0, r4
 80039dc:	bd38      	pop	{r3, r4, r5, pc}
 80039de:	bf00      	nop
 80039e0:	08031120 	.word	0x08031120

080039e4 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 80039e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e8:	4604      	mov	r4, r0
        : presenter(0)
 80039ea:	2500      	movs	r5, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80039ec:	f64f 7aff 	movw	sl, #65535	; 0xffff
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80039f0:	f504 7786 	add.w	r7, r4, #268	; 0x10c
 80039f4:	f504 7800 	add.w	r8, r4, #512	; 0x200
 80039f8:	f504 7916 	add.w	r9, r4, #600	; 0x258
 80039fc:	f504 7b3e 	add.w	fp, r4, #760	; 0x2f8
Screen1ViewBase::Screen1ViewBase() :
 8003a00:	ed2d 8b0c 	vpush	{d8-d13}
 8003a04:	b08f      	sub	sp, #60	; 0x3c
 8003a06:	f019 f91d 	bl	801cc44 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003a0a:	4622      	mov	r2, r4
 8003a0c:	4bef      	ldr	r3, [pc, #956]	; (8003dcc <_ZN15Screen1ViewBaseC1Ev+0x3e8>)
 8003a0e:	ae0c      	add	r6, sp, #48	; 0x30
 8003a10:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003a12:	f842 3b40 	str.w	r3, [r2], #64
 8003a16:	4610      	mov	r0, r2
 8003a18:	ee08 2a10 	vmov	s16, r2
 8003a1c:	f7ff ff92 	bl	8003944 <_ZN8touchgfx3BoxC1Ev>
 8003a20:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8003a24:	4618      	mov	r0, r3
 8003a26:	ee0c 3a90 	vmov	s25, r3
 8003a2a:	f7ff ff8b 	bl	8003944 <_ZN8touchgfx3BoxC1Ev>
 8003a2e:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8003a32:	4618      	mov	r0, r3
 8003a34:	ee08 3a90 	vmov	s17, r3
 8003a38:	f7ff ff98 	bl	800396c <_ZN8touchgfx8TextAreaC1Ev>
 8003a3c:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 8003a40:	4631      	mov	r1, r6
 8003a42:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 8003a46:	4618      	mov	r0, r3
 8003a48:	ee09 3a90 	vmov	s19, r3
 8003a4c:	f7ff ffb0 	bl	80039b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003a50:	4638      	mov	r0, r7
 8003a52:	f013 fddb 	bl	801760c <_ZN8touchgfx14SwipeContainerC1Ev>
 8003a56:	4640      	mov	r0, r8
 8003a58:	f7ff ff50 	bl	80038fc <_ZN8touchgfx9ContainerC1Ev>
 8003a5c:	f504 730b 	add.w	r3, r4, #556	; 0x22c
 8003a60:	4618      	mov	r0, r3
 8003a62:	ee0d 3a10 	vmov	s26, r3
 8003a66:	f7ff ff6d 	bl	8003944 <_ZN8touchgfx3BoxC1Ev>
 8003a6a:	4648      	mov	r0, r9
 8003a6c:	f7ff ff7e 	bl	800396c <_ZN8touchgfx8TextAreaC1Ev>
 8003a70:	f504 7328 	add.w	r3, r4, #672	; 0x2a0
 8003a74:	4631      	mov	r1, r6
 8003a76:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	ee0a 3a10 	vmov	s20, r3
 8003a80:	f7ff ff96 	bl	80039b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003a84:	f504 7333 	add.w	r3, r4, #716	; 0x2cc
 8003a88:	4631      	mov	r1, r6
 8003a8a:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 8003a8e:	4618      	mov	r0, r3
 8003a90:	ee0a 3a90 	vmov	s21, r3
 8003a94:	f7ff ff8c 	bl	80039b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003a98:	4658      	mov	r0, fp
 8003a9a:	f7ff ff2f 	bl	80038fc <_ZN8touchgfx9ContainerC1Ev>
 8003a9e:	f504 7349 	add.w	r3, r4, #804	; 0x324
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	ee0d 3a90 	vmov	s27, r3
 8003aa8:	f7ff ff4c 	bl	8003944 <_ZN8touchgfx3BoxC1Ev>
 8003aac:	f504 7354 	add.w	r3, r4, #848	; 0x350
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	ee09 3a10 	vmov	s18, r3
 8003ab6:	f7ff ff59 	bl	800396c <_ZN8touchgfx8TextAreaC1Ev>
 8003aba:	f504 7366 	add.w	r3, r4, #920	; 0x398
 8003abe:	4631      	mov	r1, r6
 8003ac0:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	ee0b 3a10 	vmov	s22, r3
 8003aca:	f7ff ff71 	bl	80039b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003ace:	f504 7371 	add.w	r3, r4, #964	; 0x3c4
 8003ad2:	4631      	mov	r1, r6
 8003ad4:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 8003ad8:	4618      	mov	r0, r3
 8003ada:	ee0b 3a90 	vmov	s23, r3
 8003ade:	f7ff ff67 	bl	80039b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003ae2:	f504 737c 	add.w	r3, r4, #1008	; 0x3f0
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8003ae6:	f04f 4a7f 	mov.w	sl, #4278190080	; 0xff000000
 8003aea:	4618      	mov	r0, r3
 8003aec:	ee0c 3a10 	vmov	s24, r3
 8003af0:	f016 f896 	bl	8019c20 <_ZN8touchgfx14ButtonWithIconC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003af4:	4bb6      	ldr	r3, [pc, #728]	; (8003dd0 <_ZN15Screen1ViewBaseC1Ev+0x3ec>)
    __background.setPosition(0, 0, 480, 272);
 8003af6:	462a      	mov	r2, r5
 8003af8:	4629      	mov	r1, r5
 8003afa:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
 8003afe:	ee18 0a10 	vmov	r0, s16
 8003b02:	4bb4      	ldr	r3, [pc, #720]	; (8003dd4 <_ZN15Screen1ViewBaseC1Ev+0x3f0>)
 8003b04:	f8c4 4430 	str.w	r4, [r4, #1072]	; 0x430
 8003b08:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
 8003b0c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003b10:	f8c4 5438 	str.w	r5, [r4, #1080]	; 0x438
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003b1a:	f7ff fedb 	bl	80038d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setPosition(0, 0, 480, 80);
 8003b1e:	2350      	movs	r3, #80	; 0x50
 8003b20:	462a      	mov	r2, r5
 8003b22:	4629      	mov	r1, r5
 8003b24:	ee1c 0a90 	vmov	r0, s25
 8003b28:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003b32:	f7ff fecf 	bl	80038d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    textArea1.setXY(94, 16);
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	ee18 0a90 	vmov	r0, s17
 8003b40:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003b44:	215e      	movs	r1, #94	; 0x5e
 8003b46:	f7ff feb8 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003b4a:	f8c4 a0c8 	str.w	sl, [r4, #200]	; 0xc8
        boundingArea = calculateBoundingArea();
 8003b4e:	f10d 0a10 	add.w	sl, sp, #16
 8003b52:	ee18 1a90 	vmov	r1, s17
        linespace = space;
 8003b56:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
        boundingArea = calculateBoundingArea();
 8003b5a:	4650      	mov	r0, sl
 8003b5c:	f015 fa1e 	bl	8018f9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003b60:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 8003b64:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8003b68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b6c:	4b9a      	ldr	r3, [pc, #616]	; (8003dd8 <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8A73));
 8003b6e:	4631      	mov	r1, r6
 8003b70:	ee18 0a90 	vmov	r0, s17
 8003b74:	930c      	str	r3, [sp, #48]	; 0x30
 8003b76:	2303      	movs	r3, #3
 8003b78:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003b7c:	f015 fd52 	bl	8019624 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    imagescreen1.setXY(0, -5);
 8003b80:	f06f 0204 	mvn.w	r2, #4
 8003b84:	4629      	mov	r1, r5
 8003b86:	ee19 0a90 	vmov	r0, s19
 8003b8a:	f7ff fe96 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 8003b8e:	230d      	movs	r3, #13
    imagescreen1.setBitmap(touchgfx::Bitmap(BITMAP_PROTOTYPELOGO_ID));
 8003b90:	4631      	mov	r1, r6
 8003b92:	ee19 0a90 	vmov	r0, s19
 8003b96:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8003b9a:	f016 f868 	bl	8019c6e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    swipeContainer1.setXY(0, 80);
 8003b9e:	2250      	movs	r2, #80	; 0x50
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	f7ff fe89 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
    swipeContainer1.setSwipeCutoff(50);
 8003ba8:	4638      	mov	r0, r7
 8003baa:	2132      	movs	r1, #50	; 0x32
 8003bac:	f013 fbeb 	bl	8017386 <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    swipeContainer1.setEndSwipeElasticWidth(50);
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	2132      	movs	r1, #50	; 0x32
 8003bb4:	f013 fc75 	bl	80174a2 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>
        rect.width = width;
 8003bb8:	4a88      	ldr	r2, [pc, #544]	; (8003ddc <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
    box2.setPosition(0, 0, 480, 192);
 8003bba:	21c0      	movs	r1, #192	; 0xc0
 8003bbc:	ee1d 0a10 	vmov	r0, s26
 8003bc0:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
 8003bc4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003bc8:	462a      	mov	r2, r5
 8003bca:	9100      	str	r1, [sp, #0]
 8003bcc:	4629      	mov	r1, r5
 8003bce:	f7ff fe81 	bl	80038d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003bd2:	4b83      	ldr	r3, [pc, #524]	; (8003de0 <_ZN15Screen1ViewBaseC1Ev+0x3fc>)
    swipeContainer1Page1.add(box2);
 8003bd4:	ee1d 1a10 	vmov	r1, s26
 8003bd8:	4640      	mov	r0, r8
 8003bda:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
 8003bde:	f013 f98b 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(210, 160);
 8003be2:	22a0      	movs	r2, #160	; 0xa0
 8003be4:	4648      	mov	r0, r9
 8003be6:	21d2      	movs	r1, #210	; 0xd2
 8003be8:	f7ff fe67 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        boundingArea = calculateBoundingArea();
 8003bf0:	4650      	mov	r0, sl
        linespace = space;
 8003bf2:	f8a4 528c 	strh.w	r5, [r4, #652]	; 0x28c
        this->color = color;
 8003bf6:	f8c4 1288 	str.w	r1, [r4, #648]	; 0x288
        boundingArea = calculateBoundingArea();
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	f015 f9ce 	bl	8018f9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003c00:	f504 7325 	add.w	r3, r4, #660	; 0x294
 8003c04:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8003c08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c0c:	f04f 0102 	mov.w	r1, #2
 8003c10:	4b71      	ldr	r3, [pc, #452]	; (8003dd8 <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KXP2));
 8003c12:	4648      	mov	r0, r9
 8003c14:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 8003c18:	4631      	mov	r1, r6
 8003c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8003c1c:	f015 fd02 	bl	8019624 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    swipeContainer1Page1.add(textArea2);
 8003c20:	4649      	mov	r1, r9
 8003c22:	4640      	mov	r0, r8
 8003c24:	f013 f968 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(7, 152);
 8003c28:	2298      	movs	r2, #152	; 0x98
 8003c2a:	ee1a 0a10 	vmov	r0, s20
 8003c2e:	2107      	movs	r1, #7
 8003c30:	f7ff fe43 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 8003c34:	f04f 000b 	mov.w	r0, #11
    image1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 8003c38:	4631      	mov	r1, r6
 8003c3a:	f04f 090c 	mov.w	r9, #12
 8003c3e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8003c42:	ee1a 0a10 	vmov	r0, s20
 8003c46:	f016 f812 	bl	8019c6e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    swipeContainer1Page1.add(image1);
 8003c4a:	ee1a 1a10 	vmov	r1, s20
 8003c4e:	4640      	mov	r0, r8
 8003c50:	f013 f952 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(454, 152);
 8003c54:	2298      	movs	r2, #152	; 0x98
 8003c56:	ee1a 0a90 	vmov	r0, s21
 8003c5a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003c5e:	f7ff fe2c 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_32_ID));
 8003c62:	4631      	mov	r1, r6
 8003c64:	ee1a 0a90 	vmov	r0, s21
 8003c68:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
 8003c6c:	f015 ffff 	bl	8019c6e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    swipeContainer1Page1.add(image2);
 8003c70:	ee1a 1a90 	vmov	r1, s21
 8003c74:	4640      	mov	r0, r8
 8003c76:	f013 f93f 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.add(swipeContainer1Page1);
 8003c7a:	4641      	mov	r1, r8
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	f04f 0801 	mov.w	r8, #1
 8003c82:	f013 fe03 	bl	801788c <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
 8003c86:	4a55      	ldr	r2, [pc, #340]	; (8003ddc <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
    box2_1.setPosition(0, 0, 480, 192);
 8003c88:	4629      	mov	r1, r5
 8003c8a:	ee1d 0a90 	vmov	r0, s27
 8003c8e:	f8c4 2300 	str.w	r2, [r4, #768]	; 0x300
 8003c92:	22c0      	movs	r2, #192	; 0xc0
 8003c94:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003c98:	9200      	str	r2, [sp, #0]
 8003c9a:	462a      	mov	r2, r5
 8003c9c:	f7ff fe1a 	bl	80038d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003ca0:	4b50      	ldr	r3, [pc, #320]	; (8003de4 <_ZN15Screen1ViewBaseC1Ev+0x400>)
    swipeContainer1Page2.add(box2_1);
 8003ca2:	ee1d 1a90 	vmov	r1, s27
 8003ca6:	4658      	mov	r0, fp
 8003ca8:	f8c4 334c 	str.w	r3, [r4, #844]	; 0x34c
 8003cac:	f013 f924 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1.setXY(210, 160);
 8003cb0:	ee19 0a10 	vmov	r0, s18
 8003cb4:	22a0      	movs	r2, #160	; 0xa0
 8003cb6:	21d2      	movs	r1, #210	; 0xd2
 8003cb8:	f7ff fdff 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        boundingArea = calculateBoundingArea();
 8003cc0:	ee19 1a10 	vmov	r1, s18
 8003cc4:	4650      	mov	r0, sl
        this->color = color;
 8003cc6:	f8c4 2380 	str.w	r2, [r4, #896]	; 0x380
        linespace = space;
 8003cca:	f8a4 5384 	strh.w	r5, [r4, #900]	; 0x384
        boundingArea = calculateBoundingArea();
 8003cce:	f015 f965 	bl	8018f9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003cd2:	f504 7363 	add.w	r3, r4, #908	; 0x38c
 8003cd6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8003cda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003cde:	4b3e      	ldr	r3, [pc, #248]	; (8003dd8 <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_K1JO));
 8003ce0:	4631      	mov	r1, r6
 8003ce2:	ee19 0a10 	vmov	r0, s18
 8003ce6:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8003cea:	930c      	str	r3, [sp, #48]	; 0x30
 8003cec:	f015 fc9a 	bl	8019624 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    swipeContainer1Page2.add(textArea2_1);
 8003cf0:	ee19 1a10 	vmov	r1, s18
 8003cf4:	4658      	mov	r0, fp
 8003cf6:	f013 f8ff 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1_1.setXY(7, 152);
 8003cfa:	2298      	movs	r2, #152	; 0x98
 8003cfc:	ee1b 0a10 	vmov	r0, s22
 8003d00:	2107      	movs	r1, #7
 8003d02:	f7ff fdda 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 8003d06:	f04f 000b 	mov.w	r0, #11
    image1_1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 8003d0a:	4631      	mov	r1, r6
 8003d0c:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8003d10:	ee1b 0a10 	vmov	r0, s22
 8003d14:	f015 ffab 	bl	8019c6e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    swipeContainer1Page2.add(image1_1);
 8003d18:	ee1b 1a10 	vmov	r1, s22
 8003d1c:	4658      	mov	r0, fp
 8003d1e:	f013 f8eb 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2_1.setXY(454, 152);
 8003d22:	2298      	movs	r2, #152	; 0x98
 8003d24:	ee1b 0a90 	vmov	r0, s23
 8003d28:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003d2c:	f7ff fdc5 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_32_ID));
 8003d30:	4631      	mov	r1, r6
 8003d32:	ee1b 0a90 	vmov	r0, s23
 8003d36:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
 8003d3a:	f015 ff98 	bl	8019c6e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    swipeContainer1Page2.add(image2_1);
 8003d3e:	ee1b 1a90 	vmov	r1, s23
 8003d42:	4658      	mov	r0, fp
 8003d44:	f013 f8d8 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.add(swipeContainer1Page2);
 8003d48:	4659      	mov	r1, fp
 8003d4a:	4638      	mov	r0, r7
 8003d4c:	f013 fd9e 	bl	801788c <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
    swipeContainer1.setSelectedPage(0);
 8003d50:	4629      	mov	r1, r5
 8003d52:	4638      	mov	r0, r7
 8003d54:	f013 fd8b 	bl	801786e <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
    buttonWithIcon1.setXY(420, 80);
 8003d58:	ee1c 0a10 	vmov	r0, s24
 8003d5c:	2250      	movs	r2, #80	; 0x50
 8003d5e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8003d62:	f7ff fdaa 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 8003d66:	2306      	movs	r3, #6
 8003d68:	f04f 0102 	mov.w	r1, #2
    buttonWithIcon1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_INFO_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_INFO_32_ID));
 8003d6c:	aa0a      	add	r2, sp, #40	; 0x28
 8003d6e:	ee1c 0a10 	vmov	r0, s24
 8003d72:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8003d76:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8003d7a:	a909      	add	r1, sp, #36	; 0x24
 8003d7c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8003d80:	ab0b      	add	r3, sp, #44	; 0x2c
 8003d82:	9600      	str	r6, [sp, #0]
 8003d84:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
 8003d88:	f015 fe96 	bl	8019ab8 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 8003d8c:	f04f 130f 	mov.w	r3, #983055	; 0xf000f
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003d90:	1d20      	adds	r0, r4, #4
 8003d92:	ee18 1a10 	vmov	r1, s16
 8003d96:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    buttonWithIcon1.setAction(buttonCallback);
 8003d9a:	f204 432c 	addw	r3, r4, #1068	; 0x42c
 8003d9e:	9003      	str	r0, [sp, #12]
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8003da0:	f8c4 3418 	str.w	r3, [r4, #1048]	; 0x418
 8003da4:	f013 f8a8 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003da8:	ee1c 1a90 	vmov	r1, s25
 8003dac:	9803      	ldr	r0, [sp, #12]
 8003dae:	f013 f8a3 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003db2:	ee18 1a90 	vmov	r1, s17
 8003db6:	9803      	ldr	r0, [sp, #12]
 8003db8:	f013 f89e 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003dbc:	ee19 1a90 	vmov	r1, s19
 8003dc0:	9803      	ldr	r0, [sp, #12]
 8003dc2:	f013 f899 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003dc6:	4639      	mov	r1, r7
 8003dc8:	9803      	ldr	r0, [sp, #12]
 8003dca:	e00d      	b.n	8003de8 <_ZN15Screen1ViewBaseC1Ev+0x404>
 8003dcc:	0802db0c 	.word	0x0802db0c
 8003dd0:	0802daf4 	.word	0x0802daf4
 8003dd4:	080038a3 	.word	0x080038a3
 8003dd8:	0802d578 	.word	0x0802d578
 8003ddc:	00c001e0 	.word	0x00c001e0
 8003de0:	ff15ad45 	.word	0xff15ad45
 8003de4:	ff7ac232 	.word	0xff7ac232
 8003de8:	f013 f886 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003dec:	9803      	ldr	r0, [sp, #12]
 8003dee:	ee1c 1a10 	vmov	r1, s24
 8003df2:	f013 f881 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003df6:	4620      	mov	r0, r4
 8003df8:	b00f      	add	sp, #60	; 0x3c
 8003dfa:	ecbd 8b0c 	vpop	{d8-d13}
 8003dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e02:	bf00      	nop

08003e04 <_ZN15Screen1ViewBaseD1Ev>:
    virtual ~Screen1ViewBase() {}
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <_ZN15Screen1ViewBaseD1Ev+0x14>)
 8003e06:	b510      	push	{r4, lr}
 8003e08:	4604      	mov	r4, r0
 8003e0a:	6003      	str	r3, [r0, #0]
 8003e0c:	f500 7086 	add.w	r0, r0, #268	; 0x10c
 8003e10:	f013 fac4 	bl	801739c <_ZN8touchgfx14SwipeContainerD1Ev>
 8003e14:	4620      	mov	r0, r4
 8003e16:	bd10      	pop	{r4, pc}
 8003e18:	0802db0c 	.word	0x0802db0c

08003e1c <_ZN15Screen1ViewBaseD0Ev>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	4604      	mov	r4, r0
 8003e20:	f7ff fff0 	bl	8003e04 <_ZN15Screen1ViewBaseD1Ev>
 8003e24:	f240 413c 	movw	r1, #1084	; 0x43c
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f026 fbe4 	bl	802a5f6 <_ZdlPvj>
 8003e2e:	4620      	mov	r0, r4
 8003e30:	bd10      	pop	{r4, pc}

08003e32 <_ZN15Screen2ViewBase11setupScreenEv>:
}

void Screen2ViewBase::setupScreen()
{

}
 8003e32:	4770      	bx	lr

08003e34 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003e34:	4770      	bx	lr

08003e36 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003e36:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003e38:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003e3a:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003e3c:	68c2      	ldr	r2, [r0, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	1055      	asrs	r5, r2, #1
 8003e42:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003e46:	07d2      	lsls	r2, r2, #31
 8003e48:	bf48      	it	mi
 8003e4a:	5962      	ldrmi	r2, [r4, r5]
    }
 8003e4c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003e4e:	bf48      	it	mi
 8003e50:	58d3      	ldrmi	r3, [r2, r3]
 8003e52:	4718      	bx	r3

08003e54 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003e54:	6843      	ldr	r3, [r0, #4]
 8003e56:	b12b      	cbz	r3, 8003e64 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003e58:	6883      	ldr	r3, [r0, #8]
 8003e5a:	b92b      	cbnz	r3, 8003e68 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003e5c:	68c0      	ldr	r0, [r0, #12]
 8003e5e:	f000 0001 	and.w	r0, r0, #1
 8003e62:	4770      	bx	lr
 8003e64:	4618      	mov	r0, r3
 8003e66:	4770      	bx	lr
 8003e68:	2001      	movs	r0, #1
    }
 8003e6a:	4770      	bx	lr

08003e6c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	4604      	mov	r4, r0
 8003e70:	2110      	movs	r1, #16
 8003e72:	f026 fbc0 	bl	802a5f6 <_ZdlPvj>
 8003e76:	4620      	mov	r0, r4
 8003e78:	bd10      	pop	{r4, pc}

08003e7a <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithIcon1)
 8003e7a:	f500 702c 	add.w	r0, r0, #688	; 0x2b0
 8003e7e:	4288      	cmp	r0, r1
{
 8003e80:	b508      	push	{r3, lr}
    if (&src == &buttonWithIcon1)
 8003e82:	d105      	bne.n	8003e90 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~Screen2ViewBase() {}
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003e84:	f017 fc66 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When buttonWithIcon1 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
    }
}
 8003e88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenNoTransition();
 8003e8c:	f7ff bc30 	b.w	80036f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
}
 8003e90:	bd08      	pop	{r3, pc}
	...

08003e94 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8003e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e98:	4604      	mov	r4, r0
 8003e9a:	2500      	movs	r5, #0
 8003e9c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003ea0:	f64f 79ff 	movw	r9, #65535	; 0xffff
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003ea4:	46a3      	mov	fp, r4
 8003ea6:	f104 0898 	add.w	r8, r4, #152	; 0x98
 8003eaa:	f504 7686 	add.w	r6, r4, #268	; 0x10c
 8003eae:	f504 773b 	add.w	r7, r4, #748	; 0x2ec
Screen2ViewBase::Screen2ViewBase() :
 8003eb2:	ed2d 8b08 	vpush	{d8-d11}
 8003eb6:	b08f      	sub	sp, #60	; 0x3c
 8003eb8:	f018 fec4 	bl	801cc44 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003ebc:	4bb4      	ldr	r3, [pc, #720]	; (8004190 <_ZN15Screen2ViewBaseC1Ev+0x2fc>)
 8003ebe:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003ec0:	f84b 3b40 	str.w	r3, [fp], #64
 8003ec4:	4658      	mov	r0, fp
 8003ec6:	f7ff fd3d 	bl	8003944 <_ZN8touchgfx3BoxC1Ev>
 8003eca:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8003ece:	4618      	mov	r0, r3
 8003ed0:	ee08 3a90 	vmov	s17, r3
 8003ed4:	f7ff fd36 	bl	8003944 <_ZN8touchgfx3BoxC1Ev>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003ed8:	4629      	mov	r1, r5
 8003eda:	2226      	movs	r2, #38	; 0x26
 8003edc:	4640      	mov	r0, r8
 8003ede:	f026 fc49 	bl	802a774 <memset>
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	f7ff fd1c 	bl	8003920 <_ZN8touchgfx6WidgetC1Ev>
 8003ee8:	4baa      	ldr	r3, [pc, #680]	; (8004194 <_ZN15Screen2ViewBaseC1Ev+0x300>)
 8003eea:	f104 02e0 	add.w	r2, r4, #224	; 0xe0
 8003eee:	f8a4 90c4 	strh.w	r9, [r4, #196]	; 0xc4
 8003ef2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8003ef6:	4ba8      	ldr	r3, [pc, #672]	; (8004198 <_ZN15Screen2ViewBaseC1Ev+0x304>)
 8003ef8:	4610      	mov	r0, r2
        : color(col)
 8003efa:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 8003efe:	ee09 2a10 	vmov	s18, r2
 8003f02:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8003f06:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8003f0a:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
 8003f0e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
        : x(x), y(y), width(width), height(height)
 8003f12:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
              text(0)
 8003f16:	e9c4 a536 	strd	sl, r5, [r4, #216]	; 0xd8
 8003f1a:	f7ff fd13 	bl	8003944 <_ZN8touchgfx3BoxC1Ev>
 8003f1e:	4630      	mov	r0, r6
 8003f20:	f013 fb74 	bl	801760c <_ZN8touchgfx14SwipeContainerC1Ev>
 8003f24:	f504 7200 	add.w	r2, r4, #512	; 0x200
 8003f28:	4610      	mov	r0, r2
 8003f2a:	ee09 2a90 	vmov	s19, r2
 8003f2e:	f7ff fce5 	bl	80038fc <_ZN8touchgfx9ContainerC1Ev>
 8003f32:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 8003f36:	4610      	mov	r0, r2
 8003f38:	ee0a 2a10 	vmov	s20, r2
 8003f3c:	f7ff fd02 	bl	8003944 <_ZN8touchgfx3BoxC1Ev>
 8003f40:	f504 7216 	add.w	r2, r4, #600	; 0x258
 8003f44:	4610      	mov	r0, r2
 8003f46:	ee0a 2a90 	vmov	s21, r2
 8003f4a:	f7ff fcd7 	bl	80038fc <_ZN8touchgfx9ContainerC1Ev>
 8003f4e:	f504 7221 	add.w	r2, r4, #644	; 0x284
 8003f52:	4610      	mov	r0, r2
 8003f54:	ee0b 2a10 	vmov	s22, r2
 8003f58:	f7ff fcf4 	bl	8003944 <_ZN8touchgfx3BoxC1Ev>
 8003f5c:	f504 722c 	add.w	r2, r4, #688	; 0x2b0
 8003f60:	4610      	mov	r0, r2
 8003f62:	ee08 2a10 	vmov	s16, r2
 8003f66:	f015 fe5b 	bl	8019c20 <_ZN8touchgfx14ButtonWithIconC1Ev>
        : Widget(), bitmap(bmp), alpha(255)
 8003f6a:	2226      	movs	r2, #38	; 0x26
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4638      	mov	r0, r7
 8003f70:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 8003f74:	f026 fbfe 	bl	802a774 <memset>
 8003f78:	4638      	mov	r0, r7
 8003f7a:	f7ff fcd1 	bl	8003920 <_ZN8touchgfx6WidgetC1Ev>
 8003f7e:	4b87      	ldr	r3, [pc, #540]	; (800419c <_ZN15Screen2ViewBaseC1Ev+0x308>)
 8003f80:	f884 9314 	strb.w	r9, [r4, #788]	; 0x314
        Image::setBitmap(bmp);
 8003f84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
        : Widget(), bitmap(bmp), alpha(255)
 8003f88:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
        Image::setBitmap(bmp);
 8003f8c:	4638      	mov	r0, r7
        : Widget(), bitmap(bmp), alpha(255)
 8003f8e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
        Image::setBitmap(bmp);
 8003f92:	4649      	mov	r1, r9
        : Widget(), bitmap(bmp), alpha(255)
 8003f94:	f8a4 3312 	strh.w	r3, [r4, #786]	; 0x312
        Image::setBitmap(bmp);
 8003f98:	f015 fe69 	bl	8019c6e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003f9c:	4b80      	ldr	r3, [pc, #512]	; (80041a0 <_ZN15Screen2ViewBaseC1Ev+0x30c>)
    __background.setPosition(0, 0, 480, 272);
 8003f9e:	462a      	mov	r2, r5
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	4658      	mov	r0, fp
 8003fa4:	e9c4 34c6 	strd	r3, r4, [r4, #792]	; 0x318
 8003fa8:	4b7e      	ldr	r3, [pc, #504]	; (80041a4 <_ZN15Screen2ViewBaseC1Ev+0x310>)
 8003faa:	e9c4 35c8 	strd	r3, r5, [r4, #800]	; 0x320
 8003fae:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003fb8:	f7ff fc8c 	bl	80038d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003fbc:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 480, 80);
 8003fc0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	66a2      	str	r2, [r4, #104]	; 0x68
 8003fc8:	2250      	movs	r2, #80	; 0x50
 8003fca:	ee18 0a90 	vmov	r0, s17
 8003fce:	9200      	str	r2, [sp, #0]
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	f7ff fc7f 	bl	80038d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setXY(94, 16);
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
 8003fdc:	2210      	movs	r2, #16
 8003fde:	215e      	movs	r1, #94	; 0x5e
        boundingArea = calculateBoundingArea();
 8003fe0:	f10d 0a10 	add.w	sl, sp, #16
 8003fe4:	f7ff fc69 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003fe8:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003fec:	4641      	mov	r1, r8
 8003fee:	4650      	mov	r0, sl
        this->color = color;
 8003ff0:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
        linespace = space;
 8003ff4:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
        boundingArea = calculateBoundingArea();
 8003ff8:	f014 ffd0 	bl	8018f9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003ffc:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 8004000:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8004004:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004008:	4b63      	ldr	r3, [pc, #396]	; (8004198 <_ZN15Screen2ViewBaseC1Ev+0x304>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HIK0));
 800400a:	4649      	mov	r1, r9
 800400c:	4640      	mov	r0, r8
 800400e:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
 8004012:	930c      	str	r3, [sp, #48]	; 0x30
 8004014:	f015 fb06 	bl	8019624 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    box2.setPosition(0, 80, 480, 192);
 8004018:	23c0      	movs	r3, #192	; 0xc0
 800401a:	4629      	mov	r1, r5
 800401c:	ee19 0a10 	vmov	r0, s18
 8004020:	2250      	movs	r2, #80	; 0x50
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004028:	f7ff fc54 	bl	80038d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 800402c:	4b5e      	ldr	r3, [pc, #376]	; (80041a8 <_ZN15Screen2ViewBaseC1Ev+0x314>)
    swipeContainer1.setXY(0, 94);
 800402e:	4629      	mov	r1, r5
 8004030:	4630      	mov	r0, r6
 8004032:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 8004036:	225e      	movs	r2, #94	; 0x5e
 8004038:	f7ff fc3f 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 800403c:	2308      	movs	r3, #8
    swipeContainer1.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_LARGE_NORMAL_ID), touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_LARGE_HIGHLIGHT_ID));
 800403e:	464a      	mov	r2, r9
 8004040:	a90b      	add	r1, sp, #44	; 0x2c
 8004042:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8004046:	2307      	movs	r3, #7
 8004048:	4630      	mov	r0, r6
    box3_1.setPosition(0, 0, 432, 162);
 800404a:	f04f 0aa2 	mov.w	sl, #162	; 0xa2
 800404e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    swipeContainer1.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_LARGE_NORMAL_ID), touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_LARGE_HIGHLIGHT_ID));
 8004052:	f013 fb92 	bl	801777a <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>
    swipeContainer1.setPageIndicatorXY(0, 0);
 8004056:	462a      	mov	r2, r5
 8004058:	4629      	mov	r1, r5
 800405a:	4630      	mov	r0, r6
 800405c:	f013 fa23 	bl	80174a6 <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>
    swipeContainer1.setSwipeCutoff(50);
 8004060:	4630      	mov	r0, r6
 8004062:	2132      	movs	r1, #50	; 0x32
 8004064:	f013 f98f 	bl	8017386 <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    swipeContainer1.setEndSwipeElasticWidth(50);
 8004068:	4630      	mov	r0, r6
 800406a:	2132      	movs	r1, #50	; 0x32
 800406c:	f013 fa19 	bl	80174a2 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>
 8004070:	4b4e      	ldr	r3, [pc, #312]	; (80041ac <_ZN15Screen2ViewBaseC1Ev+0x318>)
    box3_1.setPosition(0, 0, 432, 162);
 8004072:	462a      	mov	r2, r5
 8004074:	4629      	mov	r1, r5
 8004076:	ee1a 0a10 	vmov	r0, s20
 800407a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 800407e:	f8cd a000 	str.w	sl, [sp]
 8004082:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8004086:	f7ff fc25 	bl	80038d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 800408a:	4b49      	ldr	r3, [pc, #292]	; (80041b0 <_ZN15Screen2ViewBaseC1Ev+0x31c>)
    swipeContainer1Page2.add(box3_1);
 800408c:	ee1a 1a10 	vmov	r1, s20
 8004090:	ee19 0a90 	vmov	r0, s19
 8004094:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
 8004098:	f012 ff2e 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.add(swipeContainer1Page2);
 800409c:	ee19 1a90 	vmov	r1, s19
 80040a0:	4630      	mov	r0, r6
 80040a2:	f013 fbf3 	bl	801788c <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <_ZN15Screen2ViewBaseC1Ev+0x318>)
    box3.setPosition(0, 0, 432, 162);
 80040a8:	462a      	mov	r2, r5
 80040aa:	4629      	mov	r1, r5
 80040ac:	ee1b 0a10 	vmov	r0, s22
 80040b0:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
 80040b4:	f8cd a000 	str.w	sl, [sp]
 80040b8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80040bc:	f7ff fc0a 	bl	80038d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80040c0:	4b3c      	ldr	r3, [pc, #240]	; (80041b4 <_ZN15Screen2ViewBaseC1Ev+0x320>)
    swipeContainer1Page1.add(box3);
 80040c2:	ee1b 1a10 	vmov	r1, s22
 80040c6:	ee1a 0a90 	vmov	r0, s21
 80040ca:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
 80040ce:	f012 ff13 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.add(swipeContainer1Page1);
 80040d2:	ee1a 1a90 	vmov	r1, s21
 80040d6:	4630      	mov	r0, r6
 80040d8:	f013 fbd8 	bl	801788c <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
    swipeContainer1.setSelectedPage(0);
 80040dc:	4629      	mov	r1, r5
 80040de:	4630      	mov	r0, r6
 80040e0:	f013 fbc5 	bl	801786e <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
    buttonWithIcon1.setXY(420, 80);
 80040e4:	ee18 0a10 	vmov	r0, s16
 80040e8:	2250      	movs	r2, #80	; 0x50
 80040ea:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80040ee:	f7ff fbe4 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 80040f2:	2303      	movs	r3, #3
    buttonWithIcon1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 80040f4:	aa0a      	add	r2, sp, #40	; 0x28
 80040f6:	a909      	add	r1, sp, #36	; 0x24
 80040f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80040fc:	2304      	movs	r3, #4
 80040fe:	ee18 0a10 	vmov	r0, s16
 8004102:	f8cd 9000 	str.w	r9, [sp]
 8004106:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800410a:	2305      	movs	r3, #5
 800410c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8004110:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8004114:	ab0b      	add	r3, sp, #44	; 0x2c
 8004116:	f015 fccf 	bl	8019ab8 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 800411a:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <_ZN15Screen2ViewBaseC1Ev+0x324>)
    imagescreen2.setXY(0, -5);
 800411c:	f06f 0204 	mvn.w	r2, #4
 8004120:	4629      	mov	r1, r5
 8004122:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
    buttonWithIcon1.setAction(buttonCallback);
 8004126:	f504 7346 	add.w	r3, r4, #792	; 0x318
    imagescreen2.setXY(0, -5);
 800412a:	4638      	mov	r0, r7
 800412c:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
 8004130:	f7ff fbc3 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 8004134:	230d      	movs	r3, #13
    imagescreen2.setBitmap(touchgfx::Bitmap(BITMAP_PROTOTYPELOGO_ID));
 8004136:	4649      	mov	r1, r9
 8004138:	4638      	mov	r0, r7
 800413a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800413e:	f015 fd96 	bl	8019c6e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004142:	1d20      	adds	r0, r4, #4
 8004144:	4659      	mov	r1, fp
 8004146:	9003      	str	r0, [sp, #12]
 8004148:	f012 fed6 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800414c:	ee18 1a90 	vmov	r1, s17
 8004150:	9803      	ldr	r0, [sp, #12]
 8004152:	f012 fed1 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004156:	4641      	mov	r1, r8
 8004158:	9803      	ldr	r0, [sp, #12]
 800415a:	f012 fecd 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800415e:	ee19 1a10 	vmov	r1, s18
 8004162:	9803      	ldr	r0, [sp, #12]
 8004164:	f012 fec8 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004168:	4631      	mov	r1, r6
 800416a:	9803      	ldr	r0, [sp, #12]
 800416c:	f012 fec4 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004170:	ee18 1a10 	vmov	r1, s16
 8004174:	9803      	ldr	r0, [sp, #12]
 8004176:	f012 febf 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800417a:	9803      	ldr	r0, [sp, #12]
 800417c:	4639      	mov	r1, r7
 800417e:	f012 febb 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004182:	4620      	mov	r0, r4
 8004184:	b00f      	add	sp, #60	; 0x3c
 8004186:	ecbd 8b08 	vpop	{d8-d11}
 800418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418e:	bf00      	nop
 8004190:	0802db58 	.word	0x0802db58
 8004194:	08030ec8 	.word	0x08030ec8
 8004198:	0802d578 	.word	0x0802d578
 800419c:	08031120 	.word	0x08031120
 80041a0:	0802db40 	.word	0x0802db40
 80041a4:	08003e7b 	.word	0x08003e7b
 80041a8:	ff1587b0 	.word	0xff1587b0
 80041ac:	00a201b0 	.word	0x00a201b0
 80041b0:	ff05a6eb 	.word	0xff05a6eb
 80041b4:	ff3b7cd9 	.word	0xff3b7cd9
 80041b8:	0010000f 	.word	0x0010000f

080041bc <_ZN15Screen2ViewBaseD1Ev>:
    virtual ~Screen2ViewBase() {}
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <_ZN15Screen2ViewBaseD1Ev+0x14>)
 80041be:	b510      	push	{r4, lr}
 80041c0:	4604      	mov	r4, r0
 80041c2:	6003      	str	r3, [r0, #0]
 80041c4:	f500 7086 	add.w	r0, r0, #268	; 0x10c
 80041c8:	f013 f8e8 	bl	801739c <_ZN8touchgfx14SwipeContainerD1Ev>
 80041cc:	4620      	mov	r0, r4
 80041ce:	bd10      	pop	{r4, pc}
 80041d0:	0802db58 	.word	0x0802db58

080041d4 <_ZN15Screen2ViewBaseD0Ev>:
 80041d4:	b510      	push	{r4, lr}
 80041d6:	4604      	mov	r4, r0
 80041d8:	f7ff fff0 	bl	80041bc <_ZN15Screen2ViewBaseD1Ev>
 80041dc:	f44f 714a 	mov.w	r1, #808	; 0x328
 80041e0:	4620      	mov	r0, r4
 80041e2:	f026 fa08 	bl	802a5f6 <_ZdlPvj>
 80041e6:	4620      	mov	r0, r4
 80041e8:	bd10      	pop	{r4, pc}

080041ea <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80041ea:	4770      	bx	lr

080041ec <_Z23getFont_verdana_10_4bppv>:
{
 80041ec:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80041ee:	4d15      	ldr	r5, [pc, #84]	; (8004244 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 80041f0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80041f2:	782c      	ldrb	r4, [r5, #0]
 80041f4:	f3bf 8f5b 	dmb	ish
 80041f8:	f014 0401 	ands.w	r4, r4, #1
 80041fc:	d11e      	bne.n	800423c <_Z23getFont_verdana_10_4bppv+0x50>
 80041fe:	4628      	mov	r0, r5
 8004200:	f026 f9fb 	bl	802a5fa <__cxa_guard_acquire>
 8004204:	b1d0      	cbz	r0, 800423c <_Z23getFont_verdana_10_4bppv+0x50>
 8004206:	233f      	movs	r3, #63	; 0x3f
 8004208:	2201      	movs	r2, #1
 800420a:	490f      	ldr	r1, [pc, #60]	; (8004248 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800420c:	9307      	str	r3, [sp, #28]
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <_Z23getFont_verdana_10_4bppv+0x60>)
 8004210:	480f      	ldr	r0, [pc, #60]	; (8004250 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004212:	9306      	str	r3, [sp, #24]
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004216:	9408      	str	r4, [sp, #32]
 8004218:	9403      	str	r4, [sp, #12]
 800421a:	9400      	str	r4, [sp, #0]
 800421c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004220:	2304      	movs	r3, #4
 8004222:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004226:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800422a:	230a      	movs	r3, #10
 800422c:	f7ff fab2 	bl	8003794 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004230:	4809      	ldr	r0, [pc, #36]	; (8004258 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004232:	f026 fa2d 	bl	802a690 <atexit>
 8004236:	4628      	mov	r0, r5
 8004238:	f026 f9eb 	bl	802a612 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 800423c:	4804      	ldr	r0, [pc, #16]	; (8004250 <_Z23getFont_verdana_10_4bppv+0x64>)
 800423e:	b00d      	add	sp, #52	; 0x34
 8004240:	bd30      	pop	{r4, r5, pc}
 8004242:	bf00      	nop
 8004244:	20002058 	.word	0x20002058
 8004248:	9037e5b8 	.word	0x9037e5b8
 800424c:	08032a68 	.word	0x08032a68
 8004250:	2000205c 	.word	0x2000205c
 8004254:	08032a78 	.word	0x08032a78
 8004258:	080041eb 	.word	0x080041eb

0800425c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 7, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800425c:	4770      	bx	lr
	...

08004260 <_Z23getFont_verdana_20_4bppv>:
{
 8004260:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 7, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004262:	4d15      	ldr	r5, [pc, #84]	; (80042b8 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8004264:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 7, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004266:	782c      	ldrb	r4, [r5, #0]
 8004268:	f3bf 8f5b 	dmb	ish
 800426c:	f014 0401 	ands.w	r4, r4, #1
 8004270:	d11f      	bne.n	80042b2 <_Z23getFont_verdana_20_4bppv+0x52>
 8004272:	4628      	mov	r0, r5
 8004274:	f026 f9c1 	bl	802a5fa <__cxa_guard_acquire>
 8004278:	b1d8      	cbz	r0, 80042b2 <_Z23getFont_verdana_20_4bppv+0x52>
 800427a:	233f      	movs	r3, #63	; 0x3f
 800427c:	2201      	movs	r2, #1
 800427e:	490f      	ldr	r1, [pc, #60]	; (80042bc <_Z23getFont_verdana_20_4bppv+0x5c>)
 8004280:	9307      	str	r3, [sp, #28]
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004284:	480f      	ldr	r0, [pc, #60]	; (80042c4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004286:	9306      	str	r3, [sp, #24]
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <_Z23getFont_verdana_20_4bppv+0x68>)
 800428a:	9408      	str	r4, [sp, #32]
 800428c:	9403      	str	r4, [sp, #12]
 800428e:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004292:	2304      	movs	r3, #4
 8004294:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004298:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2207      	movs	r2, #7
 80042a0:	2314      	movs	r3, #20
 80042a2:	f7ff fa77 	bl	8003794 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80042a6:	4809      	ldr	r0, [pc, #36]	; (80042cc <_Z23getFont_verdana_20_4bppv+0x6c>)
 80042a8:	f026 f9f2 	bl	802a690 <atexit>
 80042ac:	4628      	mov	r0, r5
 80042ae:	f026 f9b0 	bl	802a612 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80042b2:	4804      	ldr	r0, [pc, #16]	; (80042c4 <_Z23getFont_verdana_20_4bppv+0x64>)
 80042b4:	b00d      	add	sp, #52	; 0x34
 80042b6:	bd30      	pop	{r4, r5, pc}
 80042b8:	20002084 	.word	0x20002084
 80042bc:	9037e5c8 	.word	0x9037e5c8
 80042c0:	08032a6c 	.word	0x08032a6c
 80042c4:	20002088 	.word	0x20002088
 80042c8:	08032a7c 	.word	0x08032a7c
 80042cc:	0800425d 	.word	0x0800425d

080042d0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 13, 40, 8, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042d0:	4770      	bx	lr
	...

080042d4 <_Z23getFont_verdana_40_4bppv>:
{
 80042d4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 13, 40, 8, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042d6:	4d16      	ldr	r5, [pc, #88]	; (8004330 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 80042d8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 13, 40, 8, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042da:	782c      	ldrb	r4, [r5, #0]
 80042dc:	f3bf 8f5b 	dmb	ish
 80042e0:	f014 0401 	ands.w	r4, r4, #1
 80042e4:	d120      	bne.n	8004328 <_Z23getFont_verdana_40_4bppv+0x54>
 80042e6:	4628      	mov	r0, r5
 80042e8:	f026 f987 	bl	802a5fa <__cxa_guard_acquire>
 80042ec:	b1e0      	cbz	r0, 8004328 <_Z23getFont_verdana_40_4bppv+0x54>
 80042ee:	233f      	movs	r3, #63	; 0x3f
 80042f0:	2201      	movs	r2, #1
 80042f2:	4910      	ldr	r1, [pc, #64]	; (8004334 <_Z23getFont_verdana_40_4bppv+0x60>)
 80042f4:	9307      	str	r3, [sp, #28]
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <_Z23getFont_verdana_40_4bppv+0x64>)
 80042f8:	4810      	ldr	r0, [pc, #64]	; (800433c <_Z23getFont_verdana_40_4bppv+0x68>)
 80042fa:	9306      	str	r3, [sp, #24]
 80042fc:	4b10      	ldr	r3, [pc, #64]	; (8004340 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80042fe:	9408      	str	r4, [sp, #32]
 8004300:	9403      	str	r4, [sp, #12]
 8004302:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004306:	2304      	movs	r3, #4
 8004308:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800430c:	2308      	movs	r3, #8
 800430e:	220d      	movs	r2, #13
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2328      	movs	r3, #40	; 0x28
 8004314:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004318:	f7ff fa3c 	bl	8003794 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800431c:	4809      	ldr	r0, [pc, #36]	; (8004344 <_Z23getFont_verdana_40_4bppv+0x70>)
 800431e:	f026 f9b7 	bl	802a690 <atexit>
 8004322:	4628      	mov	r0, r5
 8004324:	f026 f975 	bl	802a612 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8004328:	4804      	ldr	r0, [pc, #16]	; (800433c <_Z23getFont_verdana_40_4bppv+0x68>)
 800432a:	b00d      	add	sp, #52	; 0x34
 800432c:	bd30      	pop	{r4, r5, pc}
 800432e:	bf00      	nop
 8004330:	200020b0 	.word	0x200020b0
 8004334:	9037e62c 	.word	0x9037e62c
 8004338:	08032a70 	.word	0x08032a70
 800433c:	200020b4 	.word	0x200020b4
 8004340:	08032a80 	.word	0x08032a80
 8004344:	080042d1 	.word	0x080042d1

08004348 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8004348:	2000      	movs	r0, #0
 800434a:	4770      	bx	lr

0800434c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 800434c:	2000      	movs	r0, #0
 800434e:	4770      	bx	lr

08004350 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004350:	b40e      	push	{r1, r2, r3}
 8004352:	b503      	push	{r0, r1, lr}
 8004354:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004356:	2100      	movs	r1, #0
{
 8004358:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 800435c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800435e:	f018 f8ad 	bl	801c4bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004362:	b002      	add	sp, #8
 8004364:	f85d eb04 	ldr.w	lr, [sp], #4
 8004368:	b003      	add	sp, #12
 800436a:	4770      	bx	lr

0800436c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800436c:	b40c      	push	{r2, r3}
 800436e:	b507      	push	{r0, r1, r2, lr}
 8004370:	ab04      	add	r3, sp, #16
 8004372:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004376:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004378:	f018 f8a0 	bl	801c4bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800437c:	b003      	add	sp, #12
 800437e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004382:	b002      	add	sp, #8
 8004384:	4770      	bx	lr
	...

08004388 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004388:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800438a:	b510      	push	{r4, lr}
 800438c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800438e:	b373      	cbz	r3, 80043ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004390:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8004392:	b92b      	cbnz	r3, 80043a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004394:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004396:	21c0      	movs	r1, #192	; 0xc0
 8004398:	4a18      	ldr	r2, [pc, #96]	; (80043fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800439a:	4819      	ldr	r0, [pc, #100]	; (8004400 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 800439c:	f026 f95a 	bl	802a654 <__assert_func>
            return buffer[pos];
 80043a0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80043a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80043a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80043a8:	b30b      	cbz	r3, 80043ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80043aa:	f019 fc01 	bl	801dbb0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80043ae:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d803      	bhi.n	80043bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80043b6:	21c5      	movs	r1, #197	; 0xc5
 80043b8:	4a13      	ldr	r2, [pc, #76]	; (8004408 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80043ba:	e7ee      	b.n	800439a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80043bc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80043be:	f640 103f 	movw	r0, #2367	; 0x93f
 80043c2:	1c53      	adds	r3, r2, #1
 80043c4:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	4619      	mov	r1, r3
 80043ca:	bf88      	it	hi
 80043cc:	f1a3 010a 	subhi.w	r1, r3, #10
 80043d0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80043d4:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80043d6:	4281      	cmp	r1, r0
 80043d8:	d109      	bne.n	80043ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80043da:	2b0a      	cmp	r3, #10
 80043dc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80043e0:	bf28      	it	cs
 80043e2:	2300      	movcs	r3, #0
            return buffer[pos];
 80043e4:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80043e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80043ea:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80043ec:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80043ee:	4620      	mov	r0, r4
}
 80043f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80043f4:	f019 bac0 	b.w	801d978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80043f8:	0802db84 	.word	0x0802db84
 80043fc:	0802db8d 	.word	0x0802db8d
 8004400:	0802dc38 	.word	0x0802dc38
 8004404:	0802dc82 	.word	0x0802dc82
 8004408:	0802dc90 	.word	0x0802dc90

0800440c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 800440c:	f019 ba6c 	b.w	801d8e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004410 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8004410:	b510      	push	{r4, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	ac02      	add	r4, sp, #8
 8004416:	e884 0006 	stmia.w	r4, {r1, r2}
 800441a:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 800441c:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800441e:	4621      	mov	r1, r4
    va_start(pArg, format);
 8004420:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	9b08      	ldr	r3, [sp, #32]
 800442a:	f016 fcb4 	bl	801ad96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800442e:	b006      	add	sp, #24
 8004430:	bd10      	pop	{r4, pc}
	...

08004434 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004434:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8004436:	bb18      	cbnz	r0, 8004480 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004438:	4b12      	ldr	r3, [pc, #72]	; (8004484 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800443a:	4813      	ldr	r0, [pc, #76]	; (8004488 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4913      	ldr	r1, [pc, #76]	; (800448c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004440:	b1b3      	cbz	r3, 8004470 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004442:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004444:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004446:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004448:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800444a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	441a      	add	r2, r3
 8004450:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004454:	2200      	movs	r2, #0
 8004456:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004458:	f000 f838 	bl	80044cc <_ZN17TypedTextDatabase8getFontsEv>
 800445c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800445e:	f000 f833 	bl	80044c8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004464:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004466:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004468:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 800446c:	8018      	strh	r0, [r3, #0]
    }
}
 800446e:	e007      	b.n	8004480 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004472:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004476:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800447a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 800447c:	2c00      	cmp	r4, #0
 800447e:	d1e8      	bne.n	8004452 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004480:	bd38      	pop	{r3, r4, r5, pc}
 8004482:	bf00      	nop
 8004484:	200020dc 	.word	0x200020dc
 8004488:	200020e0 	.word	0x200020e0
 800448c:	200020e4 	.word	0x200020e4
 8004490:	200020e8 	.word	0x200020e8
 8004494:	200153f0 	.word	0x200153f0
 8004498:	200153f8 	.word	0x200153f8
 800449c:	200153f4 	.word	0x200153f4
 80044a0:	9037e6f4 	.word	0x9037e6f4
 80044a4:	9037e6e4 	.word	0x9037e6e4
 80044a8:	9037e734 	.word	0x9037e734

080044ac <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80044b6:	681b      	ldr	r3, [r3, #0]
}
 80044b8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	200020e4 	.word	0x200020e4
 80044c4:	200020e0 	.word	0x200020e0

080044c8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80044c8:	2004      	movs	r0, #4
 80044ca:	4770      	bx	lr

080044cc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80044cc:	4800      	ldr	r0, [pc, #0]	; (80044d0 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80044ce:	4770      	bx	lr
 80044d0:	200020ec 	.word	0x200020ec

080044d4 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80044d4:	b510      	push	{r4, lr}
};
 80044d6:	4c05      	ldr	r4, [pc, #20]	; (80044ec <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 80044d8:	f7ff fec2 	bl	8004260 <_Z23getFont_verdana_20_4bppv>
};
 80044dc:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80044de:	f7ff fef9 	bl	80042d4 <_Z23getFont_verdana_40_4bppv>
};
 80044e2:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80044e4:	f7ff fe82 	bl	80041ec <_Z23getFont_verdana_10_4bppv>
};
 80044e8:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80044ea:	bd10      	pop	{r4, pc}
 80044ec:	200020ec 	.word	0x200020ec

080044f0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80044f0:	4770      	bx	lr

080044f2 <_ZN19FrontendApplicationD0Ev>:
 80044f2:	b510      	push	{r4, lr}
 80044f4:	4604      	mov	r4, r0
 80044f6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80044fa:	f026 f87c 	bl	802a5f6 <_ZdlPvj>
 80044fe:	4620      	mov	r0, r4
 8004500:	bd10      	pop	{r4, pc}

08004502 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004502:	b510      	push	{r4, lr}
 8004504:	4604      	mov	r4, r0
    {
        model.tick();
 8004506:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 800450a:	f000 f812 	bl	8004532 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800450e:	4620      	mov	r0, r4
    }
 8004510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8004514:	f016 bf9e 	b.w	801b454 <_ZN8touchgfx11Application15handleTickEventEv>

08004518 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004518:	b510      	push	{r4, lr}
 800451a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800451c:	f7ff f8b8 	bl	8003690 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004520:	4b01      	ldr	r3, [pc, #4]	; (8004528 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8004522:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8004524:	6023      	str	r3, [r4, #0]
}
 8004526:	bd10      	pop	{r4, pc}
 8004528:	0802dd6c 	.word	0x0802dd6c

0800452c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800452c:	2200      	movs	r2, #0
 800452e:	6002      	str	r2, [r0, #0]
{

}
 8004530:	4770      	bx	lr

08004532 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8004532:	4770      	bx	lr

08004534 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8004534:	4770      	bx	lr

08004536 <_ZThn4_N16Screen1PresenterD1Ev>:
 8004536:	3804      	subs	r0, #4
 8004538:	4770      	bx	lr

0800453a <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800453a:	4770      	bx	lr

0800453c <_ZN16Screen1PresenterD0Ev>:
 800453c:	b510      	push	{r4, lr}
 800453e:	4604      	mov	r4, r0
 8004540:	2110      	movs	r1, #16
 8004542:	f026 f858 	bl	802a5f6 <_ZdlPvj>
 8004546:	4620      	mov	r0, r4
 8004548:	bd10      	pop	{r4, pc}

0800454a <_ZThn4_N16Screen1PresenterD0Ev>:
 800454a:	f1a0 0004 	sub.w	r0, r0, #4
 800454e:	e7f5      	b.n	800453c <_ZN16Screen1PresenterD0Ev>

08004550 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004550:	2200      	movs	r2, #0
    : view(v)
 8004552:	60c1      	str	r1, [r0, #12]
 8004554:	6082      	str	r2, [r0, #8]
 8004556:	4a04      	ldr	r2, [pc, #16]	; (8004568 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8004558:	b510      	push	{r4, lr}
    : view(v)
 800455a:	f102 0408 	add.w	r4, r2, #8
 800455e:	3220      	adds	r2, #32
 8004560:	6004      	str	r4, [r0, #0]
 8004562:	6042      	str	r2, [r0, #4]
}
 8004564:	bd10      	pop	{r4, pc}
 8004566:	bf00      	nop
 8004568:	0802ddb0 	.word	0x0802ddb0

0800456c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800456c:	4770      	bx	lr

0800456e <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 800456e:	f7ff b96d 	b.w	800384c <_ZN15Screen1ViewBase11setupScreenEv>
	...

08004574 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8004574:	b510      	push	{r4, lr}
 8004576:	4604      	mov	r4, r0
 8004578:	f7ff fa34 	bl	80039e4 <_ZN15Screen1ViewBaseC1Ev>
 800457c:	4b01      	ldr	r3, [pc, #4]	; (8004584 <_ZN11Screen1ViewC1Ev+0x10>)
}
 800457e:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8004580:	6023      	str	r3, [r4, #0]
}
 8004582:	bd10      	pop	{r4, pc}
 8004584:	0802dde0 	.word	0x0802dde0

08004588 <_ZN11Screen1ViewD1Ev>:
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <_ZN11Screen1ViewD1Ev+0x14>)

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800458a:	b510      	push	{r4, lr}
 800458c:	4604      	mov	r4, r0
 800458e:	6003      	str	r3, [r0, #0]
 8004590:	f500 7086 	add.w	r0, r0, #268	; 0x10c
 8004594:	f012 ff02 	bl	801739c <_ZN8touchgfx14SwipeContainerD1Ev>
 8004598:	4620      	mov	r0, r4
 800459a:	bd10      	pop	{r4, pc}
 800459c:	0802db0c 	.word	0x0802db0c

080045a0 <_ZN11Screen1ViewD0Ev>:
 80045a0:	b510      	push	{r4, lr}
 80045a2:	4604      	mov	r4, r0
 80045a4:	f7ff fff0 	bl	8004588 <_ZN11Screen1ViewD1Ev>
 80045a8:	f240 413c 	movw	r1, #1084	; 0x43c
 80045ac:	4620      	mov	r0, r4
 80045ae:	f026 f822 	bl	802a5f6 <_ZdlPvj>
 80045b2:	4620      	mov	r0, r4
 80045b4:	bd10      	pop	{r4, pc}

080045b6 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80045b6:	4770      	bx	lr

080045b8 <_ZThn4_N16Screen2PresenterD1Ev>:
 80045b8:	3804      	subs	r0, #4
 80045ba:	4770      	bx	lr

080045bc <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 80045bc:	4770      	bx	lr

080045be <_ZN16Screen2PresenterD0Ev>:
 80045be:	b510      	push	{r4, lr}
 80045c0:	4604      	mov	r4, r0
 80045c2:	2110      	movs	r1, #16
 80045c4:	f026 f817 	bl	802a5f6 <_ZdlPvj>
 80045c8:	4620      	mov	r0, r4
 80045ca:	bd10      	pop	{r4, pc}

080045cc <_ZThn4_N16Screen2PresenterD0Ev>:
 80045cc:	f1a0 0004 	sub.w	r0, r0, #4
 80045d0:	e7f5      	b.n	80045be <_ZN16Screen2PresenterD0Ev>
	...

080045d4 <_ZN16Screen2PresenterC1ER11Screen2View>:
 80045d4:	2200      	movs	r2, #0
    : view(v)
 80045d6:	60c1      	str	r1, [r0, #12]
 80045d8:	6082      	str	r2, [r0, #8]
 80045da:	4a04      	ldr	r2, [pc, #16]	; (80045ec <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
Screen2Presenter::Screen2Presenter(Screen2View& v)
 80045dc:	b510      	push	{r4, lr}
    : view(v)
 80045de:	f102 0408 	add.w	r4, r2, #8
 80045e2:	3220      	adds	r2, #32
 80045e4:	6004      	str	r4, [r0, #0]
 80045e6:	6042      	str	r2, [r0, #4]
}
 80045e8:	bd10      	pop	{r4, pc}
 80045ea:	bf00      	nop
 80045ec:	0802de0c 	.word	0x0802de0c

080045f0 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 80045f0:	4770      	bx	lr

080045f2 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 80045f2:	f7ff bc1e 	b.w	8003e32 <_ZN15Screen2ViewBase11setupScreenEv>
	...

080045f8 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 80045f8:	b510      	push	{r4, lr}
 80045fa:	4604      	mov	r4, r0
 80045fc:	f7ff fc4a 	bl	8003e94 <_ZN15Screen2ViewBaseC1Ev>
 8004600:	4b01      	ldr	r3, [pc, #4]	; (8004608 <_ZN11Screen2ViewC1Ev+0x10>)
}
 8004602:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8004604:	6023      	str	r3, [r4, #0]
}
 8004606:	bd10      	pop	{r4, pc}
 8004608:	0802de3c 	.word	0x0802de3c

0800460c <_ZN11Screen2ViewD1Ev>:
 800460c:	4b04      	ldr	r3, [pc, #16]	; (8004620 <_ZN11Screen2ViewD1Ev+0x14>)

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 800460e:	b510      	push	{r4, lr}
 8004610:	4604      	mov	r4, r0
 8004612:	6003      	str	r3, [r0, #0]
 8004614:	f500 7086 	add.w	r0, r0, #268	; 0x10c
 8004618:	f012 fec0 	bl	801739c <_ZN8touchgfx14SwipeContainerD1Ev>
 800461c:	4620      	mov	r0, r4
 800461e:	bd10      	pop	{r4, pc}
 8004620:	0802db58 	.word	0x0802db58

08004624 <_ZN11Screen2ViewD0Ev>:
 8004624:	b510      	push	{r4, lr}
 8004626:	4604      	mov	r4, r0
 8004628:	f7ff fff0 	bl	800460c <_ZN11Screen2ViewD1Ev>
 800462c:	f44f 714a 	mov.w	r1, #808	; 0x328
 8004630:	4620      	mov	r0, r4
 8004632:	f025 ffe0 	bl	802a5f6 <_ZdlPvj>
 8004636:	4620      	mov	r0, r4
 8004638:	bd10      	pop	{r4, pc}
	...

0800463c <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 800463c:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800463e:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8004642:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004644:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8004648:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800464a:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800464c:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800464e:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 8004650:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004652:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004654:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 8004656:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 8004658:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800465a:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 800465c:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800465e:	480b      	ldr	r0, [pc, #44]	; (800468c <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8004660:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004664:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004668:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 800466c:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800466e:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8004670:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004672:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004676:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004678:	466a      	mov	r2, sp
 800467a:	f001 fda9 	bl	80061d0 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 800467e:	3800      	subs	r0, #0
 8004680:	bf18      	it	ne
 8004682:	2001      	movne	r0, #1
 8004684:	b015      	add	sp, #84	; 0x54
 8004686:	f85d fb04 	ldr.w	pc, [sp], #4
 800468a:	bf00      	nop
 800468c:	200020f8 	.word	0x200020f8

08004690 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8004690:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004692:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8004696:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4817      	ldr	r0, [pc, #92]	; (80046fc <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800469e:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80046a0:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046a2:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80046a4:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80046a6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80046a8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 80046ac:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 80046ae:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80046b0:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80046b2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046b6:	f001 fd48 	bl	800614a <HAL_QSPI_Command>
 80046ba:	b9e0      	cbnz	r0, 80046f6 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 80046bc:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 80046be:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80046c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80046c4:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046c6:	480d      	ldr	r0, [pc, #52]	; (80046fc <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 80046c8:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80046cc:	2310      	movs	r3, #16
 80046ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80046d2:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046d4:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80046d6:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80046da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046de:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80046e0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80046e6:	f001 fd73 	bl	80061d0 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 80046ea:	3800      	subs	r0, #0
 80046ec:	bf18      	it	ne
 80046ee:	2001      	movne	r0, #1
}
 80046f0:	b015      	add	sp, #84	; 0x54
 80046f2:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 80046f6:	2001      	movs	r0, #1
 80046f8:	e7fa      	b.n	80046f0 <QSPI_WriteEnable.constprop.0+0x60>
 80046fa:	bf00      	nop
 80046fc:	200020f8 	.word	0x200020f8

08004700 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8004700:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004702:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8004706:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004708:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800470c:	480e      	ldr	r0, [pc, #56]	; (8004748 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800470e:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004710:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004712:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004714:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004716:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800471a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800471c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004720:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004722:	2300      	movs	r3, #0
 8004724:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004728:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800472a:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800472c:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800472e:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004730:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004734:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004738:	f001 fd9a 	bl	8006270 <HAL_QSPI_MemoryMapped>
}
 800473c:	3800      	subs	r0, #0
 800473e:	bf18      	it	ne
 8004740:	2001      	movne	r0, #1
 8004742:	b011      	add	sp, #68	; 0x44
 8004744:	f85d fb04 	ldr.w	pc, [sp], #4
 8004748:	200020f8 	.word	0x200020f8

0800474c <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 800474c:	4b45      	ldr	r3, [pc, #276]	; (8004864 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800474e:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004750:	4845      	ldr	r0, [pc, #276]	; (8004868 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 8004752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004754:	f042 0202 	orr.w	r2, r2, #2
{
 8004758:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
{
 800475c:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 800475e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004760:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8004762:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004764:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 8004766:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 800476a:	4d40      	ldr	r5, [pc, #256]	; (800486c <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 800476c:	9200      	str	r2, [sp, #0]
 800476e:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	f042 0202 	orr.w	r2, r2, #2
 8004776:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	f022 0202 	bic.w	r2, r2, #2
 800477e:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8004780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004782:	f042 0202 	orr.w	r2, r2, #2
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
 8004788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478a:	f002 0202 	and.w	r2, r2, #2
 800478e:	9201      	str	r2, [sp, #4]
 8004790:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8004792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004794:	f042 0202 	orr.w	r2, r2, #2
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
 800479a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479c:	f002 0202 	and.w	r2, r2, #2
 80047a0:	9202      	str	r2, [sp, #8]
 80047a2:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 80047a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a6:	f042 0208 	orr.w	r2, r2, #8
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
 80047ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ae:	f002 0208 	and.w	r2, r2, #8
 80047b2:	9203      	str	r2, [sp, #12]
 80047b4:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 80047b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b8:	f042 0208 	orr.w	r2, r2, #8
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
 80047be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c0:	f002 0208 	and.w	r2, r2, #8
 80047c4:	9204      	str	r2, [sp, #16]
 80047c6:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 80047c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ca:	f042 0210 	orr.w	r2, r2, #16
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
 80047d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d2:	f002 0210 	and.w	r2, r2, #16
 80047d6:	9205      	str	r2, [sp, #20]
 80047d8:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 80047da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047dc:	f042 0208 	orr.w	r2, r2, #8
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80047e2:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	9306      	str	r3, [sp, #24]
 80047ec:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80047ee:	2302      	movs	r3, #2
 80047f0:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80047fa:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80047fc:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80047fe:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004800:	f000 fc42 	bl	8005088 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8004804:	a907      	add	r1, sp, #28
 8004806:	4818      	ldr	r0, [pc, #96]	; (8004868 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8004808:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800480a:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800480c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800480e:	f000 fc3b 	bl	8005088 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8004812:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8004816:	a907      	add	r1, sp, #28
 8004818:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800481a:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800481c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 800481e:	f000 fc33 	bl	8005088 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8004822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8004826:	a907      	add	r1, sp, #28
 8004828:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800482a:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 800482c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800482e:	f000 fc2b 	bl	8005088 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8004832:	a907      	add	r1, sp, #28
 8004834:	480e      	ldr	r0, [pc, #56]	; (8004870 <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8004836:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004838:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 800483a:	f000 fc25 	bl	8005088 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 800483e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8004842:	a907      	add	r1, sp, #28
 8004844:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004846:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8004848:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 800484a:	f000 fc1d 	bl	8005088 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800484e:	4632      	mov	r2, r6
 8004850:	210f      	movs	r1, #15
 8004852:	205c      	movs	r0, #92	; 0x5c
 8004854:	f000 f9d8 	bl	8004c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8004858:	205c      	movs	r0, #92	; 0x5c
 800485a:	f000 fa07 	bl	8004c6c <HAL_NVIC_EnableIRQ>
}
 800485e:	b00d      	add	sp, #52	; 0x34
 8004860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004862:	bf00      	nop
 8004864:	40023800 	.word	0x40023800
 8004868:	40020400 	.word	0x40020400
 800486c:	40020c00 	.word	0x40020c00
 8004870:	40021000 	.word	0x40021000

08004874 <BSP_QSPI_Init>:
{ 
 8004874:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8004876:	4c49      	ldr	r4, [pc, #292]	; (800499c <BSP_QSPI_Init+0x128>)
{ 
 8004878:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 800487a:	4b49      	ldr	r3, [pc, #292]	; (80049a0 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800487c:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 800487e:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8004880:	f001 fc50 	bl	8006124 <HAL_QSPI_DeInit>
 8004884:	4605      	mov	r5, r0
 8004886:	b110      	cbz	r0, 800488e <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8004888:	2001      	movs	r0, #1
}
 800488a:	b011      	add	sp, #68	; 0x44
 800488c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 800488e:	4601      	mov	r1, r0
 8004890:	4620      	mov	r0, r4
 8004892:	f7ff ff5b 	bl	800474c <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8004896:	2601      	movs	r6, #1
 8004898:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489a:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 800489e:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80048a2:	2310      	movs	r3, #16
 80048a4:	60e3      	str	r3, [r4, #12]
 80048a6:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 80048aa:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80048ae:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 80048b0:	3b01      	subs	r3, #1
 80048b2:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 80048b4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 80048b8:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80048bc:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80048c0:	f001 fbdc 	bl	800607c <HAL_QSPI_Init>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d1df      	bne.n	8004888 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80048c8:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 80048cc:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 80048ce:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048d0:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 80048d4:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048d6:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80048d8:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80048da:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 80048dc:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80048de:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80048e2:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048e6:	4620      	mov	r0, r4
 80048e8:	f001 fc2f 	bl	800614a <HAL_QSPI_Command>
 80048ec:	b108      	cbz	r0, 80048f2 <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 80048ee:	2004      	movs	r0, #4
 80048f0:	e7cb      	b.n	800488a <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 80048f2:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f8:	a902      	add	r1, sp, #8
 80048fa:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 80048fc:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048fe:	f001 fc24 	bl	800614a <HAL_QSPI_Command>
 8004902:	2800      	cmp	r0, #0
 8004904:	d1f3      	bne.n	80048ee <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8004906:	f241 3088 	movw	r0, #5000	; 0x1388
 800490a:	f7ff fe97 	bl	800463c <QSPI_AutoPollingMemReady.constprop.0>
 800490e:	2800      	cmp	r0, #0
 8004910:	d1ed      	bne.n	80048ee <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8004912:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8004914:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004916:	f241 3288 	movw	r2, #5000	; 0x1388
 800491a:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800491c:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800491e:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004920:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004922:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004926:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800492a:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800492e:	4620      	mov	r0, r4
 8004930:	f001 fc0b 	bl	800614a <HAL_QSPI_Command>
 8004934:	2800      	cmp	r0, #0
 8004936:	d1da      	bne.n	80048ee <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004938:	f241 3288 	movw	r2, #5000	; 0x1388
 800493c:	f10d 0107 	add.w	r1, sp, #7
 8004940:	4620      	mov	r0, r4
 8004942:	f001 fd75 	bl	8006430 <HAL_QSPI_Receive>
 8004946:	2800      	cmp	r0, #0
 8004948:	d1d1      	bne.n	80048ee <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800494a:	f7ff fea1 	bl	8004690 <QSPI_WriteEnable.constprop.0>
 800494e:	2800      	cmp	r0, #0
 8004950:	d1cd      	bne.n	80048ee <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004952:	2381      	movs	r3, #129	; 0x81
 8004954:	22f0      	movs	r2, #240	; 0xf0
 8004956:	9302      	str	r3, [sp, #8]
 8004958:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800495c:	210a      	movs	r1, #10
 800495e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004962:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004966:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004970:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004972:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004978:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800497c:	f001 fbe5 	bl	800614a <HAL_QSPI_Command>
 8004980:	2800      	cmp	r0, #0
 8004982:	d1b4      	bne.n	80048ee <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004984:	f241 3288 	movw	r2, #5000	; 0x1388
 8004988:	f10d 0107 	add.w	r1, sp, #7
 800498c:	4620      	mov	r0, r4
 800498e:	f001 fcf3 	bl	8006378 <HAL_QSPI_Transmit>
 8004992:	2800      	cmp	r0, #0
 8004994:	f43f af79 	beq.w	800488a <BSP_QSPI_Init+0x16>
 8004998:	e7a9      	b.n	80048ee <BSP_QSPI_Init+0x7a>
 800499a:	bf00      	nop
 800499c:	200020f8 	.word	0x200020f8
 80049a0:	a0001000 	.word	0xa0001000

080049a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049a4:	490f      	ldr	r1, [pc, #60]	; (80049e4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80049a6:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049a8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80049ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80049b4:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <SystemInit+0x44>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80049be:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80049c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80049cc:	4a07      	ldr	r2, [pc, #28]	; (80049ec <SystemInit+0x48>)
 80049ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80049d8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049de:	608b      	str	r3, [r1, #8]
#endif
}
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	e000ed00 	.word	0xe000ed00
 80049e8:	40023800 	.word	0x40023800
 80049ec:	24003010 	.word	0x24003010

080049f0 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80049f0:	4770      	bx	lr

080049f2 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80049f2:	2000      	movs	r0, #0
 80049f4:	4770      	bx	lr
	...

080049f8 <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 80049f8:	2300      	movs	r3, #0
{
 80049fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 80049fc:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004a02:	781a      	ldrb	r2, [r3, #0]
 8004a04:	b90a      	cbnz	r2, 8004a0a <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
{
 8004a0a:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004a0c:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004a0e:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004a10:	21a8      	movs	r1, #168	; 0xa8
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7fd f86c 	bl	8001af0 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004a18:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004a1c:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8004a20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a24:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004a26:	d103      	bne.n	8004a30 <ft5336_ReadID+0x38>
  return (ucReadId);
 8004a28:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004a2c:	b003      	add	sp, #12
 8004a2e:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004a30:	2b51      	cmp	r3, #81	; 0x51
 8004a32:	d1ec      	bne.n	8004a0e <ft5336_ReadID+0x16>
 8004a34:	e7f8      	b.n	8004a28 <ft5336_ReadID+0x30>
 8004a36:	bf00      	nop
 8004a38:	20002146 	.word	0x20002146

08004a3c <ft5336_TS_DetectTouch>:
{
 8004a3c:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8004a3e:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004a40:	2102      	movs	r1, #2
 8004a42:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8004a44:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004a48:	f7fd f852 	bl	8001af0 <TS_IO_Read>
 8004a4c:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8004a50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8004a5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	d901      	bls.n	8004a68 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8004a64:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004a68:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004a6c:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8004a6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004a72:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8004a74:	2200      	movs	r2, #0
 8004a76:	709a      	strb	r2, [r3, #2]
}
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd10      	pop	{r4, pc}
 8004a7c:	20002146 	.word	0x20002146

08004a80 <ft5336_TS_GetXY>:
{
 8004a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004a84:	4d2f      	ldr	r5, [pc, #188]	; (8004b44 <ft5336_TS_GetXY+0xc4>)
{
 8004a86:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8004a88:	2300      	movs	r3, #0
{
 8004a8a:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004a8c:	78ac      	ldrb	r4, [r5, #2]
 8004a8e:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8004a90:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004a94:	42a2      	cmp	r2, r4
 8004a96:	d94d      	bls.n	8004b34 <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
 8004a98:	2c09      	cmp	r4, #9
 8004a9a:	d84e      	bhi.n	8004b3a <ft5336_TS_GetXY+0xba>
 8004a9c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	1d19      	adds	r1, r3, #4
 8004aa6:	f103 0b03 	add.w	fp, r3, #3
 8004aaa:	f103 0a06 	add.w	sl, r3, #6
 8004aae:	3305      	adds	r3, #5
 8004ab0:	b2c9      	uxtb	r1, r1
 8004ab2:	fa5f fb8b 	uxtb.w	fp, fp
 8004ab6:	fa5f fa8a 	uxtb.w	sl, sl
 8004aba:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004abe:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004ac0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8004b48 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f7fd f813 	bl	8001af0 <TS_IO_Read>
 8004aca:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004ace:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004ad2:	4659      	mov	r1, fp
 8004ad4:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004ad6:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004ada:	f7fd f809 	bl	8001af0 <TS_IO_Read>
 8004ade:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004ae2:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004ae4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004ae8:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004aea:	f8b9 2000 	ldrh.w	r2, [r9]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004af4:	4313      	orrs	r3, r2
    *X = coord;
 8004af6:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004af8:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004afc:	f7fc fff8 	bl	8001af0 <TS_IO_Read>
 8004b00:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004b04:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004b06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004b0a:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004b0c:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004b10:	f7fc ffee 	bl	8001af0 <TS_IO_Read>
 8004b14:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004b18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004b1c:	f8b9 2000 	ldrh.w	r2, [r9]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 8004b2c:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8004b2e:	78ab      	ldrb	r3, [r5, #2]
 8004b30:	3301      	adds	r3, #1
 8004b32:	70ab      	strb	r3, [r5, #2]
}
 8004b34:	b003      	add	sp, #12
 8004b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004b3a:	4698      	mov	r8, r3
 8004b3c:	469a      	mov	sl, r3
 8004b3e:	469b      	mov	fp, r3
 8004b40:	4619      	mov	r1, r3
 8004b42:	e7bc      	b.n	8004abe <ft5336_TS_GetXY+0x3e>
 8004b44:	20002146 	.word	0x20002146
 8004b48:	20002144 	.word	0x20002144

08004b4c <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	21a4      	movs	r1, #164	; 0xa4
 8004b50:	b2c0      	uxtb	r0, r0
 8004b52:	f7fc bfb3 	b.w	8001abc <TS_IO_Write>

08004b56 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004b56:	2200      	movs	r2, #0
 8004b58:	21a4      	movs	r1, #164	; 0xa4
 8004b5a:	b2c0      	uxtb	r0, r0
 8004b5c:	f7fc bfae 	b.w	8001abc <TS_IO_Write>

08004b60 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8004b60:	f7ff bff9 	b.w	8004b56 <ft5336_TS_DisableIT>

08004b64 <ft5336_TS_ClearIT>:
 8004b64:	4770      	bx	lr
	...

08004b68 <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 8004b68:	4b02      	ldr	r3, [pc, #8]	; (8004b74 <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004b6a:	781a      	ldrb	r2, [r3, #0]
 8004b6c:	b90a      	cbnz	r2, 8004b72 <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
}
 8004b72:	4770      	bx	lr
 8004b74:	20002146 	.word	0x20002146

08004b78 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b78:	4a07      	ldr	r2, [pc, #28]	; (8004b98 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b7a:	2003      	movs	r0, #3
{
 8004b7c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b7e:	6813      	ldr	r3, [r2, #0]
 8004b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b84:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b86:	f000 f82d 	bl	8004be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	f7fc fe50 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b90:	f7fc fbf2 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004b94:	2000      	movs	r0, #0
 8004b96:	bd08      	pop	{r3, pc}
 8004b98:	40023c00 	.word	0x40023c00

08004b9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004b9c:	4a03      	ldr	r2, [pc, #12]	; (8004bac <HAL_IncTick+0x10>)
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <HAL_IncTick+0x14>)
 8004ba0:	6811      	ldr	r1, [r2, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	440b      	add	r3, r1
 8004ba6:	6013      	str	r3, [r2, #0]
}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	2000214c 	.word	0x2000214c
 8004bb0:	20000038 	.word	0x20000038

08004bb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004bb4:	4b01      	ldr	r3, [pc, #4]	; (8004bbc <HAL_GetTick+0x8>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
}
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	2000214c 	.word	0x2000214c

08004bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004bc4:	f7ff fff6 	bl	8004bb4 <HAL_GetTick>
 8004bc8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bca:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004bcc:	bf1e      	ittt	ne
 8004bce:	4b04      	ldrne	r3, [pc, #16]	; (8004be0 <HAL_Delay+0x20>)
 8004bd0:	781b      	ldrbne	r3, [r3, #0]
 8004bd2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bd4:	f7ff ffee 	bl	8004bb4 <HAL_GetTick>
 8004bd8:	1b43      	subs	r3, r0, r5
 8004bda:	42a3      	cmp	r3, r4
 8004bdc:	d3fa      	bcc.n	8004bd4 <HAL_Delay+0x14>
  {
  }
}
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	20000038 	.word	0x20000038

08004be4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be4:	4907      	ldr	r1, [pc, #28]	; (8004c04 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004be6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bf2:	0412      	lsls	r2, r2, #16
 8004bf4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004c00:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004c02:	4770      	bx	lr
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c08:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c0a:	b530      	push	{r4, r5, lr}
 8004c0c:	68dc      	ldr	r4, [r3, #12]
 8004c0e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c12:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c16:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c18:	2d04      	cmp	r5, #4
 8004c1a:	bf28      	it	cs
 8004c1c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c1e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c24:	bf8c      	ite	hi
 8004c26:	3c03      	subhi	r4, #3
 8004c28:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c2a:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8004c2e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c30:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c34:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c38:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c3c:	fa01 f104 	lsl.w	r1, r1, r4
 8004c40:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c44:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004c48:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004c4a:	db06      	blt.n	8004c5a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004c50:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004c54:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004c58:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5a:	f000 000f 	and.w	r0, r0, #15
 8004c5e:	4a02      	ldr	r2, [pc, #8]	; (8004c68 <HAL_NVIC_SetPriority+0x60>)
 8004c60:	5413      	strb	r3, [r2, r0]
 8004c62:	e7f9      	b.n	8004c58 <HAL_NVIC_SetPriority+0x50>
 8004c64:	e000ed00 	.word	0xe000ed00
 8004c68:	e000ed14 	.word	0xe000ed14

08004c6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	db08      	blt.n	8004c82 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c70:	0942      	lsrs	r2, r0, #5
 8004c72:	2301      	movs	r3, #1
 8004c74:	f000 001f 	and.w	r0, r0, #31
 8004c78:	fa03 f000 	lsl.w	r0, r3, r0
 8004c7c:	4b01      	ldr	r3, [pc, #4]	; (8004c84 <HAL_NVIC_EnableIRQ+0x18>)
 8004c7e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004c82:	4770      	bx	lr
 8004c84:	e000e100 	.word	0xe000e100

08004c88 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	db0d      	blt.n	8004ca8 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c8c:	0943      	lsrs	r3, r0, #5
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f000 001f 	and.w	r0, r0, #31
 8004c94:	3320      	adds	r3, #32
 8004c96:	fa02 f000 	lsl.w	r0, r2, r0
 8004c9a:	4a04      	ldr	r2, [pc, #16]	; (8004cac <HAL_NVIC_DisableIRQ+0x24>)
 8004c9c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ca0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ca4:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	e000e100 	.word	0xe000e100

08004cb0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004cb0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004cb4:	4b04      	ldr	r3, [pc, #16]	; (8004cc8 <HAL_MPU_Disable+0x18>)
 8004cb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000ed00 	.word	0xe000ed00

08004ccc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_MPU_Enable+0x1c>)
 8004cce:	f040 0001 	orr.w	r0, r0, #1
 8004cd2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004cde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ce2:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004ce6:	4770      	bx	lr
 8004ce8:	e000ed00 	.word	0xe000ed00

08004cec <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004cec:	7843      	ldrb	r3, [r0, #1]
 8004cee:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <HAL_MPU_ConfigRegion+0x54>)
{
 8004cf0:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8004cf2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8004cf6:	7801      	ldrb	r1, [r0, #0]
 8004cf8:	b1e9      	cbz	r1, 8004d36 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004cfa:	6843      	ldr	r3, [r0, #4]
 8004cfc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004d00:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d02:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004d04:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d06:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004d0a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004d0c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004d0e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004d12:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004d14:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004d18:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004d1a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004d1e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004d24:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004d26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d2a:	7a01      	ldrb	r1, [r0, #8]
 8004d2c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d30:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004d34:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8004d36:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004d3a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8004d3e:	e7f9      	b.n	8004d34 <HAL_MPU_ConfigRegion+0x48>
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d44:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d46:	4604      	mov	r4, r0
 8004d48:	b908      	cbnz	r0, 8004d4e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8004d4a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8004d4c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d4e:	7f43      	ldrb	r3, [r0, #29]
 8004d50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d54:	b913      	cbnz	r3, 8004d5c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8004d56:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004d58:	f7fc fb2c 	bl	80013b4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004d60:	7923      	ldrb	r3, [r4, #4]
 8004d62:	b9e3      	cbnz	r3, 8004d9e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	4a13      	ldr	r2, [pc, #76]	; (8004db4 <HAL_CRC_Init+0x70>)
 8004d68:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	f022 0218 	bic.w	r2, r2, #24
 8004d70:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004d72:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004d74:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004d76:	b9d2      	cbnz	r2, 8004dae <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004d7c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004d7e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	6961      	ldr	r1, [r4, #20]
 8004d84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d88:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004d8a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004d8c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d94:	430a      	orrs	r2, r1
 8004d96:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004d9c:	e7d6      	b.n	8004d4c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004d9e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004da2:	4620      	mov	r0, r4
 8004da4:	f000 f808 	bl	8004db8 <HAL_CRCEx_Polynomial_Set>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d0e2      	beq.n	8004d72 <HAL_CRC_Init+0x2e>
 8004dac:	e7cd      	b.n	8004d4a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004dae:	6922      	ldr	r2, [r4, #16]
 8004db0:	e7e4      	b.n	8004d7c <HAL_CRC_Init+0x38>
 8004db2:	bf00      	nop
 8004db4:	04c11db7 	.word	0x04c11db7

08004db8 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004db8:	231f      	movs	r3, #31
{
 8004dba:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	d31c      	bcc.n	8004dfa <HAL_CRCEx_Polynomial_Set+0x42>
 8004dc0:	fa21 f403 	lsr.w	r4, r1, r3
 8004dc4:	07e4      	lsls	r4, r4, #31
 8004dc6:	d5f9      	bpl.n	8004dbc <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004dc8:	2a10      	cmp	r2, #16
 8004dca:	d012      	beq.n	8004df2 <HAL_CRCEx_Polynomial_Set+0x3a>
 8004dcc:	d804      	bhi.n	8004dd8 <HAL_CRCEx_Polynomial_Set+0x20>
 8004dce:	b13a      	cbz	r2, 8004de0 <HAL_CRCEx_Polynomial_Set+0x28>
 8004dd0:	2a08      	cmp	r2, #8
 8004dd2:	d010      	beq.n	8004df6 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8004dd4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8004dd6:	e00b      	b.n	8004df0 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8004dd8:	2a18      	cmp	r2, #24
 8004dda:	d1fb      	bne.n	8004dd4 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004ddc:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004dde:	d8f9      	bhi.n	8004dd4 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004de0:	6800      	ldr	r0, [r0, #0]
 8004de2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004de4:	6883      	ldr	r3, [r0, #8]
 8004de6:	f023 0318 	bic.w	r3, r3, #24
 8004dea:	431a      	orrs	r2, r3
 8004dec:	6082      	str	r2, [r0, #8]
 8004dee:	2000      	movs	r0, #0
}
 8004df0:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004df2:	2b07      	cmp	r3, #7
 8004df4:	e7f3      	b.n	8004dde <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004df6:	2b0f      	cmp	r3, #15
 8004df8:	e7f1      	b.n	8004dde <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8004dfa:	2a00      	cmp	r2, #0
 8004dfc:	d1ea      	bne.n	8004dd4 <HAL_CRCEx_Polynomial_Set+0x1c>
 8004dfe:	e7ef      	b.n	8004de0 <HAL_CRCEx_Polynomial_Set+0x28>

08004e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e04:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8004e06:	f7ff fed5 	bl	8004bb4 <HAL_GetTick>
 8004e0a:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e0c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d006      	beq.n	8004e22 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e14:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8004e16:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e18:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 8004e20:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	f022 0216 	bic.w	r2, r2, #22
 8004e2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e32:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e36:	b90a      	cbnz	r2, 8004e3c <HAL_DMA_Abort+0x3c>
 8004e38:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004e3a:	b11a      	cbz	r2, 8004e44 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	f022 0208 	bic.w	r2, r2, #8
 8004e42:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	f022 0201 	bic.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f013 0301 	ands.w	r3, r3, #1
 8004e54:	d10a      	bne.n	8004e6c <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e56:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004e58:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8004e5a:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e5c:	408a      	lsls	r2, r1
 8004e5e:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004e60:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8004e62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004e66:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8004e6a:	e7d9      	b.n	8004e20 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e6c:	f7ff fea2 	bl	8004bb4 <HAL_GetTick>
 8004e70:	1b40      	subs	r0, r0, r5
 8004e72:	2805      	cmp	r0, #5
 8004e74:	d9ea      	bls.n	8004e4c <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e76:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e78:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e7a:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004e7c:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e7e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004e82:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004e86:	e7cb      	b.n	8004e20 <HAL_DMA_Abort+0x20>

08004e88 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004e88:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	b330      	cbz	r0, 8004edc <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004e8e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004e92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e96:	b91b      	cbnz	r3, 8004ea0 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004e98:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004e9c:	f7fc faa0 	bl	80013e0 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004ea0:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ea2:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004ea4:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004ea6:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ea8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004eac:	6813      	ldr	r3, [r2, #0]
 8004eae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004eb2:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004eb4:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004eb6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004eb8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004eba:	f023 0307 	bic.w	r3, r3, #7
 8004ebe:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004ec0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004ec2:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004ec4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004ec6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004eca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004ed2:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004ed4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004ed6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8004eda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004edc:	2001      	movs	r0, #1
 8004ede:	e7fc      	b.n	8004eda <HAL_DMA2D_Init+0x52>

08004ee0 <HAL_DMA2D_LineEventCallback>:
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004ee4:	6803      	ldr	r3, [r0, #0]
{
 8004ee6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004ee8:	685e      	ldr	r6, [r3, #4]
{
 8004eea:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004eec:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004eee:	07f2      	lsls	r2, r6, #31
 8004ef0:	d514      	bpl.n	8004f1c <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004ef2:	05e9      	lsls	r1, r5, #23
 8004ef4:	d512      	bpl.n	8004f1c <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004efc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004efe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004f00:	f042 0201 	orr.w	r2, r2, #1
 8004f04:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004f06:	2201      	movs	r2, #1
 8004f08:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f0a:	2304      	movs	r3, #4
 8004f0c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f10:	2300      	movs	r3, #0
 8004f12:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004f16:	6943      	ldr	r3, [r0, #20]
 8004f18:	b103      	cbz	r3, 8004f1c <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004f1a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004f1c:	06b2      	lsls	r2, r6, #26
 8004f1e:	d516      	bpl.n	8004f4e <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004f20:	04ab      	lsls	r3, r5, #18
 8004f22:	d514      	bpl.n	8004f4e <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f2c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004f2e:	2220      	movs	r2, #32
 8004f30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004f32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f40:	2300      	movs	r3, #0
 8004f42:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004f46:	6963      	ldr	r3, [r4, #20]
 8004f48:	b10b      	cbz	r3, 8004f4e <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004f4e:	0730      	lsls	r0, r6, #28
 8004f50:	d516      	bpl.n	8004f80 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004f52:	0529      	lsls	r1, r5, #20
 8004f54:	d514      	bpl.n	8004f80 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004f60:	2208      	movs	r2, #8
 8004f62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004f64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f72:	2300      	movs	r3, #0
 8004f74:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004f78:	6963      	ldr	r3, [r4, #20]
 8004f7a:	b10b      	cbz	r3, 8004f80 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004f80:	0772      	lsls	r2, r6, #29
 8004f82:	d50b      	bpl.n	8004f9c <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004f84:	056b      	lsls	r3, r5, #21
 8004f86:	d509      	bpl.n	8004f9c <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004f88:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004f8a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f92:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004f94:	2204      	movs	r2, #4
 8004f96:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004f98:	f7ff ffa2 	bl	8004ee0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004f9c:	07b0      	lsls	r0, r6, #30
 8004f9e:	d514      	bpl.n	8004fca <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004fa0:	05a9      	lsls	r1, r5, #22
 8004fa2:	d512      	bpl.n	8004fca <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004fae:	2202      	movs	r2, #2
 8004fb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004fb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004fb4:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004fc2:	6923      	ldr	r3, [r4, #16]
 8004fc4:	b10b      	cbz	r3, 8004fca <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004fca:	06f2      	lsls	r2, r6, #27
 8004fcc:	d513      	bpl.n	8004ff6 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004fce:	04eb      	lsls	r3, r5, #19
 8004fd0:	d511      	bpl.n	8004ff6 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004fd2:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004fd4:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fdc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004fde:	2210      	movs	r2, #16
 8004fe0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004fe2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004fe4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004fec:	2300      	movs	r3, #0
 8004fee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004ff2:	f7ff ff76 	bl	8004ee2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}

08004ff8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004ffa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	f04f 0302 	mov.w	r3, #2
 8005004:	d02b      	beq.n	800505e <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005006:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 800500a:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800500c:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8005010:	4f1c      	ldr	r7, [pc, #112]	; (8005084 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 8005012:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005016:	010e      	lsls	r6, r1, #4
 8005018:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800501a:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 800501e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005022:	3c09      	subs	r4, #9
 8005024:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005026:	bf96      	itet	ls
 8005028:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800502c:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005030:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005032:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005034:	b9a9      	cbnz	r1, 8005062 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005036:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005038:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800503a:	ea01 0107 	and.w	r1, r1, r7
 800503e:	ea42 0201 	orr.w	r2, r2, r1
 8005042:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005044:	6982      	ldr	r2, [r0, #24]
 8005046:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005048:	d803      	bhi.n	8005052 <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800504a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800504c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005050:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005052:	2301      	movs	r3, #1
 8005054:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005058:	2300      	movs	r3, #0
 800505a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800505e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005060:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005062:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005064:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005066:	ea01 0107 	and.w	r1, r1, r7
 800506a:	ea42 0201 	orr.w	r2, r2, r1
 800506e:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005070:	eb00 0206 	add.w	r2, r0, r6
 8005074:	6992      	ldr	r2, [r2, #24]
 8005076:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005078:	d8eb      	bhi.n	8005052 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800507a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800507e:	621d      	str	r5, [r3, #32]
 8005080:	e7e7      	b.n	8005052 <HAL_DMA2D_ConfigLayer+0x5a>
 8005082:	bf00      	nop
 8005084:	00fcfff0 	.word	0x00fcfff0

08005088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800508c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800524c <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005092:	4a6c      	ldr	r2, [pc, #432]	; (8005244 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8005094:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005096:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8005098:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800509a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800509e:	43ac      	bics	r4, r5
 80050a0:	f040 80b6 	bne.w	8005210 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050a4:	684d      	ldr	r5, [r1, #4]
 80050a6:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050aa:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050ac:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050b0:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050b4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050b6:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050b8:	2f01      	cmp	r7, #1
 80050ba:	d834      	bhi.n	8005126 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 80050bc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050be:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80050c2:	68cf      	ldr	r7, [r1, #12]
 80050c4:	fa07 f708 	lsl.w	r7, r7, r8
 80050c8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80050cc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80050ce:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050d0:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050d4:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80050d8:	409f      	lsls	r7, r3
 80050da:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80050de:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80050e0:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050e2:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050e4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80050e8:	688f      	ldr	r7, [r1, #8]
 80050ea:	fa07 f708 	lsl.w	r7, r7, r8
 80050ee:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80050f2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050f4:	d119      	bne.n	800512a <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 80050f6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80050fa:	f003 0b07 	and.w	fp, r3, #7
 80050fe:	f04f 0e0f 	mov.w	lr, #15
 8005102:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8005106:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800510a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800510e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8005112:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005116:	690f      	ldr	r7, [r1, #16]
 8005118:	fa07 f70b 	lsl.w	r7, r7, fp
 800511c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8005120:	f8ca 7020 	str.w	r7, [sl, #32]
 8005124:	e001      	b.n	800512a <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005126:	2c03      	cmp	r4, #3
 8005128:	d1da      	bne.n	80050e0 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 800512a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800512c:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005130:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005134:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005138:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 800513c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800513e:	d067      	beq.n	8005210 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005140:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8005144:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005148:	f003 0703 	and.w	r7, r3, #3
 800514c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005150:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005154:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005158:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515a:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800515e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8005162:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8005166:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800516a:	9401      	str	r4, [sp, #4]
 800516c:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800516e:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8005172:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005176:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800517a:	4c33      	ldr	r4, [pc, #204]	; (8005248 <HAL_GPIO_Init+0x1c0>)
 800517c:	42a0      	cmp	r0, r4
 800517e:	d04e      	beq.n	800521e <HAL_GPIO_Init+0x196>
 8005180:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005184:	42a0      	cmp	r0, r4
 8005186:	d04c      	beq.n	8005222 <HAL_GPIO_Init+0x19a>
 8005188:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800518c:	42a0      	cmp	r0, r4
 800518e:	d04a      	beq.n	8005226 <HAL_GPIO_Init+0x19e>
 8005190:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005194:	42a0      	cmp	r0, r4
 8005196:	d048      	beq.n	800522a <HAL_GPIO_Init+0x1a2>
 8005198:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800519c:	42a0      	cmp	r0, r4
 800519e:	d046      	beq.n	800522e <HAL_GPIO_Init+0x1a6>
 80051a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80051a4:	42a0      	cmp	r0, r4
 80051a6:	d044      	beq.n	8005232 <HAL_GPIO_Init+0x1aa>
 80051a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80051ac:	42a0      	cmp	r0, r4
 80051ae:	d042      	beq.n	8005236 <HAL_GPIO_Init+0x1ae>
 80051b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80051b4:	42a0      	cmp	r0, r4
 80051b6:	d040      	beq.n	800523a <HAL_GPIO_Init+0x1b2>
 80051b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80051bc:	42a0      	cmp	r0, r4
 80051be:	d03e      	beq.n	800523e <HAL_GPIO_Init+0x1b6>
 80051c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80051c4:	42a0      	cmp	r0, r4
 80051c6:	bf0c      	ite	eq
 80051c8:	2409      	moveq	r4, #9
 80051ca:	240a      	movne	r4, #10
 80051cc:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051ce:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80051d0:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80051d4:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80051d6:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 80051da:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80051dc:	bf54      	ite	pl
 80051de:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80051e0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051e4:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 80051e6:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80051e8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80051ea:	bf54      	ite	pl
 80051ec:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80051ee:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051f2:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 80051f4:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80051f6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80051f8:	bf54      	ite	pl
 80051fa:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80051fc:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005200:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8005202:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8005204:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005206:	bf54      	ite	pl
 8005208:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800520a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800520e:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005210:	3301      	adds	r3, #1
 8005212:	2b10      	cmp	r3, #16
 8005214:	f47f af3e 	bne.w	8005094 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8005218:	b003      	add	sp, #12
 800521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800521e:	2400      	movs	r4, #0
 8005220:	e7d4      	b.n	80051cc <HAL_GPIO_Init+0x144>
 8005222:	2401      	movs	r4, #1
 8005224:	e7d2      	b.n	80051cc <HAL_GPIO_Init+0x144>
 8005226:	2402      	movs	r4, #2
 8005228:	e7d0      	b.n	80051cc <HAL_GPIO_Init+0x144>
 800522a:	2403      	movs	r4, #3
 800522c:	e7ce      	b.n	80051cc <HAL_GPIO_Init+0x144>
 800522e:	2404      	movs	r4, #4
 8005230:	e7cc      	b.n	80051cc <HAL_GPIO_Init+0x144>
 8005232:	2405      	movs	r4, #5
 8005234:	e7ca      	b.n	80051cc <HAL_GPIO_Init+0x144>
 8005236:	2406      	movs	r4, #6
 8005238:	e7c8      	b.n	80051cc <HAL_GPIO_Init+0x144>
 800523a:	2407      	movs	r4, #7
 800523c:	e7c6      	b.n	80051cc <HAL_GPIO_Init+0x144>
 800523e:	2408      	movs	r4, #8
 8005240:	e7c4      	b.n	80051cc <HAL_GPIO_Init+0x144>
 8005242:	bf00      	nop
 8005244:	40013c00 	.word	0x40013c00
 8005248:	40020000 	.word	0x40020000
 800524c:	40023800 	.word	0x40023800

08005250 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005254:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005256:	4c4a      	ldr	r4, [pc, #296]	; (8005380 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005258:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8005388 <HAL_GPIO_DeInit+0x138>
 800525c:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800538c <HAL_GPIO_DeInit+0x13c>
 8005260:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005390 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8005264:	2301      	movs	r3, #1
 8005266:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 800526a:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800526e:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8005272:	d16e      	bne.n	8005352 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8005274:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005278:	f002 0c03 	and.w	ip, r2, #3
 800527c:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800527e:	4b41      	ldr	r3, [pc, #260]	; (8005384 <HAL_GPIO_DeInit+0x134>)
 8005280:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005284:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005288:	4298      	cmp	r0, r3
 800528a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800528e:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8005292:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005296:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800529a:	d05f      	beq.n	800535c <HAL_GPIO_DeInit+0x10c>
 800529c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a0:	4298      	cmp	r0, r3
 80052a2:	d05d      	beq.n	8005360 <HAL_GPIO_DeInit+0x110>
 80052a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a8:	4298      	cmp	r0, r3
 80052aa:	d05b      	beq.n	8005364 <HAL_GPIO_DeInit+0x114>
 80052ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b0:	4298      	cmp	r0, r3
 80052b2:	d059      	beq.n	8005368 <HAL_GPIO_DeInit+0x118>
 80052b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b8:	4298      	cmp	r0, r3
 80052ba:	d057      	beq.n	800536c <HAL_GPIO_DeInit+0x11c>
 80052bc:	4548      	cmp	r0, r9
 80052be:	d057      	beq.n	8005370 <HAL_GPIO_DeInit+0x120>
 80052c0:	4550      	cmp	r0, sl
 80052c2:	d057      	beq.n	8005374 <HAL_GPIO_DeInit+0x124>
 80052c4:	4558      	cmp	r0, fp
 80052c6:	d057      	beq.n	8005378 <HAL_GPIO_DeInit+0x128>
 80052c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052cc:	4298      	cmp	r0, r3
 80052ce:	d055      	beq.n	800537c <HAL_GPIO_DeInit+0x12c>
 80052d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d4:	4298      	cmp	r0, r3
 80052d6:	bf0c      	ite	eq
 80052d8:	2309      	moveq	r3, #9
 80052da:	230a      	movne	r3, #10
 80052dc:	fa03 f30c 	lsl.w	r3, r3, ip
 80052e0:	4543      	cmp	r3, r8
 80052e2:	d113      	bne.n	800530c <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	ea23 0307 	bic.w	r3, r3, r7
 80052ea:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80052ec:	6863      	ldr	r3, [r4, #4]
 80052ee:	ea23 0307 	bic.w	r3, r3, r7
 80052f2:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80052f4:	68e3      	ldr	r3, [r4, #12]
 80052f6:	ea23 0307 	bic.w	r3, r3, r7
 80052fa:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80052fc:	68a3      	ldr	r3, [r4, #8]
 80052fe:	ea23 0307 	bic.w	r3, r3, r7
 8005302:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005304:	68ab      	ldr	r3, [r5, #8]
 8005306:	ea23 0306 	bic.w	r3, r3, r6
 800530a:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800530c:	2603      	movs	r6, #3
 800530e:	0053      	lsls	r3, r2, #1
 8005310:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005312:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005316:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800531a:	270f      	movs	r7, #15
 800531c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005320:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005324:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005328:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800532a:	fa22 f506 	lsr.w	r5, r2, r6
 800532e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005332:	6a2e      	ldr	r6, [r5, #32]
 8005334:	ea26 0707 	bic.w	r7, r6, r7
 8005338:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800533a:	68c5      	ldr	r5, [r0, #12]
 800533c:	ea25 0503 	bic.w	r5, r5, r3
 8005340:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005342:	6845      	ldr	r5, [r0, #4]
 8005344:	ea25 050e 	bic.w	r5, r5, lr
 8005348:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800534a:	6885      	ldr	r5, [r0, #8]
 800534c:	ea25 0303 	bic.w	r3, r5, r3
 8005350:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005352:	3201      	adds	r2, #1
 8005354:	2a10      	cmp	r2, #16
 8005356:	d185      	bne.n	8005264 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800535c:	2300      	movs	r3, #0
 800535e:	e7bd      	b.n	80052dc <HAL_GPIO_DeInit+0x8c>
 8005360:	2301      	movs	r3, #1
 8005362:	e7bb      	b.n	80052dc <HAL_GPIO_DeInit+0x8c>
 8005364:	2302      	movs	r3, #2
 8005366:	e7b9      	b.n	80052dc <HAL_GPIO_DeInit+0x8c>
 8005368:	2303      	movs	r3, #3
 800536a:	e7b7      	b.n	80052dc <HAL_GPIO_DeInit+0x8c>
 800536c:	2304      	movs	r3, #4
 800536e:	e7b5      	b.n	80052dc <HAL_GPIO_DeInit+0x8c>
 8005370:	2305      	movs	r3, #5
 8005372:	e7b3      	b.n	80052dc <HAL_GPIO_DeInit+0x8c>
 8005374:	2306      	movs	r3, #6
 8005376:	e7b1      	b.n	80052dc <HAL_GPIO_DeInit+0x8c>
 8005378:	2307      	movs	r3, #7
 800537a:	e7af      	b.n	80052dc <HAL_GPIO_DeInit+0x8c>
 800537c:	2308      	movs	r3, #8
 800537e:	e7ad      	b.n	80052dc <HAL_GPIO_DeInit+0x8c>
 8005380:	40013c00 	.word	0x40013c00
 8005384:	40020000 	.word	0x40020000
 8005388:	40021400 	.word	0x40021400
 800538c:	40021800 	.word	0x40021800
 8005390:	40021c00 	.word	0x40021c00

08005394 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005394:	b10a      	cbz	r2, 800539a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005396:	6181      	str	r1, [r0, #24]
  }
}
 8005398:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800539a:	0409      	lsls	r1, r1, #16
 800539c:	e7fb      	b.n	8005396 <HAL_GPIO_WritePin+0x2>

0800539e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800539e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053a0:	ea01 0203 	and.w	r2, r1, r3
 80053a4:	ea21 0103 	bic.w	r1, r1, r3
 80053a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80053ac:	6181      	str	r1, [r0, #24]
}
 80053ae:	4770      	bx	lr

080053b0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053b0:	6803      	ldr	r3, [r0, #0]
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	0791      	lsls	r1, r2, #30
 80053b6:	d501      	bpl.n	80053bc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053b8:	2200      	movs	r2, #0
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	07d2      	lsls	r2, r2, #31
 80053c0:	d403      	bmi.n	80053ca <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	619a      	str	r2, [r3, #24]
  }
}
 80053ca:	4770      	bx	lr

080053cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053cc:	b530      	push	{r4, r5, lr}
 80053ce:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053d0:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053d4:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053d6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80053d8:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80053de:	4a05      	ldr	r2, [pc, #20]	; (80053f4 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053e0:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80053e2:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80053ea:	ea20 0002 	bic.w	r0, r0, r2
 80053ee:	4303      	orrs	r3, r0
 80053f0:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053f2:	bd30      	pop	{r4, r5, pc}
 80053f4:	03ff63ff 	.word	0x03ff63ff

080053f8 <I2C_IsErrorOccurred>:
{
 80053f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80053fc:	6803      	ldr	r3, [r0, #0]
{
 80053fe:	4605      	mov	r5, r0
 8005400:	4688      	mov	r8, r1
 8005402:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005404:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005406:	f014 0410 	ands.w	r4, r4, #16
 800540a:	d079      	beq.n	8005500 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800540c:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800540e:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8005410:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005414:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005416:	682b      	ldr	r3, [r5, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	0694      	lsls	r4, r2, #26
 800541c:	d436      	bmi.n	800548c <I2C_IsErrorOccurred+0x94>
 800541e:	b10e      	cbz	r6, 8005424 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8005420:	2404      	movs	r4, #4
 8005422:	e039      	b.n	8005498 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8005424:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005428:	d0f6      	beq.n	8005418 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800542a:	f7ff fbc3 	bl	8004bb4 <HAL_GetTick>
 800542e:	1bc0      	subs	r0, r0, r7
 8005430:	4540      	cmp	r0, r8
 8005432:	d802      	bhi.n	800543a <I2C_IsErrorOccurred+0x42>
 8005434:	f1b8 0f00 	cmp.w	r8, #0
 8005438:	d1ed      	bne.n	8005416 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800543a:	682b      	ldr	r3, [r5, #0]
 800543c:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800543e:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005442:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005444:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005446:	0400      	lsls	r0, r0, #16
 8005448:	d50a      	bpl.n	8005460 <I2C_IsErrorOccurred+0x68>
 800544a:	0449      	lsls	r1, r1, #17
 800544c:	d408      	bmi.n	8005460 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 800544e:	2a20      	cmp	r2, #32
 8005450:	d006      	beq.n	8005460 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005458:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800545a:	f7ff fbab 	bl	8004bb4 <HAL_GetTick>
 800545e:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	699c      	ldr	r4, [r3, #24]
 8005464:	f014 0420 	ands.w	r4, r4, #32
 8005468:	d1d5      	bne.n	8005416 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800546a:	f7ff fba3 	bl	8004bb4 <HAL_GetTick>
 800546e:	1bc0      	subs	r0, r0, r7
 8005470:	2819      	cmp	r0, #25
 8005472:	d9f5      	bls.n	8005460 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005474:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8005476:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8005478:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800547c:	f043 0320 	orr.w	r3, r3, #32
 8005480:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005482:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005486:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 800548a:	e7e9      	b.n	8005460 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 800548c:	2e00      	cmp	r6, #0
 800548e:	d1c7      	bne.n	8005420 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005490:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8005492:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8005494:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005496:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8005498:	682b      	ldr	r3, [r5, #0]
 800549a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800549c:	05d0      	lsls	r0, r2, #23
 800549e:	d505      	bpl.n	80054ac <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054a0:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80054a4:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80054a8:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054aa:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054ac:	0551      	lsls	r1, r2, #21
 80054ae:	d505      	bpl.n	80054bc <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80054b4:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80054b8:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054ba:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054bc:	0592      	lsls	r2, r2, #22
 80054be:	d521      	bpl.n	8005504 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054c0:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80054c4:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054c8:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80054ca:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 80054cc:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 80054ce:	f7ff ff6f 	bl	80053b0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80054d2:	682a      	ldr	r2, [r5, #0]
 80054d4:	6853      	ldr	r3, [r2, #4]
 80054d6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80054da:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80054de:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80054e8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80054ea:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80054ec:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 80054ee:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054f0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80054fa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80054fe:	e003      	b.n	8005508 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	4626      	mov	r6, r4
 8005502:	e7c9      	b.n	8005498 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8005504:	2e00      	cmp	r6, #0
 8005506:	d1e0      	bne.n	80054ca <I2C_IsErrorOccurred+0xd2>
}
 8005508:	4630      	mov	r0, r6
 800550a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800550e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800550e:	b570      	push	{r4, r5, r6, lr}
 8005510:	4604      	mov	r4, r0
 8005512:	460d      	mov	r5, r1
 8005514:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	079b      	lsls	r3, r3, #30
 800551c:	d501      	bpl.n	8005522 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800551e:	2000      	movs	r0, #0
}
 8005520:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005522:	4632      	mov	r2, r6
 8005524:	4629      	mov	r1, r5
 8005526:	4620      	mov	r0, r4
 8005528:	f7ff ff66 	bl	80053f8 <I2C_IsErrorOccurred>
 800552c:	b9a0      	cbnz	r0, 8005558 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800552e:	1c6a      	adds	r2, r5, #1
 8005530:	d0f1      	beq.n	8005516 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7ff fb3f 	bl	8004bb4 <HAL_GetTick>
 8005536:	1b80      	subs	r0, r0, r6
 8005538:	42a8      	cmp	r0, r5
 800553a:	d801      	bhi.n	8005540 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800553c:	2d00      	cmp	r5, #0
 800553e:	d1ea      	bne.n	8005516 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005540:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005542:	f043 0320 	orr.w	r3, r3, #32
 8005546:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005548:	2320      	movs	r3, #32
 800554a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800554e:	2300      	movs	r3, #0
 8005550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005554:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005558:	2001      	movs	r0, #1
 800555a:	e7e1      	b.n	8005520 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800555c <I2C_WaitOnFlagUntilTimeout>:
{
 800555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	9f06      	ldr	r7, [sp, #24]
 8005562:	4604      	mov	r4, r0
 8005564:	4688      	mov	r8, r1
 8005566:	4616      	mov	r6, r2
 8005568:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	6993      	ldr	r3, [r2, #24]
 800556e:	ea38 0303 	bics.w	r3, r8, r3
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	42b3      	cmp	r3, r6
 800557a:	d001      	beq.n	8005580 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800557c:	2000      	movs	r0, #0
 800557e:	e015      	b.n	80055ac <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005580:	1c6b      	adds	r3, r5, #1
 8005582:	d0f3      	beq.n	800556c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005584:	f7ff fb16 	bl	8004bb4 <HAL_GetTick>
 8005588:	1bc0      	subs	r0, r0, r7
 800558a:	42a8      	cmp	r0, r5
 800558c:	d801      	bhi.n	8005592 <I2C_WaitOnFlagUntilTimeout+0x36>
 800558e:	2d00      	cmp	r5, #0
 8005590:	d1eb      	bne.n	800556a <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005592:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005594:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005596:	f043 0320 	orr.w	r3, r3, #32
 800559a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800559c:	2320      	movs	r3, #32
 800559e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80055a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80055ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055b0 <I2C_RequestMemoryWrite>:
{
 80055b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80055b4:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80055b6:	4b18      	ldr	r3, [pc, #96]	; (8005618 <I2C_RequestMemoryWrite+0x68>)
{
 80055b8:	4605      	mov	r5, r0
 80055ba:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	b2f2      	uxtb	r2, r6
 80055c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80055c4:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80055c8:	f7ff ff00 	bl	80053cc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055cc:	4628      	mov	r0, r5
 80055ce:	4642      	mov	r2, r8
 80055d0:	4639      	mov	r1, r7
 80055d2:	f7ff ff9c 	bl	800550e <I2C_WaitOnTXISFlagUntilTimeout>
 80055d6:	b118      	cbz	r0, 80055e0 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 80055d8:	2001      	movs	r0, #1
}
 80055da:	b002      	add	sp, #8
 80055dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055e0:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055e2:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055e4:	d10d      	bne.n	8005602 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055e6:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055e8:	2200      	movs	r2, #0
 80055ea:	2180      	movs	r1, #128	; 0x80
 80055ec:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055ee:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055f0:	463b      	mov	r3, r7
 80055f2:	f8cd 8000 	str.w	r8, [sp]
 80055f6:	f7ff ffb1 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80055fa:	3800      	subs	r0, #0
 80055fc:	bf18      	it	ne
 80055fe:	2001      	movne	r0, #1
 8005600:	e7eb      	b.n	80055da <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005602:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005604:	4639      	mov	r1, r7
 8005606:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005608:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800560a:	4642      	mov	r2, r8
 800560c:	f7ff ff7f 	bl	800550e <I2C_WaitOnTXISFlagUntilTimeout>
 8005610:	2800      	cmp	r0, #0
 8005612:	d1e1      	bne.n	80055d8 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	e7e6      	b.n	80055e6 <I2C_RequestMemoryWrite+0x36>
 8005618:	80002000 	.word	0x80002000

0800561c <I2C_RequestMemoryRead>:
{
 800561c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005620:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005622:	4b18      	ldr	r3, [pc, #96]	; (8005684 <I2C_RequestMemoryRead+0x68>)
{
 8005624:	4605      	mov	r5, r0
 8005626:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	b2f2      	uxtb	r2, r6
 800562c:	2300      	movs	r3, #0
{
 800562e:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005632:	f7ff fecb 	bl	80053cc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005636:	4628      	mov	r0, r5
 8005638:	4642      	mov	r2, r8
 800563a:	4639      	mov	r1, r7
 800563c:	f7ff ff67 	bl	800550e <I2C_WaitOnTXISFlagUntilTimeout>
 8005640:	b118      	cbz	r0, 800564a <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8005642:	2001      	movs	r0, #1
}
 8005644:	b002      	add	sp, #8
 8005646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800564a:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800564c:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800564e:	d10d      	bne.n	800566c <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005650:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005652:	2200      	movs	r2, #0
 8005654:	2140      	movs	r1, #64	; 0x40
 8005656:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005658:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800565a:	463b      	mov	r3, r7
 800565c:	f8cd 8000 	str.w	r8, [sp]
 8005660:	f7ff ff7c 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005664:	3800      	subs	r0, #0
 8005666:	bf18      	it	ne
 8005668:	2001      	movne	r0, #1
 800566a:	e7eb      	b.n	8005644 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800566c:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800566e:	4639      	mov	r1, r7
 8005670:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005672:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005674:	4642      	mov	r2, r8
 8005676:	f7ff ff4a 	bl	800550e <I2C_WaitOnTXISFlagUntilTimeout>
 800567a:	2800      	cmp	r0, #0
 800567c:	d1e1      	bne.n	8005642 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800567e:	682b      	ldr	r3, [r5, #0]
 8005680:	e7e6      	b.n	8005650 <I2C_RequestMemoryRead+0x34>
 8005682:	bf00      	nop
 8005684:	80002000 	.word	0x80002000

08005688 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	4604      	mov	r4, r0
 800568c:	460d      	mov	r5, r1
 800568e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	069b      	lsls	r3, r3, #26
 8005696:	d501      	bpl.n	800569c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8005698:	2000      	movs	r0, #0
}
 800569a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800569c:	4632      	mov	r2, r6
 800569e:	4629      	mov	r1, r5
 80056a0:	4620      	mov	r0, r4
 80056a2:	f7ff fea9 	bl	80053f8 <I2C_IsErrorOccurred>
 80056a6:	b990      	cbnz	r0, 80056ce <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a8:	f7ff fa84 	bl	8004bb4 <HAL_GetTick>
 80056ac:	1b80      	subs	r0, r0, r6
 80056ae:	42a8      	cmp	r0, r5
 80056b0:	d801      	bhi.n	80056b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	d1ec      	bne.n	8005690 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056b8:	f043 0320 	orr.w	r3, r3, #32
 80056bc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056be:	2320      	movs	r3, #32
 80056c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80056ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80056ce:	2001      	movs	r0, #1
 80056d0:	e7e3      	b.n	800569a <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080056d2 <HAL_I2C_Init>:
{
 80056d2:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80056d4:	4604      	mov	r4, r0
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d04a      	beq.n	8005770 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80056de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056e2:	b91b      	cbnz	r3, 80056ec <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80056e4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80056e8:	f7fb fe9a 	bl	8001420 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80056ec:	2324      	movs	r3, #36	; 0x24
 80056ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	f022 0201 	bic.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056fc:	6862      	ldr	r2, [r4, #4]
 80056fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005702:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800570a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800570c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005710:	2901      	cmp	r1, #1
 8005712:	d124      	bne.n	800575e <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005714:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005718:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800571a:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571c:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800571e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005726:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800572e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005730:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8005734:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005736:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005738:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800573c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800573e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8005742:	430a      	orrs	r2, r1
 8005744:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800574e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005750:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005752:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005756:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005758:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800575c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800575e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005762:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005764:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005766:	d1d8      	bne.n	800571a <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800576c:	605a      	str	r2, [r3, #4]
 800576e:	e7d4      	b.n	800571a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8005770:	2001      	movs	r0, #1
 8005772:	e7f3      	b.n	800575c <HAL_I2C_Init+0x8a>

08005774 <HAL_I2C_DeInit>:
{
 8005774:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005776:	4604      	mov	r4, r0
 8005778:	b198      	cbz	r0, 80057a2 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800577a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800577c:	2324      	movs	r3, #36	; 0x24
 800577e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	f023 0301 	bic.w	r3, r3, #1
 8005788:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800578a:	f7fb fe8d 	bl	80014a8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578e:	2000      	movs	r0, #0
 8005790:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8005792:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8005796:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800579a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800579c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80057a0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80057a2:	2001      	movs	r0, #1
 80057a4:	e7fc      	b.n	80057a0 <HAL_I2C_DeInit+0x2c>

080057a6 <HAL_I2C_Mem_Write>:
{
 80057a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057aa:	b085      	sub	sp, #20
 80057ac:	469b      	mov	fp, r3
 80057ae:	4604      	mov	r4, r0
 80057b0:	460f      	mov	r7, r1
 80057b2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80057b6:	4692      	mov	sl, r2
 80057b8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80057bc:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	f040 80a3 	bne.w	800590e <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 80057c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ca:	b10b      	cbz	r3, 80057d0 <HAL_I2C_Mem_Write+0x2a>
 80057cc:	9b03      	ldr	r3, [sp, #12]
 80057ce:	b933      	cbnz	r3, 80057de <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d4:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80057d6:	2001      	movs	r0, #1
}
 80057d8:	b005      	add	sp, #20
 80057da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80057de:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	f000 8093 	beq.w	800590e <HAL_I2C_Mem_Write+0x168>
 80057e8:	2501      	movs	r5, #1
 80057ea:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80057ee:	f7ff f9e1 	bl	8004bb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057f2:	2319      	movs	r3, #25
 80057f4:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80057f6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057f8:	462a      	mov	r2, r5
 80057fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057fe:	4620      	mov	r0, r4
 8005800:	f7ff feac 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 8005804:	4680      	mov	r8, r0
 8005806:	2800      	cmp	r0, #0
 8005808:	d1e5      	bne.n	80057d6 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800580a:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 800580c:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800580e:	4652      	mov	r2, sl
 8005810:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005812:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005816:	2340      	movs	r3, #64	; 0x40
 8005818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800581c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800581e:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005820:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005822:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005824:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005826:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 800582a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800582c:	465b      	mov	r3, fp
 800582e:	f7ff febf 	bl	80055b0 <I2C_RequestMemoryWrite>
 8005832:	b110      	cbz	r0, 800583a <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8005834:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005838:	e7cd      	b.n	80057d6 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800583a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	2bff      	cmp	r3, #255	; 0xff
 8005840:	d955      	bls.n	80058ee <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005842:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005848:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800584a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800584c:	4639      	mov	r1, r7
 800584e:	4620      	mov	r0, r4
 8005850:	f7ff fdbc 	bl	80053cc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005854:	4632      	mov	r2, r6
 8005856:	4649      	mov	r1, r9
 8005858:	4620      	mov	r0, r4
 800585a:	f7ff fe58 	bl	800550e <I2C_WaitOnTXISFlagUntilTimeout>
 800585e:	2800      	cmp	r0, #0
 8005860:	d1b9      	bne.n	80057d6 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005864:	6822      	ldr	r2, [r4, #0]
 8005866:	f813 1b01 	ldrb.w	r1, [r3], #1
 800586a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800586c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800586e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005870:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005872:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005874:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005876:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005878:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800587a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800587c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800587e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005880:	b29b      	uxth	r3, r3
 8005882:	b1ab      	cbz	r3, 80058b0 <HAL_I2C_Mem_Write+0x10a>
 8005884:	b9a2      	cbnz	r2, 80058b0 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005886:	464b      	mov	r3, r9
 8005888:	2180      	movs	r1, #128	; 0x80
 800588a:	4620      	mov	r0, r4
 800588c:	9600      	str	r6, [sp, #0]
 800588e:	f7ff fe65 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 8005892:	2800      	cmp	r0, #0
 8005894:	d19f      	bne.n	80057d6 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005896:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005898:	b29b      	uxth	r3, r3
 800589a:	2bff      	cmp	r3, #255	; 0xff
 800589c:	d92f      	bls.n	80058fe <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800589e:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058a4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058a6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058a8:	4639      	mov	r1, r7
 80058aa:	4620      	mov	r0, r4
 80058ac:	f7ff fd8e 	bl	80053cc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80058b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1cd      	bne.n	8005854 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058b8:	4632      	mov	r2, r6
 80058ba:	4649      	mov	r1, r9
 80058bc:	4620      	mov	r0, r4
 80058be:	f7ff fee3 	bl	8005688 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d187      	bne.n	80057d6 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	2120      	movs	r1, #32
 80058ca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80058d2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80058d6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80058da:	f022 0201 	bic.w	r2, r2, #1
 80058de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80058e0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80058e4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058e8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80058ec:	e774      	b.n	80057d8 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80058ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058f4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80058f6:	b292      	uxth	r2, r2
 80058f8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	e7a6      	b.n	800584c <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80058fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005904:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005906:	b292      	uxth	r2, r2
 8005908:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	e7cc      	b.n	80058a8 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 800590e:	2002      	movs	r0, #2
 8005910:	e762      	b.n	80057d8 <HAL_I2C_Mem_Write+0x32>
	...

08005914 <HAL_I2C_Mem_Read>:
{
 8005914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005918:	b085      	sub	sp, #20
 800591a:	469b      	mov	fp, r3
 800591c:	4604      	mov	r4, r0
 800591e:	460f      	mov	r7, r1
 8005920:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005924:	4692      	mov	sl, r2
 8005926:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800592a:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800592c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005930:	2b20      	cmp	r3, #32
 8005932:	f040 80a7 	bne.w	8005a84 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8005936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005938:	b10b      	cbz	r3, 800593e <HAL_I2C_Mem_Read+0x2a>
 800593a:	9b03      	ldr	r3, [sp, #12]
 800593c:	b933      	cbnz	r3, 800594c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800593e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005942:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005944:	2001      	movs	r0, #1
}
 8005946:	b005      	add	sp, #20
 8005948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800594c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005950:	2b01      	cmp	r3, #1
 8005952:	f000 8097 	beq.w	8005a84 <HAL_I2C_Mem_Read+0x170>
 8005956:	2501      	movs	r5, #1
 8005958:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800595c:	f7ff f92a 	bl	8004bb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005960:	2319      	movs	r3, #25
 8005962:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005964:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005966:	462a      	mov	r2, r5
 8005968:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800596c:	4620      	mov	r0, r4
 800596e:	f7ff fdf5 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 8005972:	4680      	mov	r8, r0
 8005974:	2800      	cmp	r0, #0
 8005976:	d1e5      	bne.n	8005944 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005978:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 800597a:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800597c:	4652      	mov	r2, sl
 800597e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005980:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005984:	2340      	movs	r3, #64	; 0x40
 8005986:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800598a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800598c:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800598e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005990:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005992:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005994:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005998:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800599a:	465b      	mov	r3, fp
 800599c:	f7ff fe3e 	bl	800561c <I2C_RequestMemoryRead>
 80059a0:	b110      	cbz	r0, 80059a8 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 80059a2:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 80059a6:	e7cd      	b.n	8005944 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2bff      	cmp	r3, #255	; 0xff
 80059ae:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <HAL_I2C_Mem_Read+0x174>)
 80059b0:	d958      	bls.n	8005a64 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059b2:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ba:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059bc:	4639      	mov	r1, r7
 80059be:	4620      	mov	r0, r4
 80059c0:	f7ff fd04 	bl	80053cc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059c4:	464b      	mov	r3, r9
 80059c6:	2200      	movs	r2, #0
 80059c8:	2104      	movs	r1, #4
 80059ca:	4620      	mov	r0, r4
 80059cc:	9600      	str	r6, [sp, #0]
 80059ce:	f7ff fdc5 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d1b6      	bne.n	8005944 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059dc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80059de:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80059e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80059e2:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80059e4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80059e6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80059e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80059ea:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80059ec:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80059ee:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	b1ab      	cbz	r3, 8005a26 <HAL_I2C_Mem_Read+0x112>
 80059fa:	b9a2      	cbnz	r2, 8005a26 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059fc:	464b      	mov	r3, r9
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	4620      	mov	r0, r4
 8005a02:	9600      	str	r6, [sp, #0]
 8005a04:	f7ff fdaa 	bl	800555c <I2C_WaitOnFlagUntilTimeout>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d19b      	bne.n	8005944 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2bff      	cmp	r3, #255	; 0xff
 8005a12:	d92f      	bls.n	8005a74 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a14:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a1a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a1c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a1e:	4639      	mov	r1, r7
 8005a20:	4620      	mov	r0, r4
 8005a22:	f7ff fcd3 	bl	80053cc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005a26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1ca      	bne.n	80059c4 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a2e:	4632      	mov	r2, r6
 8005a30:	4649      	mov	r1, r9
 8005a32:	4620      	mov	r0, r4
 8005a34:	f7ff fe28 	bl	8005688 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d183      	bne.n	8005944 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	2120      	movs	r1, #32
 8005a40:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005a48:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005a4c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005a5a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a5e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005a62:	e770      	b.n	8005946 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005a64:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005a6c:	b292      	uxth	r2, r2
 8005a6e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	e7a3      	b.n	80059bc <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8005a74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a7a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005a7c:	b292      	uxth	r2, r2
 8005a7e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	e7cc      	b.n	8005a1e <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8005a84:	2002      	movs	r0, #2
 8005a86:	e75e      	b.n	8005946 <HAL_I2C_Mem_Read+0x32>
 8005a88:	80002400 	.word	0x80002400

08005a8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a8c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a8e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	b2dc      	uxtb	r4, r3
 8005a96:	d11d      	bne.n	8005ad4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a98:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d019      	beq.n	8005ad4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa0:	2324      	movs	r3, #36	; 0x24
 8005aa2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aa6:	6803      	ldr	r3, [r0, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	4311      	orrs	r1, r2
 8005abc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005ac8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005acc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005ad0:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005ad2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005ad4:	2002      	movs	r0, #2
 8005ad6:	e7fc      	b.n	8005ad2 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08005ad8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ad8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ada:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	b2dc      	uxtb	r4, r3
 8005ae2:	d11c      	bne.n	8005b1e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ae4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d018      	beq.n	8005b1e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aec:	2324      	movs	r3, #36	; 0x24
 8005aee:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005af2:	6803      	ldr	r3, [r0, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	f022 0201 	bic.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005afc:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005afe:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b02:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b06:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b10:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005b12:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005b16:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005b1a:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005b1c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005b1e:	2002      	movs	r0, #2
 8005b20:	e7fc      	b.n	8005b1c <HAL_I2CEx_ConfigDigitalFilter+0x44>

08005b22 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b22:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005b24:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b26:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b2a:	3284      	adds	r2, #132	; 0x84
 8005b2c:	1883      	adds	r3, r0, r2
{
 8005b2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005b32:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b34:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b38:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005b3a:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005b3e:	684c      	ldr	r4, [r1, #4]
 8005b40:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b44:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005b48:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005b4c:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b4e:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b50:	68c5      	ldr	r5, [r0, #12]
 8005b52:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8005b56:	443d      	add	r5, r7
 8005b58:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005b5c:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b5e:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005b60:	68c5      	ldr	r5, [r0, #12]
 8005b62:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8005b66:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005b68:	689d      	ldr	r5, [r3, #8]
 8005b6a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8005b6e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005b70:	688d      	ldr	r5, [r1, #8]
 8005b72:	68c7      	ldr	r7, [r0, #12]
 8005b74:	3501      	adds	r5, #1
 8005b76:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8005b7a:	443d      	add	r5, r7
 8005b7c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005b80:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005b82:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005b84:	691d      	ldr	r5, [r3, #16]
 8005b86:	f025 0507 	bic.w	r5, r5, #7
 8005b8a:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005b8c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005b8e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005b90:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005b94:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005b98:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005b9c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005ba0:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005ba4:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005ba8:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8005bac:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005bae:	695d      	ldr	r5, [r3, #20]
 8005bb0:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005bb4:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005bb6:	694d      	ldr	r5, [r1, #20]
 8005bb8:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005bba:	69dd      	ldr	r5, [r3, #28]
 8005bbc:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8005bc0:	f025 0507 	bic.w	r5, r5, #7
 8005bc4:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005bc6:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8005bca:	433d      	orrs	r5, r7
 8005bcc:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005bce:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005bd0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005bd2:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005bd6:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005bd8:	b31e      	cbz	r6, 8005c22 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005bda:	2e01      	cmp	r6, #1
 8005bdc:	d023      	beq.n	8005c26 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bde:	1eb5      	subs	r5, r6, #2
 8005be0:	2d02      	cmp	r5, #2
 8005be2:	d922      	bls.n	8005c2a <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005be4:	2e07      	cmp	r6, #7
 8005be6:	bf0c      	ite	eq
 8005be8:	2502      	moveq	r5, #2
 8005bea:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005bec:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005bee:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005bf2:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005bf6:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005bf8:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005bfa:	3403      	adds	r4, #3
 8005bfc:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005bfe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c00:	436e      	muls	r6, r5
 8005c02:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8005c06:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005c08:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005c0a:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8005c0e:	f024 0407 	bic.w	r4, r4, #7
 8005c12:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c14:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c16:	5883      	ldr	r3, [r0, r2]
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	5083      	str	r3, [r0, r2]
}
 8005c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005c22:	2504      	movs	r5, #4
 8005c24:	e7e2      	b.n	8005bec <LTDC_SetConfig+0xca>
    tmp = 3U;
 8005c26:	2503      	movs	r5, #3
 8005c28:	e7e0      	b.n	8005bec <LTDC_SetConfig+0xca>
    tmp = 2U;
 8005c2a:	2502      	movs	r5, #2
 8005c2c:	e7de      	b.n	8005bec <LTDC_SetConfig+0xca>
	...

08005c30 <HAL_LTDC_Init>:
{
 8005c30:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005c32:	4604      	mov	r4, r0
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d063      	beq.n	8005d00 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c38:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005c3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c40:	b91b      	cbnz	r3, 8005c4a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005c42:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005c46:	f7fb fc4b 	bl	80014e0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	699a      	ldr	r2, [r3, #24]
 8005c54:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005c58:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c5a:	6999      	ldr	r1, [r3, #24]
 8005c5c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005c60:	4302      	orrs	r2, r0
 8005c62:	68e0      	ldr	r0, [r4, #12]
 8005c64:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c66:	6920      	ldr	r0, [r4, #16]
 8005c68:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005c6a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c6c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c6e:	4925      	ldr	r1, [pc, #148]	; (8005d04 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c70:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	400a      	ands	r2, r1
 8005c76:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005c7e:	69a0      	ldr	r0, [r4, #24]
 8005c80:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005c82:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005c84:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	400a      	ands	r2, r1
 8005c8a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005c92:	6a20      	ldr	r0, [r4, #32]
 8005c94:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005c96:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005c98:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	400a      	ands	r2, r1
 8005c9e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005ca0:	691a      	ldr	r2, [r3, #16]
 8005ca2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005ca6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005ca8:	4302      	orrs	r2, r0
 8005caa:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	4011      	ands	r1, r2
 8005cb0:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005cb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005cba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005cc2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005cc6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005cca:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005cce:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cd2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005cdc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ce0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce6:	f042 0206 	orr.w	r2, r2, #6
 8005cea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005cf4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005cf6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005cfa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005d00:	2001      	movs	r0, #1
 8005d02:	e7fc      	b.n	8005cfe <HAL_LTDC_Init+0xce>
 8005d04:	f000f800 	.word	0xf000f800

08005d08 <HAL_LTDC_ErrorCallback>:
 8005d08:	4770      	bx	lr

08005d0a <HAL_LTDC_ReloadEventCallback>:
 8005d0a:	4770      	bx	lr

08005d0c <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005d0c:	6803      	ldr	r3, [r0, #0]
{
 8005d0e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005d10:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8005d12:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005d14:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005d16:	0772      	lsls	r2, r6, #29
 8005d18:	d514      	bpl.n	8005d44 <HAL_LTDC_IRQHandler+0x38>
 8005d1a:	0769      	lsls	r1, r5, #29
 8005d1c:	d512      	bpl.n	8005d44 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d20:	f022 0204 	bic.w	r2, r2, #4
 8005d24:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005d26:	2204      	movs	r2, #4
 8005d28:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005d2a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8005d2e:	f043 0301 	orr.w	r3, r3, #1
 8005d32:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8005d36:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d38:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005d3c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005d40:	f7ff ffe2 	bl	8005d08 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005d44:	07b2      	lsls	r2, r6, #30
 8005d46:	d516      	bpl.n	8005d76 <HAL_LTDC_IRQHandler+0x6a>
 8005d48:	07ab      	lsls	r3, r5, #30
 8005d4a:	d514      	bpl.n	8005d76 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005d4c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8005d4e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d52:	f022 0202 	bic.w	r2, r2, #2
 8005d56:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005d58:	2202      	movs	r2, #2
 8005d5a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005d5c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d66:	2304      	movs	r3, #4
 8005d68:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005d72:	f7ff ffc9 	bl	8005d08 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005d76:	07f0      	lsls	r0, r6, #31
 8005d78:	d510      	bpl.n	8005d9c <HAL_LTDC_IRQHandler+0x90>
 8005d7a:	07e9      	lsls	r1, r5, #31
 8005d7c:	d50e      	bpl.n	8005d9c <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005d7e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8005d80:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8005d8e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d90:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005d94:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005d98:	f7fd f95e 	bl	8003058 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005d9c:	0732      	lsls	r2, r6, #28
 8005d9e:	d511      	bpl.n	8005dc4 <HAL_LTDC_IRQHandler+0xb8>
 8005da0:	072b      	lsls	r3, r5, #28
 8005da2:	d50f      	bpl.n	8005dc4 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005da4:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005da6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005daa:	f022 0208 	bic.w	r2, r2, #8
 8005dae:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005db0:	2208      	movs	r2, #8
 8005db2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005db4:	2301      	movs	r3, #1
 8005db6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005dc0:	f7ff ffa3 	bl	8005d0a <HAL_LTDC_ReloadEventCallback>
}
 8005dc4:	bd70      	pop	{r4, r5, r6, pc}

08005dc6 <HAL_LTDC_ConfigLayer>:
{
 8005dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005dca:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460f      	mov	r7, r1
 8005dd2:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	f04f 0002 	mov.w	r0, #2
 8005dda:	d01f      	beq.n	8005e1c <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ddc:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8005dde:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005de2:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005de4:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005de8:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005dec:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005df0:	3438      	adds	r4, #56	; 0x38
 8005df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dfe:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e00:	4630      	mov	r0, r6
 8005e02:	4662      	mov	r2, ip
 8005e04:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e06:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e08:	f7ff fe8b 	bl	8005b22 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e0c:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005e0e:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e10:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e14:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005e18:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e20 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005e20:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	f04f 0302 	mov.w	r3, #2
 8005e2a:	d012      	beq.n	8005e52 <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e2c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e30:	6803      	ldr	r3, [r0, #0]
 8005e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005e3a:	4a07      	ldr	r2, [pc, #28]	; (8005e58 <HAL_LTDC_ProgramLineEvent+0x38>)
 8005e3c:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e46:	2301      	movs	r3, #1
 8005e48:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8005e52:	4618      	mov	r0, r3
}
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40016800 	.word	0x40016800

08005e5c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e5c:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8005e5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e62:	4c19      	ldr	r4, [pc, #100]	; (8005ec8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e68:	641a      	str	r2, [r3, #64]	; 0x40
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e7c:	f7fe fe9a 	bl	8004bb4 <HAL_GetTick>
 8005e80:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e82:	6863      	ldr	r3, [r4, #4]
 8005e84:	03da      	lsls	r2, r3, #15
 8005e86:	d50c      	bpl.n	8005ea2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005e88:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e8a:	4d0f      	ldr	r5, [pc, #60]	; (8005ec8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e90:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005e92:	f7fe fe8f 	bl	8004bb4 <HAL_GetTick>
 8005e96:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e98:	686b      	ldr	r3, [r5, #4]
 8005e9a:	039b      	lsls	r3, r3, #14
 8005e9c:	d50a      	bpl.n	8005eb4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	e006      	b.n	8005eb0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ea2:	f7fe fe87 	bl	8004bb4 <HAL_GetTick>
 8005ea6:	1b40      	subs	r0, r0, r5
 8005ea8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005eac:	d9e9      	bls.n	8005e82 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005eae:	2003      	movs	r0, #3
}
 8005eb0:	b003      	add	sp, #12
 8005eb2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005eb4:	f7fe fe7e 	bl	8004bb4 <HAL_GetTick>
 8005eb8:	1b00      	subs	r0, r0, r4
 8005eba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005ebe:	d9eb      	bls.n	8005e98 <HAL_PWREx_EnableOverDrive+0x3c>
 8005ec0:	e7f5      	b.n	8005eae <HAL_PWREx_EnableOverDrive+0x52>
 8005ec2:	bf00      	nop
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	40007000 	.word	0x40007000

08005ecc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005ed0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005ed2:	b136      	cbz	r6, 8005ee2 <QSPI_Config+0x16>
 8005ed4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8005ed8:	d003      	beq.n	8005ee2 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005eda:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005edc:	6804      	ldr	r4, [r0, #0]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005ee2:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005ee6:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005eea:	f1b9 0f00 	cmp.w	r9, #0
 8005eee:	d04f      	beq.n	8005f90 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ef0:	694b      	ldr	r3, [r1, #20]
 8005ef2:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005ef6:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ef8:	f8d1 a000 	ldr.w	sl, [r1]
 8005efc:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8005f00:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8005f04:	ea49 0902 	orr.w	r9, r9, r2
 8005f08:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005f0c:	b335      	cbz	r5, 8005f5c <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005f0e:	688b      	ldr	r3, [r1, #8]
 8005f10:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f14:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005f16:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005f18:	b19f      	cbz	r7, 8005f42 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f1a:	ea4a 0307 	orr.w	r3, sl, r7
 8005f1e:	4323      	orrs	r3, r4
 8005f20:	68cc      	ldr	r4, [r1, #12]
 8005f22:	ea43 0308 	orr.w	r3, r3, r8
 8005f26:	ea43 030e 	orr.w	r3, r3, lr
 8005f2a:	4333      	orrs	r3, r6
 8005f2c:	4323      	orrs	r3, r4
 8005f2e:	ea43 030c 	orr.w	r3, r3, ip
 8005f32:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005f34:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f38:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005f3a:	d00d      	beq.n	8005f58 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005f3c:	684b      	ldr	r3, [r1, #4]
 8005f3e:	6183      	str	r3, [r0, #24]
 8005f40:	e00a      	b.n	8005f58 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f42:	ea4a 0304 	orr.w	r3, sl, r4
 8005f46:	ea43 0308 	orr.w	r3, r3, r8
 8005f4a:	ea43 030e 	orr.w	r3, r3, lr
 8005f4e:	4333      	orrs	r3, r6
 8005f50:	ea43 030c 	orr.w	r3, r3, ip
 8005f54:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f56:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005f5c:	b16f      	cbz	r7, 8005f7a <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f5e:	ea4a 0307 	orr.w	r3, sl, r7
 8005f62:	4323      	orrs	r3, r4
 8005f64:	68cc      	ldr	r4, [r1, #12]
 8005f66:	ea43 0308 	orr.w	r3, r3, r8
 8005f6a:	ea43 030e 	orr.w	r3, r3, lr
 8005f6e:	4323      	orrs	r3, r4
 8005f70:	ea43 030c 	orr.w	r3, r3, ip
 8005f74:	ea43 0309 	orr.w	r3, r3, r9
 8005f78:	e7dc      	b.n	8005f34 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f7a:	ea4a 0304 	orr.w	r3, sl, r4
 8005f7e:	ea43 0308 	orr.w	r3, r3, r8
 8005f82:	ea43 030e 	orr.w	r3, r3, lr
 8005f86:	ea43 030c 	orr.w	r3, r3, ip
 8005f8a:	ea43 0309 	orr.w	r3, r3, r9
 8005f8e:	e7e2      	b.n	8005f56 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005f90:	b365      	cbz	r5, 8005fec <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005f92:	6804      	ldr	r4, [r0, #0]
 8005f94:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f96:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005f98:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005f9a:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f9e:	694e      	ldr	r6, [r1, #20]
 8005fa0:	ea43 0502 	orr.w	r5, r3, r2
 8005fa4:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8005fa8:	04b6      	lsls	r6, r6, #18
 8005faa:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005fae:	b1a7      	cbz	r7, 8005fda <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005fb0:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005fb2:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005fb6:	ea40 0008 	orr.w	r0, r0, r8
 8005fba:	ea43 0300 	orr.w	r3, r3, r0
 8005fbe:	68c8      	ldr	r0, [r1, #12]
 8005fc0:	ea43 030c 	orr.w	r3, r3, ip
 8005fc4:	ea43 0300 	orr.w	r3, r3, r0
 8005fc8:	ea43 0306 	orr.w	r3, r3, r6
 8005fcc:	ea43 0305 	orr.w	r3, r3, r5
 8005fd0:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005fd2:	d0c1      	beq.n	8005f58 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005fd4:	684b      	ldr	r3, [r1, #4]
 8005fd6:	61a3      	str	r3, [r4, #24]
 8005fd8:	e7be      	b.n	8005f58 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005fda:	ea40 0008 	orr.w	r0, r0, r8
 8005fde:	4303      	orrs	r3, r0
 8005fe0:	ea43 030c 	orr.w	r3, r3, ip
 8005fe4:	4333      	orrs	r3, r6
 8005fe6:	432b      	orrs	r3, r5
 8005fe8:	6163      	str	r3, [r4, #20]
 8005fea:	e7b5      	b.n	8005f58 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005fec:	b17f      	cbz	r7, 800600e <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005fee:	ea46 0307 	orr.w	r3, r6, r7
 8005ff2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005ff4:	6800      	ldr	r0, [r0, #0]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	4323      	orrs	r3, r4
 8005ffa:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8005ffc:	4323      	orrs	r3, r4
 8005ffe:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8006000:	4323      	orrs	r3, r4
 8006002:	68cc      	ldr	r4, [r1, #12]
 8006004:	4323      	orrs	r3, r4
 8006006:	694c      	ldr	r4, [r1, #20]
 8006008:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800600c:	e792      	b.n	8005f34 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800600e:	2e00      	cmp	r6, #0
 8006010:	d0a2      	beq.n	8005f58 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006012:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006014:	6800      	ldr	r0, [r0, #0]
 8006016:	4333      	orrs	r3, r6
 8006018:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800601a:	431a      	orrs	r2, r3
 800601c:	694b      	ldr	r3, [r1, #20]
 800601e:	4332      	orrs	r2, r6
 8006020:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8006022:	4332      	orrs	r2, r6
 8006024:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8006028:	6142      	str	r2, [r0, #20]
}
 800602a:	e795      	b.n	8005f58 <QSPI_Config+0x8c>

0800602c <QSPI_WaitFlagStateUntilTimeout>:
{
 800602c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006030:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006034:	4604      	mov	r4, r0
 8006036:	460e      	mov	r6, r1
 8006038:	4615      	mov	r5, r2
 800603a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800603c:	6822      	ldr	r2, [r4, #0]
 800603e:	6893      	ldr	r3, [r2, #8]
 8006040:	4233      	tst	r3, r6
 8006042:	bf14      	ite	ne
 8006044:	2301      	movne	r3, #1
 8006046:	2300      	moveq	r3, #0
 8006048:	42ab      	cmp	r3, r5
 800604a:	d101      	bne.n	8006050 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800604c:	2000      	movs	r0, #0
 800604e:	e012      	b.n	8006076 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006050:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8006054:	d0f3      	beq.n	800603e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006056:	f7fe fdad 	bl	8004bb4 <HAL_GetTick>
 800605a:	1bc0      	subs	r0, r0, r7
 800605c:	4540      	cmp	r0, r8
 800605e:	d802      	bhi.n	8006066 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8006060:	f1b8 0f00 	cmp.w	r8, #0
 8006064:	d1ea      	bne.n	800603c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006066:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006068:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800606a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800606e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006070:	f043 0301 	orr.w	r3, r3, #1
 8006074:	6463      	str	r3, [r4, #68]	; 0x44
}
 8006076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800607c <HAL_QSPI_Init>:
{
 800607c:	b530      	push	{r4, r5, lr}
 800607e:	4604      	mov	r4, r0
 8006080:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8006082:	f7fe fd97 	bl	8004bb4 <HAL_GetTick>
 8006086:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8006088:	2c00      	cmp	r4, #0
 800608a:	d047      	beq.n	800611c <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800608c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006090:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8006094:	b94a      	cbnz	r2, 80060aa <HAL_QSPI_Init+0x2e>
 8006096:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8006098:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800609a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800609e:	f7fb facd 	bl	800163c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80060a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80060aa:	6820      	ldr	r0, [r4, #0]
 80060ac:	68a1      	ldr	r1, [r4, #8]
 80060ae:	6802      	ldr	r2, [r0, #0]
 80060b0:	3901      	subs	r1, #1
 80060b2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80060b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80060ba:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80060bc:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80060be:	4620      	mov	r0, r4
 80060c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80060c2:	9200      	str	r2, [sp, #0]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f7ff ffb1 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80060ca:	bb10      	cbnz	r0, 8006112 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80060cc:	6822      	ldr	r2, [r4, #0]
 80060ce:	69e5      	ldr	r5, [r4, #28]
 80060d0:	68e3      	ldr	r3, [r4, #12]
 80060d2:	6811      	ldr	r1, [r2, #0]
 80060d4:	432b      	orrs	r3, r5
 80060d6:	6a25      	ldr	r5, [r4, #32]
 80060d8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80060dc:	432b      	orrs	r3, r5
 80060de:	6865      	ldr	r5, [r4, #4]
 80060e0:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 80060e4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80060ec:	6855      	ldr	r5, [r2, #4]
 80060ee:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80060f2:	430b      	orrs	r3, r1
 80060f4:	6921      	ldr	r1, [r4, #16]
 80060f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80060fa:	4909      	ldr	r1, [pc, #36]	; (8006120 <HAL_QSPI_Init+0xa4>)
 80060fc:	4029      	ands	r1, r5
 80060fe:	430b      	orrs	r3, r1
 8006100:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	f043 0301 	orr.w	r3, r3, #1
 8006108:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800610a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800610c:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800610e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006112:	2300      	movs	r3, #0
 8006114:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006118:	b005      	add	sp, #20
 800611a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800611c:	2001      	movs	r0, #1
 800611e:	e7fb      	b.n	8006118 <HAL_QSPI_Init+0x9c>
 8006120:	ffe0f8fe 	.word	0xffe0f8fe

08006124 <HAL_QSPI_DeInit>:
{
 8006124:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8006126:	4604      	mov	r4, r0
 8006128:	b168      	cbz	r0, 8006146 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 800612a:	6802      	ldr	r2, [r0, #0]
 800612c:	6813      	ldr	r3, [r2, #0]
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8006134:	f7fb faf0 	bl	8001718 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006138:	2000      	movs	r0, #0
 800613a:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 800613c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006140:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006144:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006146:	2001      	movs	r0, #1
 8006148:	e7fc      	b.n	8006144 <HAL_QSPI_DeInit+0x20>

0800614a <HAL_QSPI_Command>:
{
 800614a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800614e:	4604      	mov	r4, r0
 8006150:	b085      	sub	sp, #20
 8006152:	4617      	mov	r7, r2
 8006154:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8006156:	f7fe fd2d 	bl	8004bb4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800615a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800615e:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8006160:	2a01      	cmp	r2, #1
 8006162:	d033      	beq.n	80061cc <HAL_QSPI_Command+0x82>
 8006164:	2201      	movs	r2, #1
 8006166:	2602      	movs	r6, #2
 8006168:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800616c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006170:	2a01      	cmp	r2, #1
 8006172:	fa5f f882 	uxtb.w	r8, r2
 8006176:	d127      	bne.n	80061c8 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006178:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800617a:	9003      	str	r0, [sp, #12]
 800617c:	2120      	movs	r1, #32
 800617e:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006180:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006182:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8006184:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006188:	f7ff ff50 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800618c:	4605      	mov	r5, r0
 800618e:	b9a0      	cbnz	r0, 80061ba <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006190:	4602      	mov	r2, r0
 8006192:	4649      	mov	r1, r9
 8006194:	4620      	mov	r0, r4
 8006196:	f7ff fe99 	bl	8005ecc <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800619a:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	b94a      	cbnz	r2, 80061b6 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80061a2:	4642      	mov	r2, r8
 80061a4:	4631      	mov	r1, r6
 80061a6:	4620      	mov	r0, r4
 80061a8:	9700      	str	r7, [sp, #0]
 80061aa:	f7ff ff3f 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80061ae:	4605      	mov	r5, r0
 80061b0:	b918      	cbnz	r0, 80061ba <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80061b6:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80061ba:	2300      	movs	r3, #0
 80061bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80061c0:	4628      	mov	r0, r5
 80061c2:	b005      	add	sp, #20
 80061c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80061c8:	4635      	mov	r5, r6
 80061ca:	e7f6      	b.n	80061ba <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 80061cc:	2502      	movs	r5, #2
 80061ce:	e7f7      	b.n	80061c0 <HAL_QSPI_Command+0x76>

080061d0 <HAL_QSPI_AutoPolling>:
{
 80061d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80061d4:	4604      	mov	r4, r0
 80061d6:	4615      	mov	r5, r2
 80061d8:	461e      	mov	r6, r3
 80061da:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80061dc:	f7fe fcea 	bl	8004bb4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80061e0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80061e4:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80061e6:	2a01      	cmp	r2, #1
 80061e8:	d040      	beq.n	800626c <HAL_QSPI_AutoPolling+0x9c>
 80061ea:	2201      	movs	r2, #1
 80061ec:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80061f0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80061f4:	2a01      	cmp	r2, #1
 80061f6:	b2d7      	uxtb	r7, r2
 80061f8:	d136      	bne.n	8006268 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80061fa:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80061fc:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80061fe:	9003      	str	r0, [sp, #12]
 8006200:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006202:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006204:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006206:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800620a:	2120      	movs	r1, #32
 800620c:	f7ff ff0e 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006210:	bb20      	cbnz	r0, 800625c <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006212:	6821      	ldr	r1, [r4, #0]
 8006214:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006216:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006218:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800621a:	686a      	ldr	r2, [r5, #4]
 800621c:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800621e:	68aa      	ldr	r2, [r5, #8]
 8006220:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006222:	680a      	ldr	r2, [r1, #0]
 8006224:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006228:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800622a:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800622c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006230:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006232:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8006234:	68ea      	ldr	r2, [r5, #12]
 8006236:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800623a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800623e:	f7ff fe45 	bl	8005ecc <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	463a      	mov	r2, r7
 8006246:	2108      	movs	r1, #8
 8006248:	4620      	mov	r0, r4
 800624a:	9600      	str	r6, [sp, #0]
 800624c:	f7ff feee 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006250:	b920      	cbnz	r0, 800625c <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	2208      	movs	r2, #8
 8006256:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8006258:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800625c:	2300      	movs	r3, #0
 800625e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006262:	b004      	add	sp, #16
 8006264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8006268:	2002      	movs	r0, #2
 800626a:	e7f7      	b.n	800625c <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800626c:	2002      	movs	r0, #2
 800626e:	e7f8      	b.n	8006262 <HAL_QSPI_AutoPolling+0x92>

08006270 <HAL_QSPI_MemoryMapped>:
{
 8006270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006272:	4604      	mov	r4, r0
 8006274:	4616      	mov	r6, r2
 8006276:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006278:	f7fe fc9c 	bl	8004bb4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800627c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006280:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8006282:	2a01      	cmp	r2, #1
 8006284:	d033      	beq.n	80062ee <HAL_QSPI_MemoryMapped+0x7e>
 8006286:	2201      	movs	r2, #1
 8006288:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800628c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006290:	2a01      	cmp	r2, #1
 8006292:	d12a      	bne.n	80062ea <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006294:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8006296:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006298:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800629a:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800629c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80062a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80062a2:	9100      	str	r1, [sp, #0]
 80062a4:	2120      	movs	r1, #32
 80062a6:	f7ff fec1 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80062aa:	4605      	mov	r5, r0
 80062ac:	b9b8      	cbnz	r0, 80062de <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	6872      	ldr	r2, [r6, #4]
 80062b2:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80062b4:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80062b6:	f020 0008 	bic.w	r0, r0, #8
 80062ba:	ea40 0002 	orr.w	r0, r0, r2
 80062be:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80062c0:	d107      	bne.n	80062d2 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80062c2:	6832      	ldr	r2, [r6, #0]
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80062c6:	2210      	movs	r2, #16
 80062c8:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80062d0:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80062d2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80062d6:	4639      	mov	r1, r7
 80062d8:	4620      	mov	r0, r4
 80062da:	f7ff fdf7 	bl	8005ecc <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80062de:	2300      	movs	r3, #0
 80062e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80062e4:	4628      	mov	r0, r5
 80062e6:	b003      	add	sp, #12
 80062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80062ea:	2502      	movs	r5, #2
 80062ec:	e7f7      	b.n	80062de <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80062ee:	2502      	movs	r5, #2
 80062f0:	e7f8      	b.n	80062e4 <HAL_QSPI_MemoryMapped+0x74>

080062f2 <HAL_QSPI_Abort>:
{
 80062f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062f4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80062f6:	f7fe fc5d 	bl	8004bb4 <HAL_GetTick>
 80062fa:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80062fc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006300:	f012 0002 	ands.w	r0, r2, #2
 8006304:	d036      	beq.n	8006374 <HAL_QSPI_Abort+0x82>
    __HAL_UNLOCK(hqspi);
 8006306:	2200      	movs	r2, #0
 8006308:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800630c:	6822      	ldr	r2, [r4, #0]
 800630e:	6811      	ldr	r1, [r2, #0]
 8006310:	0749      	lsls	r1, r1, #29
 8006312:	d50d      	bpl.n	8006330 <HAL_QSPI_Abort+0x3e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006314:	6811      	ldr	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8006316:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006318:	f021 0104 	bic.w	r1, r1, #4
 800631c:	9303      	str	r3, [sp, #12]
 800631e:	6011      	str	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8006320:	f7fe fd6e 	bl	8004e00 <HAL_DMA_Abort>
      if(status != HAL_OK)
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	b118      	cbz	r0, 8006330 <HAL_QSPI_Abort+0x3e>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006328:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800632a:	f042 0204 	orr.w	r2, r2, #4
 800632e:	6462      	str	r2, [r4, #68]	; 0x44
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006330:	6821      	ldr	r1, [r4, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8006332:	4620      	mov	r0, r4
 8006334:	9303      	str	r3, [sp, #12]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006336:	680a      	ldr	r2, [r1, #0]
 8006338:	f042 0202 	orr.w	r2, r2, #2
 800633c:	600a      	str	r2, [r1, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800633e:	2102      	movs	r1, #2
 8006340:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006342:	9200      	str	r2, [sp, #0]
 8006344:	2201      	movs	r2, #1
 8006346:	f7ff fe71 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	b990      	cbnz	r0, 8006374 <HAL_QSPI_Abort+0x82>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800634e:	6822      	ldr	r2, [r4, #0]
 8006350:	2102      	movs	r1, #2
 8006352:	60d1      	str	r1, [r2, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006354:	2120      	movs	r1, #32
 8006356:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006358:	9200      	str	r2, [sp, #0]
 800635a:	4602      	mov	r2, r0
 800635c:	4620      	mov	r0, r4
 800635e:	f7ff fe65 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006362:	b938      	cbnz	r0, 8006374 <HAL_QSPI_Abort+0x82>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006364:	6822      	ldr	r2, [r4, #0]
 8006366:	6953      	ldr	r3, [r2, #20]
 8006368:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800636c:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 800636e:	2301      	movs	r3, #1
 8006370:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8006374:	b004      	add	sp, #16
 8006376:	bd10      	pop	{r4, pc}

08006378 <HAL_QSPI_Transmit>:
{
 8006378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637a:	4604      	mov	r4, r0
 800637c:	b085      	sub	sp, #20
 800637e:	4616      	mov	r6, r2
 8006380:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006382:	f7fe fc17 	bl	8004bb4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8006386:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800638a:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800638c:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800638e:	2a01      	cmp	r2, #1
 8006390:	d04c      	beq.n	800642c <HAL_QSPI_Transmit+0xb4>
 8006392:	2201      	movs	r2, #1
 8006394:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006398:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800639c:	2a01      	cmp	r2, #1
 800639e:	b2d0      	uxtb	r0, r2
 80063a0:	d142      	bne.n	8006428 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80063a2:	2200      	movs	r2, #0
 80063a4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80063a6:	2f00      	cmp	r7, #0
 80063a8:	d039      	beq.n	800641e <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80063aa:	2212      	movs	r2, #18
 80063ac:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80063b0:	692a      	ldr	r2, [r5, #16]
 80063b2:	3201      	adds	r2, #1
 80063b4:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80063b6:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80063b8:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80063ba:	3201      	adds	r2, #1
 80063bc:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80063be:	696a      	ldr	r2, [r5, #20]
 80063c0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80063c4:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80063c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80063c8:	b9a2      	cbnz	r2, 80063f4 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80063ca:	2201      	movs	r2, #1
 80063cc:	2102      	movs	r1, #2
 80063ce:	4620      	mov	r0, r4
 80063d0:	9600      	str	r6, [sp, #0]
 80063d2:	f7ff fe2b 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80063d6:	b928      	cbnz	r0, 80063e4 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80063dc:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80063de:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80063e0:	f7ff ff87 	bl	80062f2 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80063ea:	2300      	movs	r3, #0
 80063ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80063f0:	b005      	add	sp, #20
 80063f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80063f4:	2201      	movs	r2, #1
 80063f6:	2104      	movs	r1, #4
 80063f8:	4620      	mov	r0, r4
 80063fa:	9600      	str	r6, [sp, #0]
 80063fc:	9303      	str	r3, [sp, #12]
 80063fe:	f7ff fe15 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006402:	2800      	cmp	r0, #0
 8006404:	d1ee      	bne.n	80063e4 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006406:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8006408:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800640a:	7812      	ldrb	r2, [r2, #0]
 800640c:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8006410:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006412:	3201      	adds	r2, #1
 8006414:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8006416:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006418:	3a01      	subs	r2, #1
 800641a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800641c:	e7d3      	b.n	80063c6 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800641e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006420:	f043 0308 	orr.w	r3, r3, #8
 8006424:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8006426:	e7e0      	b.n	80063ea <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8006428:	2002      	movs	r0, #2
 800642a:	e7de      	b.n	80063ea <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800642c:	2002      	movs	r0, #2
 800642e:	e7df      	b.n	80063f0 <HAL_QSPI_Transmit+0x78>

08006430 <HAL_QSPI_Receive>:
{
 8006430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006432:	4604      	mov	r4, r0
 8006434:	b085      	sub	sp, #20
 8006436:	4616      	mov	r6, r2
 8006438:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800643a:	f7fe fbbb 	bl	8004bb4 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800643e:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006440:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006442:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8006446:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800644a:	2a01      	cmp	r2, #1
 800644c:	d050      	beq.n	80064f0 <HAL_QSPI_Receive+0xc0>
 800644e:	2201      	movs	r2, #1
 8006450:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006454:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006458:	2a01      	cmp	r2, #1
 800645a:	b2d0      	uxtb	r0, r2
 800645c:	d146      	bne.n	80064ec <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800645e:	2200      	movs	r2, #0
 8006460:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8006462:	2f00      	cmp	r7, #0
 8006464:	d03d      	beq.n	80064e2 <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006466:	2222      	movs	r2, #34	; 0x22
 8006468:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800646c:	692a      	ldr	r2, [r5, #16]
 800646e:	3201      	adds	r2, #1
 8006470:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006472:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8006474:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006476:	3201      	adds	r2, #1
 8006478:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800647a:	6969      	ldr	r1, [r5, #20]
 800647c:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8006480:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8006484:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006486:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800648a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800648c:	b9a2      	cbnz	r2, 80064b8 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800648e:	2201      	movs	r2, #1
 8006490:	2102      	movs	r1, #2
 8006492:	4620      	mov	r0, r4
 8006494:	9600      	str	r6, [sp, #0]
 8006496:	f7ff fdc9 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800649a:	b928      	cbnz	r0, 80064a8 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80064a0:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80064a2:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80064a4:	f7ff ff25 	bl	80062f2 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80064a8:	2301      	movs	r3, #1
 80064aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80064ae:	2300      	movs	r3, #0
 80064b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80064b4:	b005      	add	sp, #20
 80064b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80064b8:	2201      	movs	r2, #1
 80064ba:	2106      	movs	r1, #6
 80064bc:	4620      	mov	r0, r4
 80064be:	9600      	str	r6, [sp, #0]
 80064c0:	9303      	str	r3, [sp, #12]
 80064c2:	f7ff fdb3 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d1ee      	bne.n	80064a8 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80064ca:	f895 1020 	ldrb.w	r1, [r5, #32]
 80064ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80064d0:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80064d2:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80064d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80064d6:	3201      	adds	r2, #1
 80064d8:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80064da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80064dc:	3a01      	subs	r2, #1
 80064de:	63a2      	str	r2, [r4, #56]	; 0x38
 80064e0:	e7d3      	b.n	800648a <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80064e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064e4:	f043 0308 	orr.w	r3, r3, #8
 80064e8:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80064ea:	e7e0      	b.n	80064ae <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 80064ec:	2002      	movs	r0, #2
 80064ee:	e7de      	b.n	80064ae <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 80064f0:	2002      	movs	r0, #2
 80064f2:	e7df      	b.n	80064b4 <HAL_QSPI_Receive+0x84>

080064f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064f8:	4604      	mov	r4, r0
 80064fa:	b340      	cbz	r0, 800654e <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064fc:	6803      	ldr	r3, [r0, #0]
 80064fe:	07db      	lsls	r3, r3, #31
 8006500:	d410      	bmi.n	8006524 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	079f      	lsls	r7, r3, #30
 8006506:	d464      	bmi.n	80065d2 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	0719      	lsls	r1, r3, #28
 800650c:	f100 80aa 	bmi.w	8006664 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	075a      	lsls	r2, r3, #29
 8006514:	f100 80cb 	bmi.w	80066ae <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006518:	69a2      	ldr	r2, [r4, #24]
 800651a:	2a00      	cmp	r2, #0
 800651c:	f040 8134 	bne.w	8006788 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006520:	2000      	movs	r0, #0
 8006522:	e02b      	b.n	800657c <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006524:	4b96      	ldr	r3, [pc, #600]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	f002 020c 	and.w	r2, r2, #12
 800652c:	2a04      	cmp	r2, #4
 800652e:	d007      	beq.n	8006540 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	f002 020c 	and.w	r2, r2, #12
 8006536:	2a08      	cmp	r2, #8
 8006538:	d10b      	bne.n	8006552 <HAL_RCC_OscConfig+0x5e>
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	0256      	lsls	r6, r2, #9
 800653e:	d508      	bpl.n	8006552 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006540:	4b8f      	ldr	r3, [pc, #572]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	039d      	lsls	r5, r3, #14
 8006546:	d5dc      	bpl.n	8006502 <HAL_RCC_OscConfig+0xe>
 8006548:	6863      	ldr	r3, [r4, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1d9      	bne.n	8006502 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800654e:	2001      	movs	r0, #1
 8006550:	e014      	b.n	800657c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006552:	6862      	ldr	r2, [r4, #4]
 8006554:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006558:	d113      	bne.n	8006582 <HAL_RCC_OscConfig+0x8e>
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006560:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006562:	f7fe fb27 	bl	8004bb4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006566:	4e86      	ldr	r6, [pc, #536]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8006568:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656a:	6833      	ldr	r3, [r6, #0]
 800656c:	0398      	lsls	r0, r3, #14
 800656e:	d4c8      	bmi.n	8006502 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006570:	f7fe fb20 	bl	8004bb4 <HAL_GetTick>
 8006574:	1b40      	subs	r0, r0, r5
 8006576:	2864      	cmp	r0, #100	; 0x64
 8006578:	d9f7      	bls.n	800656a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800657a:	2003      	movs	r0, #3
}
 800657c:	b002      	add	sp, #8
 800657e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006582:	4d7f      	ldr	r5, [pc, #508]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
 8006584:	682b      	ldr	r3, [r5, #0]
 8006586:	b992      	cbnz	r2, 80065ae <HAL_RCC_OscConfig+0xba>
 8006588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800658c:	602b      	str	r3, [r5, #0]
 800658e:	682b      	ldr	r3, [r5, #0]
 8006590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006594:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006596:	f7fe fb0d 	bl	8004bb4 <HAL_GetTick>
 800659a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	0399      	lsls	r1, r3, #14
 80065a0:	d5af      	bpl.n	8006502 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065a2:	f7fe fb07 	bl	8004bb4 <HAL_GetTick>
 80065a6:	1b80      	subs	r0, r0, r6
 80065a8:	2864      	cmp	r0, #100	; 0x64
 80065aa:	d9f7      	bls.n	800659c <HAL_RCC_OscConfig+0xa8>
 80065ac:	e7e5      	b.n	800657a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ae:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80065b2:	d107      	bne.n	80065c4 <HAL_RCC_OscConfig+0xd0>
 80065b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065b8:	602b      	str	r3, [r5, #0]
 80065ba:	682b      	ldr	r3, [r5, #0]
 80065bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c0:	602b      	str	r3, [r5, #0]
 80065c2:	e7ce      	b.n	8006562 <HAL_RCC_OscConfig+0x6e>
 80065c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065c8:	602b      	str	r3, [r5, #0]
 80065ca:	682b      	ldr	r3, [r5, #0]
 80065cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065d0:	e7f6      	b.n	80065c0 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065d2:	4b6b      	ldr	r3, [pc, #428]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	f012 0f0c 	tst.w	r2, #12
 80065da:	d007      	beq.n	80065ec <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	f002 020c 	and.w	r2, r2, #12
 80065e2:	2a08      	cmp	r2, #8
 80065e4:	d111      	bne.n	800660a <HAL_RCC_OscConfig+0x116>
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	0252      	lsls	r2, r2, #9
 80065ea:	d40e      	bmi.n	800660a <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ec:	4a64      	ldr	r2, [pc, #400]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
 80065ee:	6813      	ldr	r3, [r2, #0]
 80065f0:	079b      	lsls	r3, r3, #30
 80065f2:	d502      	bpl.n	80065fa <HAL_RCC_OscConfig+0x106>
 80065f4:	68e3      	ldr	r3, [r4, #12]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d1a9      	bne.n	800654e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065fa:	6813      	ldr	r3, [r2, #0]
 80065fc:	6921      	ldr	r1, [r4, #16]
 80065fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006602:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006606:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006608:	e77e      	b.n	8006508 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800660a:	68e2      	ldr	r2, [r4, #12]
 800660c:	b1c2      	cbz	r2, 8006640 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 800660e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006610:	4d5b      	ldr	r5, [pc, #364]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8006612:	f042 0201 	orr.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006618:	f7fe facc 	bl	8004bb4 <HAL_GetTick>
 800661c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800661e:	682b      	ldr	r3, [r5, #0]
 8006620:	079f      	lsls	r7, r3, #30
 8006622:	d507      	bpl.n	8006634 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	6922      	ldr	r2, [r4, #16]
 8006628:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800662c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	e769      	b.n	8006508 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006634:	f7fe fabe 	bl	8004bb4 <HAL_GetTick>
 8006638:	1b80      	subs	r0, r0, r6
 800663a:	2802      	cmp	r0, #2
 800663c:	d9ef      	bls.n	800661e <HAL_RCC_OscConfig+0x12a>
 800663e:	e79c      	b.n	800657a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8006640:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006642:	4e4f      	ldr	r6, [pc, #316]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8006644:	f022 0201 	bic.w	r2, r2, #1
 8006648:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800664a:	f7fe fab3 	bl	8004bb4 <HAL_GetTick>
 800664e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006650:	6833      	ldr	r3, [r6, #0]
 8006652:	0798      	lsls	r0, r3, #30
 8006654:	f57f af58 	bpl.w	8006508 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006658:	f7fe faac 	bl	8004bb4 <HAL_GetTick>
 800665c:	1b40      	subs	r0, r0, r5
 800665e:	2802      	cmp	r0, #2
 8006660:	d9f6      	bls.n	8006650 <HAL_RCC_OscConfig+0x15c>
 8006662:	e78a      	b.n	800657a <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006664:	6963      	ldr	r3, [r4, #20]
 8006666:	4d46      	ldr	r5, [pc, #280]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
 8006668:	b183      	cbz	r3, 800668c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 800666a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006672:	f7fe fa9f 	bl	8004bb4 <HAL_GetTick>
 8006676:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006678:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800667a:	079b      	lsls	r3, r3, #30
 800667c:	f53f af48 	bmi.w	8006510 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006680:	f7fe fa98 	bl	8004bb4 <HAL_GetTick>
 8006684:	1b80      	subs	r0, r0, r6
 8006686:	2802      	cmp	r0, #2
 8006688:	d9f6      	bls.n	8006678 <HAL_RCC_OscConfig+0x184>
 800668a:	e776      	b.n	800657a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800668c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006694:	f7fe fa8e 	bl	8004bb4 <HAL_GetTick>
 8006698:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800669a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800669c:	079f      	lsls	r7, r3, #30
 800669e:	f57f af37 	bpl.w	8006510 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066a2:	f7fe fa87 	bl	8004bb4 <HAL_GetTick>
 80066a6:	1b80      	subs	r0, r0, r6
 80066a8:	2802      	cmp	r0, #2
 80066aa:	d9f6      	bls.n	800669a <HAL_RCC_OscConfig+0x1a6>
 80066ac:	e765      	b.n	800657a <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ae:	4b34      	ldr	r3, [pc, #208]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
 80066b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066b2:	00d0      	lsls	r0, r2, #3
 80066b4:	d427      	bmi.n	8006706 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80066b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80066b8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80066be:	641a      	str	r2, [r3, #64]	; 0x40
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066ca:	4d2e      	ldr	r5, [pc, #184]	; (8006784 <HAL_RCC_OscConfig+0x290>)
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	05d9      	lsls	r1, r3, #23
 80066d0:	d51b      	bpl.n	800670a <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066d2:	68a3      	ldr	r3, [r4, #8]
 80066d4:	4d2a      	ldr	r5, [pc, #168]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d127      	bne.n	800672a <HAL_RCC_OscConfig+0x236>
 80066da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80066e6:	f7fe fa65 	bl	8004bb4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ea:	4e25      	ldr	r6, [pc, #148]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80066ec:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ee:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80066f0:	079b      	lsls	r3, r3, #30
 80066f2:	d53f      	bpl.n	8006774 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 80066f4:	2f00      	cmp	r7, #0
 80066f6:	f43f af0f 	beq.w	8006518 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fa:	4a21      	ldr	r2, [pc, #132]	; (8006780 <HAL_RCC_OscConfig+0x28c>)
 80066fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80066fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006702:	6413      	str	r3, [r2, #64]	; 0x40
 8006704:	e708      	b.n	8006518 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8006706:	2700      	movs	r7, #0
 8006708:	e7df      	b.n	80066ca <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800670a:	682b      	ldr	r3, [r5, #0]
 800670c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006710:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006712:	f7fe fa4f 	bl	8004bb4 <HAL_GetTick>
 8006716:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	05da      	lsls	r2, r3, #23
 800671c:	d4d9      	bmi.n	80066d2 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800671e:	f7fe fa49 	bl	8004bb4 <HAL_GetTick>
 8006722:	1b80      	subs	r0, r0, r6
 8006724:	2864      	cmp	r0, #100	; 0x64
 8006726:	d9f7      	bls.n	8006718 <HAL_RCC_OscConfig+0x224>
 8006728:	e727      	b.n	800657a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800672a:	b9ab      	cbnz	r3, 8006758 <HAL_RCC_OscConfig+0x264>
 800672c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800672e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	672b      	str	r3, [r5, #112]	; 0x70
 8006738:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800673a:	f023 0304 	bic.w	r3, r3, #4
 800673e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006740:	f7fe fa38 	bl	8004bb4 <HAL_GetTick>
 8006744:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006746:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006748:	0798      	lsls	r0, r3, #30
 800674a:	d5d3      	bpl.n	80066f4 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800674c:	f7fe fa32 	bl	8004bb4 <HAL_GetTick>
 8006750:	1b80      	subs	r0, r0, r6
 8006752:	4540      	cmp	r0, r8
 8006754:	d9f7      	bls.n	8006746 <HAL_RCC_OscConfig+0x252>
 8006756:	e710      	b.n	800657a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006758:	2b05      	cmp	r3, #5
 800675a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800675c:	d103      	bne.n	8006766 <HAL_RCC_OscConfig+0x272>
 800675e:	f043 0304 	orr.w	r3, r3, #4
 8006762:	672b      	str	r3, [r5, #112]	; 0x70
 8006764:	e7b9      	b.n	80066da <HAL_RCC_OscConfig+0x1e6>
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	672b      	str	r3, [r5, #112]	; 0x70
 800676c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800676e:	f023 0304 	bic.w	r3, r3, #4
 8006772:	e7b5      	b.n	80066e0 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006774:	f7fe fa1e 	bl	8004bb4 <HAL_GetTick>
 8006778:	1b40      	subs	r0, r0, r5
 800677a:	4540      	cmp	r0, r8
 800677c:	d9b7      	bls.n	80066ee <HAL_RCC_OscConfig+0x1fa>
 800677e:	e6fc      	b.n	800657a <HAL_RCC_OscConfig+0x86>
 8006780:	40023800 	.word	0x40023800
 8006784:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006788:	4d38      	ldr	r5, [pc, #224]	; (800686c <HAL_RCC_OscConfig+0x378>)
 800678a:	68ab      	ldr	r3, [r5, #8]
 800678c:	f003 030c 	and.w	r3, r3, #12
 8006790:	2b08      	cmp	r3, #8
 8006792:	d041      	beq.n	8006818 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8006794:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006796:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8006798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800679c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800679e:	d12e      	bne.n	80067fe <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80067a0:	f7fe fa08 	bl	8004bb4 <HAL_GetTick>
 80067a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067a6:	682b      	ldr	r3, [r5, #0]
 80067a8:	0199      	lsls	r1, r3, #6
 80067aa:	d422      	bmi.n	80067f2 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067ae:	085b      	lsrs	r3, r3, #1
 80067b0:	1e5a      	subs	r2, r3, #1
 80067b2:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80067b6:	430b      	orrs	r3, r1
 80067b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067be:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80067c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80067c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80067c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067cc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80067ce:	682b      	ldr	r3, [r5, #0]
 80067d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80067d6:	f7fe f9ed 	bl	8004bb4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067da:	4d24      	ldr	r5, [pc, #144]	; (800686c <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 80067dc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067de:	682b      	ldr	r3, [r5, #0]
 80067e0:	019a      	lsls	r2, r3, #6
 80067e2:	f53f ae9d 	bmi.w	8006520 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e6:	f7fe f9e5 	bl	8004bb4 <HAL_GetTick>
 80067ea:	1b00      	subs	r0, r0, r4
 80067ec:	2802      	cmp	r0, #2
 80067ee:	d9f6      	bls.n	80067de <HAL_RCC_OscConfig+0x2ea>
 80067f0:	e6c3      	b.n	800657a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f2:	f7fe f9df 	bl	8004bb4 <HAL_GetTick>
 80067f6:	1b80      	subs	r0, r0, r6
 80067f8:	2802      	cmp	r0, #2
 80067fa:	d9d4      	bls.n	80067a6 <HAL_RCC_OscConfig+0x2b2>
 80067fc:	e6bd      	b.n	800657a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80067fe:	f7fe f9d9 	bl	8004bb4 <HAL_GetTick>
 8006802:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	019b      	lsls	r3, r3, #6
 8006808:	f57f ae8a 	bpl.w	8006520 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800680c:	f7fe f9d2 	bl	8004bb4 <HAL_GetTick>
 8006810:	1b00      	subs	r0, r0, r4
 8006812:	2802      	cmp	r0, #2
 8006814:	d9f6      	bls.n	8006804 <HAL_RCC_OscConfig+0x310>
 8006816:	e6b0      	b.n	800657a <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006818:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800681a:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800681c:	f43f ae97 	beq.w	800654e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006820:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006824:	69e1      	ldr	r1, [r4, #28]
 8006826:	428a      	cmp	r2, r1
 8006828:	f47f ae91 	bne.w	800654e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800682c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006830:	6a21      	ldr	r1, [r4, #32]
 8006832:	428a      	cmp	r2, r1
 8006834:	f47f ae8b 	bne.w	800654e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006838:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800683c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800683e:	401a      	ands	r2, r3
 8006840:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006844:	f47f ae83 	bne.w	800654e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006848:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800684a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800684e:	0852      	lsrs	r2, r2, #1
 8006850:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006852:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006856:	f47f ae7a 	bne.w	800654e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800685a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800685e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006860:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006864:	f43f ae5c 	beq.w	8006520 <HAL_RCC_OscConfig+0x2c>
 8006868:	e671      	b.n	800654e <HAL_RCC_OscConfig+0x5a>
 800686a:	bf00      	nop
 800686c:	40023800 	.word	0x40023800

08006870 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006870:	4913      	ldr	r1, [pc, #76]	; (80068c0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8006872:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006874:	688b      	ldr	r3, [r1, #8]
 8006876:	f003 030c 	and.w	r3, r3, #12
 800687a:	2b04      	cmp	r3, #4
 800687c:	d01b      	beq.n	80068b6 <HAL_RCC_GetSysClockFreq+0x46>
 800687e:	2b08      	cmp	r3, #8
 8006880:	d11b      	bne.n	80068ba <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006882:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006884:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006886:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006888:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800688c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006890:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006894:	bf1a      	itte	ne
 8006896:	480b      	ldrne	r0, [pc, #44]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x54>)
 8006898:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800689a:	480b      	ldreq	r0, [pc, #44]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x58>)
 800689c:	fba1 0100 	umull	r0, r1, r1, r0
 80068a0:	f7fa f924 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80068a4:	4b06      	ldr	r3, [pc, #24]	; (80068c0 <HAL_RCC_GetSysClockFreq+0x50>)
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80068ac:	3301      	adds	r3, #1
 80068ae:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80068b0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80068b4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068b6:	4803      	ldr	r0, [pc, #12]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x54>)
 80068b8:	e7fc      	b.n	80068b4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80068ba:	4803      	ldr	r0, [pc, #12]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80068bc:	e7fa      	b.n	80068b4 <HAL_RCC_GetSysClockFreq+0x44>
 80068be:	bf00      	nop
 80068c0:	40023800 	.word	0x40023800
 80068c4:	017d7840 	.word	0x017d7840
 80068c8:	00f42400 	.word	0x00f42400

080068cc <HAL_RCC_ClockConfig>:
{
 80068cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80068d2:	4604      	mov	r4, r0
 80068d4:	b910      	cbnz	r0, 80068dc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80068d6:	2001      	movs	r0, #1
}
 80068d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068dc:	4a46      	ldr	r2, [pc, #280]	; (80069f8 <HAL_RCC_ClockConfig+0x12c>)
 80068de:	6813      	ldr	r3, [r2, #0]
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	428b      	cmp	r3, r1
 80068e6:	d328      	bcc.n	800693a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068e8:	6822      	ldr	r2, [r4, #0]
 80068ea:	0797      	lsls	r7, r2, #30
 80068ec:	d430      	bmi.n	8006950 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ee:	07d0      	lsls	r0, r2, #31
 80068f0:	d444      	bmi.n	800697c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068f2:	4a41      	ldr	r2, [pc, #260]	; (80069f8 <HAL_RCC_ClockConfig+0x12c>)
 80068f4:	6813      	ldr	r3, [r2, #0]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	42ab      	cmp	r3, r5
 80068fc:	d867      	bhi.n	80069ce <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068fe:	6822      	ldr	r2, [r4, #0]
 8006900:	0751      	lsls	r1, r2, #29
 8006902:	d470      	bmi.n	80069e6 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006904:	0713      	lsls	r3, r2, #28
 8006906:	d507      	bpl.n	8006918 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006908:	4a3c      	ldr	r2, [pc, #240]	; (80069fc <HAL_RCC_ClockConfig+0x130>)
 800690a:	6921      	ldr	r1, [r4, #16]
 800690c:	6893      	ldr	r3, [r2, #8]
 800690e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006912:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006916:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006918:	f7ff ffaa 	bl	8006870 <HAL_RCC_GetSysClockFreq>
 800691c:	4b37      	ldr	r3, [pc, #220]	; (80069fc <HAL_RCC_ClockConfig+0x130>)
 800691e:	4a38      	ldr	r2, [pc, #224]	; (8006a00 <HAL_RCC_ClockConfig+0x134>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006926:	5cd3      	ldrb	r3, [r2, r3]
 8006928:	40d8      	lsrs	r0, r3
 800692a:	4b36      	ldr	r3, [pc, #216]	; (8006a04 <HAL_RCC_ClockConfig+0x138>)
 800692c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800692e:	4b36      	ldr	r3, [pc, #216]	; (8006a08 <HAL_RCC_ClockConfig+0x13c>)
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	f7fa ff7d 	bl	8001830 <HAL_InitTick>
  return HAL_OK;
 8006936:	2000      	movs	r0, #0
 8006938:	e7ce      	b.n	80068d8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800693a:	6813      	ldr	r3, [r2, #0]
 800693c:	f023 030f 	bic.w	r3, r3, #15
 8006940:	430b      	orrs	r3, r1
 8006942:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006944:	6813      	ldr	r3, [r2, #0]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	428b      	cmp	r3, r1
 800694c:	d1c3      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xa>
 800694e:	e7cb      	b.n	80068e8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006950:	f012 0f04 	tst.w	r2, #4
 8006954:	4b29      	ldr	r3, [pc, #164]	; (80069fc <HAL_RCC_ClockConfig+0x130>)
 8006956:	d003      	beq.n	8006960 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006958:	6899      	ldr	r1, [r3, #8]
 800695a:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800695e:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006960:	0716      	lsls	r6, r2, #28
 8006962:	d503      	bpl.n	800696c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006964:	6899      	ldr	r1, [r3, #8]
 8006966:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800696a:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800696c:	4923      	ldr	r1, [pc, #140]	; (80069fc <HAL_RCC_ClockConfig+0x130>)
 800696e:	68a0      	ldr	r0, [r4, #8]
 8006970:	688b      	ldr	r3, [r1, #8]
 8006972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006976:	4303      	orrs	r3, r0
 8006978:	608b      	str	r3, [r1, #8]
 800697a:	e7b8      	b.n	80068ee <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800697c:	6861      	ldr	r1, [r4, #4]
 800697e:	4b1f      	ldr	r3, [pc, #124]	; (80069fc <HAL_RCC_ClockConfig+0x130>)
 8006980:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006982:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006984:	d11b      	bne.n	80069be <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006986:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698a:	d0a4      	beq.n	80068d6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800698c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800698e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006992:	4f1a      	ldr	r7, [pc, #104]	; (80069fc <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006994:	f022 0203 	bic.w	r2, r2, #3
 8006998:	430a      	orrs	r2, r1
 800699a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800699c:	f7fe f90a 	bl	8004bb4 <HAL_GetTick>
 80069a0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6862      	ldr	r2, [r4, #4]
 80069a6:	f003 030c 	and.w	r3, r3, #12
 80069aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80069ae:	d0a0      	beq.n	80068f2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b0:	f7fe f900 	bl	8004bb4 <HAL_GetTick>
 80069b4:	1b80      	subs	r0, r0, r6
 80069b6:	4540      	cmp	r0, r8
 80069b8:	d9f3      	bls.n	80069a2 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80069ba:	2003      	movs	r0, #3
 80069bc:	e78c      	b.n	80068d8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069be:	2902      	cmp	r1, #2
 80069c0:	d102      	bne.n	80069c8 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80069c6:	e7e0      	b.n	800698a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069c8:	f012 0f02 	tst.w	r2, #2
 80069cc:	e7dd      	b.n	800698a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ce:	6813      	ldr	r3, [r2, #0]
 80069d0:	f023 030f 	bic.w	r3, r3, #15
 80069d4:	432b      	orrs	r3, r5
 80069d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d8:	6813      	ldr	r3, [r2, #0]
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	42ab      	cmp	r3, r5
 80069e0:	f47f af79 	bne.w	80068d6 <HAL_RCC_ClockConfig+0xa>
 80069e4:	e78b      	b.n	80068fe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069e6:	4905      	ldr	r1, [pc, #20]	; (80069fc <HAL_RCC_ClockConfig+0x130>)
 80069e8:	68e0      	ldr	r0, [r4, #12]
 80069ea:	688b      	ldr	r3, [r1, #8]
 80069ec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80069f0:	4303      	orrs	r3, r0
 80069f2:	608b      	str	r3, [r1, #8]
 80069f4:	e786      	b.n	8006904 <HAL_RCC_ClockConfig+0x38>
 80069f6:	bf00      	nop
 80069f8:	40023c00 	.word	0x40023c00
 80069fc:	40023800 	.word	0x40023800
 8006a00:	0802de68 	.word	0x0802de68
 8006a04:	2000000c 	.word	0x2000000c
 8006a08:	2000003c 	.word	0x2000003c

08006a0c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006a0e:	4a05      	ldr	r2, [pc, #20]	; (8006a24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006a16:	5cd3      	ldrb	r3, [r2, r3]
 8006a18:	4a03      	ldr	r2, [pc, #12]	; (8006a28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006a1a:	6810      	ldr	r0, [r2, #0]
}
 8006a1c:	40d8      	lsrs	r0, r3
 8006a1e:	4770      	bx	lr
 8006a20:	40023800 	.word	0x40023800
 8006a24:	0802de78 	.word	0x0802de78
 8006a28:	2000000c 	.word	0x2000000c

08006a2c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a2c:	230f      	movs	r3, #15
 8006a2e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <HAL_RCC_GetClockConfig+0x34>)
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	f002 0203 	and.w	r2, r2, #3
 8006a38:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006a40:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006a48:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	08db      	lsrs	r3, r3, #3
 8006a4e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006a52:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a54:	4b03      	ldr	r3, [pc, #12]	; (8006a64 <HAL_RCC_GetClockConfig+0x38>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	600b      	str	r3, [r1, #0]
}
 8006a5e:	4770      	bx	lr
 8006a60:	40023800 	.word	0x40023800
 8006a64:	40023c00 	.word	0x40023c00

08006a68 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a68:	6803      	ldr	r3, [r0, #0]
{
 8006a6a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a6e:	f013 0601 	ands.w	r6, r3, #1
{
 8006a72:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a74:	d00b      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a76:	4aaa      	ldr	r2, [pc, #680]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a78:	6891      	ldr	r1, [r2, #8]
 8006a7a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8006a7e:	6091      	str	r1, [r2, #8]
 8006a80:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8006a82:	6891      	ldr	r1, [r2, #8]
 8006a84:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006a86:	fab6 f686 	clz	r6, r6
 8006a8a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a8c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a8e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8006a92:	d012      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a94:	49a2      	ldr	r1, [pc, #648]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a96:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8006a98:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a9c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006aa0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8006aa4:	bf08      	it	eq
 8006aa6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006aa8:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006aac:	bf16      	itet	ne
 8006aae:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8006ab2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006ab4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ab6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006aba:	02d8      	lsls	r0, r3, #11
 8006abc:	d510      	bpl.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006abe:	4898      	ldr	r0, [pc, #608]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006ac0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006ac2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006ac6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006aca:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006ace:	ea42 0201 	orr.w	r2, r2, r1
 8006ad2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006ad6:	f000 8184 	beq.w	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8006ada:	2900      	cmp	r1, #0
 8006adc:	bf08      	it	eq
 8006ade:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8006ae0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006ae4:	bf18      	it	ne
 8006ae6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ae8:	0699      	lsls	r1, r3, #26
 8006aea:	d531      	bpl.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006aec:	4b8c      	ldr	r3, [pc, #560]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006aee:	4f8d      	ldr	r7, [pc, #564]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006af2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006af6:	641a      	str	r2, [r3, #64]	; 0x40
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b08:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b0a:	f7fe f853 	bl	8004bb4 <HAL_GetTick>
 8006b0e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	05da      	lsls	r2, r3, #23
 8006b14:	f140 8167 	bpl.w	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b18:	4f81      	ldr	r7, [pc, #516]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b1c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006b20:	f040 816c 	bne.w	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006b26:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006b2a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006b2e:	4a7c      	ldr	r2, [pc, #496]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b30:	f040 818a 	bne.w	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006b34:	6891      	ldr	r1, [r2, #8]
 8006b36:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8006b3a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006b3e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8006b42:	4301      	orrs	r1, r0
 8006b44:	6091      	str	r1, [r2, #8]
 8006b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b4a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	06d9      	lsls	r1, r3, #27
 8006b54:	d50c      	bpl.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b56:	4a72      	ldr	r2, [pc, #456]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b58:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006b5c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006b60:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8006b64:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006b68:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006b6a:	4301      	orrs	r1, r0
 8006b6c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b70:	045a      	lsls	r2, r3, #17
 8006b72:	d508      	bpl.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b74:	496a      	ldr	r1, [pc, #424]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b76:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006b78:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b7c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006b80:	4302      	orrs	r2, r0
 8006b82:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b86:	041f      	lsls	r7, r3, #16
 8006b88:	d508      	bpl.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b8a:	4965      	ldr	r1, [pc, #404]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b8c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006b8e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b92:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006b96:	4302      	orrs	r2, r0
 8006b98:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b9c:	03d8      	lsls	r0, r3, #15
 8006b9e:	d508      	bpl.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ba0:	495f      	ldr	r1, [pc, #380]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006ba2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006ba4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006ba8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006bac:	4302      	orrs	r2, r0
 8006bae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bb2:	0399      	lsls	r1, r3, #14
 8006bb4:	d508      	bpl.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bb6:	495a      	ldr	r1, [pc, #360]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006bb8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006bba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006bbe:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006bc2:	4302      	orrs	r2, r0
 8006bc4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bc8:	065a      	lsls	r2, r3, #25
 8006bca:	d508      	bpl.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bcc:	4954      	ldr	r1, [pc, #336]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006bce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006bd0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006bd4:	f022 0203 	bic.w	r2, r2, #3
 8006bd8:	4302      	orrs	r2, r0
 8006bda:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bde:	061f      	lsls	r7, r3, #24
 8006be0:	d508      	bpl.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006be2:	494f      	ldr	r1, [pc, #316]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006be4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006be6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006bea:	f022 020c 	bic.w	r2, r2, #12
 8006bee:	4302      	orrs	r2, r0
 8006bf0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bf4:	05d8      	lsls	r0, r3, #23
 8006bf6:	d508      	bpl.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006bf8:	4949      	ldr	r1, [pc, #292]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006bfa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006bfc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006c00:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006c04:	4302      	orrs	r2, r0
 8006c06:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c0a:	0599      	lsls	r1, r3, #22
 8006c0c:	d508      	bpl.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c0e:	4944      	ldr	r1, [pc, #272]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006c10:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006c12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006c16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006c1a:	4302      	orrs	r2, r0
 8006c1c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c20:	055a      	lsls	r2, r3, #21
 8006c22:	d508      	bpl.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c24:	493e      	ldr	r1, [pc, #248]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006c26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006c2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c30:	4302      	orrs	r2, r0
 8006c32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006c36:	051f      	lsls	r7, r3, #20
 8006c38:	d508      	bpl.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006c3a:	4939      	ldr	r1, [pc, #228]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c3e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006c42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c46:	4302      	orrs	r2, r0
 8006c48:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006c4c:	04d8      	lsls	r0, r3, #19
 8006c4e:	d508      	bpl.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006c50:	4933      	ldr	r1, [pc, #204]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006c52:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006c54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006c58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006c5c:	4302      	orrs	r2, r0
 8006c5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006c62:	0499      	lsls	r1, r3, #18
 8006c64:	d508      	bpl.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006c66:	492e      	ldr	r1, [pc, #184]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006c68:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006c6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006c6e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006c72:	4302      	orrs	r2, r0
 8006c74:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c78:	025a      	lsls	r2, r3, #9
 8006c7a:	d508      	bpl.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c7c:	4928      	ldr	r1, [pc, #160]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006c7e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006c80:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006c84:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006c88:	4302      	orrs	r2, r0
 8006c8a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c8e:	029f      	lsls	r7, r3, #10
 8006c90:	d50c      	bpl.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c92:	4823      	ldr	r0, [pc, #140]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006c94:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006c96:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8006c9a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c9e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8006ca2:	bf08      	it	eq
 8006ca4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8006cac:	f013 0f08 	tst.w	r3, #8
 8006cb0:	bf18      	it	ne
 8006cb2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cb4:	0358      	lsls	r0, r3, #13
 8006cb6:	d508      	bpl.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cb8:	4919      	ldr	r1, [pc, #100]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006cba:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006cbc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006cc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006cc4:	4302      	orrs	r2, r0
 8006cc6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006cca:	0219      	lsls	r1, r3, #8
 8006ccc:	d509      	bpl.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006cce:	4914      	ldr	r1, [pc, #80]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006cd0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006cd4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006cd8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006cdc:	4302      	orrs	r2, r0
 8006cde:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ce2:	2e01      	cmp	r6, #1
 8006ce4:	f000 80b4 	beq.w	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006ce8:	019a      	lsls	r2, r3, #6
 8006cea:	f100 80b1 	bmi.w	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006cee:	2d01      	cmp	r5, #1
 8006cf0:	d175      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006cf2:	4d0b      	ldr	r5, [pc, #44]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cfa:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cfc:	f7fd ff5a 	bl	8004bb4 <HAL_GetTick>
 8006d00:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d02:	682b      	ldr	r3, [r5, #0]
 8006d04:	009f      	lsls	r7, r3, #2
 8006d06:	f100 8127 	bmi.w	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d0a:	6822      	ldr	r2, [r4, #0]
 8006d0c:	0316      	lsls	r6, r2, #12
 8006d0e:	d501      	bpl.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d12:	b14b      	cbz	r3, 8006d28 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006d14:	02d0      	lsls	r0, r2, #11
 8006d16:	d522      	bpl.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d1a:	bb03      	cbnz	r3, 8006d5e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8006d1c:	e004      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006d1e:	bf00      	nop
 8006d20:	40023800 	.word	0x40023800
 8006d24:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d28:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d2c:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d34:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	6961      	ldr	r1, [r4, #20]
 8006d3c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006d40:	69a1      	ldr	r1, [r4, #24]
 8006d42:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d46:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d4a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8006d4e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006d50:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006d54:	3901      	subs	r1, #1
 8006d56:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006d5a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006d5e:	0291      	lsls	r1, r2, #10
 8006d60:	d515      	bpl.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006d62:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d68:	d111      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d6a:	4982      	ldr	r1, [pc, #520]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d6c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d70:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006d74:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006d78:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006d7c:	4303      	orrs	r3, r0
 8006d7e:	6960      	ldr	r0, [r4, #20]
 8006d80:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006d84:	6a20      	ldr	r0, [r4, #32]
 8006d86:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d8e:	0712      	lsls	r2, r2, #28
 8006d90:	d519      	bpl.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d92:	4a78      	ldr	r2, [pc, #480]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d94:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d98:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d9c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6961      	ldr	r1, [r4, #20]
 8006da8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006dac:	69e1      	ldr	r1, [r4, #28]
 8006dae:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006db2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006db6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006dba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006dbc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006dc6:	4c6b      	ldr	r4, [pc, #428]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dce:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dd0:	f7fd fef0 	bl	8004bb4 <HAL_GetTick>
 8006dd4:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	f140 80c4 	bpl.w	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006dde:	2000      	movs	r0, #0
 8006de0:	e009      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8006de2:	2601      	movs	r6, #1
 8006de4:	e67c      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006de6:	f7fd fee5 	bl	8004bb4 <HAL_GetTick>
 8006dea:	eba0 0008 	sub.w	r0, r0, r8
 8006dee:	2864      	cmp	r0, #100	; 0x64
 8006df0:	f67f ae8e 	bls.w	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8006df4:	2003      	movs	r0, #3
}
 8006df6:	b003      	add	sp, #12
 8006df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dfc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006dfe:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006e02:	4293      	cmp	r3, r2
 8006e04:	f43f ae8e 	beq.w	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e14:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006e18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e1c:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8006e1e:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e22:	07db      	lsls	r3, r3, #31
 8006e24:	f57f ae7e 	bpl.w	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8006e28:	f7fd fec4 	bl	8004bb4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e2c:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006e30:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e34:	0798      	lsls	r0, r3, #30
 8006e36:	f53f ae75 	bmi.w	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e3a:	f7fd febb 	bl	8004bb4 <HAL_GetTick>
 8006e3e:	eba0 0008 	sub.w	r0, r0, r8
 8006e42:	4548      	cmp	r0, r9
 8006e44:	d9f5      	bls.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006e46:	e7d5      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e48:	6891      	ldr	r1, [r2, #8]
 8006e4a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006e4e:	e679      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8006e50:	4e48      	ldr	r6, [pc, #288]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e52:	6833      	ldr	r3, [r6, #0]
 8006e54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e58:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006e5a:	f7fd feab 	bl	8004bb4 <HAL_GetTick>
 8006e5e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e60:	6833      	ldr	r3, [r6, #0]
 8006e62:	011b      	lsls	r3, r3, #4
 8006e64:	d472      	bmi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	07d7      	lsls	r7, r2, #31
 8006e6a:	d512      	bpl.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8006e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e6e:	b983      	cbnz	r3, 8006e92 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e70:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e74:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e7c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006e80:	430b      	orrs	r3, r1
 8006e82:	6861      	ldr	r1, [r4, #4]
 8006e84:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006e88:	68a1      	ldr	r1, [r4, #8]
 8006e8a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006e8e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e92:	0316      	lsls	r6, r2, #12
 8006e94:	d503      	bpl.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e9c:	d005      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006e9e:	02d0      	lsls	r0, r2, #11
 8006ea0:	d51e      	bpl.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ea8:	d11a      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006eaa:	4932      	ldr	r1, [pc, #200]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006eac:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006eb0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006eb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006eb8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006ebc:	4303      	orrs	r3, r0
 8006ebe:	6860      	ldr	r0, [r4, #4]
 8006ec0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006ec4:	68e0      	ldr	r0, [r4, #12]
 8006ec6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006eca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ece:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8006ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ed4:	f020 001f 	bic.w	r0, r0, #31
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	4303      	orrs	r3, r0
 8006edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ee0:	01d1      	lsls	r1, r2, #7
 8006ee2:	d511      	bpl.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ee4:	4923      	ldr	r1, [pc, #140]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ee6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006eea:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006eee:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006ef2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006ef6:	4303      	orrs	r3, r0
 8006ef8:	6860      	ldr	r0, [r4, #4]
 8006efa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006efe:	6920      	ldr	r0, [r4, #16]
 8006f00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f08:	0192      	lsls	r2, r2, #6
 8006f0a:	d50d      	bpl.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f0c:	6923      	ldr	r3, [r4, #16]
 8006f0e:	6862      	ldr	r2, [r4, #4]
 8006f10:	041b      	lsls	r3, r3, #16
 8006f12:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006f16:	68e2      	ldr	r2, [r4, #12]
 8006f18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f1c:	68a2      	ldr	r2, [r4, #8]
 8006f1e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006f22:	4a14      	ldr	r2, [pc, #80]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006f28:	4e12      	ldr	r6, [pc, #72]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f2a:	6833      	ldr	r3, [r6, #0]
 8006f2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f30:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006f32:	f7fd fe3f 	bl	8004bb4 <HAL_GetTick>
 8006f36:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f38:	6833      	ldr	r3, [r6, #0]
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	f53f aed7 	bmi.w	8006cee <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f40:	f7fd fe38 	bl	8004bb4 <HAL_GetTick>
 8006f44:	1bc0      	subs	r0, r0, r7
 8006f46:	2864      	cmp	r0, #100	; 0x64
 8006f48:	d9f6      	bls.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006f4a:	e753      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f4c:	f7fd fe32 	bl	8004bb4 <HAL_GetTick>
 8006f50:	1bc0      	subs	r0, r0, r7
 8006f52:	2864      	cmp	r0, #100	; 0x64
 8006f54:	d984      	bls.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006f56:	e74d      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f58:	f7fd fe2c 	bl	8004bb4 <HAL_GetTick>
 8006f5c:	1b80      	subs	r0, r0, r6
 8006f5e:	2864      	cmp	r0, #100	; 0x64
 8006f60:	f67f aecf 	bls.w	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006f64:	e746      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f66:	f7fd fe25 	bl	8004bb4 <HAL_GetTick>
 8006f6a:	1b40      	subs	r0, r0, r5
 8006f6c:	2864      	cmp	r0, #100	; 0x64
 8006f6e:	f67f af32 	bls.w	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006f72:	e73f      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8006f74:	40023800 	.word	0x40023800

08006f78 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	b1c8      	cbz	r0, 8006fb4 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006f80:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006f84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006f88:	b91b      	cbnz	r3, 8006f92 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006f8a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006f8e:	f7fa fbe7 	bl	8001760 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f92:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006f94:	1d21      	adds	r1, r4, #4
 8006f96:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f98:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006f9c:	f000 f9cf 	bl	800733e <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006fa0:	6862      	ldr	r2, [r4, #4]
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	f000 fa05 	bl	80073b4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006faa:	2301      	movs	r3, #1

  return HAL_OK;
 8006fac:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006fae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	e7fc      	b.n	8006fb2 <HAL_SDRAM_Init+0x3a>

08006fb8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006fb8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006fba:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006fc2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006fc4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8006fc6:	d010      	beq.n	8006fea <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006fc8:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8006fcc:	2c01      	cmp	r4, #1
 8006fce:	d110      	bne.n	8006ff2 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006fd0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006fd2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006fd4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006fd8:	f000 fa22 	bl	8007420 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006fdc:	6833      	ldr	r3, [r6, #0]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d104      	bne.n	8006fec <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006fe2:	2305      	movs	r3, #5
 8006fe4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006fe8:	2000      	movs	r0, #0
}
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006fec:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8006ff0:	e7fa      	b.n	8006fe8 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8006ff2:	2001      	movs	r0, #1
 8006ff4:	e7f9      	b.n	8006fea <HAL_SDRAM_SendCommand+0x32>

08006ff6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006ff6:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ff8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006ffc:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	b2d8      	uxtb	r0, r3
 8007002:	d00d      	beq.n	8007020 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007004:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007008:	2b01      	cmp	r3, #1
 800700a:	b2dd      	uxtb	r5, r3
 800700c:	d109      	bne.n	8007022 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800700e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007010:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007012:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007016:	f000 fa15 	bl	8007444 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800701a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800701c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8007020:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007022:	2001      	movs	r0, #1
 8007024:	e7fc      	b.n	8007020 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08007026 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007026:	4770      	bx	lr

08007028 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007028:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800702c:	2b01      	cmp	r3, #1
 800702e:	d133      	bne.n	8007098 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	2302      	movs	r3, #2
 8007032:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007036:	6803      	ldr	r3, [r0, #0]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	f042 0201 	orr.w	r2, r2, #1
 800703e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007040:	4a16      	ldr	r2, [pc, #88]	; (800709c <HAL_TIM_Base_Start_IT+0x74>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d01a      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x54>
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704a:	d017      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x54>
 800704c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007050:	4293      	cmp	r3, r2
 8007052:	d013      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x54>
 8007054:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007058:	4293      	cmp	r3, r2
 800705a:	d00f      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x54>
 800705c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007060:	4293      	cmp	r3, r2
 8007062:	d00b      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x54>
 8007064:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007068:	4293      	cmp	r3, r2
 800706a:	d007      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x54>
 800706c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007070:	4293      	cmp	r3, r2
 8007072:	d003      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x54>
 8007074:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007078:	4293      	cmp	r3, r2
 800707a:	d107      	bne.n	800708c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800707c:	6899      	ldr	r1, [r3, #8]
 800707e:	4a08      	ldr	r2, [pc, #32]	; (80070a0 <HAL_TIM_Base_Start_IT+0x78>)
 8007080:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007082:	2a06      	cmp	r2, #6
 8007084:	d006      	beq.n	8007094 <HAL_TIM_Base_Start_IT+0x6c>
 8007086:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800708a:	d003      	beq.n	8007094 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007094:	2000      	movs	r0, #0
}
 8007096:	4770      	bx	lr
    return HAL_ERROR;
 8007098:	2001      	movs	r0, #1
 800709a:	4770      	bx	lr
 800709c:	40010000 	.word	0x40010000
 80070a0:	00010007 	.word	0x00010007

080070a4 <HAL_TIM_OC_DelayElapsedCallback>:
 80070a4:	4770      	bx	lr

080070a6 <HAL_TIM_IC_CaptureCallback>:
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80070a8:	4770      	bx	lr

080070aa <HAL_TIM_TriggerCallback>:
 80070aa:	4770      	bx	lr

080070ac <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070ac:	6803      	ldr	r3, [r0, #0]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	0791      	lsls	r1, r2, #30
{
 80070b2:	b510      	push	{r4, lr}
 80070b4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070b6:	d50f      	bpl.n	80070d8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	0792      	lsls	r2, r2, #30
 80070bc:	d50c      	bpl.n	80070d8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070be:	f06f 0202 	mvn.w	r2, #2
 80070c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070c4:	2201      	movs	r2, #1
 80070c6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	0799      	lsls	r1, r3, #30
 80070cc:	f000 8085 	beq.w	80071da <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070d0:	f7ff ffe9 	bl	80070a6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d4:	2300      	movs	r3, #0
 80070d6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	0752      	lsls	r2, r2, #29
 80070de:	d510      	bpl.n	8007102 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	0750      	lsls	r0, r2, #29
 80070e4:	d50d      	bpl.n	8007102 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070e6:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ee:	2202      	movs	r2, #2
 80070f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80070f8:	d075      	beq.n	80071e6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80070fa:	f7ff ffd4 	bl	80070a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fe:	2300      	movs	r3, #0
 8007100:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	0711      	lsls	r1, r2, #28
 8007108:	d50f      	bpl.n	800712a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	0712      	lsls	r2, r2, #28
 800710e:	d50c      	bpl.n	800712a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007110:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007114:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007118:	2204      	movs	r2, #4
 800711a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	079b      	lsls	r3, r3, #30
 8007120:	d067      	beq.n	80071f2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007122:	f7ff ffc0 	bl	80070a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007126:	2300      	movs	r3, #0
 8007128:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	691a      	ldr	r2, [r3, #16]
 800712e:	06d0      	lsls	r0, r2, #27
 8007130:	d510      	bpl.n	8007154 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	06d1      	lsls	r1, r2, #27
 8007136:	d50d      	bpl.n	8007154 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007138:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800713c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800713e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007140:	2208      	movs	r2, #8
 8007142:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f413 7f40 	tst.w	r3, #768	; 0x300
 800714a:	d058      	beq.n	80071fe <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800714c:	f7ff ffab 	bl	80070a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007150:	2300      	movs	r3, #0
 8007152:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	07d2      	lsls	r2, r2, #31
 800715a:	d508      	bpl.n	800716e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	07d0      	lsls	r0, r2, #31
 8007160:	d505      	bpl.n	800716e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007162:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007166:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007168:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800716a:	f7fa f8f9 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	0611      	lsls	r1, r2, #24
 8007174:	d508      	bpl.n	8007188 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	0612      	lsls	r2, r2, #24
 800717a:	d505      	bpl.n	8007188 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800717c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007180:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007182:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007184:	f000 f8d9 	bl	800733a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	05d0      	lsls	r0, r2, #23
 800718e:	d508      	bpl.n	80071a2 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	0611      	lsls	r1, r2, #24
 8007194:	d505      	bpl.n	80071a2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007196:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800719a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800719c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800719e:	f000 f8cd 	bl	800733c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	691a      	ldr	r2, [r3, #16]
 80071a6:	0652      	lsls	r2, r2, #25
 80071a8:	d508      	bpl.n	80071bc <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	0650      	lsls	r0, r2, #25
 80071ae:	d505      	bpl.n	80071bc <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071b4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80071b8:	f7ff ff77 	bl	80070aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	0691      	lsls	r1, r2, #26
 80071c2:	d522      	bpl.n	800720a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	0692      	lsls	r2, r2, #26
 80071c8:	d51f      	bpl.n	800720a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071ca:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071d0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80071d6:	f000 b8af 	b.w	8007338 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071da:	f7ff ff63 	bl	80070a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071de:	4620      	mov	r0, r4
 80071e0:	f7ff ff62 	bl	80070a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80071e4:	e776      	b.n	80070d4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e6:	f7ff ff5d 	bl	80070a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ea:	4620      	mov	r0, r4
 80071ec:	f7ff ff5c 	bl	80070a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80071f0:	e785      	b.n	80070fe <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f2:	f7ff ff57 	bl	80070a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f6:	4620      	mov	r0, r4
 80071f8:	f7ff ff56 	bl	80070a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80071fc:	e793      	b.n	8007126 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	f7ff ff51 	bl	80070a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007202:	4620      	mov	r0, r4
 8007204:	f7ff ff50 	bl	80070a8 <HAL_TIM_PWM_PulseFinishedCallback>
 8007208:	e7a2      	b.n	8007150 <HAL_TIM_IRQHandler+0xa4>
}
 800720a:	bd10      	pop	{r4, pc}

0800720c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800720c:	4a30      	ldr	r2, [pc, #192]	; (80072d0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800720e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007210:	4290      	cmp	r0, r2
 8007212:	d012      	beq.n	800723a <TIM_Base_SetConfig+0x2e>
 8007214:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007218:	d00f      	beq.n	800723a <TIM_Base_SetConfig+0x2e>
 800721a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800721e:	4290      	cmp	r0, r2
 8007220:	d00b      	beq.n	800723a <TIM_Base_SetConfig+0x2e>
 8007222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007226:	4290      	cmp	r0, r2
 8007228:	d007      	beq.n	800723a <TIM_Base_SetConfig+0x2e>
 800722a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800722e:	4290      	cmp	r0, r2
 8007230:	d003      	beq.n	800723a <TIM_Base_SetConfig+0x2e>
 8007232:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007236:	4290      	cmp	r0, r2
 8007238:	d119      	bne.n	800726e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800723a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800723c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007240:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007242:	4a23      	ldr	r2, [pc, #140]	; (80072d0 <TIM_Base_SetConfig+0xc4>)
 8007244:	4290      	cmp	r0, r2
 8007246:	d029      	beq.n	800729c <TIM_Base_SetConfig+0x90>
 8007248:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800724c:	d026      	beq.n	800729c <TIM_Base_SetConfig+0x90>
 800724e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007252:	4290      	cmp	r0, r2
 8007254:	d022      	beq.n	800729c <TIM_Base_SetConfig+0x90>
 8007256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800725a:	4290      	cmp	r0, r2
 800725c:	d01e      	beq.n	800729c <TIM_Base_SetConfig+0x90>
 800725e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007262:	4290      	cmp	r0, r2
 8007264:	d01a      	beq.n	800729c <TIM_Base_SetConfig+0x90>
 8007266:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800726a:	4290      	cmp	r0, r2
 800726c:	d016      	beq.n	800729c <TIM_Base_SetConfig+0x90>
 800726e:	4a19      	ldr	r2, [pc, #100]	; (80072d4 <TIM_Base_SetConfig+0xc8>)
 8007270:	4290      	cmp	r0, r2
 8007272:	d013      	beq.n	800729c <TIM_Base_SetConfig+0x90>
 8007274:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007278:	4290      	cmp	r0, r2
 800727a:	d00f      	beq.n	800729c <TIM_Base_SetConfig+0x90>
 800727c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007280:	4290      	cmp	r0, r2
 8007282:	d00b      	beq.n	800729c <TIM_Base_SetConfig+0x90>
 8007284:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8007288:	4290      	cmp	r0, r2
 800728a:	d007      	beq.n	800729c <TIM_Base_SetConfig+0x90>
 800728c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007290:	4290      	cmp	r0, r2
 8007292:	d003      	beq.n	800729c <TIM_Base_SetConfig+0x90>
 8007294:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007298:	4290      	cmp	r0, r2
 800729a:	d103      	bne.n	80072a4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800729c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072a0:	68ca      	ldr	r2, [r1, #12]
 80072a2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072a4:	694a      	ldr	r2, [r1, #20]
 80072a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072aa:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80072ac:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072ae:	688b      	ldr	r3, [r1, #8]
 80072b0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072b2:	680b      	ldr	r3, [r1, #0]
 80072b4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b6:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <TIM_Base_SetConfig+0xc4>)
 80072b8:	4298      	cmp	r0, r3
 80072ba:	d003      	beq.n	80072c4 <TIM_Base_SetConfig+0xb8>
 80072bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072c0:	4298      	cmp	r0, r3
 80072c2:	d101      	bne.n	80072c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072c4:	690b      	ldr	r3, [r1, #16]
 80072c6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072c8:	2301      	movs	r3, #1
 80072ca:	6143      	str	r3, [r0, #20]
}
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	40010000 	.word	0x40010000
 80072d4:	40014000 	.word	0x40014000

080072d8 <HAL_TIM_Base_Init>:
{
 80072d8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80072da:	4604      	mov	r4, r0
 80072dc:	b350      	cbz	r0, 8007334 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80072de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80072e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072e6:	b91b      	cbnz	r3, 80072f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80072e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80072ec:	f7ff fe9b 	bl	8007026 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072f2:	6820      	ldr	r0, [r4, #0]
 80072f4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80072f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072fa:	f7ff ff87 	bl	800720c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072fe:	2301      	movs	r3, #1
  return HAL_OK;
 8007300:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007302:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007306:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800730a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800730e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007312:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007316:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800731a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800731e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007326:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800732a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800732e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007332:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007334:	2001      	movs	r0, #1
 8007336:	e7fc      	b.n	8007332 <HAL_TIM_Base_Init+0x5a>

08007338 <HAL_TIMEx_CommutCallback>:
 8007338:	4770      	bx	lr

0800733a <HAL_TIMEx_BreakCallback>:
 800733a:	4770      	bx	lr

0800733c <HAL_TIMEx_Break2Callback>:
 800733c:	4770      	bx	lr

0800733e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800733e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007342:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007344:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8007348:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800734c:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8007350:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8007354:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8007358:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800735a:	b9a2      	cbnz	r2, 8007386 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800735c:	ea43 0209 	orr.w	r2, r3, r9
 8007360:	6801      	ldr	r1, [r0, #0]
 8007362:	432a      	orrs	r2, r5
 8007364:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8007368:	ea42 0308 	orr.w	r3, r2, r8
 800736c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8007370:	ea43 030e 	orr.w	r3, r3, lr
 8007374:	ea43 030c 	orr.w	r3, r3, ip
 8007378:	433b      	orrs	r3, r7
 800737a:	4333      	orrs	r3, r6
 800737c:	430b      	orrs	r3, r1
 800737e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8007380:	2000      	movs	r0, #0
 8007382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007386:	6802      	ldr	r2, [r0, #0]
 8007388:	ea43 0309 	orr.w	r3, r3, r9
 800738c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007390:	4313      	orrs	r3, r2
 8007392:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007394:	ea45 0308 	orr.w	r3, r5, r8
 8007398:	6842      	ldr	r2, [r0, #4]
 800739a:	ea43 030e 	orr.w	r3, r3, lr
 800739e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80073a2:	ea43 030c 	orr.w	r3, r3, ip
 80073a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80073aa:	433b      	orrs	r3, r7
 80073ac:	4333      	orrs	r3, r6
 80073ae:	4313      	orrs	r3, r2
 80073b0:	6043      	str	r3, [r0, #4]
 80073b2:	e7e5      	b.n	8007380 <FMC_SDRAM_Init+0x42>

080073b4 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80073b4:	68cb      	ldr	r3, [r1, #12]
 80073b6:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80073ba:	694b      	ldr	r3, [r1, #20]
{
 80073bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80073be:	3b01      	subs	r3, #1
 80073c0:	680f      	ldr	r7, [r1, #0]
 80073c2:	684c      	ldr	r4, [r1, #4]
 80073c4:	688e      	ldr	r6, [r1, #8]
 80073c6:	051b      	lsls	r3, r3, #20
 80073c8:	690d      	ldr	r5, [r1, #16]
 80073ca:	3c01      	subs	r4, #1
 80073cc:	6989      	ldr	r1, [r1, #24]
 80073ce:	3e01      	subs	r6, #1
 80073d0:	3d01      	subs	r5, #1
 80073d2:	3f01      	subs	r7, #1
 80073d4:	3901      	subs	r1, #1
 80073d6:	0124      	lsls	r4, r4, #4
 80073d8:	0236      	lsls	r6, r6, #8
 80073da:	042d      	lsls	r5, r5, #16
 80073dc:	0609      	lsls	r1, r1, #24
 80073de:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80073e2:	b95a      	cbnz	r2, 80073fc <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80073e4:	433b      	orrs	r3, r7
 80073e6:	6882      	ldr	r2, [r0, #8]
 80073e8:	4323      	orrs	r3, r4
 80073ea:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80073ee:	4333      	orrs	r3, r6
 80073f0:	432b      	orrs	r3, r5
 80073f2:	430b      	orrs	r3, r1
 80073f4:	4313      	orrs	r3, r2
 80073f6:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80073f8:	2000      	movs	r0, #0
 80073fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80073fc:	6882      	ldr	r2, [r0, #8]
 80073fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007402:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007406:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007408:	ea44 0306 	orr.w	r3, r4, r6
 800740c:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800740e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007410:	68c2      	ldr	r2, [r0, #12]
 8007412:	432b      	orrs	r3, r5
 8007414:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007418:	430b      	orrs	r3, r1
 800741a:	4313      	orrs	r3, r2
 800741c:	60c3      	str	r3, [r0, #12]
 800741e:	e7eb      	b.n	80073f8 <FMC_SDRAM_Timing_Init+0x44>

08007420 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007420:	6902      	ldr	r2, [r0, #16]
{
 8007422:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007424:	e9d1 3400 	ldrd	r3, r4, [r1]
 8007428:	0d92      	lsrs	r2, r2, #22
 800742a:	4323      	orrs	r3, r4
 800742c:	68cc      	ldr	r4, [r1, #12]
 800742e:	0592      	lsls	r2, r2, #22
 8007430:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8007434:	4313      	orrs	r3, r2
 8007436:	688a      	ldr	r2, [r1, #8]
 8007438:	3a01      	subs	r2, #1
 800743a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800743e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8007440:	2000      	movs	r0, #0
 8007442:	bd10      	pop	{r4, pc}

08007444 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007444:	6943      	ldr	r3, [r0, #20]
 8007446:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800744a:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800744e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8007452:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8007454:	2000      	movs	r0, #0
 8007456:	4770      	bx	lr

08007458 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007458:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800745c:	b113      	cbz	r3, 8007464 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800745e:	f06f 0005 	mvn.w	r0, #5
 8007462:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007464:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8007468:	4b07      	ldr	r3, [pc, #28]	; (8007488 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800746a:	b912      	cbnz	r2, 8007472 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800746c:	f3ef 8211 	mrs	r2, BASEPRI
 8007470:	b112      	cbz	r2, 8007478 <osKernelInitialize+0x20>
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	2a02      	cmp	r2, #2
 8007476:	d0f2      	beq.n	800745e <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007478:	6818      	ldr	r0, [r3, #0]
 800747a:	b910      	cbnz	r0, 8007482 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800747c:	2201      	movs	r2, #1
 800747e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007480:	4770      	bx	lr
    } else {
      stat = osError;
 8007482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 8007486:	4770      	bx	lr
 8007488:	200023b0 	.word	0x200023b0

0800748c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800748c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800748e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007492:	b113      	cbz	r3, 800749a <osKernelStart+0xe>
    stat = osErrorISR;
 8007494:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8007498:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800749a:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800749e:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 80074a0:	b912      	cbnz	r2, 80074a8 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074a2:	f3ef 8211 	mrs	r2, BASEPRI
 80074a6:	b112      	cbz	r2, 80074ae <osKernelStart+0x22>
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	2a02      	cmp	r2, #2
 80074ac:	d0f2      	beq.n	8007494 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	2a01      	cmp	r2, #1
 80074b2:	d105      	bne.n	80074c0 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 80074b4:	2202      	movs	r2, #2
 80074b6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80074b8:	f001 fe7a 	bl	80091b0 <vTaskStartScheduler>
      stat = osOK;
 80074bc:	2000      	movs	r0, #0
 80074be:	e7eb      	b.n	8007498 <osKernelStart+0xc>
      stat = osError;
 80074c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return (stat);
 80074c4:	e7e8      	b.n	8007498 <osKernelStart+0xc>
 80074c6:	bf00      	nop
 80074c8:	200023b0 	.word	0x200023b0

080074cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ce:	4614      	mov	r4, r2
 80074d0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074d2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074d4:	460b      	mov	r3, r1
  hTask = NULL;
 80074d6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80074dc:	bb22      	cbnz	r2, 8007528 <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074de:	f3ef 8210 	mrs	r2, PRIMASK
 80074e2:	b912      	cbnz	r2, 80074ea <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074e4:	f3ef 8211 	mrs	r2, BASEPRI
 80074e8:	b11a      	cbz	r2, 80074f2 <osThreadNew+0x26>
 80074ea:	4a22      	ldr	r2, [pc, #136]	; (8007574 <osThreadNew+0xa8>)
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	2a02      	cmp	r2, #2
 80074f0:	d01a      	beq.n	8007528 <osThreadNew+0x5c>
 80074f2:	b1c8      	cbz	r0, 8007528 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80074f4:	2c00      	cmp	r4, #0
 80074f6:	d02f      	beq.n	8007558 <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80074f8:	69a5      	ldr	r5, [r4, #24]
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	bf08      	it	eq
 80074fe:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007500:	1e6a      	subs	r2, r5, #1
 8007502:	46ac      	mov	ip, r5
 8007504:	2a37      	cmp	r2, #55	; 0x37
 8007506:	d82b      	bhi.n	8007560 <osThreadNew+0x94>
 8007508:	6862      	ldr	r2, [r4, #4]
 800750a:	07d2      	lsls	r2, r2, #31
 800750c:	d428      	bmi.n	8007560 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800750e:	6966      	ldr	r6, [r4, #20]
 8007510:	b16e      	cbz	r6, 800752e <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007512:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8007514:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007516:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800751a:	b157      	cbz	r7, 8007532 <osThreadNew+0x66>
 800751c:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8007520:	d902      	bls.n	8007528 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007522:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007524:	b104      	cbz	r4, 8007528 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007526:	b9ee      	cbnz	r6, 8007564 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007528:	9805      	ldr	r0, [sp, #20]
}
 800752a:	b007      	add	sp, #28
 800752c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800752e:	2280      	movs	r2, #128	; 0x80
 8007530:	e7f0      	b.n	8007514 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007532:	f1be 0f00 	cmp.w	lr, #0
 8007536:	d1f7      	bne.n	8007528 <osThreadNew+0x5c>
      if (mem == 0) {
 8007538:	6924      	ldr	r4, [r4, #16]
 800753a:	2c00      	cmp	r4, #0
 800753c:	d1f4      	bne.n	8007528 <osThreadNew+0x5c>
 800753e:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007540:	a905      	add	r1, sp, #20
 8007542:	b292      	uxth	r2, r2
 8007544:	e9cd c100 	strd	ip, r1, [sp]
 8007548:	4621      	mov	r1, r4
 800754a:	f001 fca6 	bl	8008e9a <xTaskCreate>
 800754e:	2801      	cmp	r0, #1
          hTask = NULL;
 8007550:	bf1c      	itt	ne
 8007552:	2300      	movne	r3, #0
 8007554:	9305      	strne	r3, [sp, #20]
 8007556:	e7e7      	b.n	8007528 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 8007558:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800755c:	2280      	movs	r2, #128	; 0x80
 800755e:	e7ef      	b.n	8007540 <osThreadNew+0x74>
        return (NULL);
 8007560:	2000      	movs	r0, #0
 8007562:	e7e2      	b.n	800752a <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007564:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8007568:	9500      	str	r5, [sp, #0]
 800756a:	f001 fc58 	bl	8008e1e <xTaskCreateStatic>
 800756e:	9005      	str	r0, [sp, #20]
 8007570:	e7da      	b.n	8007528 <osThreadNew+0x5c>
 8007572:	bf00      	nop
 8007574:	200023b0 	.word	0x200023b0

08007578 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007578:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800757a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800757e:	b113      	cbz	r3, 8007586 <osDelay+0xe>
    stat = osErrorISR;
 8007580:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8007584:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007586:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800758a:	b913      	cbnz	r3, 8007592 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800758c:	f3ef 8311 	mrs	r3, BASEPRI
 8007590:	b11b      	cbz	r3, 800759a <osDelay+0x22>
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <osDelay+0x30>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d0f2      	beq.n	8007580 <osDelay+0x8>
    if (ticks != 0U) {
 800759a:	2800      	cmp	r0, #0
 800759c:	d0f2      	beq.n	8007584 <osDelay+0xc>
      vTaskDelay(ticks);
 800759e:	f001 fdc5 	bl	800912c <vTaskDelay>
    stat = osOK;
 80075a2:	2000      	movs	r0, #0
 80075a4:	e7ee      	b.n	8007584 <osDelay+0xc>
 80075a6:	bf00      	nop
 80075a8:	200023b0 	.word	0x200023b0

080075ac <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b0:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80075b4:	b116      	cbz	r6, 80075bc <osMutexNew+0x10>
  hMutex = NULL;
 80075b6:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80075b8:	4620      	mov	r0, r4
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075bc:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 80075c0:	b912      	cbnz	r2, 80075c8 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075c2:	f3ef 8211 	mrs	r2, BASEPRI
 80075c6:	b11a      	cbz	r2, 80075d0 <osMutexNew+0x24>
 80075c8:	4a18      	ldr	r2, [pc, #96]	; (800762c <osMutexNew+0x80>)
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	2a02      	cmp	r2, #2
 80075ce:	d0f2      	beq.n	80075b6 <osMutexNew+0xa>
    if (attr != NULL) {
 80075d0:	b115      	cbz	r5, 80075d8 <osMutexNew+0x2c>
      type = attr->attr_bits;
 80075d2:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 80075d4:	0733      	lsls	r3, r6, #28
 80075d6:	d4ee      	bmi.n	80075b6 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80075d8:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 80075dc:	b17d      	cbz	r5, 80075fe <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80075de:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 80075e2:	b151      	cbz	r1, 80075fa <osMutexNew+0x4e>
 80075e4:	2b4f      	cmp	r3, #79	; 0x4f
 80075e6:	d9e6      	bls.n	80075b6 <osMutexNew+0xa>
        if (rmtx != 0U) {
 80075e8:	b1de      	cbz	r6, 8007622 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80075ea:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80075ec:	f000 ff4e 	bl	800848c <xQueueCreateMutexStatic>
 80075f0:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d0df      	beq.n	80075b6 <osMutexNew+0xa>
          name = attr->name;
 80075f6:	682d      	ldr	r5, [r5, #0]
 80075f8:	e00a      	b.n	8007610 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1db      	bne.n	80075b6 <osMutexNew+0xa>
          if (rmtx != 0U) {
 80075fe:	b196      	cbz	r6, 8007626 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007600:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8007602:	f000 ff78 	bl	80084f6 <xQueueCreateMutex>
 8007606:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8007608:	2800      	cmp	r0, #0
 800760a:	d0d4      	beq.n	80075b6 <osMutexNew+0xa>
        if (attr != NULL) {
 800760c:	2d00      	cmp	r5, #0
 800760e:	d1f2      	bne.n	80075f6 <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 8007610:	4629      	mov	r1, r5
 8007612:	4620      	mov	r0, r4
 8007614:	f001 fa3a 	bl	8008a8c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007618:	2e00      	cmp	r6, #0
 800761a:	d0cd      	beq.n	80075b8 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800761c:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8007620:	e7ca      	b.n	80075b8 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007622:	2001      	movs	r0, #1
 8007624:	e7e2      	b.n	80075ec <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 8007626:	2001      	movs	r0, #1
 8007628:	e7eb      	b.n	8007602 <osMutexNew+0x56>
 800762a:	bf00      	nop
 800762c:	200023b0 	.word	0x200023b0

08007630 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007630:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007632:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007636:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8007638:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800763c:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800763e:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8007642:	b112      	cbz	r2, 800764a <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8007644:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8007648:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800764a:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800764e:	b912      	cbnz	r2, 8007656 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007650:	f3ef 8211 	mrs	r2, BASEPRI
 8007654:	b11a      	cbz	r2, 800765e <osMutexAcquire+0x2e>
 8007656:	4a0d      	ldr	r2, [pc, #52]	; (800768c <osMutexAcquire+0x5c>)
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	2a02      	cmp	r2, #2
 800765c:	d0f2      	beq.n	8007644 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800765e:	b188      	cbz	r0, 8007684 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007660:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8007662:	b163      	cbz	r3, 800767e <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007664:	f001 f999 	bl	800899a <xQueueTakeMutexRecursive>
 8007668:	2801      	cmp	r0, #1
 800766a:	d101      	bne.n	8007670 <osMutexAcquire+0x40>
  stat = osOK;
 800766c:	2000      	movs	r0, #0
 800766e:	e7eb      	b.n	8007648 <osMutexAcquire+0x18>
          stat = osErrorResource;
 8007670:	2c00      	cmp	r4, #0
 8007672:	bf14      	ite	ne
 8007674:	f06f 0001 	mvnne.w	r0, #1
 8007678:	f06f 0002 	mvneq.w	r0, #2
 800767c:	e7e4      	b.n	8007648 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800767e:	f001 f8c1 	bl	8008804 <xQueueSemaphoreTake>
 8007682:	e7f1      	b.n	8007668 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8007684:	f06f 0003 	mvn.w	r0, #3
 8007688:	e7de      	b.n	8007648 <osMutexAcquire+0x18>
 800768a:	bf00      	nop
 800768c:	200023b0 	.word	0x200023b0

08007690 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007690:	b508      	push	{r3, lr}
 8007692:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007694:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8007698:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800769c:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80076a0:	b112      	cbz	r2, 80076a8 <osMutexRelease+0x18>
    stat = osErrorISR;
 80076a2:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80076a6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a8:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80076ac:	b912      	cbnz	r2, 80076b4 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076ae:	f3ef 8211 	mrs	r2, BASEPRI
 80076b2:	b11a      	cbz	r2, 80076bc <osMutexRelease+0x2c>
 80076b4:	4a0a      	ldr	r2, [pc, #40]	; (80076e0 <osMutexRelease+0x50>)
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	2a02      	cmp	r2, #2
 80076ba:	d0f2      	beq.n	80076a2 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 80076bc:	b168      	cbz	r0, 80076da <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 80076be:	b13b      	cbz	r3, 80076d0 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80076c0:	f000 fef9 	bl	80084b6 <xQueueGiveMutexRecursive>
 80076c4:	2801      	cmp	r0, #1
  stat = osOK;
 80076c6:	bf0c      	ite	eq
 80076c8:	2000      	moveq	r0, #0
        stat = osErrorResource;
 80076ca:	f06f 0002 	mvnne.w	r0, #2
 80076ce:	e7ea      	b.n	80076a6 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80076d0:	461a      	mov	r2, r3
 80076d2:	4619      	mov	r1, r3
 80076d4:	f000 fe1f 	bl	8008316 <xQueueGenericSend>
 80076d8:	e7f4      	b.n	80076c4 <osMutexRelease+0x34>
    stat = osErrorParameter;
 80076da:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80076de:	e7e2      	b.n	80076a6 <osMutexRelease+0x16>
 80076e0:	200023b0 	.word	0x200023b0

080076e4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80076e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076e6:	460e      	mov	r6, r1
 80076e8:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ea:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80076ee:	b11b      	cbz	r3, 80076f8 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 80076f0:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80076f2:	4620      	mov	r0, r4
 80076f4:	b002      	add	sp, #8
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076f8:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80076fc:	b913      	cbnz	r3, 8007704 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007702:	b11b      	cbz	r3, 800770c <osSemaphoreNew+0x28>
 8007704:	4b21      	ldr	r3, [pc, #132]	; (800778c <osSemaphoreNew+0xa8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b02      	cmp	r3, #2
 800770a:	d0f1      	beq.n	80076f0 <osSemaphoreNew+0xc>
 800770c:	2800      	cmp	r0, #0
 800770e:	d0ef      	beq.n	80076f0 <osSemaphoreNew+0xc>
 8007710:	42b0      	cmp	r0, r6
 8007712:	d3ed      	bcc.n	80076f0 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8007714:	b1ed      	cbz	r5, 8007752 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007716:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800771a:	b1c3      	cbz	r3, 800774e <osSemaphoreNew+0x6a>
 800771c:	2a4f      	cmp	r2, #79	; 0x4f
 800771e:	d9e7      	bls.n	80076f0 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8007720:	2801      	cmp	r0, #1
 8007722:	d129      	bne.n	8007778 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007724:	2203      	movs	r2, #3
 8007726:	9200      	str	r2, [sp, #0]
 8007728:	2200      	movs	r2, #0
 800772a:	4611      	mov	r1, r2
 800772c:	f000 fd6e 	bl	800820c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8007730:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007732:	2800      	cmp	r0, #0
 8007734:	d0dc      	beq.n	80076f0 <osSemaphoreNew+0xc>
 8007736:	b1ce      	cbz	r6, 800776c <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007738:	2300      	movs	r3, #0
 800773a:	461a      	mov	r2, r3
 800773c:	4619      	mov	r1, r3
 800773e:	f000 fdea 	bl	8008316 <xQueueGenericSend>
 8007742:	2801      	cmp	r0, #1
 8007744:	d012      	beq.n	800776c <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8007746:	4620      	mov	r0, r4
 8007748:	f001 f9c6 	bl	8008ad8 <vQueueDelete>
 800774c:	e7d0      	b.n	80076f0 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800774e:	2a00      	cmp	r2, #0
 8007750:	d1ce      	bne.n	80076f0 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8007752:	2801      	cmp	r0, #1
 8007754:	d104      	bne.n	8007760 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 8007756:	2203      	movs	r2, #3
 8007758:	2100      	movs	r1, #0
 800775a:	f000 fd6b 	bl	8008234 <xQueueGenericCreate>
 800775e:	e7e7      	b.n	8007730 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007760:	4631      	mov	r1, r6
 8007762:	f000 fdb6 	bl	80082d2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8007766:	4604      	mov	r4, r0
 8007768:	2800      	cmp	r0, #0
 800776a:	d0c1      	beq.n	80076f0 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800776c:	b95d      	cbnz	r5, 8007786 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 800776e:	4629      	mov	r1, r5
 8007770:	4620      	mov	r0, r4
 8007772:	f001 f98b 	bl	8008a8c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8007776:	e7bc      	b.n	80076f2 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007778:	461a      	mov	r2, r3
 800777a:	4631      	mov	r1, r6
 800777c:	f000 fd83 	bl	8008286 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8007780:	4604      	mov	r4, r0
 8007782:	2800      	cmp	r0, #0
 8007784:	d0b4      	beq.n	80076f0 <osSemaphoreNew+0xc>
          name = attr->name;
 8007786:	682d      	ldr	r5, [r5, #0]
 8007788:	e7f1      	b.n	800776e <osSemaphoreNew+0x8a>
 800778a:	bf00      	nop
 800778c:	200023b0 	.word	0x200023b0

08007790 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007790:	b513      	push	{r0, r1, r4, lr}
 8007792:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007794:	b918      	cbnz	r0, 800779e <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8007796:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800779a:	b002      	add	sp, #8
 800779c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800779e:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 80077a2:	b163      	cbz	r3, 80077be <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 80077a4:	2c00      	cmp	r4, #0
 80077a6:	d1f6      	bne.n	8007796 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80077a8:	aa01      	add	r2, sp, #4
 80077aa:	4621      	mov	r1, r4
      yield = pdFALSE;
 80077ac:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80077ae:	f001 f918 	bl	80089e2 <xQueueReceiveFromISR>
 80077b2:	2801      	cmp	r0, #1
 80077b4:	d113      	bne.n	80077de <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 80077b6:	9b01      	ldr	r3, [sp, #4]
 80077b8:	b9a3      	cbnz	r3, 80077e4 <osSemaphoreAcquire+0x54>
  stat = osOK;
 80077ba:	2000      	movs	r0, #0
 80077bc:	e7ed      	b.n	800779a <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077be:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80077c2:	b913      	cbnz	r3, 80077ca <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077c4:	f3ef 8311 	mrs	r3, BASEPRI
 80077c8:	b11b      	cbz	r3, 80077d2 <osSemaphoreAcquire+0x42>
 80077ca:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <osSemaphoreAcquire+0x70>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d0e8      	beq.n	80077a4 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80077d2:	4621      	mov	r1, r4
 80077d4:	f001 f816 	bl	8008804 <xQueueSemaphoreTake>
 80077d8:	2801      	cmp	r0, #1
 80077da:	d0ee      	beq.n	80077ba <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 80077dc:	b96c      	cbnz	r4, 80077fa <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 80077de:	f06f 0002 	mvn.w	r0, #2
 80077e2:	e7da      	b.n	800779a <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 80077e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80077e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	e7df      	b.n	80077ba <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 80077fa:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80077fe:	e7cc      	b.n	800779a <osSemaphoreAcquire+0xa>
 8007800:	200023b0 	.word	0x200023b0

08007804 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007804:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007806:	b370      	cbz	r0, 8007866 <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007808:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800780c:	b14b      	cbz	r3, 8007822 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 800780e:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007810:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8007812:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007814:	f000 fef5 	bl	8008602 <xQueueGiveFromISR>
 8007818:	2801      	cmp	r0, #1
 800781a:	d014      	beq.n	8007846 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800781c:	f06f 0002 	mvn.w	r0, #2
 8007820:	e014      	b.n	800784c <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007822:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8007826:	b913      	cbnz	r3, 800782e <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007828:	f3ef 8311 	mrs	r3, BASEPRI
 800782c:	b11b      	cbz	r3, 8007836 <osSemaphoreRelease+0x32>
 800782e:	4b0f      	ldr	r3, [pc, #60]	; (800786c <osSemaphoreRelease+0x68>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d0eb      	beq.n	800780e <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007836:	2300      	movs	r3, #0
 8007838:	461a      	mov	r2, r3
 800783a:	4619      	mov	r1, r3
 800783c:	f000 fd6b 	bl	8008316 <xQueueGenericSend>
 8007840:	2801      	cmp	r0, #1
 8007842:	d002      	beq.n	800784a <osSemaphoreRelease+0x46>
 8007844:	e7ea      	b.n	800781c <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	b913      	cbnz	r3, 8007850 <osSemaphoreRelease+0x4c>
  stat = osOK;
 800784a:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800784c:	b002      	add	sp, #8
 800784e:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8007850:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007858:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	e7f1      	b.n	800784a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8007866:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800786a:	e7ef      	b.n	800784c <osSemaphoreRelease+0x48>
 800786c:	200023b0 	.word	0x200023b0

08007870 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007870:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007872:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007874:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007878:	b11b      	cbz	r3, 8007882 <osMessageQueueNew+0x12>
  hQueue = NULL;
 800787a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800787c:	4628      	mov	r0, r5
 800787e:	b002      	add	sp, #8
 8007880:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007882:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007886:	b913      	cbnz	r3, 800788e <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007888:	f3ef 8311 	mrs	r3, BASEPRI
 800788c:	b11b      	cbz	r3, 8007896 <osMessageQueueNew+0x26>
 800788e:	4b1a      	ldr	r3, [pc, #104]	; (80078f8 <osMessageQueueNew+0x88>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d0f1      	beq.n	800787a <osMessageQueueNew+0xa>
 8007896:	2800      	cmp	r0, #0
 8007898:	d0ef      	beq.n	800787a <osMessageQueueNew+0xa>
 800789a:	2900      	cmp	r1, #0
 800789c:	d0ed      	beq.n	800787a <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800789e:	b1ec      	cbz	r4, 80078dc <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078a0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80078a4:	b193      	cbz	r3, 80078cc <osMessageQueueNew+0x5c>
 80078a6:	2a4f      	cmp	r2, #79	; 0x4f
 80078a8:	d9e7      	bls.n	800787a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078aa:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078ac:	2a00      	cmp	r2, #0
 80078ae:	d0e4      	beq.n	800787a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078b0:	fb01 f500 	mul.w	r5, r1, r0
 80078b4:	6966      	ldr	r6, [r4, #20]
 80078b6:	42ae      	cmp	r6, r5
 80078b8:	d3df      	bcc.n	800787a <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80078ba:	2500      	movs	r5, #0
 80078bc:	9500      	str	r5, [sp, #0]
 80078be:	f000 fca5 	bl	800820c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80078c2:	4605      	mov	r5, r0
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d0d8      	beq.n	800787a <osMessageQueueNew+0xa>
        name = attr->name;
 80078c8:	6824      	ldr	r4, [r4, #0]
 80078ca:	e00f      	b.n	80078ec <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078cc:	2a00      	cmp	r2, #0
 80078ce:	d1d4      	bne.n	800787a <osMessageQueueNew+0xa>
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1d1      	bne.n	800787a <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80078d6:	6963      	ldr	r3, [r4, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1ce      	bne.n	800787a <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 80078dc:	2200      	movs	r2, #0
 80078de:	f000 fca9 	bl	8008234 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80078e2:	4605      	mov	r5, r0
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d0c8      	beq.n	800787a <osMessageQueueNew+0xa>
      if (attr != NULL) {
 80078e8:	2c00      	cmp	r4, #0
 80078ea:	d1ed      	bne.n	80078c8 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 80078ec:	4621      	mov	r1, r4
 80078ee:	4628      	mov	r0, r5
 80078f0:	f001 f8cc 	bl	8008a8c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80078f4:	e7c2      	b.n	800787c <osMessageQueueNew+0xc>
 80078f6:	bf00      	nop
 80078f8:	200023b0 	.word	0x200023b0

080078fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80078fc:	b513      	push	{r0, r1, r4, lr}
 80078fe:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007900:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007904:	b123      	cbz	r3, 8007910 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007906:	b9d8      	cbnz	r0, 8007940 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 8007908:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800790c:	b002      	add	sp, #8
 800790e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007910:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007914:	b913      	cbnz	r3, 800791c <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007916:	f3ef 8311 	mrs	r3, BASEPRI
 800791a:	b11b      	cbz	r3, 8007924 <osMessageQueuePut+0x28>
 800791c:	4b17      	ldr	r3, [pc, #92]	; (800797c <osMessageQueuePut+0x80>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d0f0      	beq.n	8007906 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007924:	2800      	cmp	r0, #0
 8007926:	d0ef      	beq.n	8007908 <osMessageQueuePut+0xc>
 8007928:	2900      	cmp	r1, #0
 800792a:	d0ed      	beq.n	8007908 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800792c:	2300      	movs	r3, #0
 800792e:	4622      	mov	r2, r4
 8007930:	f000 fcf1 	bl	8008316 <xQueueGenericSend>
 8007934:	2801      	cmp	r0, #1
 8007936:	d010      	beq.n	800795a <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 8007938:	b9e4      	cbnz	r4, 8007974 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 800793a:	f06f 0002 	mvn.w	r0, #2
 800793e:	e7e5      	b.n	800790c <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007940:	2900      	cmp	r1, #0
 8007942:	d0e1      	beq.n	8007908 <osMessageQueuePut+0xc>
 8007944:	2c00      	cmp	r4, #0
 8007946:	d1df      	bne.n	8007908 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007948:	4623      	mov	r3, r4
 800794a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800794c:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800794e:	f000 fdef 	bl	8008530 <xQueueGenericSendFromISR>
 8007952:	2801      	cmp	r0, #1
 8007954:	d1f1      	bne.n	800793a <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 8007956:	9b01      	ldr	r3, [sp, #4]
 8007958:	b90b      	cbnz	r3, 800795e <osMessageQueuePut+0x62>
  stat = osOK;
 800795a:	2000      	movs	r0, #0
 800795c:	e7d6      	b.n	800790c <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800795e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007966:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	e7f2      	b.n	800795a <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8007974:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007978:	e7c8      	b.n	800790c <osMessageQueuePut+0x10>
 800797a:	bf00      	nop
 800797c:	200023b0 	.word	0x200023b0

08007980 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007980:	b513      	push	{r0, r1, r4, lr}
 8007982:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007984:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007988:	b123      	cbz	r3, 8007994 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800798a:	b9d0      	cbnz	r0, 80079c2 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 800798c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007990:	b002      	add	sp, #8
 8007992:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007994:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007998:	b913      	cbnz	r3, 80079a0 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800799a:	f3ef 8311 	mrs	r3, BASEPRI
 800799e:	b11b      	cbz	r3, 80079a8 <osMessageQueueGet+0x28>
 80079a0:	4b16      	ldr	r3, [pc, #88]	; (80079fc <osMessageQueueGet+0x7c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d0f0      	beq.n	800798a <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d0ef      	beq.n	800798c <osMessageQueueGet+0xc>
 80079ac:	2900      	cmp	r1, #0
 80079ae:	d0ed      	beq.n	800798c <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80079b0:	4622      	mov	r2, r4
 80079b2:	f000 fe82 	bl	80086ba <xQueueReceive>
 80079b6:	2801      	cmp	r0, #1
 80079b8:	d00f      	beq.n	80079da <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 80079ba:	b9dc      	cbnz	r4, 80079f4 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 80079bc:	f06f 0002 	mvn.w	r0, #2
 80079c0:	e7e6      	b.n	8007990 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079c2:	2900      	cmp	r1, #0
 80079c4:	d0e2      	beq.n	800798c <osMessageQueueGet+0xc>
 80079c6:	2c00      	cmp	r4, #0
 80079c8:	d1e0      	bne.n	800798c <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80079ca:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80079cc:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80079ce:	f001 f808 	bl	80089e2 <xQueueReceiveFromISR>
 80079d2:	2801      	cmp	r0, #1
 80079d4:	d1f2      	bne.n	80079bc <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	b90b      	cbnz	r3, 80079de <osMessageQueueGet+0x5e>
  stat = osOK;
 80079da:	2000      	movs	r0, #0
 80079dc:	e7d8      	b.n	8007990 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 80079de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80079e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	e7f2      	b.n	80079da <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 80079f4:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80079f8:	e7ca      	b.n	8007990 <osMessageQueueGet+0x10>
 80079fa:	bf00      	nop
 80079fc:	200023b0 	.word	0x200023b0

08007a00 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a00:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <vApplicationGetIdleTaskMemory+0x10>)
 8007a02:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a04:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <vApplicationGetIdleTaskMemory+0x14>)
 8007a06:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a08:	2380      	movs	r3, #128	; 0x80
 8007a0a:	6013      	str	r3, [r2, #0]
}
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20002350 	.word	0x20002350
 8007a14:	20002150 	.word	0x20002150

08007a18 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a18:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <vApplicationGetTimerTaskMemory+0x10>)
 8007a1a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a1c:	4b03      	ldr	r3, [pc, #12]	; (8007a2c <vApplicationGetTimerTaskMemory+0x14>)
 8007a1e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a24:	6013      	str	r3, [r2, #0]
}
 8007a26:	4770      	bx	lr
 8007a28:	200027b4 	.word	0x200027b4
 8007a2c:	200023b4 	.word	0x200023b4

08007a30 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a30:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <prvInsertBlockIntoFreeList+0x40>)
{
 8007a32:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a34:	461a      	mov	r2, r3
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4283      	cmp	r3, r0
 8007a3a:	d3fb      	bcc.n	8007a34 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a3c:	6854      	ldr	r4, [r2, #4]
 8007a3e:	1911      	adds	r1, r2, r4
 8007a40:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a42:	bf01      	itttt	eq
 8007a44:	6841      	ldreq	r1, [r0, #4]
 8007a46:	4610      	moveq	r0, r2
 8007a48:	1909      	addeq	r1, r1, r4
 8007a4a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a4c:	6844      	ldr	r4, [r0, #4]
 8007a4e:	1901      	adds	r1, r0, r4
 8007a50:	428b      	cmp	r3, r1
 8007a52:	d107      	bne.n	8007a64 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a54:	4907      	ldr	r1, [pc, #28]	; (8007a74 <prvInsertBlockIntoFreeList+0x44>)
 8007a56:	6809      	ldr	r1, [r1, #0]
 8007a58:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a5a:	bf1f      	itttt	ne
 8007a5c:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a5e:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a60:	1909      	addne	r1, r1, r4
 8007a62:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a64:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a66:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a68:	bf18      	it	ne
 8007a6a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	bf00      	nop
 8007a70:	20014d1c 	.word	0x20014d1c
 8007a74:	20002814 	.word	0x20002814

08007a78 <pvPortMalloc>:
{
 8007a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8007a7c:	4f41      	ldr	r7, [pc, #260]	; (8007b84 <pvPortMalloc+0x10c>)
{
 8007a7e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007a80:	f001 fa38 	bl	8008ef4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007a84:	4840      	ldr	r0, [pc, #256]	; (8007b88 <pvPortMalloc+0x110>)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	b9f3      	cbnz	r3, 8007ac8 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8007a8a:	4940      	ldr	r1, [pc, #256]	; (8007b8c <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8007a8c:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a8e:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a90:	4d3f      	ldr	r5, [pc, #252]	; (8007b90 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a92:	bf1b      	ittet	ne
 8007a94:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a96:	4a3f      	ldrne	r2, [pc, #252]	; (8007b94 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a98:	4a3f      	ldreq	r2, [pc, #252]	; (8007b98 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a9a:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007a9e:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007aa0:	bf18      	it	ne
 8007aa2:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007aa4:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007aa6:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 8007aa8:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007aaa:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007aae:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ab2:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8007ab4:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ab6:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aba:	4a38      	ldr	r2, [pc, #224]	; (8007b9c <pvPortMalloc+0x124>)
 8007abc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007abe:	4a38      	ldr	r2, [pc, #224]	; (8007ba0 <pvPortMalloc+0x128>)
 8007ac0:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ac2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ac6:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ac8:	f8d0 8000 	ldr.w	r8, [r0]
 8007acc:	ea18 0f04 	tst.w	r8, r4
 8007ad0:	d152      	bne.n	8007b78 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8007ad2:	2c00      	cmp	r4, #0
 8007ad4:	d041      	beq.n	8007b5a <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8007ad6:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ada:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007adc:	bf1c      	itt	ne
 8007ade:	f023 0307 	bicne.w	r3, r3, #7
 8007ae2:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d047      	beq.n	8007b78 <pvPortMalloc+0x100>
 8007ae8:	4c2d      	ldr	r4, [pc, #180]	; (8007ba0 <pvPortMalloc+0x128>)
 8007aea:	6826      	ldr	r6, [r4, #0]
 8007aec:	429e      	cmp	r6, r3
 8007aee:	d343      	bcc.n	8007b78 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8007af0:	4a27      	ldr	r2, [pc, #156]	; (8007b90 <pvPortMalloc+0x118>)
 8007af2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007af4:	6869      	ldr	r1, [r5, #4]
 8007af6:	4299      	cmp	r1, r3
 8007af8:	d201      	bcs.n	8007afe <pvPortMalloc+0x86>
 8007afa:	6828      	ldr	r0, [r5, #0]
 8007afc:	b9b0      	cbnz	r0, 8007b2c <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 8007afe:	6838      	ldr	r0, [r7, #0]
 8007b00:	42a8      	cmp	r0, r5
 8007b02:	d039      	beq.n	8007b78 <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b04:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b06:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b08:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b0a:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b0c:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b0e:	d914      	bls.n	8007b3a <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b10:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b12:	0742      	lsls	r2, r0, #29
 8007b14:	d00d      	beq.n	8007b32 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	b672      	cpsid	i
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	b662      	cpsie	i
 8007b2a:	e7fe      	b.n	8007b2a <pvPortMalloc+0xb2>
 8007b2c:	462a      	mov	r2, r5
 8007b2e:	4605      	mov	r5, r0
 8007b30:	e7e0      	b.n	8007af4 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b32:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b34:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b36:	f7ff ff7b 	bl	8007a30 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b3a:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b3c:	4917      	ldr	r1, [pc, #92]	; (8007b9c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b3e:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b40:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b44:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b46:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b48:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b4c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b4e:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b50:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b54:	bf38      	it	cc
 8007b56:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007b58:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007b5a:	f001 fa71 	bl	8009040 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b5e:	0763      	lsls	r3, r4, #29
 8007b60:	d00c      	beq.n	8007b7c <pvPortMalloc+0x104>
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	b672      	cpsid	i
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	b662      	cpsie	i
 8007b76:	e7fe      	b.n	8007b76 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8007b78:	2400      	movs	r4, #0
 8007b7a:	e7ee      	b.n	8007b5a <pvPortMalloc+0xe2>
}
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b82:	bf00      	nop
 8007b84:	20002814 	.word	0x20002814
 8007b88:	20014d10 	.word	0x20014d10
 8007b8c:	20002818 	.word	0x20002818
 8007b90:	20014d1c 	.word	0x20014d1c
 8007b94:	20014d10 	.word	0x20014d10
 8007b98:	000124f8 	.word	0x000124f8
 8007b9c:	20014d18 	.word	0x20014d18
 8007ba0:	20014d14 	.word	0x20014d14

08007ba4 <vPortFree>:
{
 8007ba4:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d032      	beq.n	8007c12 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bac:	4a19      	ldr	r2, [pc, #100]	; (8007c14 <vPortFree+0x70>)
 8007bae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007bb2:	6812      	ldr	r2, [r2, #0]
 8007bb4:	4213      	tst	r3, r2
 8007bb6:	d10a      	bne.n	8007bce <vPortFree+0x2a>
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	b672      	cpsid	i
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	b662      	cpsie	i
 8007bcc:	e7fe      	b.n	8007bcc <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bce:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007bd2:	b151      	cbz	r1, 8007bea <vPortFree+0x46>
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	b672      	cpsid	i
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	b662      	cpsie	i
 8007be8:	e7fe      	b.n	8007be8 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bea:	ea23 0302 	bic.w	r3, r3, r2
 8007bee:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007bf2:	f001 f97f 	bl	8008ef4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bf6:	4a08      	ldr	r2, [pc, #32]	; (8007c18 <vPortFree+0x74>)
 8007bf8:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bfc:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c00:	6811      	ldr	r1, [r2, #0]
 8007c02:	440b      	add	r3, r1
 8007c04:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c06:	f7ff ff13 	bl	8007a30 <prvInsertBlockIntoFreeList>
}
 8007c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007c0e:	f001 ba17 	b.w	8009040 <xTaskResumeAll>
}
 8007c12:	bd10      	pop	{r4, pc}
 8007c14:	20014d10 	.word	0x20014d10
 8007c18:	20014d14 	.word	0x20014d14

08007c1c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c1c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c24:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c26:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c28:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c30:	4770      	bx	lr

08007c32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c36:	4770      	bx	lr

08007c38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c38:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c3a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007c3c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c3e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c44:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007c46:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007c48:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	6003      	str	r3, [r0, #0]
}
 8007c4e:	4770      	bx	lr

08007c50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c50:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c52:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c54:	1c63      	adds	r3, r4, #1
 8007c56:	d10a      	bne.n	8007c6e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c58:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c5e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c60:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c62:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007c64:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007c66:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007c68:	3301      	adds	r3, #1
 8007c6a:	6003      	str	r3, [r0, #0]
}
 8007c6c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c6e:	f100 0208 	add.w	r2, r0, #8
 8007c72:	4613      	mov	r3, r2
 8007c74:	6852      	ldr	r2, [r2, #4]
 8007c76:	6815      	ldr	r5, [r2, #0]
 8007c78:	42a5      	cmp	r5, r4
 8007c7a:	d9fa      	bls.n	8007c72 <vListInsert+0x22>
 8007c7c:	e7ed      	b.n	8007c5a <vListInsert+0xa>

08007c7e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c7e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c80:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007c84:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c86:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c88:	6859      	ldr	r1, [r3, #4]
 8007c8a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c8c:	bf08      	it	eq
 8007c8e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c90:	2200      	movs	r2, #0
 8007c92:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	3a01      	subs	r2, #1
 8007c98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c9a:	6818      	ldr	r0, [r3, #0]
}
 8007c9c:	4770      	bx	lr
	...

08007ca0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ca0:	4808      	ldr	r0, [pc, #32]	; (8007cc4 <prvPortStartFirstTask+0x24>)
 8007ca2:	6800      	ldr	r0, [r0, #0]
 8007ca4:	6800      	ldr	r0, [r0, #0]
 8007ca6:	f380 8808 	msr	MSP, r0
 8007caa:	f04f 0000 	mov.w	r0, #0
 8007cae:	f380 8814 	msr	CONTROL, r0
 8007cb2:	b662      	cpsie	i
 8007cb4:	b661      	cpsie	f
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	df00      	svc	0
 8007cc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cc2:	0000      	.short	0x0000
 8007cc4:	e000ed08 	.word	0xe000ed08

08007cc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cd8 <vPortEnableVFP+0x10>
 8007ccc:	6801      	ldr	r1, [r0, #0]
 8007cce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cd2:	6001      	str	r1, [r0, #0]
 8007cd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cd6:	0000      	.short	0x0000
 8007cd8:	e000ed88 	.word	0xe000ed88

08007cdc <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8007cdc:	2300      	movs	r3, #0
{
 8007cde:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007ce0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007ce2:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <prvTaskExitError+0x44>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	d00a      	beq.n	8007d00 <prvTaskExitError+0x24>
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	b672      	cpsid	i
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	b662      	cpsie	i
 8007cfe:	e7fe      	b.n	8007cfe <prvTaskExitError+0x22>
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	b672      	cpsid	i
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	b662      	cpsie	i
	while( ulDummy == 0 )
 8007d14:	9b01      	ldr	r3, [sp, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0fc      	beq.n	8007d14 <prvTaskExitError+0x38>
}
 8007d1a:	b002      	add	sp, #8
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20000040 	.word	0x20000040

08007d24 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d28:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d2c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007d30:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d32:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d34:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d36:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d38:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d3a:	f06f 0302 	mvn.w	r3, #2
 8007d3e:	6203      	str	r3, [r0, #32]
}
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	08007cdd 	.word	0x08007cdd
	...

08007d50 <SVC_Handler>:
	__asm volatile (
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <pxCurrentTCBConst2>)
 8007d52:	6819      	ldr	r1, [r3, #0]
 8007d54:	6808      	ldr	r0, [r1, #0]
 8007d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5a:	f380 8809 	msr	PSP, r0
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f04f 0000 	mov.w	r0, #0
 8007d66:	f380 8811 	msr	BASEPRI, r0
 8007d6a:	4770      	bx	lr
 8007d6c:	f3af 8000 	nop.w

08007d70 <pxCurrentTCBConst2>:
 8007d70:	20014d6c 	.word	0x20014d6c

08007d74 <vPortEnterCritical>:
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	b672      	cpsid	i
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	b662      	cpsie	i
	uxCriticalNesting++;
 8007d88:	4a0b      	ldr	r2, [pc, #44]	; (8007db8 <vPortEnterCritical+0x44>)
 8007d8a:	6813      	ldr	r3, [r2, #0]
 8007d8c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8007d8e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007d90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007d92:	d110      	bne.n	8007db6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d98:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	b153      	cbz	r3, 8007db6 <vPortEnterCritical+0x42>
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	b672      	cpsid	i
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	b662      	cpsie	i
 8007db4:	e7fe      	b.n	8007db4 <vPortEnterCritical+0x40>
}
 8007db6:	4770      	bx	lr
 8007db8:	20000040 	.word	0x20000040

08007dbc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007dbc:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <vPortExitCritical+0x28>)
 8007dbe:	6813      	ldr	r3, [r2, #0]
 8007dc0:	b953      	cbnz	r3, 8007dd8 <vPortExitCritical+0x1c>
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	b672      	cpsid	i
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	b662      	cpsie	i
 8007dd6:	e7fe      	b.n	8007dd6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ddc:	b90b      	cbnz	r3, 8007de2 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dde:	f383 8811 	msr	BASEPRI, r3
}
 8007de2:	4770      	bx	lr
 8007de4:	20000040 	.word	0x20000040
	...

08007df0 <PendSV_Handler>:
	__asm volatile
 8007df0:	f3ef 8009 	mrs	r0, PSP
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <pxCurrentTCBConst>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f01e 0f10 	tst.w	lr, #16
 8007e00:	bf08      	it	eq
 8007e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0a:	6010      	str	r0, [r2, #0]
 8007e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e14:	b672      	cpsid	i
 8007e16:	f380 8811 	msr	BASEPRI, r0
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	b662      	cpsie	i
 8007e24:	f001 fa16 	bl	8009254 <vTaskSwitchContext>
 8007e28:	f04f 0000 	mov.w	r0, #0
 8007e2c:	f380 8811 	msr	BASEPRI, r0
 8007e30:	bc09      	pop	{r0, r3}
 8007e32:	6819      	ldr	r1, [r3, #0]
 8007e34:	6808      	ldr	r0, [r1, #0]
 8007e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	f01e 0f10 	tst.w	lr, #16
 8007e3e:	bf08      	it	eq
 8007e40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e44:	f380 8809 	msr	PSP, r0
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop

08007e50 <pxCurrentTCBConst>:
 8007e50:	20014d6c 	.word	0x20014d6c

08007e54 <SysTick_Handler>:
{
 8007e54:	b508      	push	{r3, lr}
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	b672      	cpsid	i
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8007e6a:	f001 f851 	bl	8008f10 <xTaskIncrementTick>
 8007e6e:	b128      	cbz	r0, 8007e7c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e78:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f383 8811 	msr	BASEPRI, r3
}
 8007e82:	bd08      	pop	{r3, pc}

08007e84 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e84:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007e88:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e8e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e90:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e92:	4b04      	ldr	r3, [pc, #16]	; (8007ea4 <vPortSetupTimerInterrupt+0x20>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e9e:	2307      	movs	r3, #7
 8007ea0:	6113      	str	r3, [r2, #16]
}
 8007ea2:	4770      	bx	lr
 8007ea4:	2000000c 	.word	0x2000000c

08007ea8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ea8:	4b2e      	ldr	r3, [pc, #184]	; (8007f64 <xPortStartScheduler+0xbc>)
{
 8007eaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eac:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eae:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007eb4:	22ff      	movs	r2, #255	; 0xff
 8007eb6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007eb8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007eba:	4a2b      	ldr	r2, [pc, #172]	; (8007f68 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ec2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007ec6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007eca:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ecc:	2307      	movs	r3, #7
 8007ece:	4a27      	ldr	r2, [pc, #156]	; (8007f6c <xPortStartScheduler+0xc4>)
 8007ed0:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ed2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007ed6:	1e5c      	subs	r4, r3, #1
 8007ed8:	0600      	lsls	r0, r0, #24
 8007eda:	d40e      	bmi.n	8007efa <xPortStartScheduler+0x52>
 8007edc:	b111      	cbz	r1, 8007ee4 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	6013      	str	r3, [r2, #0]
 8007ee2:	d013      	beq.n	8007f0c <xPortStartScheduler+0x64>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	b672      	cpsid	i
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	b662      	cpsie	i
 8007ef8:	e7fe      	b.n	8007ef8 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007efa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007efe:	2101      	movs	r1, #1
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f88d 3003 	strb.w	r3, [sp, #3]
 8007f08:	4623      	mov	r3, r4
 8007f0a:	e7e2      	b.n	8007ed2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f0c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f10:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8007f14:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f16:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f18:	9b01      	ldr	r3, [sp, #4]
 8007f1a:	4a12      	ldr	r2, [pc, #72]	; (8007f64 <xPortStartScheduler+0xbc>)
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f20:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f28:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f2c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007f30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f34:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007f38:	f7ff ffa4 	bl	8007e84 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007f3c:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <xPortStartScheduler+0xc8>)
 8007f3e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007f40:	f7ff fec2 	bl	8007cc8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f44:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8007f48:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f4c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8007f50:	f7ff fea6 	bl	8007ca0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007f54:	f001 f97e 	bl	8009254 <vTaskSwitchContext>
}
 8007f58:	4628      	mov	r0, r5
	prvTaskExitError();
 8007f5a:	f7ff febf 	bl	8007cdc <prvTaskExitError>
}
 8007f5e:	b003      	add	sp, #12
 8007f60:	bd30      	pop	{r4, r5, pc}
 8007f62:	bf00      	nop
 8007f64:	e000e400 	.word	0xe000e400
 8007f68:	20014d24 	.word	0x20014d24
 8007f6c:	20014d28 	.word	0x20014d28
 8007f70:	20000040 	.word	0x20000040

08007f74 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f74:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f78:	2b0f      	cmp	r3, #15
 8007f7a:	d910      	bls.n	8007f9e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f7c:	4a13      	ldr	r2, [pc, #76]	; (8007fcc <vPortValidateInterruptPriority+0x58>)
 8007f7e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f80:	4a13      	ldr	r2, [pc, #76]	; (8007fd0 <vPortValidateInterruptPriority+0x5c>)
 8007f82:	7812      	ldrb	r2, [r2, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d90a      	bls.n	8007f9e <vPortValidateInterruptPriority+0x2a>
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	b672      	cpsid	i
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	b662      	cpsie	i
 8007f9c:	e7fe      	b.n	8007f9c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f9e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007fa2:	4a0c      	ldr	r2, [pc, #48]	; (8007fd4 <vPortValidateInterruptPriority+0x60>)
 8007fa4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d90a      	bls.n	8007fc8 <vPortValidateInterruptPriority+0x54>
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	b672      	cpsid	i
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	b662      	cpsie	i
 8007fc6:	e7fe      	b.n	8007fc6 <vPortValidateInterruptPriority+0x52>
	}
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	e000e3f0 	.word	0xe000e3f0
 8007fd0:	20014d24 	.word	0x20014d24
 8007fd4:	20014d28 	.word	0x20014d28

08007fd8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fdc:	f7ff feca 	bl	8007d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fe0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007fe2:	f7ff feeb 	bl	8007dbc <vPortExitCritical>

	return xReturn;
}
 8007fe6:	fab4 f084 	clz	r0, r4
 8007fea:	0940      	lsrs	r0, r0, #5
 8007fec:	bd10      	pop	{r4, pc}

08007fee <prvCopyDataToQueue>:
{
 8007fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff0:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ff2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007ff4:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ff6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ff8:	b952      	cbnz	r2, 8008010 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ffa:	6807      	ldr	r7, [r0, #0]
 8007ffc:	bb47      	cbnz	r7, 8008050 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ffe:	6880      	ldr	r0, [r0, #8]
 8008000:	f001 fa98 	bl	8009534 <xTaskPriorityDisinherit>
 8008004:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008006:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008008:	3601      	adds	r6, #1
}
 800800a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800800c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800800e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008010:	b965      	cbnz	r5, 800802c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008012:	6840      	ldr	r0, [r0, #4]
 8008014:	f022 fba0 	bl	802a758 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008018:	6863      	ldr	r3, [r4, #4]
 800801a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800801c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800801e:	68a2      	ldr	r2, [r4, #8]
 8008020:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008022:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008024:	d3f0      	bcc.n	8008008 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	6063      	str	r3, [r4, #4]
 800802a:	e7ed      	b.n	8008008 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800802c:	68c0      	ldr	r0, [r0, #12]
 800802e:	f022 fb93 	bl	802a758 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008032:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008034:	68e3      	ldr	r3, [r4, #12]
 8008036:	4251      	negs	r1, r2
 8008038:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800803a:	6822      	ldr	r2, [r4, #0]
 800803c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800803e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008040:	bf3e      	ittt	cc
 8008042:	68a3      	ldrcc	r3, [r4, #8]
 8008044:	185b      	addcc	r3, r3, r1
 8008046:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008048:	2d02      	cmp	r5, #2
 800804a:	d101      	bne.n	8008050 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800804c:	b116      	cbz	r6, 8008054 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800804e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008050:	2500      	movs	r5, #0
 8008052:	e7d9      	b.n	8008008 <prvCopyDataToQueue+0x1a>
 8008054:	4635      	mov	r5, r6
 8008056:	e7d7      	b.n	8008008 <prvCopyDataToQueue+0x1a>

08008058 <prvCopyDataFromQueue>:
{
 8008058:	4603      	mov	r3, r0
 800805a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800805c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800805e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008060:	b162      	cbz	r2, 800807c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008062:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008064:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008066:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008068:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800806a:	60dc      	str	r4, [r3, #12]
}
 800806c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008070:	bf24      	itt	cs
 8008072:	6819      	ldrcs	r1, [r3, #0]
 8008074:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008076:	68d9      	ldr	r1, [r3, #12]
 8008078:	f022 bb6e 	b.w	802a758 <memcpy>
}
 800807c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008080:	4770      	bx	lr

08008082 <prvUnlockQueue>:
{
 8008082:	b570      	push	{r4, r5, r6, lr}
 8008084:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008086:	f7ff fe75 	bl	8007d74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800808a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800808e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008092:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008094:	2d00      	cmp	r5, #0
 8008096:	dc14      	bgt.n	80080c2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8008098:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800809a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800809e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80080a2:	f7ff fe8b 	bl	8007dbc <vPortExitCritical>
	taskENTER_CRITICAL();
 80080a6:	f7ff fe65 	bl	8007d74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80080aa:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80080ae:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080b0:	2d00      	cmp	r5, #0
 80080b2:	dc12      	bgt.n	80080da <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80080b4:	23ff      	movs	r3, #255	; 0xff
 80080b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80080ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80080be:	f7ff be7d 	b.w	8007dbc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0e7      	beq.n	8008098 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080c8:	4630      	mov	r0, r6
 80080ca:	f001 f945 	bl	8009358 <xTaskRemoveFromEventList>
 80080ce:	b108      	cbz	r0, 80080d4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80080d0:	f001 f9d4 	bl	800947c <vTaskMissedYield>
			--cTxLock;
 80080d4:	3d01      	subs	r5, #1
 80080d6:	b26d      	sxtb	r5, r5
 80080d8:	e7dc      	b.n	8008094 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080da:	6923      	ldr	r3, [r4, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0e9      	beq.n	80080b4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080e0:	4630      	mov	r0, r6
 80080e2:	f001 f939 	bl	8009358 <xTaskRemoveFromEventList>
 80080e6:	b108      	cbz	r0, 80080ec <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80080e8:	f001 f9c8 	bl	800947c <vTaskMissedYield>
				--cRxLock;
 80080ec:	3d01      	subs	r5, #1
 80080ee:	b26d      	sxtb	r5, r5
 80080f0:	e7de      	b.n	80080b0 <prvUnlockQueue+0x2e>

080080f2 <xQueueGenericReset>:
{
 80080f2:	b538      	push	{r3, r4, r5, lr}
 80080f4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80080f6:	4604      	mov	r4, r0
 80080f8:	b950      	cbnz	r0, 8008110 <xQueueGenericReset+0x1e>
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	b672      	cpsid	i
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	b662      	cpsie	i
 800810e:	e7fe      	b.n	800810e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8008110:	f7ff fe30 	bl	8007d74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008114:	6822      	ldr	r2, [r4, #0]
 8008116:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800811a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800811c:	434b      	muls	r3, r1
 800811e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008120:	1a5b      	subs	r3, r3, r1
 8008122:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008124:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008126:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008128:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800812a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800812c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800812e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008136:	b9a5      	cbnz	r5, 8008162 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008138:	6923      	ldr	r3, [r4, #16]
 800813a:	b173      	cbz	r3, 800815a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800813c:	f104 0010 	add.w	r0, r4, #16
 8008140:	f001 f90a 	bl	8009358 <xTaskRemoveFromEventList>
 8008144:	b148      	cbz	r0, 800815a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8008146:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800814a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800815a:	f7ff fe2f 	bl	8007dbc <vPortExitCritical>
}
 800815e:	2001      	movs	r0, #1
 8008160:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008162:	f104 0010 	add.w	r0, r4, #16
 8008166:	f7ff fd59 	bl	8007c1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800816a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800816e:	f7ff fd55 	bl	8007c1c <vListInitialise>
 8008172:	e7f2      	b.n	800815a <xQueueGenericReset+0x68>

08008174 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 8008174:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 8008176:	461c      	mov	r4, r3
 8008178:	b953      	cbnz	r3, 8008190 <xQueueGenericCreateStatic.part.0+0x1c>
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	b672      	cpsid	i
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	b662      	cpsie	i
 800818e:	e7fe      	b.n	800818e <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008190:	b15a      	cbz	r2, 80081aa <xQueueGenericCreateStatic.part.0+0x36>
 8008192:	b9b1      	cbnz	r1, 80081c2 <xQueueGenericCreateStatic.part.0+0x4e>
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	b672      	cpsid	i
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	b662      	cpsie	i
 80081a8:	e7fe      	b.n	80081a8 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081aa:	b151      	cbz	r1, 80081c2 <xQueueGenericCreateStatic.part.0+0x4e>
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	b672      	cpsid	i
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	b662      	cpsie	i
 80081c0:	e7fe      	b.n	80081c0 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081c2:	2350      	movs	r3, #80	; 0x50
 80081c4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	2b50      	cmp	r3, #80	; 0x50
 80081ca:	d00a      	beq.n	80081e2 <xQueueGenericCreateStatic.part.0+0x6e>
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	b672      	cpsid	i
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	b662      	cpsie	i
 80081e0:	e7fe      	b.n	80081e0 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80081e2:	2900      	cmp	r1, #0
 80081e4:	bf08      	it	eq
 80081e6:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081e8:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081ea:	2301      	movs	r3, #1
 80081ec:	6022      	str	r2, [r4, #0]
 80081ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80081f2:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081f6:	4619      	mov	r1, r3
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7ff ff7a 	bl	80080f2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80081fe:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8008202:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8008204:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8008208:	b002      	add	sp, #8
 800820a:	bd10      	pop	{r4, pc}

0800820c <xQueueGenericCreateStatic>:
	{
 800820c:	b410      	push	{r4}
 800820e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008212:	b950      	cbnz	r0, 800822a <xQueueGenericCreateStatic+0x1e>
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	b672      	cpsid	i
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	b662      	cpsie	i
 8008228:	e7fe      	b.n	8008228 <xQueueGenericCreateStatic+0x1c>
 800822a:	9401      	str	r4, [sp, #4]
	}
 800822c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008230:	f7ff bfa0 	b.w	8008174 <xQueueGenericCreateStatic.part.0>

08008234 <xQueueGenericCreate>:
	{
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	460d      	mov	r5, r1
 8008238:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800823a:	4606      	mov	r6, r0
 800823c:	b950      	cbnz	r0, 8008254 <xQueueGenericCreate+0x20>
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	b672      	cpsid	i
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	b662      	cpsie	i
 8008252:	e7fe      	b.n	8008252 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008254:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008256:	3050      	adds	r0, #80	; 0x50
 8008258:	f7ff fc0e 	bl	8007a78 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800825c:	4604      	mov	r4, r0
 800825e:	b170      	cbz	r0, 800827e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008260:	2300      	movs	r3, #0
 8008262:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008266:	b165      	cbz	r5, 8008282 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008268:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800826c:	2101      	movs	r1, #1
 800826e:	4620      	mov	r0, r4
 8008270:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8008272:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008276:	f7ff ff3c 	bl	80080f2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800827a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800827e:	4620      	mov	r0, r4
 8008280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008282:	4603      	mov	r3, r0
 8008284:	e7f2      	b.n	800826c <xQueueGenericCreate+0x38>

08008286 <xQueueCreateCountingSemaphoreStatic>:
	{
 8008286:	b513      	push	{r0, r1, r4, lr}
 8008288:	4613      	mov	r3, r2
 800828a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800828c:	b950      	cbnz	r0, 80082a4 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	b672      	cpsid	i
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	b662      	cpsie	i
 80082a2:	e7fe      	b.n	80082a2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 80082a4:	4288      	cmp	r0, r1
 80082a6:	d20a      	bcs.n	80082be <xQueueCreateCountingSemaphoreStatic+0x38>
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	b672      	cpsid	i
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	b662      	cpsie	i
 80082bc:	e7fe      	b.n	80082bc <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082be:	2202      	movs	r2, #2
 80082c0:	9200      	str	r2, [sp, #0]
 80082c2:	2200      	movs	r2, #0
 80082c4:	4611      	mov	r1, r2
 80082c6:	f7ff ffa1 	bl	800820c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80082ca:	b100      	cbz	r0, 80082ce <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082cc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80082ce:	b002      	add	sp, #8
 80082d0:	bd10      	pop	{r4, pc}

080082d2 <xQueueCreateCountingSemaphore>:
	{
 80082d2:	b510      	push	{r4, lr}
 80082d4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80082d6:	b950      	cbnz	r0, 80082ee <xQueueCreateCountingSemaphore+0x1c>
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	b672      	cpsid	i
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	b662      	cpsie	i
 80082ec:	e7fe      	b.n	80082ec <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80082ee:	4288      	cmp	r0, r1
 80082f0:	d20a      	bcs.n	8008308 <xQueueCreateCountingSemaphore+0x36>
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	b672      	cpsid	i
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	b662      	cpsie	i
 8008306:	e7fe      	b.n	8008306 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008308:	2202      	movs	r2, #2
 800830a:	2100      	movs	r1, #0
 800830c:	f7ff ff92 	bl	8008234 <xQueueGenericCreate>
		if( xHandle != NULL )
 8008310:	b100      	cbz	r0, 8008314 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008312:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8008314:	bd10      	pop	{r4, pc}

08008316 <xQueueGenericSend>:
{
 8008316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800831a:	b085      	sub	sp, #20
 800831c:	4688      	mov	r8, r1
 800831e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008320:	4604      	mov	r4, r0
{
 8008322:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008324:	b950      	cbnz	r0, 800833c <xQueueGenericSend+0x26>
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	b672      	cpsid	i
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	b662      	cpsie	i
 800833a:	e7fe      	b.n	800833a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800833c:	b961      	cbnz	r1, 8008358 <xQueueGenericSend+0x42>
 800833e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008340:	b153      	cbz	r3, 8008358 <xQueueGenericSend+0x42>
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	b672      	cpsid	i
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	b662      	cpsie	i
 8008356:	e7fe      	b.n	8008356 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008358:	2f02      	cmp	r7, #2
 800835a:	d10d      	bne.n	8008378 <xQueueGenericSend+0x62>
 800835c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800835e:	2b01      	cmp	r3, #1
 8008360:	d00a      	beq.n	8008378 <xQueueGenericSend+0x62>
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	b672      	cpsid	i
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	b662      	cpsie	i
 8008376:	e7fe      	b.n	8008376 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008378:	f001 f88c 	bl	8009494 <xTaskGetSchedulerState>
 800837c:	4606      	mov	r6, r0
 800837e:	b960      	cbnz	r0, 800839a <xQueueGenericSend+0x84>
 8008380:	9b01      	ldr	r3, [sp, #4]
 8008382:	b15b      	cbz	r3, 800839c <xQueueGenericSend+0x86>
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	b672      	cpsid	i
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	b662      	cpsie	i
 8008398:	e7fe      	b.n	8008398 <xQueueGenericSend+0x82>
 800839a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800839c:	f04f 0900 	mov.w	r9, #0
 80083a0:	e037      	b.n	8008412 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80083a2:	9d01      	ldr	r5, [sp, #4]
 80083a4:	b91d      	cbnz	r5, 80083ae <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 80083a6:	f7ff fd09 	bl	8007dbc <vPortExitCritical>
			return errQUEUE_FULL;
 80083aa:	2000      	movs	r0, #0
 80083ac:	e052      	b.n	8008454 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 80083ae:	b916      	cbnz	r6, 80083b6 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083b0:	a802      	add	r0, sp, #8
 80083b2:	f001 f817 	bl	80093e4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80083b6:	f7ff fd01 	bl	8007dbc <vPortExitCritical>
		vTaskSuspendAll();
 80083ba:	f000 fd9b 	bl	8008ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083be:	f7ff fcd9 	bl	8007d74 <vPortEnterCritical>
 80083c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80083c6:	2bff      	cmp	r3, #255	; 0xff
 80083c8:	d101      	bne.n	80083ce <xQueueGenericSend+0xb8>
 80083ca:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80083ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80083d2:	2bff      	cmp	r3, #255	; 0xff
 80083d4:	d101      	bne.n	80083da <xQueueGenericSend+0xc4>
 80083d6:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80083da:	f7ff fcef 	bl	8007dbc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083de:	a901      	add	r1, sp, #4
 80083e0:	a802      	add	r0, sp, #8
 80083e2:	f001 f80b 	bl	80093fc <xTaskCheckForTimeOut>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d14a      	bne.n	8008480 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083ea:	f7ff fcc3 	bl	8007d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80083f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d131      	bne.n	800845a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80083f6:	f7ff fce1 	bl	8007dbc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80083fa:	9901      	ldr	r1, [sp, #4]
 80083fc:	f104 0010 	add.w	r0, r4, #16
 8008400:	f000 ff6e 	bl	80092e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008404:	4620      	mov	r0, r4
 8008406:	f7ff fe3c 	bl	8008082 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800840a:	f000 fe19 	bl	8009040 <xTaskResumeAll>
 800840e:	b360      	cbz	r0, 800846a <xQueueGenericSend+0x154>
 8008410:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008412:	f7ff fcaf 	bl	8007d74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008416:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008418:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800841a:	429a      	cmp	r2, r3
 800841c:	d301      	bcc.n	8008422 <xQueueGenericSend+0x10c>
 800841e:	2f02      	cmp	r7, #2
 8008420:	d1bf      	bne.n	80083a2 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008422:	463a      	mov	r2, r7
 8008424:	4641      	mov	r1, r8
 8008426:	4620      	mov	r0, r4
 8008428:	f7ff fde1 	bl	8007fee <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800842c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800842e:	b11b      	cbz	r3, 8008438 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008430:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008434:	f000 ff90 	bl	8009358 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008438:	b148      	cbz	r0, 800844e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800843a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800843e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008442:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800844e:	f7ff fcb5 	bl	8007dbc <vPortExitCritical>
				return pdPASS;
 8008452:	2001      	movs	r0, #1
}
 8008454:	b005      	add	sp, #20
 8008456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800845a:	f7ff fcaf 	bl	8007dbc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800845e:	4620      	mov	r0, r4
 8008460:	f7ff fe0f 	bl	8008082 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008464:	f000 fdec 	bl	8009040 <xTaskResumeAll>
 8008468:	e7d2      	b.n	8008410 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800846a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800846e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008472:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	e7c7      	b.n	8008410 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 8008480:	4620      	mov	r0, r4
 8008482:	f7ff fdfe 	bl	8008082 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008486:	f000 fddb 	bl	8009040 <xTaskResumeAll>
 800848a:	e78e      	b.n	80083aa <xQueueGenericSend+0x94>

0800848c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800848c:	2200      	movs	r2, #0
	{
 800848e:	460b      	mov	r3, r1
 8008490:	b513      	push	{r0, r1, r4, lr}
 8008492:	4611      	mov	r1, r2
 8008494:	9000      	str	r0, [sp, #0]
 8008496:	2001      	movs	r0, #1
 8008498:	f7ff fe6c 	bl	8008174 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 800849c:	4604      	mov	r4, r0
 800849e:	b138      	cbz	r0, 80084b0 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80084a0:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80084a2:	461a      	mov	r2, r3
 80084a4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80084a6:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80084a8:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80084aa:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80084ac:	f7ff ff33 	bl	8008316 <xQueueGenericSend>
	}
 80084b0:	4620      	mov	r0, r4
 80084b2:	b002      	add	sp, #8
 80084b4:	bd10      	pop	{r4, pc}

080084b6 <xQueueGiveMutexRecursive>:
	{
 80084b6:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80084b8:	4604      	mov	r4, r0
 80084ba:	b950      	cbnz	r0, 80084d2 <xQueueGiveMutexRecursive+0x1c>
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	b672      	cpsid	i
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	b662      	cpsie	i
 80084d0:	e7fe      	b.n	80084d0 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80084d2:	6885      	ldr	r5, [r0, #8]
 80084d4:	f000 ffd8 	bl	8009488 <xTaskGetCurrentTaskHandle>
 80084d8:	4285      	cmp	r5, r0
 80084da:	d10a      	bne.n	80084f2 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80084dc:	68e3      	ldr	r3, [r4, #12]
 80084de:	3b01      	subs	r3, #1
 80084e0:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80084e2:	b923      	cbnz	r3, 80084ee <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80084e4:	461a      	mov	r2, r3
 80084e6:	4619      	mov	r1, r3
 80084e8:	4620      	mov	r0, r4
 80084ea:	f7ff ff14 	bl	8008316 <xQueueGenericSend>
			xReturn = pdPASS;
 80084ee:	2001      	movs	r0, #1
		return xReturn;
 80084f0:	e000      	b.n	80084f4 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 80084f2:	2000      	movs	r0, #0
	}
 80084f4:	bd38      	pop	{r3, r4, r5, pc}

080084f6 <xQueueCreateMutex>:
	{
 80084f6:	b570      	push	{r4, r5, r6, lr}
 80084f8:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80084fa:	2050      	movs	r0, #80	; 0x50
 80084fc:	f7ff fabc 	bl	8007a78 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008500:	4604      	mov	r4, r0
 8008502:	b198      	cbz	r0, 800852c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008504:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8008506:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008508:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800850a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800850e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008512:	f7ff fdee 	bl	80080f2 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008516:	462b      	mov	r3, r5
 8008518:	462a      	mov	r2, r5
 800851a:	4629      	mov	r1, r5
 800851c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800851e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008522:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008524:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008526:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008528:	f7ff fef5 	bl	8008316 <xQueueGenericSend>
	}
 800852c:	4620      	mov	r0, r4
 800852e:	bd70      	pop	{r4, r5, r6, pc}

08008530 <xQueueGenericSendFromISR>:
{
 8008530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008534:	4689      	mov	r9, r1
 8008536:	4690      	mov	r8, r2
 8008538:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800853a:	4604      	mov	r4, r0
 800853c:	b950      	cbnz	r0, 8008554 <xQueueGenericSendFromISR+0x24>
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	b672      	cpsid	i
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	b662      	cpsie	i
 8008552:	e7fe      	b.n	8008552 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008554:	b961      	cbnz	r1, 8008570 <xQueueGenericSendFromISR+0x40>
 8008556:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008558:	b153      	cbz	r3, 8008570 <xQueueGenericSendFromISR+0x40>
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	b672      	cpsid	i
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	b662      	cpsie	i
 800856e:	e7fe      	b.n	800856e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008570:	2f02      	cmp	r7, #2
 8008572:	d10d      	bne.n	8008590 <xQueueGenericSendFromISR+0x60>
 8008574:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008576:	2b01      	cmp	r3, #1
 8008578:	d00a      	beq.n	8008590 <xQueueGenericSendFromISR+0x60>
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	b672      	cpsid	i
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	b662      	cpsie	i
 800858e:	e7fe      	b.n	800858e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008590:	f7ff fcf0 	bl	8007f74 <vPortValidateInterruptPriority>
	__asm volatile
 8008594:	f3ef 8611 	mrs	r6, BASEPRI
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	b672      	cpsid	i
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80085ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d301      	bcc.n	80085b8 <xQueueGenericSendFromISR+0x88>
 80085b4:	2f02      	cmp	r7, #2
 80085b6:	d122      	bne.n	80085fe <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 80085b8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085bc:	463a      	mov	r2, r7
 80085be:	4649      	mov	r1, r9
 80085c0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80085c2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085c4:	f7ff fd13 	bl	8007fee <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80085c8:	1c6b      	adds	r3, r5, #1
 80085ca:	d113      	bne.n	80085f4 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ce:	b90b      	cbnz	r3, 80085d4 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 80085d0:	2001      	movs	r0, #1
 80085d2:	e00b      	b.n	80085ec <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085d8:	f000 febe 	bl	8009358 <xTaskRemoveFromEventList>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d0f7      	beq.n	80085d0 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80085e0:	f1b8 0f00 	cmp.w	r8, #0
 80085e4:	d0f4      	beq.n	80085d0 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085e6:	2001      	movs	r0, #1
 80085e8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80085ec:	f386 8811 	msr	BASEPRI, r6
}
 80085f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085f4:	3501      	adds	r5, #1
 80085f6:	b26d      	sxtb	r5, r5
 80085f8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80085fc:	e7e8      	b.n	80085d0 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 80085fe:	2000      	movs	r0, #0
 8008600:	e7f4      	b.n	80085ec <xQueueGenericSendFromISR+0xbc>

08008602 <xQueueGiveFromISR>:
{
 8008602:	b570      	push	{r4, r5, r6, lr}
 8008604:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008606:	4604      	mov	r4, r0
 8008608:	b950      	cbnz	r0, 8008620 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	b672      	cpsid	i
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	b662      	cpsie	i
 800861e:	e7fe      	b.n	800861e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008620:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008622:	b153      	cbz	r3, 800863a <xQueueGiveFromISR+0x38>
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	b672      	cpsid	i
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	b662      	cpsie	i
 8008638:	e7fe      	b.n	8008638 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800863a:	6803      	ldr	r3, [r0, #0]
 800863c:	b963      	cbnz	r3, 8008658 <xQueueGiveFromISR+0x56>
 800863e:	6883      	ldr	r3, [r0, #8]
 8008640:	b153      	cbz	r3, 8008658 <xQueueGiveFromISR+0x56>
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	b672      	cpsid	i
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	b662      	cpsie	i
 8008656:	e7fe      	b.n	8008656 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008658:	f7ff fc8c 	bl	8007f74 <vPortValidateInterruptPriority>
	__asm volatile
 800865c:	f3ef 8611 	mrs	r6, BASEPRI
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	b672      	cpsid	i
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008674:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008676:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008678:	4293      	cmp	r3, r2
 800867a:	d91c      	bls.n	80086b6 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800867c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008680:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8008682:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8008684:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008686:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008688:	d110      	bne.n	80086ac <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800868a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800868c:	b90b      	cbnz	r3, 8008692 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800868e:	2001      	movs	r0, #1
 8008690:	e009      	b.n	80086a6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008692:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008696:	f000 fe5f 	bl	8009358 <xTaskRemoveFromEventList>
 800869a:	2800      	cmp	r0, #0
 800869c:	d0f7      	beq.n	800868e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800869e:	2d00      	cmp	r5, #0
 80086a0:	d0f5      	beq.n	800868e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086a2:	2001      	movs	r0, #1
 80086a4:	6028      	str	r0, [r5, #0]
	__asm volatile
 80086a6:	f386 8811 	msr	BASEPRI, r6
}
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086ac:	3301      	adds	r3, #1
 80086ae:	b25b      	sxtb	r3, r3
 80086b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086b4:	e7eb      	b.n	800868e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80086b6:	2000      	movs	r0, #0
 80086b8:	e7f5      	b.n	80086a6 <xQueueGiveFromISR+0xa4>

080086ba <xQueueReceive>:
{
 80086ba:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80086be:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80086c0:	4604      	mov	r4, r0
{
 80086c2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80086c4:	b950      	cbnz	r0, 80086dc <xQueueReceive+0x22>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	b672      	cpsid	i
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	b662      	cpsie	i
 80086da:	e7fe      	b.n	80086da <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086dc:	b961      	cbnz	r1, 80086f8 <xQueueReceive+0x3e>
 80086de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80086e0:	b153      	cbz	r3, 80086f8 <xQueueReceive+0x3e>
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	b672      	cpsid	i
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	b662      	cpsie	i
 80086f6:	e7fe      	b.n	80086f6 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086f8:	f000 fecc 	bl	8009494 <xTaskGetSchedulerState>
 80086fc:	4606      	mov	r6, r0
 80086fe:	b960      	cbnz	r0, 800871a <xQueueReceive+0x60>
 8008700:	9b01      	ldr	r3, [sp, #4]
 8008702:	b15b      	cbz	r3, 800871c <xQueueReceive+0x62>
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	b672      	cpsid	i
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	b662      	cpsie	i
 8008718:	e7fe      	b.n	8008718 <xQueueReceive+0x5e>
 800871a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800871c:	f04f 0800 	mov.w	r8, #0
 8008720:	e03d      	b.n	800879e <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008722:	9d01      	ldr	r5, [sp, #4]
 8008724:	b91d      	cbnz	r5, 800872e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8008726:	f7ff fb49 	bl	8007dbc <vPortExitCritical>
				return errQUEUE_EMPTY;
 800872a:	2000      	movs	r0, #0
 800872c:	e056      	b.n	80087dc <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800872e:	b916      	cbnz	r6, 8008736 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008730:	a802      	add	r0, sp, #8
 8008732:	f000 fe57 	bl	80093e4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008736:	f7ff fb41 	bl	8007dbc <vPortExitCritical>
		vTaskSuspendAll();
 800873a:	f000 fbdb 	bl	8008ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800873e:	f7ff fb19 	bl	8007d74 <vPortEnterCritical>
 8008742:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008746:	2bff      	cmp	r3, #255	; 0xff
 8008748:	d101      	bne.n	800874e <xQueueReceive+0x94>
 800874a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800874e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008752:	2bff      	cmp	r3, #255	; 0xff
 8008754:	d101      	bne.n	800875a <xQueueReceive+0xa0>
 8008756:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800875a:	f7ff fb2f 	bl	8007dbc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800875e:	a901      	add	r1, sp, #4
 8008760:	a802      	add	r0, sp, #8
 8008762:	f000 fe4b 	bl	80093fc <xTaskCheckForTimeOut>
 8008766:	2800      	cmp	r0, #0
 8008768:	d141      	bne.n	80087ee <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff fc34 	bl	8007fd8 <prvIsQueueEmpty>
 8008770:	b3b8      	cbz	r0, 80087e2 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008772:	9901      	ldr	r1, [sp, #4]
 8008774:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008778:	f000 fdb2 	bl	80092e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800877c:	4620      	mov	r0, r4
 800877e:	f7ff fc80 	bl	8008082 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008782:	f000 fc5d 	bl	8009040 <xTaskResumeAll>
 8008786:	b948      	cbnz	r0, 800879c <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8008788:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800878c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008790:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800879e:	f7ff fae9 	bl	8007d74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087a2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087a4:	2d00      	cmp	r5, #0
 80087a6:	d0bc      	beq.n	8008722 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087a8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087aa:	4639      	mov	r1, r7
 80087ac:	4620      	mov	r0, r4
 80087ae:	f7ff fc53 	bl	8008058 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087b2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087b4:	6923      	ldr	r3, [r4, #16]
 80087b6:	b173      	cbz	r3, 80087d6 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087b8:	f104 0010 	add.w	r0, r4, #16
 80087bc:	f000 fdcc 	bl	8009358 <xTaskRemoveFromEventList>
 80087c0:	b148      	cbz	r0, 80087d6 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 80087c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80087c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80087d6:	f7ff faf1 	bl	8007dbc <vPortExitCritical>
				return pdPASS;
 80087da:	2001      	movs	r0, #1
}
 80087dc:	b004      	add	sp, #16
 80087de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80087e2:	4620      	mov	r0, r4
 80087e4:	f7ff fc4d 	bl	8008082 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087e8:	f000 fc2a 	bl	8009040 <xTaskResumeAll>
 80087ec:	e7d6      	b.n	800879c <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 80087ee:	4620      	mov	r0, r4
 80087f0:	f7ff fc47 	bl	8008082 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087f4:	f000 fc24 	bl	8009040 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087f8:	4620      	mov	r0, r4
 80087fa:	f7ff fbed 	bl	8007fd8 <prvIsQueueEmpty>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d0cc      	beq.n	800879c <xQueueReceive+0xe2>
 8008802:	e792      	b.n	800872a <xQueueReceive+0x70>

08008804 <xQueueSemaphoreTake>:
{
 8008804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008806:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008808:	4604      	mov	r4, r0
{
 800880a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800880c:	b950      	cbnz	r0, 8008824 <xQueueSemaphoreTake+0x20>
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	b672      	cpsid	i
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	b662      	cpsie	i
 8008822:	e7fe      	b.n	8008822 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008824:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8008826:	b155      	cbz	r5, 800883e <xQueueSemaphoreTake+0x3a>
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	b672      	cpsid	i
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	b662      	cpsie	i
 800883c:	e7fe      	b.n	800883c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800883e:	f000 fe29 	bl	8009494 <xTaskGetSchedulerState>
 8008842:	4606      	mov	r6, r0
 8008844:	b960      	cbnz	r0, 8008860 <xQueueSemaphoreTake+0x5c>
 8008846:	9b01      	ldr	r3, [sp, #4]
 8008848:	b16b      	cbz	r3, 8008866 <xQueueSemaphoreTake+0x62>
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	b672      	cpsid	i
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	b662      	cpsie	i
 800885e:	e7fe      	b.n	800885e <xQueueSemaphoreTake+0x5a>
 8008860:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008862:	2700      	movs	r7, #0
 8008864:	e055      	b.n	8008912 <xQueueSemaphoreTake+0x10e>
 8008866:	4605      	mov	r5, r0
 8008868:	e7fb      	b.n	8008862 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800886a:	9b01      	ldr	r3, [sp, #4]
 800886c:	b973      	cbnz	r3, 800888c <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800886e:	b155      	cbz	r5, 8008886 <xQueueSemaphoreTake+0x82>
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	b672      	cpsid	i
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	b662      	cpsie	i
 8008884:	e7fe      	b.n	8008884 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 8008886:	f7ff fa99 	bl	8007dbc <vPortExitCritical>
					return errQUEUE_EMPTY;
 800888a:	e062      	b.n	8008952 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800888c:	b916      	cbnz	r6, 8008894 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800888e:	a802      	add	r0, sp, #8
 8008890:	f000 fda8 	bl	80093e4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008894:	f7ff fa92 	bl	8007dbc <vPortExitCritical>
		vTaskSuspendAll();
 8008898:	f000 fb2c 	bl	8008ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800889c:	f7ff fa6a 	bl	8007d74 <vPortEnterCritical>
 80088a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80088a4:	2bff      	cmp	r3, #255	; 0xff
 80088a6:	d101      	bne.n	80088ac <xQueueSemaphoreTake+0xa8>
 80088a8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80088ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80088b0:	2bff      	cmp	r3, #255	; 0xff
 80088b2:	d101      	bne.n	80088b8 <xQueueSemaphoreTake+0xb4>
 80088b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088b8:	f7ff fa80 	bl	8007dbc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088bc:	a901      	add	r1, sp, #4
 80088be:	a802      	add	r0, sp, #8
 80088c0:	f000 fd9c 	bl	80093fc <xTaskCheckForTimeOut>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d14d      	bne.n	8008964 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7ff fb85 	bl	8007fd8 <prvIsQueueEmpty>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d042      	beq.n	8008958 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	b93b      	cbnz	r3, 80088e6 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 80088d6:	f7ff fa4d 	bl	8007d74 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088da:	68a0      	ldr	r0, [r4, #8]
 80088dc:	f000 fdea 	bl	80094b4 <xTaskPriorityInherit>
 80088e0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80088e2:	f7ff fa6b 	bl	8007dbc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088e6:	9901      	ldr	r1, [sp, #4]
 80088e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80088ec:	f000 fcf8 	bl	80092e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088f0:	4620      	mov	r0, r4
 80088f2:	f7ff fbc6 	bl	8008082 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088f6:	f000 fba3 	bl	8009040 <xTaskResumeAll>
 80088fa:	b948      	cbnz	r0, 8008910 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 80088fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008904:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008912:	f7ff fa2f 	bl	8007d74 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008918:	2b00      	cmp	r3, #0
 800891a:	d0a6      	beq.n	800886a <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800891c:	3b01      	subs	r3, #1
 800891e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	b913      	cbnz	r3, 800892a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008924:	f000 fea4 	bl	8009670 <pvTaskIncrementMutexHeldCount>
 8008928:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	b173      	cbz	r3, 800894c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800892e:	f104 0010 	add.w	r0, r4, #16
 8008932:	f000 fd11 	bl	8009358 <xTaskRemoveFromEventList>
 8008936:	b148      	cbz	r0, 800894c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8008938:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800893c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008940:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800894c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800894e:	f7ff fa35 	bl	8007dbc <vPortExitCritical>
}
 8008952:	4628      	mov	r0, r5
 8008954:	b005      	add	sp, #20
 8008956:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8008958:	4620      	mov	r0, r4
 800895a:	f7ff fb92 	bl	8008082 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800895e:	f000 fb6f 	bl	8009040 <xTaskResumeAll>
 8008962:	e7d5      	b.n	8008910 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8008964:	4620      	mov	r0, r4
 8008966:	f7ff fb8c 	bl	8008082 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800896a:	f000 fb69 	bl	8009040 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800896e:	4620      	mov	r0, r4
 8008970:	f7ff fb32 	bl	8007fd8 <prvIsQueueEmpty>
 8008974:	2800      	cmp	r0, #0
 8008976:	d0cb      	beq.n	8008910 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8008978:	2d00      	cmp	r5, #0
 800897a:	d0ea      	beq.n	8008952 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800897c:	f7ff f9fa 	bl	8007d74 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008980:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008982:	b119      	cbz	r1, 800898c <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008984:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008986:	6819      	ldr	r1, [r3, #0]
 8008988:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800898c:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800898e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008990:	f000 fe18 	bl	80095c4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008994:	f7ff fa12 	bl	8007dbc <vPortExitCritical>
 8008998:	e7db      	b.n	8008952 <xQueueSemaphoreTake+0x14e>

0800899a <xQueueTakeMutexRecursive>:
	{
 800899a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800899c:	4604      	mov	r4, r0
 800899e:	b950      	cbnz	r0, 80089b6 <xQueueTakeMutexRecursive+0x1c>
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	b672      	cpsid	i
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	b662      	cpsie	i
 80089b4:	e7fe      	b.n	80089b4 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80089b6:	6885      	ldr	r5, [r0, #8]
 80089b8:	9101      	str	r1, [sp, #4]
 80089ba:	f000 fd65 	bl	8009488 <xTaskGetCurrentTaskHandle>
 80089be:	4285      	cmp	r5, r0
 80089c0:	9901      	ldr	r1, [sp, #4]
 80089c2:	d105      	bne.n	80089d0 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089c4:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80089c6:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089c8:	3301      	adds	r3, #1
 80089ca:	60e3      	str	r3, [r4, #12]
	}
 80089cc:	b003      	add	sp, #12
 80089ce:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80089d0:	4620      	mov	r0, r4
 80089d2:	f7ff ff17 	bl	8008804 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d0f8      	beq.n	80089cc <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089da:	68e3      	ldr	r3, [r4, #12]
 80089dc:	3301      	adds	r3, #1
 80089de:	60e3      	str	r3, [r4, #12]
		return xReturn;
 80089e0:	e7f4      	b.n	80089cc <xQueueTakeMutexRecursive+0x32>

080089e2 <xQueueReceiveFromISR>:
{
 80089e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089e6:	4689      	mov	r9, r1
 80089e8:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80089ea:	4605      	mov	r5, r0
 80089ec:	b950      	cbnz	r0, 8008a04 <xQueueReceiveFromISR+0x22>
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	b672      	cpsid	i
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	b662      	cpsie	i
 8008a02:	e7fe      	b.n	8008a02 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a04:	b961      	cbnz	r1, 8008a20 <xQueueReceiveFromISR+0x3e>
 8008a06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a08:	b153      	cbz	r3, 8008a20 <xQueueReceiveFromISR+0x3e>
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	b672      	cpsid	i
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	b662      	cpsie	i
 8008a1e:	e7fe      	b.n	8008a1e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a20:	f7ff faa8 	bl	8007f74 <vPortValidateInterruptPriority>
	__asm volatile
 8008a24:	f3ef 8711 	mrs	r7, BASEPRI
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	b672      	cpsid	i
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a3c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a3e:	b31c      	cbz	r4, 8008a88 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a40:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a44:	4649      	mov	r1, r9
 8008a46:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a48:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a4a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a4c:	f7ff fb04 	bl	8008058 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a50:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008a52:	1c73      	adds	r3, r6, #1
 8008a54:	d113      	bne.n	8008a7e <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a56:	692b      	ldr	r3, [r5, #16]
 8008a58:	b90b      	cbnz	r3, 8008a5e <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	e00b      	b.n	8008a76 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a5e:	f105 0010 	add.w	r0, r5, #16
 8008a62:	f000 fc79 	bl	8009358 <xTaskRemoveFromEventList>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d0f7      	beq.n	8008a5a <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8008a6a:	f1b8 0f00 	cmp.w	r8, #0
 8008a6e:	d0f4      	beq.n	8008a5a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008a70:	2001      	movs	r0, #1
 8008a72:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8008a76:	f387 8811 	msr	BASEPRI, r7
}
 8008a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008a7e:	3601      	adds	r6, #1
 8008a80:	b276      	sxtb	r6, r6
 8008a82:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8008a86:	e7e8      	b.n	8008a5a <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8008a88:	4620      	mov	r0, r4
 8008a8a:	e7f4      	b.n	8008a76 <xQueueReceiveFromISR+0x94>

08008a8c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a8c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a8e:	4a07      	ldr	r2, [pc, #28]	; (8008aac <vQueueAddToRegistry+0x20>)
	{
 8008a90:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a92:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008a96:	b92c      	cbnz	r4, 8008aa4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008aa0:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008aa2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	2b08      	cmp	r3, #8
 8008aa8:	d1f3      	bne.n	8008a92 <vQueueAddToRegistry+0x6>
 8008aaa:	e7fa      	b.n	8008aa2 <vQueueAddToRegistry+0x16>
 8008aac:	20014d2c 	.word	0x20014d2c

08008ab0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ab0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008ab2:	4a08      	ldr	r2, [pc, #32]	; (8008ad4 <vQueueUnregisterQueue+0x24>)
	{
 8008ab4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008ab6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008aba:	684c      	ldr	r4, [r1, #4]
 8008abc:	4284      	cmp	r4, r0
 8008abe:	d104      	bne.n	8008aca <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008ac6:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008ac8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008aca:	3301      	adds	r3, #1
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d1f2      	bne.n	8008ab6 <vQueueUnregisterQueue+0x6>
 8008ad0:	e7fa      	b.n	8008ac8 <vQueueUnregisterQueue+0x18>
 8008ad2:	bf00      	nop
 8008ad4:	20014d2c 	.word	0x20014d2c

08008ad8 <vQueueDelete>:
{
 8008ad8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008ada:	4604      	mov	r4, r0
 8008adc:	b950      	cbnz	r0, 8008af4 <vQueueDelete+0x1c>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	b672      	cpsid	i
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	b662      	cpsie	i
 8008af2:	e7fe      	b.n	8008af2 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8008af4:	f7ff ffdc 	bl	8008ab0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008af8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008afc:	b923      	cbnz	r3, 8008b08 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 8008afe:	4620      	mov	r0, r4
}
 8008b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8008b04:	f7ff b84e 	b.w	8007ba4 <vPortFree>
}
 8008b08:	bd10      	pop	{r4, pc}

08008b0a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b0a:	b570      	push	{r4, r5, r6, lr}
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	460d      	mov	r5, r1
 8008b10:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b12:	f7ff f92f 	bl	8007d74 <vPortEnterCritical>
 8008b16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008b1a:	2bff      	cmp	r3, #255	; 0xff
 8008b1c:	d102      	bne.n	8008b24 <vQueueWaitForMessageRestricted+0x1a>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b24:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008b28:	2bff      	cmp	r3, #255	; 0xff
 8008b2a:	d102      	bne.n	8008b32 <vQueueWaitForMessageRestricted+0x28>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b32:	f7ff f943 	bl	8007dbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b38:	b92b      	cbnz	r3, 8008b46 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b3a:	4632      	mov	r2, r6
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b42:	f000 fbe9 	bl	8009318 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b46:	4620      	mov	r0, r4
	}
 8008b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008b4c:	f7ff ba99 	b.w	8008082 <prvUnlockQueue>

08008b50 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b54:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b56:	f7ff f90d 	bl	8007d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b5a:	4b2f      	ldr	r3, [pc, #188]	; (8008c18 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8008b5c:	4e2f      	ldr	r6, [pc, #188]	; (8008c1c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	4f2f      	ldr	r7, [pc, #188]	; (8008c20 <prvAddNewTaskToReadyList+0xd0>)
 8008b62:	3201      	adds	r2, #1
 8008b64:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008b66:	6835      	ldr	r5, [r6, #0]
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	d14a      	bne.n	8008c02 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b6c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d11f      	bne.n	8008bb4 <prvAddNewTaskToReadyList+0x64>
 8008b74:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b76:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b78:	4640      	mov	r0, r8
 8008b7a:	f7ff f84f 	bl	8007c1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b7e:	f108 0814 	add.w	r8, r8, #20
 8008b82:	2d38      	cmp	r5, #56	; 0x38
 8008b84:	d1f7      	bne.n	8008b76 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b86:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008c48 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8008b8a:	4d26      	ldr	r5, [pc, #152]	; (8008c24 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8008b8c:	4640      	mov	r0, r8
 8008b8e:	f7ff f845 	bl	8007c1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b92:	4628      	mov	r0, r5
 8008b94:	f7ff f842 	bl	8007c1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b98:	4823      	ldr	r0, [pc, #140]	; (8008c28 <prvAddNewTaskToReadyList+0xd8>)
 8008b9a:	f7ff f83f 	bl	8007c1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b9e:	4823      	ldr	r0, [pc, #140]	; (8008c2c <prvAddNewTaskToReadyList+0xdc>)
 8008ba0:	f7ff f83c 	bl	8007c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ba4:	4822      	ldr	r0, [pc, #136]	; (8008c30 <prvAddNewTaskToReadyList+0xe0>)
 8008ba6:	f7ff f839 	bl	8007c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008baa:	4b22      	ldr	r3, [pc, #136]	; (8008c34 <prvAddNewTaskToReadyList+0xe4>)
 8008bac:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008bb0:	4b21      	ldr	r3, [pc, #132]	; (8008c38 <prvAddNewTaskToReadyList+0xe8>)
 8008bb2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008bb4:	4a21      	ldr	r2, [pc, #132]	; (8008c3c <prvAddNewTaskToReadyList+0xec>)
 8008bb6:	6813      	ldr	r3, [r2, #0]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008bbc:	4a20      	ldr	r2, [pc, #128]	; (8008c40 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bbe:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008bc0:	6811      	ldr	r1, [r2, #0]
 8008bc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bc4:	428b      	cmp	r3, r1
 8008bc6:	d900      	bls.n	8008bca <prvAddNewTaskToReadyList+0x7a>
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	2014      	movs	r0, #20
 8008bcc:	1d21      	adds	r1, r4, #4
 8008bce:	fb00 7003 	mla	r0, r0, r3, r7
 8008bd2:	f7ff f831 	bl	8007c38 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008bd6:	f7ff f8f1 	bl	8007dbc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008bda:	4b1a      	ldr	r3, [pc, #104]	; (8008c44 <prvAddNewTaskToReadyList+0xf4>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	b173      	cbz	r3, 8008bfe <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008be0:	6833      	ldr	r3, [r6, #0]
 8008be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d209      	bcs.n	8008bfe <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8008bea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	f3bf 8f6f 	isb	sy
}
 8008bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008c02:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <prvAddNewTaskToReadyList+0xf4>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1d4      	bne.n	8008bb4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c0a:	6833      	ldr	r3, [r6, #0]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d8cf      	bhi.n	8008bb4 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8008c14:	6034      	str	r4, [r6, #0]
 8008c16:	e7cd      	b.n	8008bb4 <prvAddNewTaskToReadyList+0x64>
 8008c18:	200151d8 	.word	0x200151d8
 8008c1c:	20014d6c 	.word	0x20014d6c
 8008c20:	20014d78 	.word	0x20014d78
 8008c24:	20015204 	.word	0x20015204
 8008c28:	20015220 	.word	0x20015220
 8008c2c:	2001524c 	.word	0x2001524c
 8008c30:	20015238 	.word	0x20015238
 8008c34:	20014d70 	.word	0x20014d70
 8008c38:	20014d74 	.word	0x20014d74
 8008c3c:	200151e8 	.word	0x200151e8
 8008c40:	200151ec 	.word	0x200151ec
 8008c44:	20015234 	.word	0x20015234
 8008c48:	200151f0 	.word	0x200151f0

08008c4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c4e:	4b15      	ldr	r3, [pc, #84]	; (8008ca4 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8008c50:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c52:	4e15      	ldr	r6, [pc, #84]	; (8008ca8 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8008c54:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8008c56:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c58:	6830      	ldr	r0, [r6, #0]
 8008c5a:	3004      	adds	r0, #4
 8008c5c:	f7ff f80f 	bl	8007c7e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c60:	1c63      	adds	r3, r4, #1
 8008c62:	d107      	bne.n	8008c74 <prvAddCurrentTaskToDelayedList+0x28>
 8008c64:	b137      	cbz	r7, 8008c74 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c66:	6831      	ldr	r1, [r6, #0]
 8008c68:	4810      	ldr	r0, [pc, #64]	; (8008cac <prvAddCurrentTaskToDelayedList+0x60>)
 8008c6a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c70:	f7fe bfe2 	b.w	8007c38 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c74:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c76:	6833      	ldr	r3, [r6, #0]
 8008c78:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c7a:	d307      	bcc.n	8008c8c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c7c:	4b0c      	ldr	r3, [pc, #48]	; (8008cb0 <prvAddCurrentTaskToDelayedList+0x64>)
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	6831      	ldr	r1, [r6, #0]
}
 8008c82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c86:	3104      	adds	r1, #4
 8008c88:	f7fe bfe2 	b.w	8007c50 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c8c:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <prvAddCurrentTaskToDelayedList+0x68>)
 8008c8e:	6818      	ldr	r0, [r3, #0]
 8008c90:	6831      	ldr	r1, [r6, #0]
 8008c92:	3104      	adds	r1, #4
 8008c94:	f7fe ffdc 	bl	8007c50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c98:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	42a2      	cmp	r2, r4
 8008c9e:	d900      	bls.n	8008ca2 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8008ca0:	601c      	str	r4, [r3, #0]
}
 8008ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ca4:	20015260 	.word	0x20015260
 8008ca8:	20014d6c 	.word	0x20014d6c
 8008cac:	20015238 	.word	0x20015238
 8008cb0:	20014d74 	.word	0x20014d74
 8008cb4:	20014d70 	.word	0x20014d70
 8008cb8:	20015218 	.word	0x20015218

08008cbc <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cbc:	4a06      	ldr	r2, [pc, #24]	; (8008cd8 <prvResetNextTaskUnblockTime+0x1c>)
 8008cbe:	6813      	ldr	r3, [r2, #0]
 8008cc0:	6819      	ldr	r1, [r3, #0]
 8008cc2:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <prvResetNextTaskUnblockTime+0x20>)
 8008cc4:	b919      	cbnz	r1, 8008cce <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cca:	601a      	str	r2, [r3, #0]
}
 8008ccc:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cce:	6812      	ldr	r2, [r2, #0]
 8008cd0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cd2:	68d2      	ldr	r2, [r2, #12]
 8008cd4:	6852      	ldr	r2, [r2, #4]
 8008cd6:	e7f8      	b.n	8008cca <prvResetNextTaskUnblockTime+0xe>
 8008cd8:	20014d70 	.word	0x20014d70
 8008cdc:	20015218 	.word	0x20015218

08008ce0 <prvDeleteTCB>:
	{
 8008ce0:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ce2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8008ce6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ce8:	b93b      	cbnz	r3, 8008cfa <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008cea:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008cec:	f7fe ff5a 	bl	8007ba4 <vPortFree>
				vPortFree( pxTCB );
 8008cf0:	4620      	mov	r0, r4
	}
 8008cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008cf6:	f7fe bf55 	b.w	8007ba4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d0f9      	beq.n	8008cf2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d00a      	beq.n	8008d18 <prvDeleteTCB+0x38>
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	b672      	cpsid	i
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	b662      	cpsie	i
 8008d16:	e7fe      	b.n	8008d16 <prvDeleteTCB+0x36>
	}
 8008d18:	bd10      	pop	{r4, pc}
	...

08008d1c <prvIdleTask>:
{
 8008d1c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d1e:	4c14      	ldr	r4, [pc, #80]	; (8008d70 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d20:	4f14      	ldr	r7, [pc, #80]	; (8008d74 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8008d22:	4d15      	ldr	r5, [pc, #84]	; (8008d78 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	b983      	cbnz	r3, 8008d4a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d28:	4b14      	ldr	r3, [pc, #80]	; (8008d7c <prvIdleTask+0x60>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d909      	bls.n	8008d44 <prvIdleTask+0x28>
				taskYIELD();
 8008d30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d38:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8008d44:	f7f8 f854 	bl	8000df0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008d48:	e7eb      	b.n	8008d22 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008d4a:	f7ff f813 	bl	8007d74 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d52:	1d30      	adds	r0, r6, #4
 8008d54:	f7fe ff93 	bl	8007c7e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008d64:	f7ff f82a 	bl	8007dbc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f7ff ffb9 	bl	8008ce0 <prvDeleteTCB>
 8008d6e:	e7d9      	b.n	8008d24 <prvIdleTask+0x8>
 8008d70:	200151dc 	.word	0x200151dc
 8008d74:	2001524c 	.word	0x2001524c
 8008d78:	200151d8 	.word	0x200151d8
 8008d7c:	20014d78 	.word	0x20014d78

08008d80 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d84:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008d88:	4606      	mov	r6, r0
 8008d8a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d8c:	21a5      	movs	r1, #165	; 0xa5
 8008d8e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008d90:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d92:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008d96:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008d9c:	f021 fcea 	bl	802a774 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008da0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008da2:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008da4:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8008da8:	b3b5      	cbz	r5, 8008e18 <prvInitialiseNewTask.constprop.0+0x98>
 8008daa:	1e6b      	subs	r3, r5, #1
 8008dac:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008db0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008db2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008db6:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8008dba:	b108      	cbz	r0, 8008dc0 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dbc:	42ab      	cmp	r3, r5
 8008dbe:	d1f8      	bne.n	8008db2 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dc6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008dc8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dcc:	1d20      	adds	r0, r4, #4
 8008dce:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008dd0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8008dd4:	bf28      	it	cs
 8008dd6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008dd8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008dda:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ddc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008de0:	f7fe ff27 	bl	8007c32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008de4:	f104 0018 	add.w	r0, r4, #24
 8008de8:	f7fe ff23 	bl	8007c32 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008dec:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008df0:	463a      	mov	r2, r7
 8008df2:	4631      	mov	r1, r6
 8008df4:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008df6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008df8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dfa:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008dfc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e00:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e04:	f7fe ff8e 	bl	8007d24 <pxPortInitialiseStack>
 8008e08:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008e0a:	f1b8 0f00 	cmp.w	r8, #0
 8008e0e:	d001      	beq.n	8008e14 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e10:	f8c8 4000 	str.w	r4, [r8]
}
 8008e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e18:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8008e1c:	e7d3      	b.n	8008dc6 <prvInitialiseNewTask.constprop.0+0x46>

08008e1e <xTaskCreateStatic>:
	{
 8008e1e:	b570      	push	{r4, r5, r6, lr}
 8008e20:	b086      	sub	sp, #24
 8008e22:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008e26:	b955      	cbnz	r5, 8008e3e <xTaskCreateStatic+0x20>
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	b672      	cpsid	i
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	b662      	cpsie	i
 8008e3c:	e7fe      	b.n	8008e3c <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8008e3e:	b954      	cbnz	r4, 8008e56 <xTaskCreateStatic+0x38>
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	b672      	cpsid	i
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	b662      	cpsie	i
 8008e54:	e7fe      	b.n	8008e54 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e56:	2660      	movs	r6, #96	; 0x60
 8008e58:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e5a:	9e05      	ldr	r6, [sp, #20]
 8008e5c:	2e60      	cmp	r6, #96	; 0x60
 8008e5e:	d00a      	beq.n	8008e76 <xTaskCreateStatic+0x58>
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	b672      	cpsid	i
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	b662      	cpsie	i
 8008e74:	e7fe      	b.n	8008e74 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e76:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e78:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e7a:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e7c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e80:	ad04      	add	r5, sp, #16
 8008e82:	9402      	str	r4, [sp, #8]
 8008e84:	9501      	str	r5, [sp, #4]
 8008e86:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008e88:	9500      	str	r5, [sp, #0]
 8008e8a:	f7ff ff79 	bl	8008d80 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7ff fe5e 	bl	8008b50 <prvAddNewTaskToReadyList>
	}
 8008e94:	9804      	ldr	r0, [sp, #16]
 8008e96:	b006      	add	sp, #24
 8008e98:	bd70      	pop	{r4, r5, r6, pc}

08008e9a <xTaskCreate>:
	{
 8008e9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ea2:	0090      	lsls	r0, r2, #2
	{
 8008ea4:	4688      	mov	r8, r1
 8008ea6:	4616      	mov	r6, r2
 8008ea8:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008eaa:	f7fe fde5 	bl	8007a78 <pvPortMalloc>
			if( pxStack != NULL )
 8008eae:	4605      	mov	r5, r0
 8008eb0:	b1e8      	cbz	r0, 8008eee <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008eb2:	2060      	movs	r0, #96	; 0x60
 8008eb4:	f7fe fde0 	bl	8007a78 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008eb8:	4604      	mov	r4, r0
 8008eba:	b1a8      	cbz	r0, 8008ee8 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ebc:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8008ebe:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ec4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ec8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eca:	9002      	str	r0, [sp, #8]
 8008ecc:	4638      	mov	r0, r7
 8008ece:	9301      	str	r3, [sp, #4]
 8008ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	464b      	mov	r3, r9
 8008ed6:	f7ff ff53 	bl	8008d80 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eda:	4620      	mov	r0, r4
 8008edc:	f7ff fe38 	bl	8008b50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ee0:	2001      	movs	r0, #1
	}
 8008ee2:	b005      	add	sp, #20
 8008ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f7fe fe5b 	bl	8007ba4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8008ef2:	e7f6      	b.n	8008ee2 <xTaskCreate+0x48>

08008ef4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008ef4:	4a02      	ldr	r2, [pc, #8]	; (8008f00 <vTaskSuspendAll+0xc>)
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	6013      	str	r3, [r2, #0]
}
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	200151e4 	.word	0x200151e4

08008f04 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008f04:	4b01      	ldr	r3, [pc, #4]	; (8008f0c <xTaskGetTickCount+0x8>)
 8008f06:	6818      	ldr	r0, [r3, #0]
}
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20015260 	.word	0x20015260

08008f10 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f10:	4b40      	ldr	r3, [pc, #256]	; (8009014 <xTaskIncrementTick+0x104>)
 8008f12:	681b      	ldr	r3, [r3, #0]
{
 8008f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d174      	bne.n	8009006 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f1c:	4b3e      	ldr	r3, [pc, #248]	; (8009018 <xTaskIncrementTick+0x108>)
 8008f1e:	681d      	ldr	r5, [r3, #0]
 8008f20:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008f22:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f24:	b9cd      	cbnz	r5, 8008f5a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8008f26:	4b3d      	ldr	r3, [pc, #244]	; (800901c <xTaskIncrementTick+0x10c>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	6812      	ldr	r2, [r2, #0]
 8008f2c:	b152      	cbz	r2, 8008f44 <xTaskIncrementTick+0x34>
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	b672      	cpsid	i
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	b662      	cpsie	i
 8008f42:	e7fe      	b.n	8008f42 <xTaskIncrementTick+0x32>
 8008f44:	4a36      	ldr	r2, [pc, #216]	; (8009020 <xTaskIncrementTick+0x110>)
 8008f46:	6819      	ldr	r1, [r3, #0]
 8008f48:	6810      	ldr	r0, [r2, #0]
 8008f4a:	6018      	str	r0, [r3, #0]
 8008f4c:	6011      	str	r1, [r2, #0]
 8008f4e:	4a35      	ldr	r2, [pc, #212]	; (8009024 <xTaskIncrementTick+0x114>)
 8008f50:	6813      	ldr	r3, [r2, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	f7ff feb1 	bl	8008cbc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f5a:	4e33      	ldr	r6, [pc, #204]	; (8009028 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8008f5c:	2400      	movs	r4, #0
 8008f5e:	4f33      	ldr	r7, [pc, #204]	; (800902c <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f60:	6833      	ldr	r3, [r6, #0]
 8008f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8009038 <xTaskIncrementTick+0x128>
 8008f66:	42ab      	cmp	r3, r5
 8008f68:	d911      	bls.n	8008f8e <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f6e:	2214      	movs	r2, #20
 8008f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f72:	4353      	muls	r3, r2
 8008f74:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	bf28      	it	cs
 8008f7a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008f7c:	4b2c      	ldr	r3, [pc, #176]	; (8009030 <xTaskIncrementTick+0x120>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008f80:	2b00      	cmp	r3, #0
}
 8008f82:	bf0c      	ite	eq
 8008f84:	4620      	moveq	r0, r4
 8008f86:	2001      	movne	r0, #1
 8008f88:	b003      	add	sp, #12
 8008f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f8e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800901c <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8008f92:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800903c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f96:	f8d9 3000 	ldr.w	r3, [r9]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	b91b      	cbnz	r3, 8008fa6 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fa2:	6033      	str	r3, [r6, #0]
					break;
 8008fa4:	e7e1      	b.n	8008f6a <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa6:	f8d9 3000 	ldr.w	r3, [r9]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fb0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008fb4:	4295      	cmp	r5, r2
 8008fb6:	d201      	bcs.n	8008fbc <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8008fb8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fba:	e7d6      	b.n	8008f6a <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fbc:	f10b 0104 	add.w	r1, fp, #4
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	9101      	str	r1, [sp, #4]
 8008fc4:	f7fe fe5b 	bl	8007c7e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fc8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008fcc:	9901      	ldr	r1, [sp, #4]
 8008fce:	b122      	cbz	r2, 8008fda <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fd0:	f10b 0018 	add.w	r0, fp, #24
 8008fd4:	f7fe fe53 	bl	8007c7e <uxListRemove>
 8008fd8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8008fda:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008fde:	f8da 2000 	ldr.w	r2, [sl]
 8008fe2:	4290      	cmp	r0, r2
 8008fe4:	d901      	bls.n	8008fea <xTaskIncrementTick+0xda>
 8008fe6:	f8ca 0000 	str.w	r0, [sl]
 8008fea:	2314      	movs	r3, #20
 8008fec:	fb03 7000 	mla	r0, r3, r0, r7
 8008ff0:	f7fe fe22 	bl	8007c38 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ff4:	f8d8 1000 	ldr.w	r1, [r8]
 8008ff8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008ffc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008ffe:	429a      	cmp	r2, r3
 8009000:	bf28      	it	cs
 8009002:	2401      	movcs	r4, #1
 8009004:	e7c7      	b.n	8008f96 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8009006:	4a0b      	ldr	r2, [pc, #44]	; (8009034 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8009008:	2400      	movs	r4, #0
		++uxPendedTicks;
 800900a:	6813      	ldr	r3, [r2, #0]
 800900c:	3301      	adds	r3, #1
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	e7b4      	b.n	8008f7c <xTaskIncrementTick+0x6c>
 8009012:	bf00      	nop
 8009014:	200151e4 	.word	0x200151e4
 8009018:	20015260 	.word	0x20015260
 800901c:	20014d70 	.word	0x20014d70
 8009020:	20014d74 	.word	0x20014d74
 8009024:	2001521c 	.word	0x2001521c
 8009028:	20015218 	.word	0x20015218
 800902c:	20014d78 	.word	0x20014d78
 8009030:	20015264 	.word	0x20015264
 8009034:	200151e0 	.word	0x200151e0
 8009038:	20014d6c 	.word	0x20014d6c
 800903c:	200151ec 	.word	0x200151ec

08009040 <xTaskResumeAll>:
{
 8009040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8009042:	4c32      	ldr	r4, [pc, #200]	; (800910c <xTaskResumeAll+0xcc>)
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	b953      	cbnz	r3, 800905e <xTaskResumeAll+0x1e>
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	b672      	cpsid	i
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	b662      	cpsie	i
 800905c:	e7fe      	b.n	800905c <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800905e:	f7fe fe89 	bl	8007d74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	3b01      	subs	r3, #1
 8009066:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009068:	6824      	ldr	r4, [r4, #0]
 800906a:	b12c      	cbz	r4, 8009078 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800906c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800906e:	f7fe fea5 	bl	8007dbc <vPortExitCritical>
}
 8009072:	4620      	mov	r0, r4
 8009074:	b003      	add	sp, #12
 8009076:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009078:	4b25      	ldr	r3, [pc, #148]	; (8009110 <xTaskResumeAll+0xd0>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0f5      	beq.n	800906c <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009080:	4d24      	ldr	r5, [pc, #144]	; (8009114 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8009082:	4e25      	ldr	r6, [pc, #148]	; (8009118 <xTaskResumeAll+0xd8>)
 8009084:	4f25      	ldr	r7, [pc, #148]	; (800911c <xTaskResumeAll+0xdc>)
 8009086:	e01e      	b.n	80090c6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009088:	68eb      	ldr	r3, [r5, #12]
 800908a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800908c:	f104 0018 	add.w	r0, r4, #24
 8009090:	f7fe fdf5 	bl	8007c7e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009094:	1d21      	adds	r1, r4, #4
 8009096:	4608      	mov	r0, r1
 8009098:	9101      	str	r1, [sp, #4]
 800909a:	f7fe fdf0 	bl	8007c7e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800909e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090a0:	6832      	ldr	r2, [r6, #0]
 80090a2:	9901      	ldr	r1, [sp, #4]
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d900      	bls.n	80090aa <xTaskResumeAll+0x6a>
 80090a8:	6033      	str	r3, [r6, #0]
 80090aa:	2014      	movs	r0, #20
 80090ac:	fb00 7003 	mla	r0, r0, r3, r7
 80090b0:	f7fe fdc2 	bl	8007c38 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090b4:	4b1a      	ldr	r3, [pc, #104]	; (8009120 <xTaskResumeAll+0xe0>)
 80090b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	429a      	cmp	r2, r3
 80090be:	d302      	bcc.n	80090c6 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 80090c0:	4b18      	ldr	r3, [pc, #96]	; (8009124 <xTaskResumeAll+0xe4>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090c6:	682b      	ldr	r3, [r5, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1dd      	bne.n	8009088 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80090cc:	b10c      	cbz	r4, 80090d2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80090ce:	f7ff fdf5 	bl	8008cbc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80090d2:	4d15      	ldr	r5, [pc, #84]	; (8009128 <xTaskResumeAll+0xe8>)
 80090d4:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80090d6:	b144      	cbz	r4, 80090ea <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 80090d8:	4e12      	ldr	r6, [pc, #72]	; (8009124 <xTaskResumeAll+0xe4>)
 80090da:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80090dc:	f7ff ff18 	bl	8008f10 <xTaskIncrementTick>
 80090e0:	b100      	cbz	r0, 80090e4 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 80090e2:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80090e4:	3c01      	subs	r4, #1
 80090e6:	d1f9      	bne.n	80090dc <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 80090e8:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80090ea:	4b0e      	ldr	r3, [pc, #56]	; (8009124 <xTaskResumeAll+0xe4>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0bc      	beq.n	800906c <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 80090f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80090f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009106:	2401      	movs	r4, #1
 8009108:	e7b1      	b.n	800906e <xTaskResumeAll+0x2e>
 800910a:	bf00      	nop
 800910c:	200151e4 	.word	0x200151e4
 8009110:	200151d8 	.word	0x200151d8
 8009114:	20015220 	.word	0x20015220
 8009118:	200151ec 	.word	0x200151ec
 800911c:	20014d78 	.word	0x20014d78
 8009120:	20014d6c 	.word	0x20014d6c
 8009124:	20015264 	.word	0x20015264
 8009128:	200151e0 	.word	0x200151e0

0800912c <vTaskDelay>:
	{
 800912c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800912e:	b950      	cbnz	r0, 8009146 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8009130:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009138:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	f3bf 8f6f 	isb	sy
	}
 8009144:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8009146:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <vTaskDelay+0x48>)
 8009148:	6819      	ldr	r1, [r3, #0]
 800914a:	b151      	cbz	r1, 8009162 <vTaskDelay+0x36>
 800914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009150:	b672      	cpsid	i
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	b662      	cpsie	i
 8009160:	e7fe      	b.n	8009160 <vTaskDelay+0x34>
			vTaskSuspendAll();
 8009162:	f7ff fec7 	bl	8008ef4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009166:	f7ff fd71 	bl	8008c4c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800916a:	f7ff ff69 	bl	8009040 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800916e:	2800      	cmp	r0, #0
 8009170:	d0de      	beq.n	8009130 <vTaskDelay+0x4>
 8009172:	e7e7      	b.n	8009144 <vTaskDelay+0x18>
 8009174:	200151e4 	.word	0x200151e4

08009178 <vTaskSetApplicationTaskTag>:
	{
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	460d      	mov	r5, r1
		if( xTask == NULL )
 800917c:	4604      	mov	r4, r0
 800917e:	b908      	cbnz	r0, 8009184 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8009180:	4b04      	ldr	r3, [pc, #16]	; (8009194 <vTaskSetApplicationTaskTag+0x1c>)
 8009182:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8009184:	f7fe fdf6 	bl	8007d74 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8009188:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800918a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800918e:	f7fe be15 	b.w	8007dbc <vPortExitCritical>
 8009192:	bf00      	nop
 8009194:	20014d6c 	.word	0x20014d6c

08009198 <xTaskCallApplicationTaskHook>:
	{
 8009198:	4603      	mov	r3, r0
 800919a:	4608      	mov	r0, r1
		if( xTask == NULL )
 800919c:	b90b      	cbnz	r3, 80091a2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800919e:	4b03      	ldr	r3, [pc, #12]	; (80091ac <xTaskCallApplicationTaskHook+0x14>)
 80091a0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 80091a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a4:	b103      	cbz	r3, 80091a8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 80091a6:	4718      	bx	r3
	}
 80091a8:	4618      	mov	r0, r3
 80091aa:	4770      	bx	lr
 80091ac:	20014d6c 	.word	0x20014d6c

080091b0 <vTaskStartScheduler>:
{
 80091b0:	b510      	push	{r4, lr}
 80091b2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091b4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091b6:	aa07      	add	r2, sp, #28
 80091b8:	a906      	add	r1, sp, #24
 80091ba:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091bc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091c0:	f7fe fc1e 	bl	8007a00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091c4:	9b05      	ldr	r3, [sp, #20]
 80091c6:	9a07      	ldr	r2, [sp, #28]
 80091c8:	9302      	str	r3, [sp, #8]
 80091ca:	9b06      	ldr	r3, [sp, #24]
 80091cc:	491b      	ldr	r1, [pc, #108]	; (800923c <vTaskStartScheduler+0x8c>)
 80091ce:	481c      	ldr	r0, [pc, #112]	; (8009240 <vTaskStartScheduler+0x90>)
 80091d0:	e9cd 4300 	strd	r4, r3, [sp]
 80091d4:	4623      	mov	r3, r4
 80091d6:	f7ff fe22 	bl	8008e1e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80091da:	b360      	cbz	r0, 8009236 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 80091dc:	f000 faa6 	bl	800972c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80091e0:	2801      	cmp	r0, #1
 80091e2:	d11b      	bne.n	800921c <vTaskStartScheduler+0x6c>
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	b672      	cpsid	i
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80091f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091fc:	4b11      	ldr	r3, [pc, #68]	; (8009244 <vTaskStartScheduler+0x94>)
		traceTASK_SWITCHED_IN();
 80091fe:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 8009200:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009202:	4b11      	ldr	r3, [pc, #68]	; (8009248 <vTaskStartScheduler+0x98>)
 8009204:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009206:	4b11      	ldr	r3, [pc, #68]	; (800924c <vTaskStartScheduler+0x9c>)
 8009208:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800920a:	4b11      	ldr	r3, [pc, #68]	; (8009250 <vTaskStartScheduler+0xa0>)
 800920c:	6818      	ldr	r0, [r3, #0]
 800920e:	f7ff ffc3 	bl	8009198 <xTaskCallApplicationTaskHook>
}
 8009212:	b008      	add	sp, #32
 8009214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8009218:	f7fe be46 	b.w	8007ea8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800921c:	3001      	adds	r0, #1
 800921e:	d10a      	bne.n	8009236 <vTaskStartScheduler+0x86>
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	b672      	cpsid	i
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	b662      	cpsie	i
 8009234:	e7fe      	b.n	8009234 <vTaskStartScheduler+0x84>
}
 8009236:	b008      	add	sp, #32
 8009238:	bd10      	pop	{r4, pc}
 800923a:	bf00      	nop
 800923c:	0802de80 	.word	0x0802de80
 8009240:	08008d1d 	.word	0x08008d1d
 8009244:	20015218 	.word	0x20015218
 8009248:	20015234 	.word	0x20015234
 800924c:	20015260 	.word	0x20015260
 8009250:	20014d6c 	.word	0x20014d6c

08009254 <vTaskSwitchContext>:
{
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009256:	4b1d      	ldr	r3, [pc, #116]	; (80092cc <vTaskSwitchContext+0x78>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	4b1d      	ldr	r3, [pc, #116]	; (80092d0 <vTaskSwitchContext+0x7c>)
 800925c:	b112      	cbz	r2, 8009264 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800925e:	2201      	movs	r2, #1
 8009260:	601a      	str	r2, [r3, #0]
}
 8009262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8009264:	4c1b      	ldr	r4, [pc, #108]	; (80092d4 <vTaskSwitchContext+0x80>)
 8009266:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009268:	4e1b      	ldr	r6, [pc, #108]	; (80092d8 <vTaskSwitchContext+0x84>)
 800926a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800926c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800926e:	6820      	ldr	r0, [r4, #0]
 8009270:	f7ff ff92 	bl	8009198 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009274:	6832      	ldr	r2, [r6, #0]
 8009276:	4919      	ldr	r1, [pc, #100]	; (80092dc <vTaskSwitchContext+0x88>)
 8009278:	fb07 f302 	mul.w	r3, r7, r2
 800927c:	58cd      	ldr	r5, [r1, r3]
 800927e:	18c8      	adds	r0, r1, r3
 8009280:	b1ad      	cbz	r5, 80092ae <vTaskSwitchContext+0x5a>
 8009282:	6845      	ldr	r5, [r0, #4]
 8009284:	3308      	adds	r3, #8
 8009286:	686d      	ldr	r5, [r5, #4]
 8009288:	440b      	add	r3, r1
 800928a:	429d      	cmp	r5, r3
 800928c:	6045      	str	r5, [r0, #4]
 800928e:	bf04      	itt	eq
 8009290:	686b      	ldreq	r3, [r5, #4]
 8009292:	6043      	streq	r3, [r0, #4]
 8009294:	2314      	movs	r3, #20
 8009296:	fb03 1102 	mla	r1, r3, r2, r1
 800929a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800929c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 80092a4:	6820      	ldr	r0, [r4, #0]
}
 80092a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 80092aa:	f7ff bf75 	b.w	8009198 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ae:	b952      	cbnz	r2, 80092c6 <vTaskSwitchContext+0x72>
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	b672      	cpsid	i
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	b662      	cpsie	i
 80092c4:	e7fe      	b.n	80092c4 <vTaskSwitchContext+0x70>
 80092c6:	3a01      	subs	r2, #1
 80092c8:	e7d6      	b.n	8009278 <vTaskSwitchContext+0x24>
 80092ca:	bf00      	nop
 80092cc:	200151e4 	.word	0x200151e4
 80092d0:	20015264 	.word	0x20015264
 80092d4:	20014d6c 	.word	0x20014d6c
 80092d8:	200151ec 	.word	0x200151ec
 80092dc:	20014d78 	.word	0x20014d78

080092e0 <vTaskPlaceOnEventList>:
{
 80092e0:	b510      	push	{r4, lr}
 80092e2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80092e4:	b950      	cbnz	r0, 80092fc <vTaskPlaceOnEventList+0x1c>
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	b672      	cpsid	i
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	b662      	cpsie	i
 80092fa:	e7fe      	b.n	80092fa <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092fc:	4b05      	ldr	r3, [pc, #20]	; (8009314 <vTaskPlaceOnEventList+0x34>)
 80092fe:	6819      	ldr	r1, [r3, #0]
 8009300:	3118      	adds	r1, #24
 8009302:	f7fe fca5 	bl	8007c50 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009306:	4620      	mov	r0, r4
 8009308:	2101      	movs	r1, #1
}
 800930a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800930e:	f7ff bc9d 	b.w	8008c4c <prvAddCurrentTaskToDelayedList>
 8009312:	bf00      	nop
 8009314:	20014d6c 	.word	0x20014d6c

08009318 <vTaskPlaceOnEventListRestricted>:
	{
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	460d      	mov	r5, r1
 800931c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800931e:	b950      	cbnz	r0, 8009336 <vTaskPlaceOnEventListRestricted+0x1e>
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	b672      	cpsid	i
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	b662      	cpsie	i
 8009334:	e7fe      	b.n	8009334 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009336:	4b07      	ldr	r3, [pc, #28]	; (8009354 <vTaskPlaceOnEventListRestricted+0x3c>)
 8009338:	6819      	ldr	r1, [r3, #0]
 800933a:	3118      	adds	r1, #24
 800933c:	f7fe fc7c 	bl	8007c38 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8009340:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009342:	4621      	mov	r1, r4
 8009344:	bf0c      	ite	eq
 8009346:	4628      	moveq	r0, r5
 8009348:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
	}
 800934c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009350:	f7ff bc7c 	b.w	8008c4c <prvAddCurrentTaskToDelayedList>
 8009354:	20014d6c 	.word	0x20014d6c

08009358 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009358:	68c3      	ldr	r3, [r0, #12]
{
 800935a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800935c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800935e:	b954      	cbnz	r4, 8009376 <xTaskRemoveFromEventList+0x1e>
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	b672      	cpsid	i
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	b662      	cpsie	i
 8009374:	e7fe      	b.n	8009374 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009376:	f104 0118 	add.w	r1, r4, #24
 800937a:	4608      	mov	r0, r1
 800937c:	9101      	str	r1, [sp, #4]
 800937e:	f7fe fc7e 	bl	8007c7e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009382:	4b12      	ldr	r3, [pc, #72]	; (80093cc <xTaskRemoveFromEventList+0x74>)
 8009384:	9901      	ldr	r1, [sp, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	b9e3      	cbnz	r3, 80093c4 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800938a:	1d21      	adds	r1, r4, #4
 800938c:	4608      	mov	r0, r1
 800938e:	9101      	str	r1, [sp, #4]
 8009390:	f7fe fc75 	bl	8007c7e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009394:	4a0e      	ldr	r2, [pc, #56]	; (80093d0 <xTaskRemoveFromEventList+0x78>)
 8009396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009398:	6810      	ldr	r0, [r2, #0]
 800939a:	9901      	ldr	r1, [sp, #4]
 800939c:	4283      	cmp	r3, r0
 800939e:	d900      	bls.n	80093a2 <xTaskRemoveFromEventList+0x4a>
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	4a0c      	ldr	r2, [pc, #48]	; (80093d4 <xTaskRemoveFromEventList+0x7c>)
 80093a4:	2014      	movs	r0, #20
 80093a6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093aa:	f7fe fc45 	bl	8007c38 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093ae:	4b0a      	ldr	r3, [pc, #40]	; (80093d8 <xTaskRemoveFromEventList+0x80>)
 80093b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d906      	bls.n	80093c8 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 80093ba:	2001      	movs	r0, #1
 80093bc:	4b07      	ldr	r3, [pc, #28]	; (80093dc <xTaskRemoveFromEventList+0x84>)
 80093be:	6018      	str	r0, [r3, #0]
}
 80093c0:	b002      	add	sp, #8
 80093c2:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093c4:	4806      	ldr	r0, [pc, #24]	; (80093e0 <xTaskRemoveFromEventList+0x88>)
 80093c6:	e7f0      	b.n	80093aa <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 80093c8:	2000      	movs	r0, #0
	return xReturn;
 80093ca:	e7f9      	b.n	80093c0 <xTaskRemoveFromEventList+0x68>
 80093cc:	200151e4 	.word	0x200151e4
 80093d0:	200151ec 	.word	0x200151ec
 80093d4:	20014d78 	.word	0x20014d78
 80093d8:	20014d6c 	.word	0x20014d6c
 80093dc:	20015264 	.word	0x20015264
 80093e0:	20015220 	.word	0x20015220

080093e4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093e4:	4b03      	ldr	r3, [pc, #12]	; (80093f4 <vTaskInternalSetTimeOutState+0x10>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093ea:	4b03      	ldr	r3, [pc, #12]	; (80093f8 <vTaskInternalSetTimeOutState+0x14>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6043      	str	r3, [r0, #4]
}
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	2001521c 	.word	0x2001521c
 80093f8:	20015260 	.word	0x20015260

080093fc <xTaskCheckForTimeOut>:
{
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009400:	4605      	mov	r5, r0
 8009402:	b950      	cbnz	r0, 800941a <xTaskCheckForTimeOut+0x1e>
 8009404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009408:	b672      	cpsid	i
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	b662      	cpsie	i
 8009418:	e7fe      	b.n	8009418 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800941a:	b951      	cbnz	r1, 8009432 <xTaskCheckForTimeOut+0x36>
 800941c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009420:	b672      	cpsid	i
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	b662      	cpsie	i
 8009430:	e7fe      	b.n	8009430 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8009432:	f7fe fc9f 	bl	8007d74 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009436:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <xTaskCheckForTimeOut+0x78>)
 8009438:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	d010      	beq.n	8009462 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009440:	480d      	ldr	r0, [pc, #52]	; (8009478 <xTaskCheckForTimeOut+0x7c>)
 8009442:	682e      	ldr	r6, [r5, #0]
 8009444:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009446:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009448:	4286      	cmp	r6, r0
 800944a:	d001      	beq.n	8009450 <xTaskCheckForTimeOut+0x54>
 800944c:	428a      	cmp	r2, r1
 800944e:	d90f      	bls.n	8009470 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009450:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009452:	4283      	cmp	r3, r0
 8009454:	d90a      	bls.n	800946c <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8009456:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009458:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800945a:	4413      	add	r3, r2
 800945c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800945e:	f7ff ffc1 	bl	80093e4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8009462:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009464:	f7fe fcaa 	bl	8007dbc <vPortExitCritical>
}
 8009468:	4620      	mov	r0, r4
 800946a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009470:	2401      	movs	r4, #1
 8009472:	e7f7      	b.n	8009464 <xTaskCheckForTimeOut+0x68>
 8009474:	20015260 	.word	0x20015260
 8009478:	2001521c 	.word	0x2001521c

0800947c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800947c:	4b01      	ldr	r3, [pc, #4]	; (8009484 <vTaskMissedYield+0x8>)
 800947e:	2201      	movs	r2, #1
 8009480:	601a      	str	r2, [r3, #0]
}
 8009482:	4770      	bx	lr
 8009484:	20015264 	.word	0x20015264

08009488 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8009488:	4b01      	ldr	r3, [pc, #4]	; (8009490 <xTaskGetCurrentTaskHandle+0x8>)
 800948a:	6818      	ldr	r0, [r3, #0]
	}
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	20014d6c 	.word	0x20014d6c

08009494 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009494:	4b05      	ldr	r3, [pc, #20]	; (80094ac <xTaskGetSchedulerState+0x18>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	b133      	cbz	r3, 80094a8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800949a:	4b05      	ldr	r3, [pc, #20]	; (80094b0 <xTaskGetSchedulerState+0x1c>)
 800949c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bf0c      	ite	eq
 80094a2:	2002      	moveq	r0, #2
 80094a4:	2000      	movne	r0, #0
 80094a6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094a8:	2001      	movs	r0, #1
	}
 80094aa:	4770      	bx	lr
 80094ac:	20015234 	.word	0x20015234
 80094b0:	200151e4 	.word	0x200151e4

080094b4 <xTaskPriorityInherit>:
	{
 80094b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80094b6:	4604      	mov	r4, r0
 80094b8:	b340      	cbz	r0, 800950c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80094ba:	4d1b      	ldr	r5, [pc, #108]	; (8009528 <xTaskPriorityInherit+0x74>)
 80094bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80094be:	682a      	ldr	r2, [r5, #0]
 80094c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d228      	bcs.n	8009518 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094c6:	6982      	ldr	r2, [r0, #24]
 80094c8:	2a00      	cmp	r2, #0
 80094ca:	db04      	blt.n	80094d6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094cc:	682a      	ldr	r2, [r5, #0]
 80094ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80094d0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80094d4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80094d6:	2214      	movs	r2, #20
 80094d8:	4e14      	ldr	r6, [pc, #80]	; (800952c <xTaskPriorityInherit+0x78>)
 80094da:	fb02 6303 	mla	r3, r2, r3, r6
 80094de:	6962      	ldr	r2, [r4, #20]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d115      	bne.n	8009510 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094e4:	1d21      	adds	r1, r4, #4
 80094e6:	4608      	mov	r0, r1
 80094e8:	9101      	str	r1, [sp, #4]
 80094ea:	f7fe fbc8 	bl	8007c7e <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094ee:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094f0:	4a0f      	ldr	r2, [pc, #60]	; (8009530 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094f4:	6810      	ldr	r0, [r2, #0]
 80094f6:	9901      	ldr	r1, [sp, #4]
 80094f8:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094fa:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094fc:	d900      	bls.n	8009500 <xTaskPriorityInherit+0x4c>
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	2014      	movs	r0, #20
 8009502:	fb00 6003 	mla	r0, r0, r3, r6
 8009506:	f7fe fb97 	bl	8007c38 <vListInsertEnd>
				xReturn = pdTRUE;
 800950a:	2001      	movs	r0, #1
	}
 800950c:	b002      	add	sp, #8
 800950e:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009516:	e7f8      	b.n	800950a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800951c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800951e:	42a0      	cmp	r0, r4
 8009520:	bf2c      	ite	cs
 8009522:	2000      	movcs	r0, #0
 8009524:	2001      	movcc	r0, #1
 8009526:	e7f1      	b.n	800950c <xTaskPriorityInherit+0x58>
 8009528:	20014d6c 	.word	0x20014d6c
 800952c:	20014d78 	.word	0x20014d78
 8009530:	200151ec 	.word	0x200151ec

08009534 <xTaskPriorityDisinherit>:
	{
 8009534:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8009536:	b910      	cbnz	r0, 800953e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8009538:	2000      	movs	r0, #0
	}
 800953a:	b002      	add	sp, #8
 800953c:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800953e:	4b1e      	ldr	r3, [pc, #120]	; (80095b8 <xTaskPriorityDisinherit+0x84>)
 8009540:	681c      	ldr	r4, [r3, #0]
 8009542:	4284      	cmp	r4, r0
 8009544:	d00a      	beq.n	800955c <xTaskPriorityDisinherit+0x28>
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	b672      	cpsid	i
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	b662      	cpsie	i
 800955a:	e7fe      	b.n	800955a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800955c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800955e:	b953      	cbnz	r3, 8009576 <xTaskPriorityDisinherit+0x42>
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	b672      	cpsid	i
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	b662      	cpsie	i
 8009574:	e7fe      	b.n	8009574 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009576:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8009578:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800957a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800957c:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800957e:	4291      	cmp	r1, r2
 8009580:	d0da      	beq.n	8009538 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1d8      	bne.n	8009538 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009586:	1d21      	adds	r1, r4, #4
 8009588:	4608      	mov	r0, r1
 800958a:	9101      	str	r1, [sp, #4]
 800958c:	f7fe fb77 	bl	8007c7e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009590:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8009592:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009594:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009598:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800959a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800959c:	4a07      	ldr	r2, [pc, #28]	; (80095bc <xTaskPriorityDisinherit+0x88>)
 800959e:	6810      	ldr	r0, [r2, #0]
 80095a0:	4283      	cmp	r3, r0
 80095a2:	d900      	bls.n	80095a6 <xTaskPriorityDisinherit+0x72>
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	4a06      	ldr	r2, [pc, #24]	; (80095c0 <xTaskPriorityDisinherit+0x8c>)
 80095a8:	2014      	movs	r0, #20
 80095aa:	fb00 2003 	mla	r0, r0, r3, r2
 80095ae:	f7fe fb43 	bl	8007c38 <vListInsertEnd>
					xReturn = pdTRUE;
 80095b2:	2001      	movs	r0, #1
		return xReturn;
 80095b4:	e7c1      	b.n	800953a <xTaskPriorityDisinherit+0x6>
 80095b6:	bf00      	nop
 80095b8:	20014d6c 	.word	0x20014d6c
 80095bc:	200151ec 	.word	0x200151ec
 80095c0:	20014d78 	.word	0x20014d78

080095c4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80095c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80095c6:	4604      	mov	r4, r0
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d048      	beq.n	800965e <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 80095cc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80095ce:	b952      	cbnz	r2, 80095e6 <vTaskPriorityDisinheritAfterTimeout+0x22>
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	b672      	cpsid	i
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	b662      	cpsie	i
 80095e4:	e7fe      	b.n	80095e4 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80095e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80095e8:	4299      	cmp	r1, r3
 80095ea:	bf38      	it	cc
 80095ec:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80095ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80095f0:	428b      	cmp	r3, r1
 80095f2:	d034      	beq.n	800965e <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80095f4:	2a01      	cmp	r2, #1
 80095f6:	d132      	bne.n	800965e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 80095f8:	4a1a      	ldr	r2, [pc, #104]	; (8009664 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 80095fa:	6812      	ldr	r2, [r2, #0]
 80095fc:	4282      	cmp	r2, r0
 80095fe:	d10a      	bne.n	8009616 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	b672      	cpsid	i
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	b662      	cpsie	i
 8009614:	e7fe      	b.n	8009614 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009616:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009618:	4d13      	ldr	r5, [pc, #76]	; (8009668 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800961a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800961c:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8009620:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009622:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009626:	bfa8      	it	ge
 8009628:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800962c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800962e:	bfa8      	it	ge
 8009630:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009632:	429a      	cmp	r2, r3
 8009634:	d113      	bne.n	800965e <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009636:	1d01      	adds	r1, r0, #4
 8009638:	4608      	mov	r0, r1
 800963a:	9101      	str	r1, [sp, #4]
 800963c:	f7fe fb1f 	bl	8007c7e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8009640:	4a0a      	ldr	r2, [pc, #40]	; (800966c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8009642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009644:	6810      	ldr	r0, [r2, #0]
 8009646:	9901      	ldr	r1, [sp, #4]
 8009648:	4283      	cmp	r3, r0
 800964a:	d900      	bls.n	800964e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	2014      	movs	r0, #20
 8009650:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8009654:	b003      	add	sp, #12
 8009656:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800965a:	f7fe baed 	b.w	8007c38 <vListInsertEnd>
	}
 800965e:	b003      	add	sp, #12
 8009660:	bd30      	pop	{r4, r5, pc}
 8009662:	bf00      	nop
 8009664:	20014d6c 	.word	0x20014d6c
 8009668:	20014d78 	.word	0x20014d78
 800966c:	200151ec 	.word	0x200151ec

08009670 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009670:	4b04      	ldr	r3, [pc, #16]	; (8009684 <pvTaskIncrementMutexHeldCount+0x14>)
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	b11a      	cbz	r2, 800967e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009676:	6819      	ldr	r1, [r3, #0]
 8009678:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800967a:	3201      	adds	r2, #1
 800967c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800967e:	6818      	ldr	r0, [r3, #0]
	}
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	20014d6c 	.word	0x20014d6c

08009688 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800968a:	4c11      	ldr	r4, [pc, #68]	; (80096d0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800968c:	f7fe fb72 	bl	8007d74 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009690:	6825      	ldr	r5, [r4, #0]
 8009692:	b9bd      	cbnz	r5, 80096c4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009694:	4f0f      	ldr	r7, [pc, #60]	; (80096d4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8009696:	4e10      	ldr	r6, [pc, #64]	; (80096d8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009698:	4638      	mov	r0, r7
 800969a:	f7fe fabf 	bl	8007c1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800969e:	4630      	mov	r0, r6
 80096a0:	f7fe fabc 	bl	8007c1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096a4:	4b0d      	ldr	r3, [pc, #52]	; (80096dc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096a6:	4a0e      	ldr	r2, [pc, #56]	; (80096e0 <prvCheckForValidListAndQueue+0x58>)
 80096a8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80096aa:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096ac:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80096ae:	4b0d      	ldr	r3, [pc, #52]	; (80096e4 <prvCheckForValidListAndQueue+0x5c>)
 80096b0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096b2:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <prvCheckForValidListAndQueue+0x60>)
 80096b4:	9500      	str	r5, [sp, #0]
 80096b6:	f7fe fda9 	bl	800820c <xQueueGenericCreateStatic>
 80096ba:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096bc:	b110      	cbz	r0, 80096c4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096be:	490b      	ldr	r1, [pc, #44]	; (80096ec <prvCheckForValidListAndQueue+0x64>)
 80096c0:	f7ff f9e4 	bl	8008a8c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80096c4:	b003      	add	sp, #12
 80096c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80096ca:	f7fe bb77 	b.w	8007dbc <vPortExitCritical>
 80096ce:	bf00      	nop
 80096d0:	2001538c 	.word	0x2001538c
 80096d4:	20015310 	.word	0x20015310
 80096d8:	20015324 	.word	0x20015324
 80096dc:	20015268 	.word	0x20015268
 80096e0:	20015270 	.word	0x20015270
 80096e4:	2001526c 	.word	0x2001526c
 80096e8:	2001533c 	.word	0x2001533c
 80096ec:	0802de85 	.word	0x0802de85

080096f0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80096f0:	4291      	cmp	r1, r2
{
 80096f2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096f4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096f6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80096f8:	d80a      	bhi.n	8009710 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096fa:	1ad2      	subs	r2, r2, r3
 80096fc:	6983      	ldr	r3, [r0, #24]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d20d      	bcs.n	800971e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009702:	1d01      	adds	r1, r0, #4
 8009704:	4b07      	ldr	r3, [pc, #28]	; (8009724 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009706:	6818      	ldr	r0, [r3, #0]
 8009708:	f7fe faa2 	bl	8007c50 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800970c:	2000      	movs	r0, #0
}
 800970e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009710:	429a      	cmp	r2, r3
 8009712:	d201      	bcs.n	8009718 <prvInsertTimerInActiveList+0x28>
 8009714:	4299      	cmp	r1, r3
 8009716:	d202      	bcs.n	800971e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009718:	1d01      	adds	r1, r0, #4
 800971a:	4b03      	ldr	r3, [pc, #12]	; (8009728 <prvInsertTimerInActiveList+0x38>)
 800971c:	e7f3      	b.n	8009706 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800971e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009720:	e7f5      	b.n	800970e <prvInsertTimerInActiveList+0x1e>
 8009722:	bf00      	nop
 8009724:	2001526c 	.word	0x2001526c
 8009728:	20015268 	.word	0x20015268

0800972c <xTimerCreateTimerTask>:
{
 800972c:	b510      	push	{r4, lr}
 800972e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009730:	f7ff ffaa 	bl	8009688 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009734:	4b13      	ldr	r3, [pc, #76]	; (8009784 <xTimerCreateTimerTask+0x58>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	b1b3      	cbz	r3, 8009768 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800973a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800973c:	aa07      	add	r2, sp, #28
 800973e:	a906      	add	r1, sp, #24
 8009740:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009742:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009746:	f7fe f967 	bl	8007a18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800974a:	9b05      	ldr	r3, [sp, #20]
 800974c:	9a07      	ldr	r2, [sp, #28]
 800974e:	9302      	str	r3, [sp, #8]
 8009750:	9b06      	ldr	r3, [sp, #24]
 8009752:	490d      	ldr	r1, [pc, #52]	; (8009788 <xTimerCreateTimerTask+0x5c>)
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	2302      	movs	r3, #2
 8009758:	480c      	ldr	r0, [pc, #48]	; (800978c <xTimerCreateTimerTask+0x60>)
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	4623      	mov	r3, r4
 800975e:	f7ff fb5e 	bl	8008e1e <xTaskCreateStatic>
 8009762:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <xTimerCreateTimerTask+0x64>)
 8009764:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009766:	b950      	cbnz	r0, 800977e <xTimerCreateTimerTask+0x52>
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	b672      	cpsid	i
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	b662      	cpsie	i
	configASSERT( xReturn );
 800977c:	e7fe      	b.n	800977c <xTimerCreateTimerTask+0x50>
}
 800977e:	2001      	movs	r0, #1
 8009780:	b008      	add	sp, #32
 8009782:	bd10      	pop	{r4, pc}
 8009784:	2001538c 	.word	0x2001538c
 8009788:	0802de8a 	.word	0x0802de8a
 800978c:	0800989d 	.word	0x0800989d
 8009790:	20015390 	.word	0x20015390

08009794 <xTimerGenericCommand>:
{
 8009794:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009796:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009798:	4604      	mov	r4, r0
{
 800979a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800979c:	b950      	cbnz	r0, 80097b4 <xTimerGenericCommand+0x20>
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	b672      	cpsid	i
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	b662      	cpsie	i
 80097b2:	e7fe      	b.n	80097b2 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 80097b4:	4d0c      	ldr	r5, [pc, #48]	; (80097e8 <xTimerGenericCommand+0x54>)
 80097b6:	6828      	ldr	r0, [r5, #0]
 80097b8:	b178      	cbz	r0, 80097da <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097ba:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097bc:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097be:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097c2:	dc0c      	bgt.n	80097de <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097c4:	f7ff fe66 	bl	8009494 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097c8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097ca:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097cc:	4669      	mov	r1, sp
 80097ce:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097d0:	bf0c      	ite	eq
 80097d2:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097d4:	461a      	movne	r2, r3
 80097d6:	f7fe fd9e 	bl	8008316 <xQueueGenericSend>
}
 80097da:	b004      	add	sp, #16
 80097dc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80097de:	2300      	movs	r3, #0
 80097e0:	4669      	mov	r1, sp
 80097e2:	f7fe fea5 	bl	8008530 <xQueueGenericSendFromISR>
 80097e6:	e7f8      	b.n	80097da <xTimerGenericCommand+0x46>
 80097e8:	2001538c 	.word	0x2001538c

080097ec <prvSampleTimeNow>:
{
 80097ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 80097f0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8009898 <prvSampleTimeNow+0xac>
{
 80097f4:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80097f6:	f7ff fb85 	bl	8008f04 <xTaskGetTickCount>
 80097fa:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80097fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009800:	4283      	cmp	r3, r0
 8009802:	d942      	bls.n	800988a <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009804:	4f22      	ldr	r7, [pc, #136]	; (8009890 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009806:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	b95a      	cbnz	r2, 8009828 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009810:	4a20      	ldr	r2, [pc, #128]	; (8009894 <prvSampleTimeNow+0xa8>)
 8009812:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009814:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8009816:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8009818:	6039      	str	r1, [r7, #0]
}
 800981a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800981c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800981e:	f8c8 5000 	str.w	r5, [r8]
}
 8009822:	b004      	add	sp, #16
 8009824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009828:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800982a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800982c:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009830:	1d21      	adds	r1, r4, #4
 8009832:	4608      	mov	r0, r1
 8009834:	9103      	str	r1, [sp, #12]
 8009836:	f7fe fa22 	bl	8007c7e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800983a:	6a23      	ldr	r3, [r4, #32]
 800983c:	4620      	mov	r0, r4
 800983e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009840:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009844:	9903      	ldr	r1, [sp, #12]
 8009846:	f013 0f04 	tst.w	r3, #4
 800984a:	d0de      	beq.n	800980a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800984c:	69a3      	ldr	r3, [r4, #24]
 800984e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8009850:	459a      	cmp	sl, r3
 8009852:	d205      	bcs.n	8009860 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009854:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009856:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009858:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800985a:	f7fe f9f9 	bl	8007c50 <vListInsert>
 800985e:	e7d4      	b.n	800980a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009860:	2300      	movs	r3, #0
 8009862:	4652      	mov	r2, sl
 8009864:	4620      	mov	r0, r4
 8009866:	f8cd 9000 	str.w	r9, [sp]
 800986a:	4619      	mov	r1, r3
 800986c:	f7ff ff92 	bl	8009794 <xTimerGenericCommand>
				configASSERT( xResult );
 8009870:	2800      	cmp	r0, #0
 8009872:	d1ca      	bne.n	800980a <prvSampleTimeNow+0x1e>
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	b672      	cpsid	i
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	b662      	cpsie	i
 8009888:	e7fe      	b.n	8009888 <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800988a:	2300      	movs	r3, #0
 800988c:	e7c5      	b.n	800981a <prvSampleTimeNow+0x2e>
 800988e:	bf00      	nop
 8009890:	20015268 	.word	0x20015268
 8009894:	2001526c 	.word	0x2001526c
 8009898:	20015338 	.word	0x20015338

0800989c <prvTimerTask>:
{
 800989c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098a0:	4d71      	ldr	r5, [pc, #452]	; (8009a68 <prvTimerTask+0x1cc>)
{
 80098a2:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098a4:	4e71      	ldr	r6, [pc, #452]	; (8009a6c <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098a6:	682b      	ldr	r3, [r5, #0]
 80098a8:	f8d3 8000 	ldr.w	r8, [r3]
 80098ac:	f1b8 0f00 	cmp.w	r8, #0
 80098b0:	d037      	beq.n	8009922 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098b2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098b4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098b6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80098ba:	f7ff fb1b 	bl	8008ef4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098be:	a804      	add	r0, sp, #16
 80098c0:	f7ff ff94 	bl	80097ec <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80098c4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098c6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d16b      	bne.n	80099a4 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80098cc:	2c00      	cmp	r4, #0
 80098ce:	d14e      	bne.n	800996e <prvTimerTask+0xd2>
 80098d0:	4540      	cmp	r0, r8
 80098d2:	d352      	bcc.n	800997a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 80098d4:	f7ff fbb4 	bl	8009040 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098de:	1d38      	adds	r0, r7, #4
 80098e0:	f7fe f9cd 	bl	8007c7e <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80098e8:	0758      	lsls	r0, r3, #29
 80098ea:	d51c      	bpl.n	8009926 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098ec:	69b9      	ldr	r1, [r7, #24]
 80098ee:	4643      	mov	r3, r8
 80098f0:	464a      	mov	r2, r9
 80098f2:	4638      	mov	r0, r7
 80098f4:	4441      	add	r1, r8
 80098f6:	f7ff fefb 	bl	80096f0 <prvInsertTimerInActiveList>
 80098fa:	b1c0      	cbz	r0, 800992e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098fc:	4623      	mov	r3, r4
 80098fe:	4642      	mov	r2, r8
 8009900:	4621      	mov	r1, r4
 8009902:	4638      	mov	r0, r7
 8009904:	9400      	str	r4, [sp, #0]
 8009906:	f7ff ff45 	bl	8009794 <xTimerGenericCommand>
			configASSERT( xResult );
 800990a:	b980      	cbnz	r0, 800992e <prvTimerTask+0x92>
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	b672      	cpsid	i
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	b662      	cpsie	i
 8009920:	e7fe      	b.n	8009920 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009922:	2401      	movs	r4, #1
 8009924:	e7c9      	b.n	80098ba <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009926:	f023 0301 	bic.w	r3, r3, #1
 800992a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	4638      	mov	r0, r7
 8009932:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009934:	2200      	movs	r2, #0
 8009936:	a904      	add	r1, sp, #16
 8009938:	6830      	ldr	r0, [r6, #0]
 800993a:	f7fe febe 	bl	80086ba <xQueueReceive>
 800993e:	2800      	cmp	r0, #0
 8009940:	d0b1      	beq.n	80098a6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009942:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009944:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009946:	2b00      	cmp	r3, #0
 8009948:	db2f      	blt.n	80099aa <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800994a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800994c:	6963      	ldr	r3, [r4, #20]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d132      	bne.n	80099b8 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009952:	a803      	add	r0, sp, #12
 8009954:	f7ff ff4a 	bl	80097ec <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009958:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800995a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800995c:	2b09      	cmp	r3, #9
 800995e:	d8e9      	bhi.n	8009934 <prvTimerTask+0x98>
 8009960:	e8df f003 	tbb	[pc, r3]
 8009964:	592e2e2e 	.word	0x592e2e2e
 8009968:	2e2e7a60 	.word	0x2e2e7a60
 800996c:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800996e:	4b40      	ldr	r3, [pc, #256]	; (8009a70 <prvTimerTask+0x1d4>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681c      	ldr	r4, [r3, #0]
 8009974:	fab4 f484 	clz	r4, r4
 8009978:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800997a:	4622      	mov	r2, r4
 800997c:	eba8 0109 	sub.w	r1, r8, r9
 8009980:	6830      	ldr	r0, [r6, #0]
 8009982:	f7ff f8c2 	bl	8008b0a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009986:	f7ff fb5b 	bl	8009040 <xTaskResumeAll>
 800998a:	2800      	cmp	r0, #0
 800998c:	d1d2      	bne.n	8009934 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800998e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009996:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	e7c7      	b.n	8009934 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 80099a4:	f7ff fb4c 	bl	8009040 <xTaskResumeAll>
}
 80099a8:	e7c4      	b.n	8009934 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099aa:	9b05      	ldr	r3, [sp, #20]
 80099ac:	9907      	ldr	r1, [sp, #28]
 80099ae:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099b0:	9b04      	ldr	r3, [sp, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	dbbe      	blt.n	8009934 <prvTimerTask+0x98>
 80099b6:	e7c8      	b.n	800994a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b8:	1d20      	adds	r0, r4, #4
 80099ba:	f7fe f960 	bl	8007c7e <uxListRemove>
 80099be:	e7c8      	b.n	8009952 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099c4:	4620      	mov	r0, r4
 80099c6:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099c8:	f043 0301 	orr.w	r3, r3, #1
 80099cc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099d0:	9b05      	ldr	r3, [sp, #20]
 80099d2:	4419      	add	r1, r3
 80099d4:	f7ff fe8c 	bl	80096f0 <prvInsertTimerInActiveList>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d0ab      	beq.n	8009934 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099dc:	6a23      	ldr	r3, [r4, #32]
 80099de:	4620      	mov	r0, r4
 80099e0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099e2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80099e6:	0759      	lsls	r1, r3, #29
 80099e8:	d5a4      	bpl.n	8009934 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099ea:	69a2      	ldr	r2, [r4, #24]
 80099ec:	2300      	movs	r3, #0
 80099ee:	9905      	ldr	r1, [sp, #20]
 80099f0:	4620      	mov	r0, r4
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	440a      	add	r2, r1
 80099f6:	4619      	mov	r1, r3
 80099f8:	f7ff fecc 	bl	8009794 <xTimerGenericCommand>
							configASSERT( xResult );
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d199      	bne.n	8009934 <prvTimerTask+0x98>
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	b672      	cpsid	i
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	b662      	cpsie	i
 8009a14:	e7fe      	b.n	8009a14 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a16:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a1a:	f023 0301 	bic.w	r3, r3, #1
 8009a1e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009a22:	e787      	b.n	8009934 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a24:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009a28:	f043 0301 	orr.w	r3, r3, #1
 8009a2c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a30:	9905      	ldr	r1, [sp, #20]
 8009a32:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a34:	b951      	cbnz	r1, 8009a4c <prvTimerTask+0x1b0>
 8009a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3a:	b672      	cpsid	i
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	b662      	cpsie	i
 8009a4a:	e7fe      	b.n	8009a4a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	4401      	add	r1, r0
 8009a50:	4620      	mov	r0, r4
 8009a52:	f7ff fe4d 	bl	80096f0 <prvInsertTimerInActiveList>
					break;
 8009a56:	e76d      	b.n	8009934 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a58:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009a5c:	079a      	lsls	r2, r3, #30
 8009a5e:	d4dc      	bmi.n	8009a1a <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 8009a60:	4620      	mov	r0, r4
 8009a62:	f7fe f89f 	bl	8007ba4 <vPortFree>
 8009a66:	e765      	b.n	8009934 <prvTimerTask+0x98>
 8009a68:	20015268 	.word	0x20015268
 8009a6c:	2001538c 	.word	0x2001538c
 8009a70:	2001526c 	.word	0x2001526c

08009a74 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8009a74:	6843      	ldr	r3, [r0, #4]
{
 8009a76:	b510      	push	{r4, lr}
 8009a78:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 8009a7a:	b14b      	cbz	r3, 8009a90 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	2101      	movs	r1, #1
 8009a80:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8009a82:	6923      	ldr	r3, [r4, #16]
 8009a84:	b12b      	cbz	r3, 8009a92 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 8009a86:	23c8      	movs	r3, #200	; 0xc8
 8009a88:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 8009a90:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 8009a92:	2364      	movs	r3, #100	; 0x64
 8009a94:	6163      	str	r3, [r4, #20]
 8009a96:	e7fb      	b.n	8009a90 <jpeg_abort+0x1c>

08009a98 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 8009a98:	6843      	ldr	r3, [r0, #4]
{
 8009a9a:	b510      	push	{r4, lr}
 8009a9c:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 8009a9e:	b10b      	cbz	r3, 8009aa4 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa2:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 8009aa8:	6163      	str	r3, [r4, #20]
}
 8009aaa:	bd10      	pop	{r4, pc}

08009aac <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 8009aac:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 8009aae:	6843      	ldr	r3, [r0, #4]
 8009ab0:	2284      	movs	r2, #132	; 0x84
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 8009abe:	bd08      	pop	{r3, pc}

08009ac0 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8009ac0:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 8009ac2:	6843      	ldr	r3, [r0, #4]
 8009ac4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009ac8:	2100      	movs	r1, #0
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 8009ad4:	bd08      	pop	{r3, pc}

08009ad6 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009ad6:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 8009ad8:	2950      	cmp	r1, #80	; 0x50
{
 8009ada:	b570      	push	{r4, r5, r6, lr}
 8009adc:	4604      	mov	r4, r0
 8009ade:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009ae0:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 8009ae2:	d007      	beq.n	8009af4 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 8009ae4:	6803      	ldr	r3, [r0, #0]
 8009ae6:	260d      	movs	r6, #13
 8009ae8:	2250      	movs	r2, #80	; 0x50
 8009aea:	61d9      	str	r1, [r3, #28]
 8009aec:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 8009af4:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 8009af8:	d009      	beq.n	8009b0e <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	2116      	movs	r1, #22
 8009afe:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009b02:	4620      	mov	r0, r4
 8009b04:	61dd      	str	r5, [r3, #28]
 8009b06:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 8009b0e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009b12:	2100      	movs	r1, #0
 8009b14:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 8009b16:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8009b18:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 8009b1a:	f020 fe2b 	bl	802a774 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 8009b1e:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009b20:	4620      	mov	r0, r4
    cinfo->err = err;
 8009b22:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 8009b24:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 8009b26:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009b28:	f00b feac 	bl	8015884 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 8009b2c:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 8009b2e:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 8009b30:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 8009b32:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009b34:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009b38:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009b3c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009b40:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009b44:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009b48:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009b4c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009b50:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 8009b54:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 8009b58:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8009b5c:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 8009b60:	f005 f8ba 	bl	800ecd8 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 8009b64:	4620      	mov	r0, r4
 8009b66:	f003 fdbd 	bl	800d6e4 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 8009b6a:	23c8      	movs	r3, #200	; 0xc8
 8009b6c:	6163      	str	r3, [r4, #20]
}
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}

08009b70 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8009b70:	f7ff bf92 	b.w	8009a98 <jpeg_destroy>

08009b74 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8009b74:	6942      	ldr	r2, [r0, #20]
 8009b76:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 8009b7a:	b570      	push	{r4, r5, r6, lr}
 8009b7c:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 8009b7e:	2b0a      	cmp	r3, #10
 8009b80:	f200 80a5 	bhi.w	8009cce <jpeg_consume_input+0x15a>
 8009b84:	e8df f003 	tbb	[pc, r3]
 8009b88:	9dab1006 	.word	0x9dab1006
 8009b8c:	9d9d9d9d 	.word	0x9d9d9d9d
 8009b90:	a39d      	.short	0xa39d
 8009b92:	9d          	.byte	0x9d
 8009b93:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 8009b94:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 8009b9c:	69a3      	ldr	r3, [r4, #24]
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 8009ba4:	23c9      	movs	r3, #201	; 0xc9
 8009ba6:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009ba8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009bac:	4620      	mov	r0, r4
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8009bb2:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009bb4:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8009bb6:	d146      	bne.n	8009c46 <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 8009bb8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009bba:	2d03      	cmp	r5, #3
 8009bbc:	d007      	beq.n	8009bce <jpeg_consume_input+0x5a>
 8009bbe:	2d04      	cmp	r5, #4
 8009bc0:	d064      	beq.n	8009c8c <jpeg_consume_input+0x118>
 8009bc2:	2d01      	cmp	r5, #1
 8009bc4:	d17b      	bne.n	8009cbe <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 8009bc6:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8009bca:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 8009bcc:	e01c      	b.n	8009c08 <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 8009bce:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8009bd2:	b10b      	cbz	r3, 8009bd8 <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e056      	b.n	8009c86 <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 8009bd8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d034      	beq.n	8009c4a <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 8009be0:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009be4:	2a00      	cmp	r2, #0
 8009be6:	d04d      	beq.n	8009c84 <jpeg_consume_input+0x110>
 8009be8:	2a01      	cmp	r2, #1
 8009bea:	d008      	beq.n	8009bfe <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	2174      	movs	r1, #116	; 0x74
 8009bf0:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009bf2:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009bfc:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009bfe:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 8009c02:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 8009c04:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 8009c08:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 8009c0c:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 8009c0e:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 8009c10:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 8009c14:	4b33      	ldr	r3, [pc, #204]	; (8009ce4 <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 8009c16:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 8009c1a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 8009c1e:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 8009c20:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 8009c22:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 8009c26:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 8009c2a:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 8009c2c:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 8009c2e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 8009c32:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 8009c34:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 8009c38:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 8009c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8009c40:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 8009c42:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 8009c44:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 8009c46:	4630      	mov	r0, r6
 8009c48:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 8009c4a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8009c4e:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 8009c50:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009c52:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 8009c54:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009c58:	d10e      	bne.n	8009c78 <jpeg_consume_input+0x104>
 8009c5a:	2902      	cmp	r1, #2
 8009c5c:	d101      	bne.n	8009c62 <jpeg_consume_input+0xee>
 8009c5e:	2a03      	cmp	r2, #3
 8009c60:	d0b8      	beq.n	8009bd4 <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	621a      	str	r2, [r3, #32]
 8009c66:	2271      	movs	r2, #113	; 0x71
 8009c68:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8009c6c:	615a      	str	r2, [r3, #20]
 8009c6e:	2101      	movs	r1, #1
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	4620      	mov	r0, r4
 8009c74:	4798      	blx	r3
 8009c76:	e7ad      	b.n	8009bd4 <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 8009c78:	2852      	cmp	r0, #82	; 0x52
 8009c7a:	d1f2      	bne.n	8009c62 <jpeg_consume_input+0xee>
 8009c7c:	2947      	cmp	r1, #71	; 0x47
 8009c7e:	d1f0      	bne.n	8009c62 <jpeg_consume_input+0xee>
 8009c80:	2a42      	cmp	r2, #66	; 0x42
 8009c82:	d1ee      	bne.n	8009c62 <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 8009c84:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009c86:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009c8a:	e7ba      	b.n	8009c02 <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 8009c8c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009c90:	b193      	cbz	r3, 8009cb8 <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 8009c92:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009c96:	b17a      	cbz	r2, 8009cb8 <jpeg_consume_input+0x144>
 8009c98:	2a02      	cmp	r2, #2
 8009c9a:	d008      	beq.n	8009cae <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	2174      	movs	r1, #116	; 0x74
 8009ca0:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009ca2:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009cac:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 8009cae:	2305      	movs	r3, #5
 8009cb0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 8009cb4:	2304      	movs	r3, #4
 8009cb6:	e7a5      	b.n	8009c04 <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 8009cb8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 8009cbc:	e7fa      	b.n	8009cb4 <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	e783      	b.n	8009bca <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009cc2:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 8009cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009cce:	6803      	ldr	r3, [r0, #0]
 8009cd0:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 8009cd2:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009cd4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4798      	blx	r3
 8009cdc:	e7b3      	b.n	8009c46 <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 8009cde:	2601      	movs	r6, #1
  return retcode;
 8009ce0:	e7b1      	b.n	8009c46 <jpeg_consume_input+0xd2>
 8009ce2:	bf00      	nop
 8009ce4:	3ff00000 	.word	0x3ff00000

08009ce8 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 8009ce8:	6942      	ldr	r2, [r0, #20]
 8009cea:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 8009cee:	2b01      	cmp	r3, #1
{
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 8009cf6:	d905      	bls.n	8009d04 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009cf8:	6803      	ldr	r3, [r0, #0]
 8009cfa:	2115      	movs	r1, #21
 8009cfc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 8009d04:	4620      	mov	r0, r4
 8009d06:	f7ff ff35 	bl	8009b74 <jpeg_consume_input>
  switch (retcode) {
 8009d0a:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 8009d0c:	4605      	mov	r5, r0
  switch (retcode) {
 8009d0e:	d00b      	beq.n	8009d28 <jpeg_read_header+0x40>
 8009d10:	2802      	cmp	r0, #2
 8009d12:	d109      	bne.n	8009d28 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 8009d14:	b12e      	cbz	r6, 8009d22 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	2235      	movs	r2, #53	; 0x35
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	615a      	str	r2, [r3, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8009d22:	4620      	mov	r0, r4
 8009d24:	f7ff fea6 	bl	8009a74 <jpeg_abort>
}
 8009d28:	4628      	mov	r0, r5
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}

08009d2c <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009d2c:	6943      	ldr	r3, [r0, #20]
 8009d2e:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 8009d32:	2a01      	cmp	r2, #1
{
 8009d34:	b510      	push	{r4, lr}
 8009d36:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009d38:	d81f      	bhi.n	8009d7a <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 8009d3a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009d3c:	bb0a      	cbnz	r2, 8009d82 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 8009d3e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009d42:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d204      	bcs.n	8009d52 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8009d48:	6803      	ldr	r3, [r0, #0]
 8009d4a:	2245      	movs	r2, #69	; 0x45
 8009d4c:	615a      	str	r2, [r3, #20]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8009d52:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009d56:	4620      	mov	r0, r4
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 8009d5c:	23d2      	movs	r3, #210	; 0xd2
 8009d5e:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 8009d60:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009d64:	695a      	ldr	r2, [r3, #20]
 8009d66:	b1a2      	cbz	r2, 8009d92 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 8009d68:	69a3      	ldr	r3, [r4, #24]
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 8009d70:	4620      	mov	r0, r4
 8009d72:	f7ff fe7f 	bl	8009a74 <jpeg_abort>
  return TRUE;
 8009d76:	2001      	movs	r0, #1
 8009d78:	e010      	b.n	8009d9c <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 8009d7a:	2bcf      	cmp	r3, #207	; 0xcf
 8009d7c:	d0ee      	beq.n	8009d5c <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 8009d7e:	2bd2      	cmp	r3, #210	; 0xd2
 8009d80:	d0ee      	beq.n	8009d60 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009d82:	6822      	ldr	r2, [r4, #0]
 8009d84:	2115      	movs	r1, #21
 8009d86:	4620      	mov	r0, r4
 8009d88:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8009d8c:	6813      	ldr	r3, [r2, #0]
 8009d8e:	4798      	blx	r3
 8009d90:	e7e6      	b.n	8009d60 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4620      	mov	r0, r4
 8009d96:	4798      	blx	r3
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d1e1      	bne.n	8009d60 <jpeg_finish_decompress+0x34>
}
 8009d9c:	bd10      	pop	{r4, pc}

08009d9e <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8009d9e:	6943      	ldr	r3, [r0, #20]
 8009da0:	2bcc      	cmp	r3, #204	; 0xcc
{
 8009da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da6:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8009da8:	d008      	beq.n	8009dbc <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009daa:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 8009db8:	23cc      	movs	r3, #204	; 0xcc
 8009dba:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009dbc:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8009dc0:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 8009dc2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	b9f3      	cbnz	r3, 8009e08 <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009dca:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 8009dcc:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	bf14      	ite	ne
 8009dd2:	23ce      	movne	r3, #206	; 0xce
 8009dd4:	23cd      	moveq	r3, #205	; 0xcd
 8009dd6:	6163      	str	r3, [r4, #20]
}
 8009dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 8009ddc:	68a3      	ldr	r3, [r4, #8]
 8009dde:	b123      	cbz	r3, 8009dea <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009de0:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009de2:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009dea:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009dee:	462a      	mov	r2, r5
 8009df0:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 8009df2:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009df6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 8009e00:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009e04:	42bb      	cmp	r3, r7
 8009e06:	d011      	beq.n	8009e2c <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 8009e08:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009e0c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009e0e:	4291      	cmp	r1, r2
 8009e10:	d3e4      	bcc.n	8009ddc <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 8009e12:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009e16:	4620      	mov	r0, r4
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009e1c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009e20:	4620      	mov	r0, r4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009e26:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8009e2a:	e7ca      	b.n	8009dc2 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	e7d3      	b.n	8009dd8 <output_pass_setup+0x3a>

08009e30 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 8009e30:	6943      	ldr	r3, [r0, #20]
 8009e32:	2bca      	cmp	r3, #202	; 0xca
{
 8009e34:	b510      	push	{r4, lr}
 8009e36:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 8009e38:	d109      	bne.n	8009e4e <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 8009e3a:	f005 f8f7 	bl	800f02c <jinit_master_decompress>
    if (cinfo->buffered_image) {
 8009e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e40:	b11b      	cbz	r3, 8009e4a <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009e42:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 8009e44:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009e46:	6163      	str	r3, [r4, #20]
}
 8009e48:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 8009e4a:	23cb      	movs	r3, #203	; 0xcb
 8009e4c:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 8009e4e:	6962      	ldr	r2, [r4, #20]
 8009e50:	2acb      	cmp	r2, #203	; 0xcb
 8009e52:	d12c      	bne.n	8009eae <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 8009e54:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	b1fb      	cbz	r3, 8009e9c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 8009e5c:	68a3      	ldr	r3, [r4, #8]
 8009e5e:	b113      	cbz	r3, 8009e66 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4620      	mov	r0, r4
 8009e64:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009e66:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d0e9      	beq.n	8009e48 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 8009e74:	2802      	cmp	r0, #2
 8009e76:	d011      	beq.n	8009e9c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 8009e78:	68a3      	ldr	r3, [r4, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0ee      	beq.n	8009e5c <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 8009e7e:	f020 0002 	bic.w	r0, r0, #2
 8009e82:	2801      	cmp	r0, #1
 8009e84:	d1ea      	bne.n	8009e5c <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	6899      	ldr	r1, [r3, #8]
 8009e8a:	3201      	adds	r2, #1
 8009e8c:	428a      	cmp	r2, r1
 8009e8e:	605a      	str	r2, [r3, #4]
 8009e90:	dbe4      	blt.n	8009e5c <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8009e92:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8009e96:	440a      	add	r2, r1
 8009e98:	609a      	str	r2, [r3, #8]
 8009e9a:	e7df      	b.n	8009e5c <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 8009e9c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009ea0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 8009ea4:	4620      	mov	r0, r4
}
 8009ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 8009eaa:	f7ff bf78 	b.w	8009d9e <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 8009eae:	2acc      	cmp	r2, #204	; 0xcc
 8009eb0:	d0f8      	beq.n	8009ea4 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	2115      	movs	r1, #21
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4798      	blx	r3
 8009ec0:	e7f0      	b.n	8009ea4 <jpeg_start_decompress+0x74>

08009ec2 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 8009ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ec4:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 8009ec6:	6942      	ldr	r2, [r0, #20]
{
 8009ec8:	4604      	mov	r4, r0
 8009eca:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 8009ecc:	2acd      	cmp	r2, #205	; 0xcd
 8009ece:	d005      	beq.n	8009edc <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009ed0:	6803      	ldr	r3, [r0, #0]
 8009ed2:	2115      	movs	r1, #21
 8009ed4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 8009edc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009ee0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d30a      	bcc.n	8009efc <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	227e      	movs	r2, #126	; 0x7e
 8009eea:	4620      	mov	r0, r4
 8009eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009ef0:	615a      	str	r2, [r3, #20]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	4798      	blx	r3
    return 0;
 8009ef6:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 8009ef8:	b003      	add	sp, #12
 8009efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 8009efc:	68a0      	ldr	r0, [r4, #8]
 8009efe:	b120      	cbz	r0, 8009f0a <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009f00:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009f04:	6803      	ldr	r3, [r0, #0]
 8009f06:	4620      	mov	r0, r4
 8009f08:	4798      	blx	r3
  row_ctr = 0;
 8009f0a:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	aa01      	add	r2, sp, #4
 8009f10:	4629      	mov	r1, r5
  row_ctr = 0;
 8009f12:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009f14:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009f18:	685f      	ldr	r7, [r3, #4]
 8009f1a:	4633      	mov	r3, r6
 8009f1c:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 8009f1e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009f22:	9801      	ldr	r0, [sp, #4]
 8009f24:	4403      	add	r3, r0
 8009f26:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 8009f2a:	e7e5      	b.n	8009ef8 <jpeg_read_scanlines+0x36>

08009f2c <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 8009f2c:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 8009f2e:	6984      	ldr	r4, [r0, #24]
{
 8009f30:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 8009f32:	6863      	ldr	r3, [r4, #4]
 8009f34:	b943      	cbnz	r3, 8009f48 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 8009f36:	68e3      	ldr	r3, [r4, #12]
 8009f38:	4798      	blx	r3
 8009f3a:	b928      	cbnz	r0, 8009f48 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	2219      	movs	r2, #25
 8009f40:	4628      	mov	r0, r5
 8009f42:	615a      	str	r2, [r3, #20]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4798      	blx	r3
  src->bytes_in_buffer--;
 8009f48:	6863      	ldr	r3, [r4, #4]
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	6022      	str	r2, [r4, #0]
}
 8009f54:	7818      	ldrb	r0, [r3, #0]
 8009f56:	bd38      	pop	{r3, r4, r5, pc}

08009f58 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 8009f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8009f60:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009f64:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 8009f68:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
  while (e->a < 0x8000L) {
 8009f6c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009f70:	db20      	blt.n	8009fb4 <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 8009f72:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8009f74:	4b2e      	ldr	r3, [pc, #184]	; (800a030 <arith_decode+0xd8>)
 8009f76:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8009f7a:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 8009f7e:	68a5      	ldr	r5, [r4, #8]
  temp = e->a - qe;
 8009f80:	eba2 4227 	sub.w	r2, r2, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8009f84:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 8009f88:	fa02 f101 	lsl.w	r1, r2, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8009f8c:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 8009f90:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 8009f92:	428d      	cmp	r5, r1
 8009f94:	db3c      	blt.n	800a010 <arith_decode+0xb8>
    e->c -= temp;
 8009f96:	1a69      	subs	r1, r5, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 8009f98:	4594      	cmp	ip, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009f9a:	f020 057f 	bic.w	r5, r0, #127	; 0x7f
      e->a = qe;
 8009f9e:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 8009fa2:	60a1      	str	r1, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009fa4:	b26d      	sxtb	r5, r5
    if (e->a < qe) {
 8009fa6:	dd2e      	ble.n	800a006 <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009fa8:	ea85 050e 	eor.w	r5, r5, lr
 8009fac:	7035      	strb	r5, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 8009fae:	09c0      	lsrs	r0, r0, #7
 8009fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 8009fb4:	3901      	subs	r1, #1
 8009fb6:	2900      	cmp	r1, #0
 8009fb8:	6121      	str	r1, [r4, #16]
 8009fba:	da1a      	bge.n	8009ff2 <arith_decode+0x9a>
      if (cinfo->unread_marker)
 8009fbc:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 8009fc0:	b96b      	cbnz	r3, 8009fde <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	f7ff ffb2 	bl	8009f2c <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009fc8:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 8009fca:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009fcc:	d108      	bne.n	8009fe0 <arith_decode+0x88>
	  do data = get_byte(cinfo);
 8009fce:	4640      	mov	r0, r8
 8009fd0:	f7ff ffac 	bl	8009f2c <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 8009fd4:	28ff      	cmp	r0, #255	; 0xff
 8009fd6:	d0fa      	beq.n	8009fce <arith_decode+0x76>
	  if (data == 0)
 8009fd8:	b110      	cbz	r0, 8009fe0 <arith_decode+0x88>
	    cinfo->unread_marker = data;
 8009fda:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 8009fde:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009fe0:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009fe2:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009fe4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009fe8:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009fec:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009fee:	d404      	bmi.n	8009ffa <arith_decode+0xa2>
 8009ff0:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 8009ff2:	68e3      	ldr	r3, [r4, #12]
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	60e3      	str	r3, [r4, #12]
 8009ff8:	e7b6      	b.n	8009f68 <arith_decode+0x10>
	if (++e->ct == 0)
 8009ffa:	3309      	adds	r3, #9
 8009ffc:	6123      	str	r3, [r4, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1f7      	bne.n	8009ff2 <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800a002:	60e7      	str	r7, [r4, #12]
 800a004:	e7f5      	b.n	8009ff2 <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800a006:	407d      	eors	r5, r7
 800a008:	7035      	strb	r5, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 800a00a:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 800a00e:	e7ce      	b.n	8009fae <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 800a010:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a014:	dacb      	bge.n	8009fae <arith_decode+0x56>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a016:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 800a01a:	4594      	cmp	ip, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a01c:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 800a01e:	dd02      	ble.n	800a026 <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800a020:	407b      	eors	r3, r7
 800a022:	7033      	strb	r3, [r6, #0]
 800a024:	e7f1      	b.n	800a00a <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a026:	ea83 030e 	eor.w	r3, r3, lr
 800a02a:	7033      	strb	r3, [r6, #0]
 800a02c:	e7bf      	b.n	8009fae <arith_decode+0x56>
 800a02e:	bf00      	nop
 800a030:	0802de94 	.word	0x0802de94

0800a034 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800a034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800a038:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800a03c:	f500 71aa 	add.w	r1, r0, #340	; 0x154
{
 800a040:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a042:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800a046:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 800a04a:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 808a 	beq.w	800a166 <start_pass+0x132>
    if (cinfo->Ss == 0) {
 800a052:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 800a056:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 800a05a:	b95a      	cbnz	r2, 800a074 <start_pass+0x40>
      if (cinfo->Se != 0)
 800a05c:	b1a1      	cbz	r1, 800a088 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	2611      	movs	r6, #17
 800a062:	e9c3 1707 	strd	r1, r7, [r3, #28]
 800a066:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800a06a:	6258      	str	r0, [r3, #36]	; 0x24
 800a06c:	4620      	mov	r0, r4
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4798      	blx	r3
 800a072:	e00f      	b.n	800a094 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800a074:	428a      	cmp	r2, r1
 800a076:	dcf2      	bgt.n	800a05e <start_pass+0x2a>
 800a078:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a07c:	428b      	cmp	r3, r1
 800a07e:	dbee      	blt.n	800a05e <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 800a080:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a084:	2b01      	cmp	r3, #1
 800a086:	d1ea      	bne.n	800a05e <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 800a088:	b117      	cbz	r7, 800a090 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800a08a:	1e7b      	subs	r3, r7, #1
 800a08c:	4283      	cmp	r3, r0
 800a08e:	d1e6      	bne.n	800a05e <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800a090:	280d      	cmp	r0, #13
 800a092:	dce4      	bgt.n	800a05e <start_pass+0x2a>
 800a094:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 800a098:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800a09c:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a0a0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800a0a4:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a0a8:	454b      	cmp	r3, r9
 800a0aa:	dc1d      	bgt.n	800a0e8 <start_pass+0xb4>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800a0ac:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d153      	bne.n	800a15c <start_pass+0x128>
      if (cinfo->Ss == 0)
 800a0b4:	2a00      	cmp	r2, #0
 800a0b6:	d14f      	bne.n	800a158 <start_pass+0x124>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800a0b8:	4b63      	ldr	r3, [pc, #396]	; (800a248 <start_pass+0x214>)
{
 800a0ba:	f04f 0800 	mov.w	r8, #0
 800a0be:	f105 0914 	add.w	r9, r5, #20
 800a0c2:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800a0c4:	46c2      	mov	sl, r8
    entropy->pub.decode_mcu = decode_mcu;
 800a0c6:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a0c8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a0cc:	4543      	cmp	r3, r8
 800a0ce:	dc63      	bgt.n	800a198 <start_pass+0x164>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 800a0d0:	2300      	movs	r3, #0
  entropy->a = 0;
 800a0d2:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800a0d6:	f06f 030f 	mvn.w	r3, #15
 800a0da:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800a0dc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800a0e0:	636b      	str	r3, [r5, #52]	; 0x34
}
 800a0e2:	b003      	add	sp, #12
 800a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800a0e8:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800a0ec:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800a0f0:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800a0f2:	0230      	lsls	r0, r6, #8
 800a0f4:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800a0f8:	b162      	cbz	r2, 800a114 <start_pass+0xe0>
 800a0fa:	580a      	ldr	r2, [r1, r0]
 800a0fc:	2a00      	cmp	r2, #0
 800a0fe:	da09      	bge.n	800a114 <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800a100:	6822      	ldr	r2, [r4, #0]
 800a102:	2300      	movs	r3, #0
 800a104:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a108:	4620      	mov	r0, r4
 800a10a:	61d3      	str	r3, [r2, #28]
 800a10c:	e9c2 b605 	strd	fp, r6, [r2, #20]
 800a110:	6852      	ldr	r2, [r2, #4]
 800a112:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a114:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 800a118:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 800a11c:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800a120:	42ba      	cmp	r2, r7
 800a122:	da02      	bge.n	800a12a <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a124:	f109 0901 	add.w	r9, r9, #1
 800a128:	e7ba      	b.n	800a0a0 <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800a12a:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 800a12e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800a132:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 800a136:	4291      	cmp	r1, r2
 800a138:	d008      	beq.n	800a14c <start_pass+0x118>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a140:	4620      	mov	r0, r4
 800a142:	61d7      	str	r7, [r2, #28]
 800a144:	e9c2 b605 	strd	fp, r6, [r2, #20]
 800a148:	6852      	ldr	r2, [r2, #4]
 800a14a:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 800a14c:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a150:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800a152:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a156:	e7e1      	b.n	800a11c <start_pass+0xe8>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800a158:	4b3c      	ldr	r3, [pc, #240]	; (800a24c <start_pass+0x218>)
 800a15a:	e7ae      	b.n	800a0ba <start_pass+0x86>
      if (cinfo->Ss == 0)
 800a15c:	b90a      	cbnz	r2, 800a162 <start_pass+0x12e>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800a15e:	4b3c      	ldr	r3, [pc, #240]	; (800a250 <start_pass+0x21c>)
 800a160:	e7ab      	b.n	800a0ba <start_pass+0x86>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800a162:	4b3c      	ldr	r3, [pc, #240]	; (800a254 <start_pass+0x220>)
 800a164:	e7a9      	b.n	800a0ba <start_pass+0x86>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800a166:	b96a      	cbnz	r2, 800a184 <start_pass+0x150>
 800a168:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800a16c:	b953      	cbnz	r3, 800a184 <start_pass+0x150>
 800a16e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800a172:	b93b      	cbnz	r3, 800a184 <start_pass+0x150>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800a174:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800a178:	2b3f      	cmp	r3, #63	; 0x3f
 800a17a:	dc0b      	bgt.n	800a194 <start_pass+0x160>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800a17c:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 800a180:	4293      	cmp	r3, r2
 800a182:	d007      	beq.n	800a194 <start_pass+0x160>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	227d      	movs	r2, #125	; 0x7d
 800a188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a18c:	4620      	mov	r0, r4
 800a18e:	615a      	str	r2, [r3, #20]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 800a194:	4b30      	ldr	r3, [pc, #192]	; (800a258 <start_pass+0x224>)
 800a196:	e790      	b.n	800a0ba <start_pass+0x86>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a198:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800a19c:	f856 bb04 	ldr.w	fp, [r6], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a1a0:	b133      	cbz	r3, 800a1b0 <start_pass+0x17c>
 800a1a2:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a1a6:	bb43      	cbnz	r3, 800a1fa <start_pass+0x1c6>
 800a1a8:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d13a      	bne.n	800a226 <start_pass+0x1f2>
      tbl = compptr->dc_tbl_no;
 800a1b0:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800a1b4:	2f0f      	cmp	r7, #15
 800a1b6:	d906      	bls.n	800a1c6 <start_pass+0x192>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	2232      	movs	r2, #50	; 0x32
 800a1bc:	4620      	mov	r0, r4
 800a1be:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 800a1c6:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	b933      	cbnz	r3, 800a1dc <start_pass+0x1a8>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800a1ce:	6863      	ldr	r3, [r4, #4]
 800a1d0:	2240      	movs	r2, #64	; 0x40
 800a1d2:	2101      	movs	r1, #1
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4798      	blx	r3
 800a1da:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 800a1dc:	2240      	movs	r2, #64	; 0x40
 800a1de:	2100      	movs	r1, #0
 800a1e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1e2:	f020 fac7 	bl	802a774 <memset>
      entropy->last_dc_val[ci] = 0;
 800a1e6:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 800a1ea:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800a1ee:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a1f2:	b9eb      	cbnz	r3, 800a230 <start_pass+0x1fc>
 800a1f4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a1f8:	b1ab      	cbz	r3, 800a226 <start_pass+0x1f2>
      tbl = compptr->ac_tbl_no;
 800a1fa:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800a1fe:	2f0f      	cmp	r7, #15
 800a200:	d819      	bhi.n	800a236 <start_pass+0x202>
      if (entropy->ac_stats[tbl] == NULL)
 800a202:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800a206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a208:	b93b      	cbnz	r3, 800a21a <start_pass+0x1e6>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800a20a:	6863      	ldr	r3, [r4, #4]
 800a20c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a210:	2101      	movs	r1, #1
 800a212:	4620      	mov	r0, r4
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4798      	blx	r3
 800a218:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800a21a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a21e:	2100      	movs	r1, #0
 800a220:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a222:	f020 faa7 	bl	802a774 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a226:	f108 0801 	add.w	r8, r8, #1
 800a22a:	f109 0904 	add.w	r9, r9, #4
 800a22e:	e74b      	b.n	800a0c8 <start_pass+0x94>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800a230:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a234:	e7e0      	b.n	800a1f8 <start_pass+0x1c4>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	2232      	movs	r2, #50	; 0x32
 800a23a:	4620      	mov	r0, r4
 800a23c:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4798      	blx	r3
 800a244:	e7dd      	b.n	800a202 <start_pass+0x1ce>
 800a246:	bf00      	nop
 800a248:	0800a7ff 	.word	0x0800a7ff
 800a24c:	0800a6cb 	.word	0x0800a6cb
 800a250:	0800a679 	.word	0x0800a679
 800a254:	0800a553 	.word	0x0800a553
 800a258:	0800a2ff 	.word	0x0800a2ff

0800a25c <process_restart>:
{
 800a25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a260:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 800a264:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	4798      	blx	r3
 800a26a:	b928      	cbnz	r0, 800a278 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800a26c:	6823      	ldr	r3, [r4, #0]
 800a26e:	2219      	movs	r2, #25
 800a270:	4620      	mov	r0, r4
 800a272:	615a      	str	r2, [r3, #20]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4798      	blx	r3
{
 800a278:	2600      	movs	r6, #0
 800a27a:	f105 0714 	add.w	r7, r5, #20
 800a27e:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800a282:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a284:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a288:	42b3      	cmp	r3, r6
 800a28a:	dc0a      	bgt.n	800a2a2 <process_restart+0x46>
  entropy->c = 0;
 800a28c:	2300      	movs	r3, #0
  entropy->a = 0;
 800a28e:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800a292:	f06f 030f 	mvn.w	r3, #15
 800a296:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800a298:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800a29c:	636b      	str	r3, [r5, #52]	; 0x34
}
 800a29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a2a2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800a2a6:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a2aa:	b12b      	cbz	r3, 800a2b8 <process_restart+0x5c>
 800a2ac:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a2b0:	b9ab      	cbnz	r3, 800a2de <process_restart+0x82>
 800a2b2:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a2b6:	b9e3      	cbnz	r3, 800a2f2 <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 800a2b8:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a2bc:	2240      	movs	r2, #64	; 0x40
 800a2be:	2100      	movs	r1, #0
 800a2c0:	330e      	adds	r3, #14
 800a2c2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a2c6:	f020 fa55 	bl	802a774 <memset>
      entropy->last_dc_val[ci] = 0;
 800a2ca:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 800a2ce:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800a2d2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a2d6:	b97b      	cbnz	r3, 800a2f8 <process_restart+0x9c>
 800a2d8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a2dc:	b14b      	cbz	r3, 800a2f2 <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800a2de:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a2e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	331e      	adds	r3, #30
 800a2ea:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a2ee:	f020 fa41 	bl	802a774 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a2f2:	3601      	adds	r6, #1
 800a2f4:	3704      	adds	r7, #4
 800a2f6:	e7c5      	b.n	800a284 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800a2f8:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a2fc:	e7ee      	b.n	800a2dc <process_restart+0x80>

0800a2fe <decode_mcu>:
{
 800a2fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a302:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a306:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a308:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800a30c:	ed2d 8b02 	vpush	{d8}
 800a310:	b087      	sub	sp, #28
 800a312:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800a314:	b133      	cbz	r3, 800a324 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 800a316:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a318:	b90b      	cbnz	r3, 800a31e <decode_mcu+0x20>
      process_restart(cinfo);
 800a31a:	f7ff ff9f 	bl	800a25c <process_restart>
    entropy->restarts_to_go--;
 800a31e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a320:	3b01      	subs	r3, #1
 800a322:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a324:	692b      	ldr	r3, [r5, #16]
 800a326:	3301      	adds	r3, #1
 800a328:	f000 809f 	beq.w	800a46a <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 800a32c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a330:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 800a332:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a334:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 800a338:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a33a:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 800a33e:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a342:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a346:	42bb      	cmp	r3, r7
 800a348:	f340 808f 	ble.w	800a46a <decode_mcu+0x16c>
    block = MCU_data[blkn];
 800a34c:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 800a34e:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a350:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 800a352:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800a356:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 800a358:	f852 3b04 	ldr.w	r3, [r2], #4
 800a35c:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800a35e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a362:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 800a366:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a36a:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 800a36e:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800a370:	6952      	ldr	r2, [r2, #20]
 800a372:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 800a376:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a378:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 800a37c:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 800a37e:	4631      	mov	r1, r6
 800a380:	f7ff fdea 	bl	8009f58 <arith_decode>
 800a384:	bb68      	cbnz	r0, 800a3e2 <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 800a386:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 800a38a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a38e:	9a00      	ldr	r2, [sp, #0]
 800a390:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 800a392:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 80c4 	beq.w	800a524 <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 800a39c:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 800a39e:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 800a3a0:	699b      	ldr	r3, [r3, #24]
    k = 0;
 800a3a2:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a3a6:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 800a3aa:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800a3ae:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a3b2:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 800a3b4:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	f7ff fdcd 	bl	8009f58 <arith_decode>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	f040 80b0 	bne.w	800a524 <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 800a3c4:	f109 0101 	add.w	r1, r9, #1
 800a3c8:	4620      	mov	r0, r4
	k++;
 800a3ca:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 800a3cc:	f7ff fdc4 	bl	8009f58 <arith_decode>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d16e      	bne.n	800a4b2 <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 800a3d4:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 800a3d8:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 800a3dc:	42b2      	cmp	r2, r6
 800a3de:	dcf1      	bgt.n	800a3c4 <decode_mcu+0xc6>
 800a3e0:	e038      	b.n	800a454 <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 800a3e2:	1c71      	adds	r1, r6, #1
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f7ff fdb7 	bl	8009f58 <arith_decode>
      st += 2; st += sign;
 800a3ea:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a3ec:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a3ee:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a3f0:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a3f4:	4651      	mov	r1, sl
 800a3f6:	f7ff fdaf 	bl	8009f58 <arith_decode>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	b140      	cbz	r0, 800a410 <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a3fe:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a402:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 800a406:	4651      	mov	r1, sl
 800a408:	4620      	mov	r0, r4
 800a40a:	f7ff fda5 	bl	8009f58 <arith_decode>
 800a40e:	b9e8      	cbnz	r0, 800a44c <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a410:	9b02      	ldr	r3, [sp, #8]
 800a412:	4423      	add	r3, r4
 800a414:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a418:	4699      	mov	r9, r3
 800a41a:	2301      	movs	r3, #1
 800a41c:	fa03 f202 	lsl.w	r2, r3, r2
 800a420:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 800a424:	da2a      	bge.n	800a47c <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a426:	2200      	movs	r2, #0
      st += 14;
 800a428:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 800a42c:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a42e:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 800a432:	1076      	asrs	r6, r6, #1
 800a434:	d130      	bne.n	800a498 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 800a436:	f1b8 0f00 	cmp.w	r8, #0
 800a43a:	d137      	bne.n	800a4ac <decode_mcu+0x1ae>
 800a43c:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a440:	f8db 2014 	ldr.w	r2, [fp, #20]
 800a444:	444a      	add	r2, r9
 800a446:	f8cb 2014 	str.w	r2, [fp, #20]
 800a44a:	e79e      	b.n	800a38a <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 800a44c:	0076      	lsls	r6, r6, #1
 800a44e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800a452:	d110      	bne.n	800a476 <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a454:	6823      	ldr	r3, [r4, #0]
 800a456:	2275      	movs	r2, #117	; 0x75
 800a458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a45c:	4620      	mov	r0, r4
 800a45e:	615a      	str	r2, [r3, #20]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 800a464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a468:	612b      	str	r3, [r5, #16]
}
 800a46a:	2001      	movs	r0, #1
 800a46c:	b007      	add	sp, #28
 800a46e:	ecbd 8b02 	vpop	{d8}
 800a472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a476:	f10a 0a01 	add.w	sl, sl, #1
 800a47a:	e7c4      	b.n	800a406 <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a47c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a480:	2301      	movs	r3, #1
 800a482:	fa03 f202 	lsl.w	r2, r3, r2
 800a486:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a48a:	bfcc      	ite	gt
 800a48c:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a490:	f108 0201 	addle.w	r2, r8, #1
 800a494:	0092      	lsls	r2, r2, #2
 800a496:	e7c7      	b.n	800a428 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 800a498:	4620      	mov	r0, r4
 800a49a:	9102      	str	r1, [sp, #8]
 800a49c:	f7ff fd5c 	bl	8009f58 <arith_decode>
 800a4a0:	9902      	ldr	r1, [sp, #8]
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d0c5      	beq.n	800a432 <decode_mcu+0x134>
 800a4a6:	ea49 0906 	orr.w	r9, r9, r6
 800a4aa:	e7c2      	b.n	800a432 <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 800a4ac:	ea6f 0909 	mvn.w	r9, r9
 800a4b0:	e7c6      	b.n	800a440 <decode_mcu+0x142>
      st += 2;
 800a4b2:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a4b6:	ee18 1a10 	vmov	r1, s16
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f7ff fd4c 	bl	8009f58 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a4c0:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a4c2:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f7ff fd47 	bl	8009f58 <arith_decode>
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	b1a8      	cbz	r0, 800a4fa <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f7ff fd41 	bl	8009f58 <arith_decode>
 800a4d6:	b180      	cbz	r0, 800a4fa <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a4d8:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 800a4dc:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 800a4e0:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a4e4:	42b1      	cmp	r1, r6
 800a4e6:	bfac      	ite	ge
 800a4e8:	21bd      	movge	r1, #189	; 0xbd
 800a4ea:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 800a4ec:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f7ff fd30 	bl	8009f58 <arith_decode>
 800a4f8:	b9b0      	cbnz	r0, 800a528 <decode_mcu+0x22a>
      st += 14;
 800a4fa:	f109 010e 	add.w	r1, r9, #14
      v = m;
 800a4fe:	46c1      	mov	r9, r8
      while (m >>= 1)
 800a500:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a504:	d118      	bne.n	800a538 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 800a506:	9b01      	ldr	r3, [sp, #4]
 800a508:	bb03      	cbnz	r3, 800a54c <decode_mcu+0x24e>
 800a50a:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	9900      	ldr	r1, [sp, #0]
 800a512:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a516:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 800a51a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a51e:	42b3      	cmp	r3, r6
 800a520:	f73f af43 	bgt.w	800a3aa <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a524:	3701      	adds	r7, #1
 800a526:	e70c      	b.n	800a342 <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 800a528:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a52c:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800a530:	d090      	beq.n	800a454 <decode_mcu+0x156>
	    st += 1;
 800a532:	f109 0901 	add.w	r9, r9, #1
 800a536:	e7db      	b.n	800a4f0 <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 800a538:	4620      	mov	r0, r4
 800a53a:	9102      	str	r1, [sp, #8]
 800a53c:	f7ff fd0c 	bl	8009f58 <arith_decode>
 800a540:	9902      	ldr	r1, [sp, #8]
 800a542:	2800      	cmp	r0, #0
 800a544:	d0dc      	beq.n	800a500 <decode_mcu+0x202>
 800a546:	ea49 0908 	orr.w	r9, r9, r8
 800a54a:	e7d9      	b.n	800a500 <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 800a54c:	ea6f 0209 	mvn.w	r2, r9
 800a550:	e7dd      	b.n	800a50e <decode_mcu+0x210>

0800a552 <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 800a552:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55a:	4604      	mov	r4, r0
 800a55c:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a55e:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a562:	ed2d 8b02 	vpush	{d8}
 800a566:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 800a568:	b133      	cbz	r3, 800a578 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 800a56a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a56c:	b90b      	cbnz	r3, 800a572 <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 800a56e:	f7ff fe75 	bl	800a25c <process_restart>
    entropy->restarts_to_go--;
 800a572:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a574:	3b01      	subs	r3, #1
 800a576:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a578:	6933      	ldr	r3, [r6, #16]
 800a57a:	3301      	adds	r3, #1
 800a57c:	d076      	beq.n	800a66c <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a57e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a582:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a584:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  natural_order = cinfo->natural_order;
 800a588:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a58c:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a58e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 800a592:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a596:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800a598:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a59c:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a5a0:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a5a2:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800a5a4:	2f00      	cmp	r7, #0
 800a5a6:	dc37      	bgt.n	800a618 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a5a8:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a5ac:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a5b0:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a5b2:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 800a5b6:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a5ba:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a5be:	42ab      	cmp	r3, r5
 800a5c0:	db54      	blt.n	800a66c <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a5c2:	1e6b      	subs	r3, r5, #1
 800a5c4:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800a5c6:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a5c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a5cc:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a5d0:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800a5d4:	dd05      	ble.n	800a5e2 <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a5d6:	4651      	mov	r1, sl
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7ff fcbd 	bl	8009f58 <arith_decode>
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	d144      	bne.n	800a66c <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 800a5e2:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 800a5e6:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 800a5e8:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 800a5ec:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800a5f0:	b1d1      	cbz	r1, 800a628 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 800a5f2:	f10a 0102 	add.w	r1, sl, #2
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f7ff fcae 	bl	8009f58 <arith_decode>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d0dc      	beq.n	800a5ba <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 800a600:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 800a604:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 800a608:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 800a60a:	bfb4      	ite	lt
 800a60c:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 800a60e:	9a01      	ldrge	r2, [sp, #4]
 800a610:	4413      	add	r3, r2
 800a612:	f8a8 3000 	strh.w	r3, [r8]
 800a616:	e7d0      	b.n	800a5ba <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 800a618:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a61c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1c1      	bne.n	800a5a8 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 800a624:	3f01      	subs	r7, #1
 800a626:	e7bd      	b.n	800a5a4 <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800a628:	f10a 0101 	add.w	r1, sl, #1
 800a62c:	4620      	mov	r0, r4
 800a62e:	f7ff fc93 	bl	8009f58 <arith_decode>
 800a632:	b150      	cbz	r0, 800a64a <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a634:	ee18 1a10 	vmov	r1, s16
 800a638:	4620      	mov	r0, r4
 800a63a:	f7ff fc8d 	bl	8009f58 <arith_decode>
	  *thiscoef = m1;
 800a63e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800a642:	2800      	cmp	r0, #0
 800a644:	bf18      	it	ne
 800a646:	4613      	movne	r3, r2
 800a648:	e7e3      	b.n	800a612 <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 800a64a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a64e:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 800a652:	42aa      	cmp	r2, r5
 800a654:	dac5      	bge.n	800a5e2 <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	2275      	movs	r2, #117	; 0x75
 800a65a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a65e:	4620      	mov	r0, r4
 800a660:	615a      	str	r2, [r3, #20]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800a666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a66a:	6133      	str	r3, [r6, #16]
}
 800a66c:	2001      	movs	r0, #1
 800a66e:	b005      	add	sp, #20
 800a670:	ecbd 8b02 	vpop	{d8}
 800a674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a678 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 800a678:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a680:	4604      	mov	r4, r0
 800a682:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a684:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a688:	b133      	cbz	r3, 800a698 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 800a68a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a68c:	b90b      	cbnz	r3, 800a692 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800a68e:	f7ff fde5 	bl	800a25c <process_restart>
    entropy->restarts_to_go--;
 800a692:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a694:	3b01      	subs	r3, #1
 800a696:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a698:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800a69c:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800a69e:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a6a0:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a6a2:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a6a4:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a6a8:	42ab      	cmp	r3, r5
 800a6aa:	dc02      	bgt.n	800a6b2 <decode_mcu_DC_refine+0x3a>
}
 800a6ac:	2001      	movs	r0, #1
 800a6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f7ff fc4f 	bl	8009f58 <arith_decode>
 800a6ba:	b120      	cbz	r0, 800a6c6 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 800a6bc:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800a6c0:	8813      	ldrh	r3, [r2, #0]
 800a6c2:	433b      	orrs	r3, r7
 800a6c4:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a6c6:	3501      	adds	r5, #1
 800a6c8:	e7ec      	b.n	800a6a4 <decode_mcu_DC_refine+0x2c>

0800a6ca <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 800a6ca:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a6ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	b087      	sub	sp, #28
 800a6d6:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a6d8:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a6dc:	b133      	cbz	r3, 800a6ec <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a6de:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a6e0:	b90b      	cbnz	r3, 800a6e6 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800a6e2:	f7ff fdbb 	bl	800a25c <process_restart>
    entropy->restarts_to_go--;
 800a6e6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a6ec:	6933      	ldr	r3, [r6, #16]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	d01d      	beq.n	800a72e <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 800a6f2:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a6f4:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 800a6f8:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 800a6fc:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a6fe:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a702:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 800a70c:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a70e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a712:	42ab      	cmp	r3, r5
 800a714:	db0b      	blt.n	800a72e <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a716:	1e69      	subs	r1, r5, #1
 800a718:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a71c:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a71e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a722:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a726:	4641      	mov	r1, r8
 800a728:	f7ff fc16 	bl	8009f58 <arith_decode>
 800a72c:	b1b0      	cbz	r0, 800a75c <decode_mcu_AC_first+0x92>
}
 800a72e:	2001      	movs	r0, #1
 800a730:	b007      	add	sp, #28
 800a732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800a736:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800a738:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a73c:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 800a740:	42aa      	cmp	r2, r5
 800a742:	da0b      	bge.n	800a75c <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	2275      	movs	r2, #117	; 0x75
 800a748:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a74c:	4620      	mov	r0, r4
 800a74e:	615a      	str	r2, [r3, #20]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a758:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800a75a:	e7e8      	b.n	800a72e <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 800a75c:	f108 0101 	add.w	r1, r8, #1
 800a760:	4620      	mov	r0, r4
 800a762:	f7ff fbf9 	bl	8009f58 <arith_decode>
 800a766:	2800      	cmp	r0, #0
 800a768:	d0e5      	beq.n	800a736 <decode_mcu_AC_first+0x6c>
    st += 2;
 800a76a:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a76e:	4659      	mov	r1, fp
 800a770:	4620      	mov	r0, r4
 800a772:	f7ff fbf1 	bl	8009f58 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a776:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a778:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a77a:	4620      	mov	r0, r4
 800a77c:	f7ff fbec 	bl	8009f58 <arith_decode>
 800a780:	4607      	mov	r7, r0
 800a782:	b1b0      	cbz	r0, 800a7b2 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 800a784:	4641      	mov	r1, r8
 800a786:	4620      	mov	r0, r4
 800a788:	f7ff fbe6 	bl	8009f58 <arith_decode>
 800a78c:	b188      	cbz	r0, 800a7b2 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a78e:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 800a790:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 800a792:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a796:	18e1      	adds	r1, r4, r3
 800a798:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 800a79c:	42a9      	cmp	r1, r5
 800a79e:	bfac      	ite	ge
 800a7a0:	21bd      	movge	r1, #189	; 0xbd
 800a7a2:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800a7a4:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 800a7a8:	4641      	mov	r1, r8
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f7ff fbd4 	bl	8009f58 <arith_decode>
 800a7b0:	b988      	cbnz	r0, 800a7d6 <decode_mcu_AC_first+0x10c>
    st += 14;
 800a7b2:	f108 010e 	add.w	r1, r8, #14
    v = m;
 800a7b6:	463a      	mov	r2, r7
    while (m >>= 1)
 800a7b8:	107f      	asrs	r7, r7, #1
 800a7ba:	d113      	bne.n	800a7e4 <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	b9e3      	cbnz	r3, 800a7fa <decode_mcu_AC_first+0x130>
 800a7c0:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a7c2:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800a7c6:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a7ca:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a7cc:	408a      	lsls	r2, r1
 800a7ce:	9902      	ldr	r1, [sp, #8]
 800a7d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a7d4:	e79b      	b.n	800a70e <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800a7d6:	007f      	lsls	r7, r7, #1
 800a7d8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800a7dc:	d0b2      	beq.n	800a744 <decode_mcu_AC_first+0x7a>
	  st += 1;
 800a7de:	f108 0801 	add.w	r8, r8, #1
 800a7e2:	e7e1      	b.n	800a7a8 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a7ea:	f7ff fbb5 	bl	8009f58 <arith_decode>
 800a7ee:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d0e0      	beq.n	800a7b8 <decode_mcu_AC_first+0xee>
 800a7f6:	433a      	orrs	r2, r7
 800a7f8:	e7de      	b.n	800a7b8 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 800a7fa:	43d2      	mvns	r2, r2
 800a7fc:	e7e1      	b.n	800a7c2 <decode_mcu_AC_first+0xf8>

0800a7fe <decode_mcu_DC_first>:
{
 800a7fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a802:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a806:	b085      	sub	sp, #20
 800a808:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a80a:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a80e:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800a810:	b133      	cbz	r3, 800a820 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a812:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a814:	b90b      	cbnz	r3, 800a81a <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800a816:	f7ff fd21 	bl	800a25c <process_restart>
    entropy->restarts_to_go--;
 800a81a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a81c:	3b01      	subs	r3, #1
 800a81e:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a820:	6933      	ldr	r3, [r6, #16]
 800a822:	3301      	adds	r3, #1
 800a824:	d073      	beq.n	800a90e <decode_mcu_DC_first+0x110>
 800a826:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a82a:	f04f 0800 	mov.w	r8, #0
 800a82e:	9301      	str	r3, [sp, #4]
 800a830:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a834:	4543      	cmp	r3, r8
 800a836:	dd6a      	ble.n	800a90e <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 800a838:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 800a83a:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a83c:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800a83e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a842:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800a844:	f852 3b04 	ldr.w	r3, [r2], #4
 800a848:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a84a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a84e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 800a852:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a856:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a85a:	6952      	ldr	r2, [r2, #20]
 800a85c:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 800a860:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a862:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 800a866:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 800a868:	4629      	mov	r1, r5
 800a86a:	f7ff fb75 	bl	8009f58 <arith_decode>
 800a86e:	b958      	cbnz	r0, 800a888 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800a870:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a874:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a878:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a87c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a880:	4093      	lsls	r3, r2
 800a882:	9a02      	ldr	r2, [sp, #8]
 800a884:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a886:	e7d3      	b.n	800a830 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800a888:	1c69      	adds	r1, r5, #1
 800a88a:	4620      	mov	r0, r4
 800a88c:	f7ff fb64 	bl	8009f58 <arith_decode>
      st += 2; st += sign;
 800a890:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a892:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a894:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a896:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a89a:	4659      	mov	r1, fp
 800a89c:	f7ff fb5c 	bl	8009f58 <arith_decode>
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	b140      	cbz	r0, 800a8b6 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a8a4:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a8a8:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800a8ac:	4659      	mov	r1, fp
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f7ff fb52 	bl	8009f58 <arith_decode>
 800a8b4:	b9e0      	cbnz	r0, 800a8f0 <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a8b6:	9b00      	ldr	r3, [sp, #0]
 800a8b8:	4423      	add	r3, r4
 800a8ba:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a8be:	4699      	mov	r9, r3
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	fa03 f202 	lsl.w	r2, r3, r2
 800a8c6:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 800a8ca:	da27      	bge.n	800a91c <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 800a8d2:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800a8d6:	46a9      	mov	r9, r5
 800a8d8:	106d      	asrs	r5, r5, #1
 800a8da:	d12d      	bne.n	800a938 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 800a8dc:	2f00      	cmp	r7, #0
 800a8de:	d135      	bne.n	800a94c <decode_mcu_DC_first+0x14e>
 800a8e0:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a8e4:	f8da 2014 	ldr.w	r2, [sl, #20]
 800a8e8:	444a      	add	r2, r9
 800a8ea:	f8ca 2014 	str.w	r2, [sl, #20]
 800a8ee:	e7c1      	b.n	800a874 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800a8f0:	006d      	lsls	r5, r5, #1
 800a8f2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a8f6:	d10e      	bne.n	800a916 <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	2275      	movs	r2, #117	; 0x75
 800a8fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a900:	4620      	mov	r0, r4
 800a902:	615a      	str	r2, [r3, #20]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a90c:	6133      	str	r3, [r6, #16]
}
 800a90e:	2001      	movs	r0, #1
 800a910:	b005      	add	sp, #20
 800a912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a916:	f10b 0b01 	add.w	fp, fp, #1
 800a91a:	e7c7      	b.n	800a8ac <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a91c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a920:	2301      	movs	r3, #1
 800a922:	fa03 f202 	lsl.w	r2, r3, r2
 800a926:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a92a:	bfcc      	ite	gt
 800a92c:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a92e:	1c7a      	addle	r2, r7, #1
 800a930:	0092      	lsls	r2, r2, #2
 800a932:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800a936:	e7cc      	b.n	800a8d2 <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 800a938:	4620      	mov	r0, r4
 800a93a:	9100      	str	r1, [sp, #0]
 800a93c:	f7ff fb0c 	bl	8009f58 <arith_decode>
 800a940:	9900      	ldr	r1, [sp, #0]
 800a942:	2800      	cmp	r0, #0
 800a944:	d0c8      	beq.n	800a8d8 <decode_mcu_DC_first+0xda>
 800a946:	ea49 0905 	orr.w	r9, r9, r5
 800a94a:	e7c5      	b.n	800a8d8 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 800a94c:	ea6f 0909 	mvn.w	r9, r9
 800a950:	e7c8      	b.n	800a8e4 <decode_mcu_DC_first+0xe6>
	...

0800a954 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a954:	6843      	ldr	r3, [r0, #4]
 800a956:	22bc      	movs	r2, #188	; 0xbc
 800a958:	2101      	movs	r1, #1
 800a95a:	681b      	ldr	r3, [r3, #0]
{
 800a95c:	b570      	push	{r4, r5, r6, lr}
 800a95e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a960:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800a962:	4b14      	ldr	r3, [pc, #80]	; (800a9b4 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a964:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800a966:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800a96a:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 800a96c:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 800a970:	2100      	movs	r1, #0
 800a972:	f01f feff 	bl	802a774 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800a976:	2371      	movs	r3, #113	; 0x71
 800a978:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 800a97c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a980:	b17b      	cbz	r3, 800a9a2 <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a982:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a984:	2101      	movs	r1, #1
 800a986:	6863      	ldr	r3, [r4, #4]
 800a988:	4620      	mov	r0, r4
 800a98a:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a98c:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4798      	blx	r3
 800a992:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800a994:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a99a:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800a99e:	42ab      	cmp	r3, r5
 800a9a0:	dc00      	bgt.n	800a9a4 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 800a9a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9a8:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a9aa:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 800a9ac:	f01f fee2 	bl	802a774 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a9b0:	e7f2      	b.n	800a998 <jinit_arith_decoder+0x44>
 800a9b2:	bf00      	nop
 800a9b4:	0800a035 	.word	0x0800a035

0800a9b8 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800a9b8:	4770      	bx	lr
	...

0800a9bc <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a9bc:	6803      	ldr	r3, [r0, #0]
 800a9be:	227b      	movs	r2, #123	; 0x7b
 800a9c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 800a9c4:	b510      	push	{r4, lr}
 800a9c6:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a9c8:	615a      	str	r2, [r3, #20]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800a9ce:	69a3      	ldr	r3, [r4, #24]
 800a9d0:	4a02      	ldr	r2, [pc, #8]	; (800a9dc <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800a9d2:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800a9d4:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	605a      	str	r2, [r3, #4]
}
 800a9da:	bd10      	pop	{r4, pc}
 800a9dc:	0802e05c 	.word	0x0802e05c

0800a9e0 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800a9e0:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800a9e2:	1e0c      	subs	r4, r1, #0
{
 800a9e4:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800a9e6:	dd08      	ble.n	800a9fa <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800a9e8:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800a9ea:	6869      	ldr	r1, [r5, #4]
 800a9ec:	42a1      	cmp	r1, r4
 800a9ee:	db05      	blt.n	800a9fc <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800a9f0:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a9f2:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 800a9f4:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a9f6:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800a9f8:	602b      	str	r3, [r5, #0]
  }
}
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 800a9fc:	68eb      	ldr	r3, [r5, #12]
 800a9fe:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 800aa00:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 800aa02:	4798      	blx	r3
 800aa04:	e7f1      	b.n	800a9ea <skip_input_data+0xa>

0800aa06 <term_source>:
 800aa06:	4770      	bx	lr

0800aa08 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800aa08:	b570      	push	{r4, r5, r6, lr}
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800aa0e:	460d      	mov	r5, r1
 800aa10:	b101      	cbz	r1, 800aa14 <jpeg_mem_src+0xc>
 800aa12:	b92a      	cbnz	r2, 800aa20 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	222b      	movs	r2, #43	; 0x2b
 800aa18:	4620      	mov	r0, r4
 800aa1a:	615a      	str	r2, [r3, #20]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800aa20:	69a1      	ldr	r1, [r4, #24]
 800aa22:	b929      	cbnz	r1, 800aa30 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800aa24:	6863      	ldr	r3, [r4, #4]
 800aa26:	221c      	movs	r2, #28
 800aa28:	4620      	mov	r0, r4
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800aa2e:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800aa30:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800aa32:	4a06      	ldr	r2, [pc, #24]	; (800aa4c <jpeg_mem_src+0x44>)
 800aa34:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800aa36:	4a06      	ldr	r2, [pc, #24]	; (800aa50 <jpeg_mem_src+0x48>)
 800aa38:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800aa3a:	4a06      	ldr	r2, [pc, #24]	; (800aa54 <jpeg_mem_src+0x4c>)
 800aa3c:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800aa3e:	4a06      	ldr	r2, [pc, #24]	; (800aa58 <jpeg_mem_src+0x50>)
 800aa40:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800aa42:	4a06      	ldr	r2, [pc, #24]	; (800aa5c <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800aa44:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800aa48:	619a      	str	r2, [r3, #24]
}
 800aa4a:	bd70      	pop	{r4, r5, r6, pc}
 800aa4c:	0800a9b9 	.word	0x0800a9b9
 800aa50:	0800a9bd 	.word	0x0800a9bd
 800aa54:	0800a9e1 	.word	0x0800a9e1
 800aa58:	0800ec39 	.word	0x0800ec39
 800aa5c:	0800aa07 	.word	0x0800aa07

0800aa60 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800aa60:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800aa64:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800aa68:	2a01      	cmp	r2, #1
 800aa6a:	dd05      	ble.n	800aa78 <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 800aa6c:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800aa6e:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800aa70:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800aa72:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800aa76:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800aa78:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800aa7c:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800aa80:	3a01      	subs	r2, #1
 800aa82:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800aa86:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800aa88:	bf34      	ite	cc
 800aa8a:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800aa8c:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 800aa8e:	e7ee      	b.n	800aa6e <start_iMCU_row+0xe>

0800aa90 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800aa90:	2200      	movs	r2, #0
 800aa92:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 800aa96:	f7ff bfe3 	b.w	800aa60 <start_iMCU_row>

0800aa9a <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	4770      	bx	lr

0800aa9e <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800aa9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa2:	f500 7baa 	add.w	fp, r0, #340	; 0x154
 800aaa6:	b08f      	sub	sp, #60	; 0x3c
 800aaa8:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800aaaa:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aaae:	465f      	mov	r7, fp
 800aab0:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800aab2:	f04f 0801 	mov.w	r8, #1
 800aab6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aaba:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800aabe:	42b3      	cmp	r3, r6
 800aac0:	dc13      	bgt.n	800aaea <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800aac2:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800aac4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800aac8:	69eb      	ldr	r3, [r5, #28]
 800aaca:	42b3      	cmp	r3, r6
 800aacc:	dc22      	bgt.n	800ab14 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800aace:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800aad2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800aad6:	3301      	adds	r3, #1
 800aad8:	4293      	cmp	r3, r2
 800aada:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800aade:	d270      	bcs.n	800abc2 <consume_data+0x124>
    start_iMCU_row(cinfo);
 800aae0:	4620      	mov	r0, r4
 800aae2:	f7ff ffbd 	bl	800aa60 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800aae6:	2003      	movs	r0, #3
 800aae8:	e044      	b.n	800ab74 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800aaea:	f857 1b04 	ldr.w	r1, [r7], #4
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800aaee:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800aaf0:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800aaf2:	6849      	ldr	r1, [r1, #4]
 800aaf4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800aaf8:	3112      	adds	r1, #18
 800aafa:	f8cd 8000 	str.w	r8, [sp]
 800aafe:	435a      	muls	r2, r3
 800ab00:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800ab04:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800ab08:	4620      	mov	r0, r4
 800ab0a:	47d0      	blx	sl
 800ab0c:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ab10:	3601      	adds	r6, #1
 800ab12:	e7d2      	b.n	800aaba <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800ab14:	00b3      	lsls	r3, r6, #2
 800ab16:	696f      	ldr	r7, [r5, #20]
 800ab18:	9308      	str	r3, [sp, #32]
 800ab1a:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800ab1e:	42bb      	cmp	r3, r7
 800ab20:	f04f 0300 	mov.w	r3, #0
 800ab24:	d94a      	bls.n	800abbc <consume_data+0x11e>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ab26:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800ab2a:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800ab2c:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ab2e:	9206      	str	r2, [sp, #24]
 800ab30:	e013      	b.n	800ab5a <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800ab32:	f85a 2b04 	ldr.w	r2, [sl], #4
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ab36:	f04f 0c00 	mov.w	ip, #0
 800ab3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab3e:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 800ab42:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800ab44:	fb07 f20e 	mul.w	r2, r7, lr
 800ab48:	01d2      	lsls	r2, r2, #7
 800ab4a:	9204      	str	r2, [sp, #16]
 800ab4c:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800ab50:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ab52:	9a05      	ldr	r2, [sp, #20]
 800ab54:	4562      	cmp	r2, ip
 800ab56:	dc10      	bgt.n	800ab7a <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ab58:	3301      	adds	r3, #1
 800ab5a:	9a06      	ldr	r2, [sp, #24]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	dce8      	bgt.n	800ab32 <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800ab60:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800ab64:	f105 0120 	add.w	r1, r5, #32
 800ab68:	4620      	mov	r0, r4
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	4798      	blx	r3
 800ab6e:	bb18      	cbnz	r0, 800abb8 <consume_data+0x11a>
	coef->MCU_ctr = MCU_col_num;
 800ab70:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800ab74:	b00f      	add	sp, #60	; 0x3c
 800ab76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800ab7a:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800ab7e:	9904      	ldr	r1, [sp, #16]
 800ab80:	f852 2008 	ldr.w	r2, [r2, r8]
 800ab84:	440a      	add	r2, r1
 800ab86:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800ab88:	9a03      	ldr	r2, [sp, #12]
 800ab8a:	f102 0108 	add.w	r1, r2, #8
 800ab8e:	2200      	movs	r2, #0
 800ab90:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800ab94:	9807      	ldr	r0, [sp, #28]
 800ab96:	4596      	cmp	lr, r2
 800ab98:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 800ab9c:	dc08      	bgt.n	800abb0 <consume_data+0x112>
 800ab9e:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800aba0:	f10c 0c01 	add.w	ip, ip, #1
 800aba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba6:	f108 0804 	add.w	r8, r8, #4
 800abaa:	4411      	add	r1, r2
 800abac:	9103      	str	r1, [sp, #12]
 800abae:	e7d0      	b.n	800ab52 <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800abb0:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800abb2:	f841 0b04 	str.w	r0, [r1], #4
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800abb6:	e7ed      	b.n	800ab94 <consume_data+0xf6>
	 MCU_col_num++) {
 800abb8:	3701      	adds	r7, #1
 800abba:	e7ae      	b.n	800ab1a <consume_data+0x7c>
       yoffset++) {
 800abbc:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800abbe:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800abc0:	e782      	b.n	800aac8 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800abc2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800abc6:	4620      	mov	r0, r4
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800abcc:	2004      	movs	r0, #4
 800abce:	e7d1      	b.n	800ab74 <consume_data+0xd6>

0800abd0 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800abd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd4:	4604      	mov	r4, r0
 800abd6:	b089      	sub	sp, #36	; 0x24
 800abd8:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800abda:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800abde:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800abe2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800abe6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800abea:	429a      	cmp	r2, r3
 800abec:	db1d      	blt.n	800ac2a <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800abee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800abf2:	d103      	bne.n	800abfc <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800abf4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d916      	bls.n	800ac2a <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800abfc:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800abfe:	2600      	movs	r6, #0
 800ac00:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ac04:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800ac06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ac0a:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ac0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800ac0e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ac12:	42b3      	cmp	r3, r6
 800ac14:	dc13      	bgt.n	800ac3e <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800ac16:	1c50      	adds	r0, r2, #1
 800ac18:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800ac1c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800ac20:	4290      	cmp	r0, r2
 800ac22:	bf2c      	ite	cs
 800ac24:	2004      	movcs	r0, #4
 800ac26:	2003      	movcc	r0, #3
 800ac28:	e006      	b.n	800ac38 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800ac2a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ac2e:	4620      	mov	r0, r4
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4798      	blx	r3
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d1d4      	bne.n	800abe2 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800ac38:	b009      	add	sp, #36	; 0x24
 800ac3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800ac3e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ac40:	b913      	cbnz	r3, 800ac48 <decompress_data+0x78>
       ci++, compptr++) {
 800ac42:	3601      	adds	r6, #1
 800ac44:	3558      	adds	r5, #88	; 0x58
 800ac46:	e7e1      	b.n	800ac0c <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800ac48:	6861      	ldr	r1, [r4, #4]
 800ac4a:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800ac4c:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800ac4e:	9000      	str	r0, [sp, #0]
 800ac50:	4620      	mov	r0, r4
 800ac52:	6a0f      	ldr	r7, [r1, #32]
 800ac54:	435a      	muls	r2, r3
 800ac56:	9906      	ldr	r1, [sp, #24]
 800ac58:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800ac5c:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800ac5e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800ac62:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800ac64:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	68eb      	ldr	r3, [r5, #12]
 800ac6a:	d221      	bcs.n	800acb0 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800ac6c:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800ac6e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ac72:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800ac74:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 800ac7c:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ac80:	9202      	str	r2, [sp, #8]
 800ac82:	9a02      	ldr	r2, [sp, #8]
 800ac84:	4552      	cmp	r2, sl
 800ac86:	dadc      	bge.n	800ac42 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800ac88:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 800ac8a:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800ac8e:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800ac90:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800ac92:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ac96:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800ac98:	69e9      	ldr	r1, [r5, #28]
 800ac9a:	9a05      	ldr	r2, [sp, #20]
 800ac9c:	4541      	cmp	r1, r8
 800ac9e:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800aca2:	d80f      	bhi.n	800acc4 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800aca4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800aca6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800acaa:	9a02      	ldr	r2, [sp, #8]
 800acac:	3201      	adds	r2, #1
 800acae:	e7e7      	b.n	800ac80 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800acb0:	6a2a      	ldr	r2, [r5, #32]
 800acb2:	fbb2 f1f3 	udiv	r1, r2, r3
 800acb6:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800acba:	f1ba 0f00 	cmp.w	sl, #0
 800acbe:	bf08      	it	eq
 800acc0:	469a      	moveq	sl, r3
 800acc2:	e7d4      	b.n	800ac6e <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800acc4:	f8cd 9000 	str.w	r9, [sp]
 800acc8:	4629      	mov	r1, r5
 800acca:	9307      	str	r3, [sp, #28]
 800accc:	4620      	mov	r0, r4
 800acce:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800acd0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800acd2:	f108 0801 	add.w	r8, r8, #1
 800acd6:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800acd8:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800acda:	e7dd      	b.n	800ac98 <decompress_data+0xc8>

0800acdc <start_output_pass>:
{
 800acdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ace0:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800ace4:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800ace6:	692b      	ldr	r3, [r5, #16]
 800ace8:	b323      	cbz	r3, 800ad34 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800acea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800acec:	2b00      	cmp	r3, #0
 800acee:	d04b      	beq.n	800ad88 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800acf0:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d047      	beq.n	800ad88 <start_output_pass+0xac>
 800acf8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d043      	beq.n	800ad88 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800ad00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ad02:	b93b      	cbnz	r3, 800ad14 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ad04:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800ad06:	2118      	movs	r1, #24
 800ad08:	6843      	ldr	r3, [r0, #4]
 800ad0a:	434a      	muls	r2, r1
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800ad12:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ad14:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800ad16:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ad1a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800ad1e:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800ad22:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ad24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ad26:	fb0e c703 	mla	r7, lr, r3, ip
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	db07      	blt.n	800ad3e <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800ad2e:	b359      	cbz	r1, 800ad88 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800ad30:	4b16      	ldr	r3, [pc, #88]	; (800ad8c <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800ad32:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800ad3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800ad3e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ad40:	b312      	cbz	r2, 800ad88 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800ad42:	8816      	ldrh	r6, [r2, #0]
 800ad44:	b306      	cbz	r6, 800ad88 <start_output_pass+0xac>
 800ad46:	8856      	ldrh	r6, [r2, #2]
 800ad48:	b1f6      	cbz	r6, 800ad88 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800ad4a:	8a16      	ldrh	r6, [r2, #16]
 800ad4c:	b1e6      	cbz	r6, 800ad88 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800ad4e:	8c16      	ldrh	r6, [r2, #32]
 800ad50:	b1d6      	cbz	r6, 800ad88 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800ad52:	8a56      	ldrh	r6, [r2, #18]
 800ad54:	b1c6      	cbz	r6, 800ad88 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800ad56:	8892      	ldrh	r2, [r2, #4]
 800ad58:	b1b2      	cbz	r2, 800ad88 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800ad5a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800ad5e:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800ad60:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800ad62:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800ad66:	2a00      	cmp	r2, #0
 800ad68:	db0e      	blt.n	800ad88 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800ad6a:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800ad6c:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800ad70:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800ad72:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800ad76:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800ad7a:	bf18      	it	ne
 800ad7c:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800ad7e:	2a06      	cmp	r2, #6
 800ad80:	d1f4      	bne.n	800ad6c <start_output_pass+0x90>
       ci++, compptr++) {
 800ad82:	3301      	adds	r3, #1
 800ad84:	3058      	adds	r0, #88	; 0x58
 800ad86:	e7cd      	b.n	800ad24 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800ad88:	4b01      	ldr	r3, [pc, #4]	; (800ad90 <start_output_pass+0xb4>)
 800ad8a:	e7d2      	b.n	800ad32 <start_output_pass+0x56>
 800ad8c:	0800af13 	.word	0x0800af13
 800ad90:	0800abd1 	.word	0x0800abd1

0800ad94 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800ad94:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800ad98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800ad9c:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ad9e:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800ada2:	4604      	mov	r4, r0
 800ada4:	ed2d 8b02 	vpush	{d8}
 800ada8:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800adaa:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800adac:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800adb0:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800adb2:	3b01      	subs	r3, #1
 800adb4:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800adb6:	69ab      	ldr	r3, [r5, #24]
 800adb8:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800adba:	f105 0320 	add.w	r3, r5, #32
 800adbe:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800adc2:	69eb      	ldr	r3, [r5, #28]
 800adc4:	9a03      	ldr	r2, [sp, #12]
 800adc6:	4293      	cmp	r3, r2
 800adc8:	dc13      	bgt.n	800adf2 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800adca:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800adce:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800add2:	3301      	adds	r3, #1
 800add4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800add8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800addc:	3301      	adds	r3, #1
 800adde:	4293      	cmp	r3, r2
 800ade0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800ade4:	f080 808e 	bcs.w	800af04 <decompress_onepass+0x170>
    start_iMCU_row(cinfo);
 800ade8:	4620      	mov	r0, r4
 800adea:	f7ff fe39 	bl	800aa60 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800adee:	2003      	movs	r0, #3
 800adf0:	e02a      	b.n	800ae48 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800adf2:	696f      	ldr	r7, [r5, #20]
 800adf4:	9b08      	ldr	r3, [sp, #32]
 800adf6:	429f      	cmp	r7, r3
 800adf8:	d905      	bls.n	800ae06 <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800adfe:	9b03      	ldr	r3, [sp, #12]
 800ae00:	3301      	adds	r3, #1
 800ae02:	9303      	str	r3, [sp, #12]
 800ae04:	e7dd      	b.n	800adc2 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800ae06:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800ae0a:	b133      	cbz	r3, 800ae1a <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800ae0c:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800ae10:	2100      	movs	r1, #0
 800ae12:	6a28      	ldr	r0, [r5, #32]
 800ae14:	01d2      	lsls	r2, r2, #7
 800ae16:	f01f fcad 	bl	802a774 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800ae1a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800ae1e:	ee18 1a10 	vmov	r1, s16
 800ae22:	4620      	mov	r0, r4
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	4798      	blx	r3
 800ae28:	b158      	cbz	r0, 800ae42 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ae2a:	f04f 0b00 	mov.w	fp, #0
 800ae2e:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 800ae32:	46da      	mov	sl, fp
 800ae34:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ae36:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800ae3a:	455b      	cmp	r3, fp
 800ae3c:	dc09      	bgt.n	800ae52 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800ae3e:	3701      	adds	r7, #1
 800ae40:	e7d8      	b.n	800adf4 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800ae42:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 800ae44:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800ae48:	b00f      	add	sp, #60	; 0x3c
 800ae4a:	ecbd 8b02 	vpop	{d8}
 800ae4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800ae52:	9b05      	ldr	r3, [sp, #20]
 800ae54:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae58:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 800ae5a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ae5c:	b923      	cbnz	r3, 800ae68 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800ae5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae60:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ae62:	f10b 0b01 	add.w	fp, fp, #1
 800ae66:	e7e6      	b.n	800ae36 <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800ae68:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ae6a:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800ae6e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800ae72:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800ae74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800ae7c:	9b08      	ldr	r3, [sp, #32]
 800ae7e:	429f      	cmp	r7, r3
 800ae80:	bf34      	ite	cc
 800ae82:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800ae84:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800ae86:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 800ae88:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800ae8a:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800ae8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ae8e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800ae92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800ae96:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800ae98:	437a      	muls	r2, r7
 800ae9a:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ae9c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800ae9e:	4542      	cmp	r2, r8
 800aea0:	dddf      	ble.n	800ae62 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800aea2:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800aea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aea8:	4282      	cmp	r2, r0
 800aeaa:	d304      	bcc.n	800aeb6 <decompress_onepass+0x122>
 800aeac:	9a03      	ldr	r2, [sp, #12]
 800aeae:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800aeb0:	4442      	add	r2, r8
 800aeb2:	4290      	cmp	r0, r2
 800aeb4:	dd0b      	ble.n	800aece <decompress_onepass+0x13a>
 800aeb6:	f10a 0908 	add.w	r9, sl, #8
 800aeba:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 800aebe:	f04f 0900 	mov.w	r9, #0
 800aec2:	9207      	str	r2, [sp, #28]
 800aec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aec6:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800aec8:	9a06      	ldr	r2, [sp, #24]
 800aeca:	4591      	cmp	r9, r2
 800aecc:	db07      	blt.n	800aede <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 800aece:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800aed0:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 800aed4:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800aed6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800aed8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800aedc:	e7de      	b.n	800ae9c <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800aede:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800aee0:	f109 0901 	add.w	r9, r9, #1
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800aee4:	f850 2b04 	ldr.w	r2, [r0], #4
 800aee8:	9007      	str	r0, [sp, #28]
	      (*inverse_DCT) (cinfo, compptr,
 800aeea:	9804      	ldr	r0, [sp, #16]
 800aeec:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 800aef0:	9000      	str	r0, [sp, #0]
 800aef2:	4620      	mov	r0, r4
 800aef4:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800aef6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aef8:	9b04      	ldr	r3, [sp, #16]
 800aefa:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800aefc:	4413      	add	r3, r2
 800aefe:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800af00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af02:	e7e1      	b.n	800aec8 <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800af04:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800af08:	4620      	mov	r0, r4
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800af0e:	2004      	movs	r0, #4
 800af10:	e79a      	b.n	800ae48 <decompress_onepass+0xb4>

0800af12 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800af12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800af16:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800af1a:	b0c5      	sub	sp, #276	; 0x114
 800af1c:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800af1e:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800af22:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800af24:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800af26:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800af2a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800af2e:	428b      	cmp	r3, r1
 800af30:	dc03      	bgt.n	800af3a <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800af32:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800af36:	6950      	ldr	r0, [r2, #20]
 800af38:	b1a8      	cbz	r0, 800af66 <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800af3a:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800af3c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800af40:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800af42:	2300      	movs	r3, #0
 800af44:	9303      	str	r3, [sp, #12]
 800af46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af48:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800af4a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800af4e:	428b      	cmp	r3, r1
 800af50:	dc1e      	bgt.n	800af90 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800af52:	3201      	adds	r2, #1
 800af54:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 800af58:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800af5c:	4282      	cmp	r2, r0
 800af5e:	bf2c      	ite	cs
 800af60:	2004      	movcs	r0, #4
 800af62:	2003      	movcc	r0, #3
 800af64:	e011      	b.n	800af8a <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800af66:	428b      	cmp	r3, r1
 800af68:	d10a      	bne.n	800af80 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800af6a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800af6e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800af72:	2900      	cmp	r1, #0
 800af74:	bf08      	it	eq
 800af76:	3301      	addeq	r3, #1
 800af78:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800af7c:	4299      	cmp	r1, r3
 800af7e:	d8dc      	bhi.n	800af3a <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800af80:	6813      	ldr	r3, [r2, #0]
 800af82:	4620      	mov	r0, r4
 800af84:	4798      	blx	r3
 800af86:	2800      	cmp	r0, #0
 800af88:	d1cd      	bne.n	800af26 <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800af8a:	b045      	add	sp, #276	; 0x114
 800af8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800af90:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800af92:	b923      	cbnz	r3, 800af9e <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 800af94:	9b03      	ldr	r3, [sp, #12]
 800af96:	3558      	adds	r5, #88	; 0x58
 800af98:	3301      	adds	r3, #1
 800af9a:	9303      	str	r3, [sp, #12]
 800af9c:	e7d3      	b.n	800af46 <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800af9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 800afa0:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800afa2:	4293      	cmp	r3, r2
 800afa4:	f240 815a 	bls.w	800b25c <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800afa8:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800afaa:	4681      	mov	r9, r0
      last_row = FALSE;
 800afac:	2100      	movs	r1, #0
      last_row = TRUE;
 800afae:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 800afb0:	6861      	ldr	r1, [r4, #4]
 800afb2:	9e03      	ldr	r6, [sp, #12]
 800afb4:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800afb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800afba:	3148      	adds	r1, #72	; 0x48
 800afbc:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800afc0:	2a00      	cmp	r2, #0
 800afc2:	f000 8159 	beq.w	800b278 <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 800afc6:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800afc8:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800afca:	4403      	add	r3, r0
 800afcc:	4342      	muls	r2, r0
 800afce:	4620      	mov	r0, r4
 800afd0:	9600      	str	r6, [sp, #0]
 800afd2:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800afd4:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800afd6:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800afd8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800afdc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afde:	2218      	movs	r2, #24
 800afe0:	9903      	ldr	r1, [sp, #12]
 800afe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800afe4:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800afe6:	fb02 3301 	mla	r3, r2, r1, r3
 800afea:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 800afec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800afee:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800aff0:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800aff4:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800aff8:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800affa:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800affc:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 800affe:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800b000:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800b004:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 800b00c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b00e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800b012:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b014:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800b018:	9313      	str	r3, [sp, #76]	; 0x4c
 800b01a:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800b01e:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b020:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800b024:	9315      	str	r3, [sp, #84]	; 0x54
 800b026:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800b02a:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b02c:	01f3      	lsls	r3, r6, #7
 800b02e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b030:	0233      	lsls	r3, r6, #8
 800b032:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b034:	01cb      	lsls	r3, r1, #7
 800b036:	9319      	str	r3, [sp, #100]	; 0x64
 800b038:	020b      	lsls	r3, r1, #8
 800b03a:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b03c:	01d3      	lsls	r3, r2, #7
 800b03e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b040:	0213      	lsls	r3, r2, #8
 800b042:	931c      	str	r3, [sp, #112]	; 0x70
 800b044:	1f03      	subs	r3, r0, #4
 800b046:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b048:	2300      	movs	r3, #0
 800b04a:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 800b04c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800b050:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b052:	9b04      	ldr	r3, [sp, #16]
 800b054:	454b      	cmp	r3, r9
 800b056:	da9d      	bge.n	800af94 <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 800b058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b05a:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800b05e:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 800b060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b062:	b11b      	cbz	r3, 800b06c <decompress_smooth_data+0x15a>
 800b064:	9b04      	ldr	r3, [sp, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 810c 	beq.w	800b284 <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 800b06c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b06e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b072:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 800b074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b076:	b123      	cbz	r3, 800b082 <decompress_smooth_data+0x170>
 800b078:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b07a:	9a04      	ldr	r2, [sp, #16]
 800b07c:	4293      	cmp	r3, r2
 800b07e:	f000 8104 	beq.w	800b28a <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 800b082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b088:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800b08a:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 800b08c:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b08e:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800b092:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b094:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800b096:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800b09a:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 800b09c:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800b09e:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800b0a0:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b0a2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800b0a6:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800b0aa:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800b0ac:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b0ae:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	a924      	add	r1, sp, #144	; 0x90
 800b0b6:	4640      	mov	r0, r8
 800b0b8:	930a      	str	r3, [sp, #40]	; 0x28
 800b0ba:	f00b fe0e 	bl	8016cda <jcopy_block_row>
	if (block_num < last_block_column) {
 800b0be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b0c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0c6:	f240 80ea 	bls.w	800b29e <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 800b0ca:	9a07      	ldr	r2, [sp, #28]
 800b0cc:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800b0d0:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 800b0d2:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 800b0d6:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 800b0d8:	9a08      	ldr	r2, [sp, #32]
 800b0da:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800b0de:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800b0e0:	9a05      	ldr	r2, [sp, #20]
 800b0e2:	6851      	ldr	r1, [r2, #4]
 800b0e4:	b1c1      	cbz	r1, 800b118 <decompress_smooth_data+0x206>
 800b0e6:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800b0ea:	b9aa      	cbnz	r2, 800b118 <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 800b0ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0ee:	1a3a      	subs	r2, r7, r0
 800b0f0:	9806      	ldr	r0, [sp, #24]
 800b0f2:	4342      	muls	r2, r0
	  if (num >= 0) {
 800b0f4:	2024      	movs	r0, #36	; 0x24
 800b0f6:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800b0f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 800b0fa:	f100 80d7 	bmi.w	800b2ac <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800b0fe:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b100:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800b102:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b104:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b108:	dd04      	ble.n	800b114 <decompress_smooth_data+0x202>
 800b10a:	fa06 f101 	lsl.w	r1, r6, r1
 800b10e:	4291      	cmp	r1, r2
 800b110:	dc00      	bgt.n	800b114 <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 800b112:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800b114:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800b118:	9a05      	ldr	r2, [sp, #20]
 800b11a:	6891      	ldr	r1, [r2, #8]
 800b11c:	b1c9      	cbz	r1, 800b152 <decompress_smooth_data+0x240>
 800b11e:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800b122:	b9b2      	cbnz	r2, 800b152 <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 800b124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b126:	9806      	ldr	r0, [sp, #24]
 800b128:	ebab 0202 	sub.w	r2, fp, r2
 800b12c:	4342      	muls	r2, r0
	  if (num >= 0) {
 800b12e:	2024      	movs	r0, #36	; 0x24
 800b130:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b132:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 800b134:	f100 80c8 	bmi.w	800b2c8 <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b138:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b13a:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b13c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b13e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b142:	dd04      	ble.n	800b14e <decompress_smooth_data+0x23c>
 800b144:	fa06 f101 	lsl.w	r1, r6, r1
 800b148:	4291      	cmp	r1, r2
 800b14a:	dc00      	bgt.n	800b14e <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 800b14c:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800b14e:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800b152:	9a05      	ldr	r2, [sp, #20]
 800b154:	68d1      	ldr	r1, [r2, #12]
 800b156:	b1d1      	cbz	r1, 800b18e <decompress_smooth_data+0x27c>
 800b158:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800b15c:	b9ba      	cbnz	r2, 800b18e <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800b15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b160:	9806      	ldr	r0, [sp, #24]
 800b162:	445a      	add	r2, fp
 800b164:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800b168:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b16a:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 800b16c:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800b170:	f100 80b8 	bmi.w	800b2e4 <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b174:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b176:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b178:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b17a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b17e:	dd04      	ble.n	800b18a <decompress_smooth_data+0x278>
 800b180:	fa06 f101 	lsl.w	r1, r6, r1
 800b184:	4291      	cmp	r1, r2
 800b186:	dc00      	bgt.n	800b18a <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 800b188:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800b18a:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800b18e:	9a05      	ldr	r2, [sp, #20]
 800b190:	6912      	ldr	r2, [r2, #16]
 800b192:	b1e2      	cbz	r2, 800b1ce <decompress_smooth_data+0x2bc>
 800b194:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800b198:	b9c9      	cbnz	r1, 800b1ce <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800b19a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b19c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b19e:	1a09      	subs	r1, r1, r0
 800b1a0:	1acb      	subs	r3, r1, r3
 800b1a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b1a4:	440b      	add	r3, r1
 800b1a6:	9906      	ldr	r1, [sp, #24]
 800b1a8:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b1aa:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 800b1ac:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800b1b0:	f100 80a6 	bmi.w	800b300 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b1b4:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b1b6:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b1b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b1ba:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b1be:	dd04      	ble.n	800b1ca <decompress_smooth_data+0x2b8>
 800b1c0:	fa06 f202 	lsl.w	r2, r6, r2
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	dc00      	bgt.n	800b1ca <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 800b1c8:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800b1ca:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800b1ce:	9b05      	ldr	r3, [sp, #20]
 800b1d0:	695a      	ldr	r2, [r3, #20]
 800b1d2:	b1da      	cbz	r2, 800b20c <decompress_smooth_data+0x2fa>
 800b1d4:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800b1d8:	b9c3      	cbnz	r3, 800b20c <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800b1da:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b1dc:	463b      	mov	r3, r7
 800b1de:	440b      	add	r3, r1
 800b1e0:	9906      	ldr	r1, [sp, #24]
 800b1e2:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800b1e6:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b1e8:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 800b1ea:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800b1ee:	f100 8095 	bmi.w	800b31c <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b1f2:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b1f4:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b1f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b1f8:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b1fc:	dd04      	ble.n	800b208 <decompress_smooth_data+0x2f6>
 800b1fe:	fa06 f202 	lsl.w	r2, r6, r2
 800b202:	429a      	cmp	r2, r3
 800b204:	dc00      	bgt.n	800b208 <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 800b206:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800b208:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800b20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b20e:	aa24      	add	r2, sp, #144	; 0x90
 800b210:	4629      	mov	r1, r5
 800b212:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	4620      	mov	r0, r4
 800b218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b21a:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800b21e:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b220:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800b222:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b224:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b226:	3380      	adds	r3, #128	; 0x80
 800b228:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800b22c:	9307      	str	r3, [sp, #28]
 800b22e:	9b08      	ldr	r3, [sp, #32]
 800b230:	3380      	adds	r3, #128	; 0x80
 800b232:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 800b234:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b236:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b238:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 800b23a:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b23c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b23e:	3301      	adds	r3, #1
 800b240:	930c      	str	r3, [sp, #48]	; 0x30
 800b242:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b246:	428a      	cmp	r2, r1
 800b248:	d222      	bcs.n	800b290 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 800b24a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b24c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b24e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b252:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b254:	9b04      	ldr	r3, [sp, #16]
 800b256:	3301      	adds	r3, #1
 800b258:	9304      	str	r3, [sp, #16]
 800b25a:	e6fa      	b.n	800b052 <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800b25c:	6a2b      	ldr	r3, [r5, #32]
 800b25e:	fbb3 f1f0 	udiv	r1, r3, r0
 800b262:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800b266:	f1b9 0f00 	cmp.w	r9, #0
 800b26a:	d103      	bne.n	800b274 <decompress_smooth_data+0x362>
 800b26c:	4603      	mov	r3, r0
 800b26e:	4681      	mov	r9, r0
      last_row = TRUE;
 800b270:	2101      	movs	r1, #1
 800b272:	e69c      	b.n	800afae <decompress_smooth_data+0x9c>
 800b274:	464b      	mov	r3, r9
 800b276:	e7fb      	b.n	800b270 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 800b278:	4620      	mov	r0, r4
 800b27a:	9200      	str	r2, [sp, #0]
 800b27c:	47c0      	blx	r8
      first_row = TRUE;
 800b27e:	2301      	movs	r3, #1
 800b280:	931d      	str	r3, [sp, #116]	; 0x74
 800b282:	e6ab      	b.n	800afdc <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 800b284:	f8cd 801c 	str.w	r8, [sp, #28]
 800b288:	e6f4      	b.n	800b074 <decompress_smooth_data+0x162>
 800b28a:	f8cd 8020 	str.w	r8, [sp, #32]
 800b28e:	e6fb      	b.n	800b088 <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 800b290:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 800b292:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 800b296:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 800b29a:	9209      	str	r2, [sp, #36]	; 0x24
 800b29c:	e709      	b.n	800b0b2 <decompress_smooth_data+0x1a0>
 800b29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800b2a4:	9211      	str	r2, [sp, #68]	; 0x44
 800b2a6:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800b2aa:	e719      	b.n	800b0e0 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b2ac:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b2ae:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b2b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b2b2:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b2b6:	dd05      	ble.n	800b2c4 <decompress_smooth_data+0x3b2>
 800b2b8:	fa06 f101 	lsl.w	r1, r6, r1
 800b2bc:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b2be:	bfd8      	it	le
 800b2c0:	f101 32ff 	addle.w	r2, r1, #4294967295	; 0xffffffff
	    pred = -pred;
 800b2c4:	4252      	negs	r2, r2
 800b2c6:	e725      	b.n	800b114 <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b2c8:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b2ca:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b2cc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b2ce:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b2d2:	dd05      	ble.n	800b2e0 <decompress_smooth_data+0x3ce>
 800b2d4:	fa06 f101 	lsl.w	r1, r6, r1
 800b2d8:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b2da:	bfd8      	it	le
 800b2dc:	f101 32ff 	addle.w	r2, r1, #4294967295	; 0xffffffff
	    pred = -pred;
 800b2e0:	4252      	negs	r2, r2
 800b2e2:	e734      	b.n	800b14e <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b2e4:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b2e6:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b2e8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b2ea:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b2ee:	dd05      	ble.n	800b2fc <decompress_smooth_data+0x3ea>
 800b2f0:	fa06 f101 	lsl.w	r1, r6, r1
 800b2f4:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b2f6:	bfd8      	it	le
 800b2f8:	f101 32ff 	addle.w	r2, r1, #4294967295	; 0xffffffff
	    pred = -pred;
 800b2fc:	4252      	negs	r2, r2
 800b2fe:	e744      	b.n	800b18a <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b300:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800b302:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b304:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b306:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b30a:	dd05      	ble.n	800b318 <decompress_smooth_data+0x406>
 800b30c:	fa06 f202 	lsl.w	r2, r6, r2
 800b310:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800b312:	bfd8      	it	le
 800b314:	f102 33ff 	addle.w	r3, r2, #4294967295	; 0xffffffff
	    pred = -pred;
 800b318:	425b      	negs	r3, r3
 800b31a:	e756      	b.n	800b1ca <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b31c:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800b31e:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b320:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b322:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b326:	dd05      	ble.n	800b334 <decompress_smooth_data+0x422>
 800b328:	fa06 f202 	lsl.w	r2, r6, r2
 800b32c:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800b32e:	bfd8      	it	le
 800b330:	f102 33ff 	addle.w	r3, r2, #4294967295	; 0xffffffff
	    pred = -pred;
 800b334:	425b      	negs	r3, r3
 800b336:	e767      	b.n	800b208 <decompress_smooth_data+0x2f6>

0800b338 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b338:	6843      	ldr	r3, [r0, #4]
 800b33a:	2274      	movs	r2, #116	; 0x74
{
 800b33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b340:	681b      	ldr	r3, [r3, #0]
{
 800b342:	b085      	sub	sp, #20
 800b344:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b346:	2101      	movs	r1, #1
{
 800b348:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b34a:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800b34c:	4b2c      	ldr	r3, [pc, #176]	; (800b400 <jinit_d_coef_controller+0xc8>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800b34e:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800b350:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b354:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800b356:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800b358:	f100 0948 	add.w	r9, r0, #72	; 0x48
 800b35c:	4b29      	ldr	r3, [pc, #164]	; (800b404 <jinit_d_coef_controller+0xcc>)
  coef->coef_bits_latch = NULL;
 800b35e:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800b360:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800b362:	b37e      	cbz	r6, 800b3c4 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b364:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800b368:	46ca      	mov	sl, r9
 800b36a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b36c:	42bb      	cmp	r3, r7
 800b36e:	dc07      	bgt.n	800b380 <jinit_d_coef_controller+0x48>
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 800b370:	4b25      	ldr	r3, [pc, #148]	; (800b408 <jinit_d_coef_controller+0xd0>)
 800b372:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_data;
 800b374:	4b25      	ldr	r3, [pc, #148]	; (800b40c <jinit_d_coef_controller+0xd4>)
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800b376:	e9c4 3903 	strd	r3, r9, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800b37a:	b005      	add	sp, #20
 800b37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800b380:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800b384:	f8d6 800c 	ldr.w	r8, [r6, #12]
      if (cinfo->progressive_mode)
 800b388:	b10b      	cbz	r3, 800b38e <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800b38a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b38e:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800b390:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b392:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800b394:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b396:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b39a:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b39e:	f00b fc82 	bl	8016ca6 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800b3a2:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b3a6:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800b3a8:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800b3ac:	f00b fc7b 	bl	8016ca6 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	9b03      	ldr	r3, [sp, #12]
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	e9cd 0800 	strd	r0, r8, [sp]
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47d8      	blx	fp
 800b3be:	f84a 0b04 	str.w	r0, [sl], #4
	 ci++, compptr++) {
 800b3c2:	e7d2      	b.n	800b36a <jinit_d_coef_controller+0x32>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b3c4:	686b      	ldr	r3, [r5, #4]
 800b3c6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b3ca:	2101      	movs	r1, #1
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b3d2:	f104 0320 	add.w	r3, r4, #32
 800b3d6:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800b3d8:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b3dc:	454b      	cmp	r3, r9
 800b3de:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800b3e2:	d1f9      	bne.n	800b3d8 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800b3e4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800b3e8:	b919      	cbnz	r1, 800b3f2 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800b3ea:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b3ee:	f01f f9c1 	bl	802a774 <memset>
    coef->pub.consume_data = dummy_consume_data;
 800b3f2:	4b07      	ldr	r3, [pc, #28]	; (800b410 <jinit_d_coef_controller+0xd8>)
 800b3f4:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 800b3f6:	4b07      	ldr	r3, [pc, #28]	; (800b414 <jinit_d_coef_controller+0xdc>)
 800b3f8:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	6123      	str	r3, [r4, #16]
}
 800b3fe:	e7bc      	b.n	800b37a <jinit_d_coef_controller+0x42>
 800b400:	0800aa91 	.word	0x0800aa91
 800b404:	0800acdd 	.word	0x0800acdd
 800b408:	0800aa9f 	.word	0x0800aa9f
 800b40c:	0800abd1 	.word	0x0800abd1
 800b410:	0800aa9b 	.word	0x0800aa9b
 800b414:	0800ad95 	.word	0x0800ad95

0800b418 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b418:	6843      	ldr	r3, [r0, #4]
 800b41a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b41e:	2101      	movs	r1, #1
 800b420:	681b      	ldr	r3, [r3, #0]
{
 800b422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b426:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b428:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b42c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b42e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b432:	6863      	ldr	r3, [r4, #4]
 800b434:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800b436:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b438:	4620      	mov	r0, r4
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b43e:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800b440:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2101      	movs	r1, #1
 800b44a:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b44c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800b4cc <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b450:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b452:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800b454:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b456:	2101      	movs	r1, #1
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4620      	mov	r0, r4
 800b45c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b460:	4f17      	ldr	r7, [pc, #92]	; (800b4c0 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b462:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b464:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800b466:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b468:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b46a:	f8df e064 	ldr.w	lr, [pc, #100]	; 800b4d0 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b46e:	4915      	ldr	r1, [pc, #84]	; (800b4c4 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800b470:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b474:	4d14      	ldr	r5, [pc, #80]	; (800b4c8 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b476:	fb08 e203 	mla	r2, r8, r3, lr
 800b47a:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800b47c:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b480:	fb07 f203 	mul.w	r2, r7, r3
 800b484:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800b488:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800b48c:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800b48e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b492:	fb05 f203 	mul.w	r2, r5, r3
 800b496:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800b49a:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800b49e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b4a2:	fb01 f203 	mul.w	r2, r1, r3
 800b4a6:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800b4aa:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800b4ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4b8:	d1dd      	bne.n	800b476 <build_ycc_rgb_table+0x5e>
  }
}
 800b4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4be:	bf00      	nop
 800b4c0:	0001c5a2 	.word	0x0001c5a2
 800b4c4:	ffffa7e6 	.word	0xffffa7e6
 800b4c8:	ffff492e 	.word	0xffff492e
 800b4cc:	000166e9 	.word	0x000166e9
 800b4d0:	ff4d0b80 	.word	0xff4d0b80

0800b4d4 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b4d8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b4dc:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b4de:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800b4e0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b4e4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800b4e8:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b4ec:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800b4ee:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800b4f0:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800b4f2:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800b4f6:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800b4f8:	6920      	ldr	r0, [r4, #16]
 800b4fa:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800b4fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b4fe:	3a01      	subs	r2, #1
 800b500:	9210      	str	r2, [sp, #64]	; 0x40
 800b502:	d502      	bpl.n	800b50a <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b504:	b007      	add	sp, #28
 800b506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b50a:	9a05      	ldr	r2, [sp, #20]
 800b50c:	680c      	ldr	r4, [r1, #0]
 800b50e:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800b510:	f853 0b04 	ldr.w	r0, [r3], #4
 800b514:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800b518:	684c      	ldr	r4, [r1, #4]
 800b51a:	5964      	ldr	r4, [r4, r5]
 800b51c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    inptr2 = input_buf[2][input_row];
 800b520:	688c      	ldr	r4, [r1, #8]
 800b522:	5967      	ldr	r7, [r4, r5]
 800b524:	9c01      	ldr	r4, [sp, #4]
 800b526:	3f01      	subs	r7, #1
 800b528:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800b52c:	45d0      	cmp	r8, sl
 800b52e:	f100 0003 	add.w	r0, r0, #3
 800b532:	d0e3      	beq.n	800b4fc <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b534:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800b538:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b53c:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800b53e:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b542:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800b546:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b548:	fa0f fb8b 	sxth.w	fp, fp
 800b54c:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b54e:	5d65      	ldrb	r5, [r4, r5]
 800b550:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b554:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800b558:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800b55c:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800b55e:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b560:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800b562:	5d65      	ldrb	r5, [r4, r5]
 800b564:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800b568:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800b56c:	5d64      	ldrb	r4, [r4, r5]
 800b56e:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800b572:	e7db      	b.n	800b52c <ycc_rgb_convert+0x58>

0800b574 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b578:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800b57c:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800b580:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b582:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b584:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b586:	3d01      	subs	r5, #1
 800b588:	d501      	bpl.n	800b58e <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800b58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b58e:	189c      	adds	r4, r3, r2
 800b590:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800b592:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800b596:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800b59a:	6848      	ldr	r0, [r1, #4]
 800b59c:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800b5a0:	6888      	ldr	r0, [r1, #8]
 800b5a2:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	42b8      	cmp	r0, r7
 800b5aa:	d0ec      	beq.n	800b586 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800b5ac:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800b5b0:	f81c b000 	ldrb.w	fp, [ip, r0]
 800b5b4:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800b5b8:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800b5bc:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800b5c0:	4454      	add	r4, sl
 800b5c2:	f818 a000 	ldrb.w	sl, [r8, r0]
 800b5c6:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800b5ca:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800b5ce:	4454      	add	r4, sl
		 >> SCALEBITS);
 800b5d0:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800b5d2:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	e7e6      	b.n	800b5a8 <rgb_gray_convert+0x34>

0800b5da <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800b5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5de:	9d06      	ldr	r5, [sp, #24]
 800b5e0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b5e4:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b5e6:	3d01      	subs	r5, #1
 800b5e8:	d501      	bpl.n	800b5ee <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800b5ee:	1898      	adds	r0, r3, r2
 800b5f0:	680c      	ldr	r4, [r1, #0]
 800b5f2:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800b5f4:	684c      	ldr	r4, [r1, #4]
 800b5f6:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800b5fa:	688c      	ldr	r4, [r1, #8]
 800b5fc:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800b600:	2000      	movs	r0, #0
 800b602:	f853 4b04 	ldr.w	r4, [r3], #4
 800b606:	42b0      	cmp	r0, r6
 800b608:	f104 0403 	add.w	r4, r4, #3
 800b60c:	d0eb      	beq.n	800b5e6 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800b60e:	f817 8000 	ldrb.w	r8, [r7, r0]
 800b612:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800b616:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800b61a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800b61e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800b622:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800b624:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800b628:	e7ed      	b.n	800b606 <rgb_convert+0x2c>

0800b62a <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800b62a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b62e:	9e07      	ldr	r6, [sp, #28]
 800b630:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800b634:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800b636:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800b63a:	3e01      	subs	r6, #1
 800b63c:	d418      	bmi.n	800b670 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800b63e:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800b642:	2000      	movs	r0, #0
 800b644:	e00a      	b.n	800b65c <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800b646:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800b64a:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800b64e:	681c      	ldr	r4, [r3, #0]
 800b650:	eb05 080e 	add.w	r8, r5, lr
 800b654:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800b656:	4545      	cmp	r5, r8
 800b658:	d104      	bne.n	800b664 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800b65a:	3001      	adds	r0, #1
 800b65c:	42b8      	cmp	r0, r7
 800b65e:	dbf2      	blt.n	800b646 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800b660:	3304      	adds	r3, #4
 800b662:	e7ea      	b.n	800b63a <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800b664:	f815 9b01 	ldrb.w	r9, [r5], #1
 800b668:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800b66c:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800b66e:	e7f2      	b.n	800b656 <null_convert+0x2c>
  }
}
 800b670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b674 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b676:	9d05      	ldr	r5, [sp, #20]
 800b678:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b67c:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b67e:	3d01      	subs	r5, #1
 800b680:	d500      	bpl.n	800b684 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800b684:	6808      	ldr	r0, [r1, #0]
 800b686:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800b688:	f853 0b04 	ldr.w	r0, [r3], #4
 800b68c:	58a4      	ldr	r4, [r4, r2]
 800b68e:	eb04 0c07 	add.w	ip, r4, r7
 800b692:	4564      	cmp	r4, ip
 800b694:	f100 0003 	add.w	r0, r0, #3
 800b698:	d0f1      	beq.n	800b67e <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800b69a:	f814 6b01 	ldrb.w	r6, [r4], #1
 800b69e:	f800 6c03 	strb.w	r6, [r0, #-3]
 800b6a2:	f800 6c02 	strb.w	r6, [r0, #-2]
 800b6a6:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800b6aa:	e7f2      	b.n	800b692 <gray_rgb_convert+0x1e>

0800b6ac <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800b6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b6b0:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b6b4:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b6b6:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800b6b8:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b6bc:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800b6c0:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800b6c4:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800b6c6:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800b6ca:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800b6cc:	6920      	ldr	r0, [r4, #16]
 800b6ce:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800b6d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b6d2:	3a01      	subs	r2, #1
 800b6d4:	9210      	str	r2, [sp, #64]	; 0x40
 800b6d6:	d502      	bpl.n	800b6de <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800b6d8:	b007      	add	sp, #28
 800b6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b6de:	eb03 0008 	add.w	r0, r3, r8
 800b6e2:	680a      	ldr	r2, [r1, #0]
 800b6e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6e8:	5812      	ldr	r2, [r2, r0]
 800b6ea:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800b6ec:	684a      	ldr	r2, [r1, #4]
 800b6ee:	5812      	ldr	r2, [r2, r0]
 800b6f0:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800b6f2:	688a      	ldr	r2, [r1, #8]
 800b6f4:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800b6f8:	68ca      	ldr	r2, [r1, #12]
 800b6fa:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800b6fe:	2200      	movs	r2, #0
 800b700:	9800      	ldr	r0, [sp, #0]
 800b702:	3504      	adds	r5, #4
 800b704:	4282      	cmp	r2, r0
 800b706:	d0e3      	beq.n	800b6d0 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b708:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800b70c:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800b70e:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800b710:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800b714:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b716:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b71a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b71e:	4404      	add	r4, r0
 800b720:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b724:	5d34      	ldrb	r4, [r6, r4]
 800b726:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b72a:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800b72e:	9405      	str	r4, [sp, #20]
 800b730:	9c02      	ldr	r4, [sp, #8]
 800b732:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800b736:	9c05      	ldr	r4, [sp, #20]
 800b738:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800b73a:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800b73e:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b742:	5d34      	ldrb	r4, [r6, r4]
 800b744:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800b748:	9c01      	ldr	r4, [sp, #4]
 800b74a:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800b74e:	4420      	add	r0, r4
 800b750:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b754:	5c30      	ldrb	r0, [r6, r0]
 800b756:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b75a:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800b75e:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b760:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800b764:	e7cc      	b.n	800b700 <ycck_cmyk_convert+0x54>

0800b766 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800b766:	4770      	bx	lr

0800b768 <grayscale_convert>:
{
 800b768:	b513      	push	{r0, r1, r4, lr}
 800b76a:	460c      	mov	r4, r1
 800b76c:	4611      	mov	r1, r2
 800b76e:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800b770:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800b772:	6820      	ldr	r0, [r4, #0]
 800b774:	9301      	str	r3, [sp, #4]
 800b776:	9b04      	ldr	r3, [sp, #16]
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	2300      	movs	r3, #0
 800b77c:	f00b fa9b 	bl	8016cb6 <jcopy_sample_rows>
}
 800b780:	b002      	add	sp, #8
 800b782:	bd10      	pop	{r4, pc}

0800b784 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b784:	6843      	ldr	r3, [r0, #4]
 800b786:	221c      	movs	r2, #28
 800b788:	2101      	movs	r1, #1
 800b78a:	681b      	ldr	r3, [r3, #0]
{
 800b78c:	b570      	push	{r4, r5, r6, lr}
 800b78e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b790:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800b792:	4b4a      	ldr	r3, [pc, #296]	; (800b8bc <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b794:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800b796:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800b79a:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800b79c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b7a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d821      	bhi.n	800b7ea <jinit_color_deconverter+0x66>
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d82d      	bhi.n	800b806 <jinit_color_deconverter+0x82>
 800b7aa:	d023      	beq.n	800b7f4 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800b7ac:	2a00      	cmp	r2, #0
 800b7ae:	dd23      	ble.n	800b7f8 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800b7b0:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b7b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800b7b8:	2902      	cmp	r1, #2
 800b7ba:	d055      	beq.n	800b868 <jinit_color_deconverter+0xe4>
 800b7bc:	2904      	cmp	r1, #4
 800b7be:	d066      	beq.n	800b88e <jinit_color_deconverter+0x10a>
 800b7c0:	2901      	cmp	r1, #1
 800b7c2:	d16d      	bne.n	800b8a0 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b7c4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800b7c8:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b7ca:	2a01      	cmp	r2, #1
 800b7cc:	d124      	bne.n	800b818 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800b7ce:	4b3c      	ldr	r3, [pc, #240]	; (800b8c0 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800b7d0:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b7d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800b7d4:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b7d6:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800b7d8:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b7da:	4299      	cmp	r1, r3
 800b7dc:	dc15      	bgt.n	800b80a <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800b7de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d169      	bne.n	800b8b8 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800b7e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b7e6:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800b7e8:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800b7ea:	3b04      	subs	r3, #4
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d8dd      	bhi.n	800b7ac <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800b7f0:	2a04      	cmp	r2, #4
 800b7f2:	e000      	b.n	800b7f6 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800b7f4:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800b7f6:	d0db      	beq.n	800b7b0 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	220b      	movs	r2, #11
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	615a      	str	r2, [r3, #20]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4798      	blx	r3
 800b804:	e7d4      	b.n	800b7b0 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800b806:	2a03      	cmp	r2, #3
 800b808:	e7f5      	b.n	800b7f6 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800b80a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800b80e:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b812:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800b814:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b816:	e7e0      	b.n	800b7da <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d146      	bne.n	800b8aa <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800b81c:	4b29      	ldr	r3, [pc, #164]	; (800b8c4 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b81e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b822:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b824:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800b828:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b82a:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b82c:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b834:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800b836:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b838:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800b83c:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b83e:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b842:	fb06 f203 	mul.w	r2, r6, r3
 800b846:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b84a:	fb05 f203 	mul.w	r2, r5, r3
 800b84e:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b852:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b856:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b858:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b85c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b860:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b864:	d1ed      	bne.n	800b842 <jinit_color_deconverter+0xbe>
 800b866:	e7ba      	b.n	800b7de <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b868:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b86a:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b86c:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b86e:	d105      	bne.n	800b87c <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800b870:	4b15      	ldr	r3, [pc, #84]	; (800b8c8 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800b872:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b874:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800b876:	f7ff fdcf 	bl	800b418 <build_ycc_rgb_table>
 800b87a:	e7b0      	b.n	800b7de <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d102      	bne.n	800b886 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800b880:	4b12      	ldr	r3, [pc, #72]	; (800b8cc <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800b882:	606b      	str	r3, [r5, #4]
 800b884:	e7ab      	b.n	800b7de <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b886:	2b02      	cmp	r3, #2
 800b888:	d10f      	bne.n	800b8aa <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800b88a:	4b11      	ldr	r3, [pc, #68]	; (800b8d0 <jinit_color_deconverter+0x14c>)
 800b88c:	e7f9      	b.n	800b882 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b88e:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800b890:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b892:	d101      	bne.n	800b898 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b894:	4b0f      	ldr	r3, [pc, #60]	; (800b8d4 <jinit_color_deconverter+0x150>)
 800b896:	e7ec      	b.n	800b872 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800b898:	2b04      	cmp	r3, #4
 800b89a:	d106      	bne.n	800b8aa <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800b89c:	4b0e      	ldr	r3, [pc, #56]	; (800b8d8 <jinit_color_deconverter+0x154>)
 800b89e:	e7f0      	b.n	800b882 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800b8a0:	4299      	cmp	r1, r3
 800b8a2:	d102      	bne.n	800b8aa <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800b8a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8a6:	67a3      	str	r3, [r4, #120]	; 0x78
 800b8a8:	e7f8      	b.n	800b89c <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	221c      	movs	r2, #28
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	615a      	str	r2, [r3, #20]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4798      	blx	r3
 800b8b6:	e792      	b.n	800b7de <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e794      	b.n	800b7e6 <jinit_color_deconverter+0x62>
 800b8bc:	0800b767 	.word	0x0800b767
 800b8c0:	0800b769 	.word	0x0800b769
 800b8c4:	0800b575 	.word	0x0800b575
 800b8c8:	0800b4d5 	.word	0x0800b4d5
 800b8cc:	0800b675 	.word	0x0800b675
 800b8d0:	0800b5db 	.word	0x0800b5db
 800b8d4:	0800b6ad 	.word	0x0800b6ad
 800b8d8:	0800b62b 	.word	0x0800b62b

0800b8dc <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800b8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e0:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800b8e4:	2500      	movs	r5, #0
{
 800b8e6:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b8e8:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800b8ec:	f103 0804 	add.w	r8, r3, #4
  int method = 0;
 800b8f0:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b8f2:	46ab      	mov	fp, r5
{
 800b8f4:	ed2d 8b04 	vpush	{d8-d9}
 800b8f8:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	455b      	cmp	r3, fp
 800b8fe:	dc04      	bgt.n	800b90a <start_pass+0x2e>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800b900:	b007      	add	sp, #28
 800b902:	ecbd 8b04 	vpop	{d8-d9}
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b90a:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800b90e:	f240 700e 	movw	r0, #1806	; 0x70e
 800b912:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800b916:	4283      	cmp	r3, r0
 800b918:	f000 80d9 	beq.w	800bace <start_pass+0x1f2>
 800b91c:	dc5a      	bgt.n	800b9d4 <start_pass+0xf8>
 800b91e:	f240 4004 	movw	r0, #1028	; 0x404
 800b922:	4283      	cmp	r3, r0
 800b924:	f000 80d6 	beq.w	800bad4 <start_pass+0x1f8>
 800b928:	dc2f      	bgt.n	800b98a <start_pass+0xae>
 800b92a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800b92e:	f000 80d3 	beq.w	800bad8 <start_pass+0x1fc>
 800b932:	dc1a      	bgt.n	800b96a <start_pass+0x8e>
 800b934:	f240 2001 	movw	r0, #513	; 0x201
 800b938:	4283      	cmp	r3, r0
 800b93a:	f000 80cf 	beq.w	800badc <start_pass+0x200>
 800b93e:	dc0e      	bgt.n	800b95e <start_pass+0x82>
 800b940:	f240 1001 	movw	r0, #257	; 0x101
 800b944:	4283      	cmp	r3, r0
 800b946:	f000 80cb 	beq.w	800bae0 <start_pass+0x204>
 800b94a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800b94e:	f000 80c9 	beq.w	800bae4 <start_pass+0x208>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2007      	movs	r0, #7
 800b956:	61da      	str	r2, [r3, #28]
 800b958:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800b95c:	e0b3      	b.n	800bac6 <start_pass+0x1ea>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b95e:	f240 2002 	movw	r0, #514	; 0x202
 800b962:	4283      	cmp	r3, r0
 800b964:	d1f5      	bne.n	800b952 <start_pass+0x76>
 800b966:	4d9e      	ldr	r5, [pc, #632]	; (800bbe0 <start_pass+0x304>)
 800b968:	e0b2      	b.n	800bad0 <start_pass+0x1f4>
 800b96a:	f240 3006 	movw	r0, #774	; 0x306
 800b96e:	4283      	cmp	r3, r0
 800b970:	f000 80ba 	beq.w	800bae8 <start_pass+0x20c>
 800b974:	f240 4002 	movw	r0, #1026	; 0x402
 800b978:	4283      	cmp	r3, r0
 800b97a:	f000 80b7 	beq.w	800baec <start_pass+0x210>
 800b97e:	f240 3003 	movw	r0, #771	; 0x303
 800b982:	4283      	cmp	r3, r0
 800b984:	d1e5      	bne.n	800b952 <start_pass+0x76>
      method_ptr = jpeg_idct_3x3;
 800b986:	4d97      	ldr	r5, [pc, #604]	; (800bbe4 <start_pass+0x308>)
 800b988:	e0a2      	b.n	800bad0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b98a:	f240 6003 	movw	r0, #1539	; 0x603
 800b98e:	4283      	cmp	r3, r0
 800b990:	f000 80ae 	beq.w	800baf0 <start_pass+0x214>
 800b994:	dc0e      	bgt.n	800b9b4 <start_pass+0xd8>
 800b996:	f240 5005 	movw	r0, #1285	; 0x505
 800b99a:	4283      	cmp	r3, r0
 800b99c:	f000 80aa 	beq.w	800baf4 <start_pass+0x218>
 800b9a0:	f240 500a 	movw	r0, #1290	; 0x50a
 800b9a4:	4283      	cmp	r3, r0
 800b9a6:	f000 80a7 	beq.w	800baf8 <start_pass+0x21c>
 800b9aa:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800b9ae:	d1d0      	bne.n	800b952 <start_pass+0x76>
      method_ptr = jpeg_idct_4x8;
 800b9b0:	4d8d      	ldr	r5, [pc, #564]	; (800bbe8 <start_pass+0x30c>)
 800b9b2:	e08d      	b.n	800bad0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b9b4:	f240 600c 	movw	r0, #1548	; 0x60c
 800b9b8:	4283      	cmp	r3, r0
 800b9ba:	f000 809f 	beq.w	800bafc <start_pass+0x220>
 800b9be:	f240 7007 	movw	r0, #1799	; 0x707
 800b9c2:	4283      	cmp	r3, r0
 800b9c4:	f000 809c 	beq.w	800bb00 <start_pass+0x224>
 800b9c8:	f240 6006 	movw	r0, #1542	; 0x606
 800b9cc:	4283      	cmp	r3, r0
 800b9ce:	d1c0      	bne.n	800b952 <start_pass+0x76>
      method_ptr = jpeg_idct_6x6;
 800b9d0:	4d86      	ldr	r5, [pc, #536]	; (800bbec <start_pass+0x310>)
 800b9d2:	e07d      	b.n	800bad0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b9d4:	f640 4006 	movw	r0, #3078	; 0xc06
 800b9d8:	4283      	cmp	r3, r0
 800b9da:	f000 8093 	beq.w	800bb04 <start_pass+0x228>
 800b9de:	dc21      	bgt.n	800ba24 <start_pass+0x148>
 800b9e0:	f640 1009 	movw	r0, #2313	; 0x909
 800b9e4:	4283      	cmp	r3, r0
 800b9e6:	f000 808f 	beq.w	800bb08 <start_pass+0x22c>
 800b9ea:	dc0d      	bgt.n	800ba08 <start_pass+0x12c>
 800b9ec:	f640 0008 	movw	r0, #2056	; 0x808
 800b9f0:	4283      	cmp	r3, r0
 800b9f2:	d039      	beq.n	800ba68 <start_pass+0x18c>
 800b9f4:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800b9f8:	f000 8088 	beq.w	800bb0c <start_pass+0x230>
 800b9fc:	f640 0004 	movw	r0, #2052	; 0x804
 800ba00:	4283      	cmp	r3, r0
 800ba02:	d1a6      	bne.n	800b952 <start_pass+0x76>
      method_ptr = jpeg_idct_8x4;
 800ba04:	4d7a      	ldr	r5, [pc, #488]	; (800bbf0 <start_pass+0x314>)
 800ba06:	e063      	b.n	800bad0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ba08:	f640 200a 	movw	r0, #2570	; 0xa0a
 800ba0c:	4283      	cmp	r3, r0
 800ba0e:	d07f      	beq.n	800bb10 <start_pass+0x234>
 800ba10:	f640 300b 	movw	r0, #2827	; 0xb0b
 800ba14:	4283      	cmp	r3, r0
 800ba16:	d07d      	beq.n	800bb14 <start_pass+0x238>
 800ba18:	f640 2005 	movw	r0, #2565	; 0xa05
 800ba1c:	4283      	cmp	r3, r0
 800ba1e:	d198      	bne.n	800b952 <start_pass+0x76>
      method_ptr = jpeg_idct_10x5;
 800ba20:	4d74      	ldr	r5, [pc, #464]	; (800bbf4 <start_pass+0x318>)
 800ba22:	e055      	b.n	800bad0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ba24:	f640 600e 	movw	r0, #3598	; 0xe0e
 800ba28:	4283      	cmp	r3, r0
 800ba2a:	d075      	beq.n	800bb18 <start_pass+0x23c>
 800ba2c:	dc0d      	bgt.n	800ba4a <start_pass+0x16e>
 800ba2e:	f640 500d 	movw	r0, #3341	; 0xd0d
 800ba32:	4283      	cmp	r3, r0
 800ba34:	d072      	beq.n	800bb1c <start_pass+0x240>
 800ba36:	f640 6007 	movw	r0, #3591	; 0xe07
 800ba3a:	4283      	cmp	r3, r0
 800ba3c:	d070      	beq.n	800bb20 <start_pass+0x244>
 800ba3e:	f640 400c 	movw	r0, #3084	; 0xc0c
 800ba42:	4283      	cmp	r3, r0
 800ba44:	d185      	bne.n	800b952 <start_pass+0x76>
      method_ptr = jpeg_idct_12x12;
 800ba46:	4d6c      	ldr	r5, [pc, #432]	; (800bbf8 <start_pass+0x31c>)
 800ba48:	e042      	b.n	800bad0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ba4a:	f241 0008 	movw	r0, #4104	; 0x1008
 800ba4e:	4283      	cmp	r3, r0
 800ba50:	d068      	beq.n	800bb24 <start_pass+0x248>
 800ba52:	f241 0010 	movw	r0, #4112	; 0x1010
 800ba56:	4283      	cmp	r3, r0
 800ba58:	d066      	beq.n	800bb28 <start_pass+0x24c>
 800ba5a:	f640 700f 	movw	r0, #3855	; 0xf0f
 800ba5e:	4283      	cmp	r3, r0
 800ba60:	f47f af77 	bne.w	800b952 <start_pass+0x76>
      method_ptr = jpeg_idct_15x15;
 800ba64:	4d65      	ldr	r5, [pc, #404]	; (800bbfc <start_pass+0x320>)
 800ba66:	e033      	b.n	800bad0 <start_pass+0x1f4>
      switch (cinfo->dct_method) {
 800ba68:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d827      	bhi.n	800bac0 <start_pass+0x1e4>
 800ba70:	461c      	mov	r4, r3
 800ba72:	4b63      	ldr	r3, [pc, #396]	; (800bc00 <start_pass+0x324>)
 800ba74:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800ba78:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800ba7c:	f848 5b04 	str.w	r5, [r8], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800ba80:	b1cb      	cbz	r3, 800bab6 <start_pass+0x1da>
 800ba82:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800ba86:	42a3      	cmp	r3, r4
 800ba88:	d015      	beq.n	800bab6 <start_pass+0x1da>
    qtbl = compptr->quant_table;
 800ba8a:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800ba8e:	b196      	cbz	r6, 800bab6 <start_pass+0x1da>
    switch (method) {
 800ba90:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800ba92:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    switch (method) {
 800ba96:	d049      	beq.n	800bb2c <start_pass+0x250>
 800ba98:	2c02      	cmp	r4, #2
 800ba9a:	d05a      	beq.n	800bb52 <start_pass+0x276>
 800ba9c:	2c00      	cmp	r4, #0
 800ba9e:	f040 8098 	bne.w	800bbd2 <start_pass+0x2f6>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800baa2:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800baa6:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800baa8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800baac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800bab0:	3301      	adds	r3, #1
 800bab2:	2b40      	cmp	r3, #64	; 0x40
 800bab4:	d1f8      	bne.n	800baa8 <start_pass+0x1cc>
       ci++, compptr++) {
 800bab6:	f10b 0b01 	add.w	fp, fp, #1
 800baba:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800babe:	e71c      	b.n	800b8fa <start_pass+0x1e>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	2231      	movs	r2, #49	; 0x31
 800bac4:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4638      	mov	r0, r7
 800baca:	4798      	blx	r3
      break;
 800bacc:	e7d4      	b.n	800ba78 <start_pass+0x19c>
      method_ptr = jpeg_idct_7x14;
 800bace:	4d4d      	ldr	r5, [pc, #308]	; (800bc04 <start_pass+0x328>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800bad0:	2400      	movs	r4, #0
 800bad2:	e7d1      	b.n	800ba78 <start_pass+0x19c>
      method_ptr = jpeg_idct_4x4;
 800bad4:	4d4c      	ldr	r5, [pc, #304]	; (800bc08 <start_pass+0x32c>)
 800bad6:	e7fb      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x4;
 800bad8:	4d4c      	ldr	r5, [pc, #304]	; (800bc0c <start_pass+0x330>)
 800bada:	e7f9      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x1;
 800badc:	4d4c      	ldr	r5, [pc, #304]	; (800bc10 <start_pass+0x334>)
 800bade:	e7f7      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x1;
 800bae0:	4d4c      	ldr	r5, [pc, #304]	; (800bc14 <start_pass+0x338>)
 800bae2:	e7f5      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x2;
 800bae4:	4d4c      	ldr	r5, [pc, #304]	; (800bc18 <start_pass+0x33c>)
 800bae6:	e7f3      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_3x6;
 800bae8:	4d4c      	ldr	r5, [pc, #304]	; (800bc1c <start_pass+0x340>)
 800baea:	e7f1      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_4x2;
 800baec:	4d4c      	ldr	r5, [pc, #304]	; (800bc20 <start_pass+0x344>)
 800baee:	e7ef      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x3;
 800baf0:	4d4c      	ldr	r5, [pc, #304]	; (800bc24 <start_pass+0x348>)
 800baf2:	e7ed      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x5;
 800baf4:	4d4c      	ldr	r5, [pc, #304]	; (800bc28 <start_pass+0x34c>)
 800baf6:	e7eb      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x10;
 800baf8:	4d4c      	ldr	r5, [pc, #304]	; (800bc2c <start_pass+0x350>)
 800bafa:	e7e9      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x12;
 800bafc:	4d4c      	ldr	r5, [pc, #304]	; (800bc30 <start_pass+0x354>)
 800bafe:	e7e7      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_7x7;
 800bb00:	4d4c      	ldr	r5, [pc, #304]	; (800bc34 <start_pass+0x358>)
 800bb02:	e7e5      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_12x6;
 800bb04:	4d4c      	ldr	r5, [pc, #304]	; (800bc38 <start_pass+0x35c>)
 800bb06:	e7e3      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_9x9;
 800bb08:	4d4c      	ldr	r5, [pc, #304]	; (800bc3c <start_pass+0x360>)
 800bb0a:	e7e1      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_8x16;
 800bb0c:	4d4c      	ldr	r5, [pc, #304]	; (800bc40 <start_pass+0x364>)
 800bb0e:	e7df      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_10x10;
 800bb10:	4d4c      	ldr	r5, [pc, #304]	; (800bc44 <start_pass+0x368>)
 800bb12:	e7dd      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_11x11;
 800bb14:	4d4c      	ldr	r5, [pc, #304]	; (800bc48 <start_pass+0x36c>)
 800bb16:	e7db      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x14;
 800bb18:	4d4c      	ldr	r5, [pc, #304]	; (800bc4c <start_pass+0x370>)
 800bb1a:	e7d9      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_13x13;
 800bb1c:	4d4c      	ldr	r5, [pc, #304]	; (800bc50 <start_pass+0x374>)
 800bb1e:	e7d7      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x7;
 800bb20:	4d4c      	ldr	r5, [pc, #304]	; (800bc54 <start_pass+0x378>)
 800bb22:	e7d5      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x8;
 800bb24:	4d4c      	ldr	r5, [pc, #304]	; (800bc58 <start_pass+0x37c>)
 800bb26:	e7d3      	b.n	800bad0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x16;
 800bb28:	4d4c      	ldr	r5, [pc, #304]	; (800bc5c <start_pass+0x380>)
 800bb2a:	e7d1      	b.n	800bad0 <start_pass+0x1f4>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800bb2c:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800bb30:	2200      	movs	r2, #0
 800bb32:	494b      	ldr	r1, [pc, #300]	; (800bc60 <start_pass+0x384>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800bb34:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800bb38:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800bb3c:	fb0c f303 	mul.w	r3, ip, r3
 800bb40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb44:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800bb46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800bb4a:	3201      	adds	r2, #1
 800bb4c:	2a40      	cmp	r2, #64	; 0x40
 800bb4e:	d1f1      	bne.n	800bb34 <start_pass+0x258>
 800bb50:	e7b1      	b.n	800bab6 <start_pass+0x1da>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800bb52:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800bb56:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800bb5a:	9304      	str	r3, [sp, #16]
 800bb5c:	4b41      	ldr	r3, [pc, #260]	; (800bc64 <start_pass+0x388>)
 800bb5e:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800bb60:	9b03      	ldr	r3, [sp, #12]
 800bb62:	ecb3 7b02 	vldmia	r3!, {d7}
 800bb66:	9303      	str	r3, [sp, #12]
 800bb68:	eeb0 8a47 	vmov.f32	s16, s14
 800bb6c:	eef0 8a67 	vmov.f32	s17, s15
 800bb70:	9b04      	ldr	r3, [sp, #16]
 800bb72:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800bb76:	9301      	str	r3, [sp, #4]
 800bb78:	4b3a      	ldr	r3, [pc, #232]	; (800bc64 <start_pass+0x388>)
 800bb7a:	9302      	str	r3, [sp, #8]
 800bb7c:	f106 0310 	add.w	r3, r6, #16
 800bb80:	9305      	str	r3, [sp, #20]
 800bb82:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800bb84:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800bb88:	ecb3 7b02 	vldmia	r3!, {d7}
 800bb8c:	eeb0 9a47 	vmov.f32	s18, s14
 800bb90:	eef0 9a67 	vmov.f32	s19, s15
 800bb94:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800bb96:	f7f4 fccd 	bl	8000534 <__aeabi_ui2d>
 800bb9a:	ec53 2b18 	vmov	r2, r3, d8
 800bb9e:	f7f4 fd43 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800bba2:	ec53 2b19 	vmov	r2, r3, d9
 800bba6:	f7f4 fd3f 	bl	8000628 <__aeabi_dmul>
 800bbaa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f7f4 fd3a 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800bbb4:	f7f4 ff4a 	bl	8000a4c <__aeabi_d2f>
 800bbb8:	9b01      	ldr	r3, [sp, #4]
 800bbba:	f843 0b04 	str.w	r0, [r3], #4
 800bbbe:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800bbc0:	9b05      	ldr	r3, [sp, #20]
 800bbc2:	429e      	cmp	r6, r3
 800bbc4:	d1dd      	bne.n	800bb82 <start_pass+0x2a6>
	    i++;
 800bbc6:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800bbca:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800bbce:	d1c7      	bne.n	800bb60 <start_pass+0x284>
 800bbd0:	e771      	b.n	800bab6 <start_pass+0x1da>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2231      	movs	r2, #49	; 0x31
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	615a      	str	r2, [r3, #20]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4798      	blx	r3
      break;
 800bbde:	e76a      	b.n	800bab6 <start_pass+0x1da>
 800bbe0:	08010d99 	.word	0x08010d99
 800bbe4:	08010ca5 	.word	0x08010ca5
 800bbe8:	08014c15 	.word	0x08014c15
 800bbec:	08010845 	.word	0x08010845
 800bbf0:	08013b6d 	.word	0x08013b6d
 800bbf4:	08013925 	.word	0x08013925
 800bbf8:	080117f1 	.word	0x080117f1
 800bbfc:	080124c5 	.word	0x080124c5
 800bc00:	0802e060 	.word	0x0802e060
 800bc04:	080143a9 	.word	0x080143a9
 800bc08:	08010b79 	.word	0x08010b79
 800bc0c:	08014f7d 	.word	0x08014f7d
 800bc10:	08013f8d 	.word	0x08013f8d
 800bc14:	08010e11 	.word	0x08010e11
 800bc18:	08015055 	.word	0x08015055
 800bc1c:	08014e31 	.word	0x08014e31
 800bc20:	08013ebd 	.word	0x08013ebd
 800bc24:	08013d61 	.word	0x08013d61
 800bc28:	080109f5 	.word	0x080109f5
 800bc2c:	080149e1 	.word	0x080149e1
 800bc30:	08014721 	.word	0x08014721
 800bc34:	0801059d 	.word	0x0801059d
 800bc38:	08013659 	.word	0x08013659
 800bc3c:	08010e35 	.word	0x08010e35
 800bc40:	08013fc5 	.word	0x08013fc5
 800bc44:	08011101 	.word	0x08011101
 800bc48:	080113f9 	.word	0x080113f9
 800bc4c:	08012071 	.word	0x08012071
 800bc50:	08011bad 	.word	0x08011bad
 800bc54:	080132d9 	.word	0x080132d9
 800bc58:	08012e91 	.word	0x08012e91
 800bc5c:	08012959 	.word	0x08012959
 800bc60:	0802e0b0 	.word	0x0802e0b0
 800bc64:	0802e070 	.word	0x0802e070

0800bc68 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bc6a:	6843      	ldr	r3, [r0, #4]
{
 800bc6c:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bc6e:	2254      	movs	r2, #84	; 0x54
 800bc70:	2101      	movs	r1, #1
 800bc72:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bc74:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bc76:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800bc78:	4b0f      	ldr	r3, [pc, #60]	; (800bcb8 <jinit_inverse_dct+0x50>)
 800bc7a:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bc7c:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800bc80:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800bc84:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bc88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc8a:	42b3      	cmp	r3, r6
 800bc8c:	dc00      	bgt.n	800bc90 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800bc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bc90:	686b      	ldr	r3, [r5, #4]
 800bc92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc96:	2101      	movs	r1, #1
 800bc98:	4628      	mov	r0, r5
 800bc9a:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800bc9c:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bc9e:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800bca0:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800bca4:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800bca6:	2100      	movs	r1, #0
 800bca8:	f01e fd64 	bl	802a774 <memset>
    idct->cur_method[ci] = -1;
 800bcac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
       ci++, compptr++) {
 800bcb0:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800bcb2:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 800bcb6:	e7e7      	b.n	800bc88 <jinit_inverse_dct+0x20>
 800bcb8:	0800b8dd 	.word	0x0800b8dd

0800bcbc <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800bcbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800bcc0:	6905      	ldr	r5, [r0, #16]
{
 800bcc2:	4607      	mov	r7, r0
 800bcc4:	4688      	mov	r8, r1
 800bcc6:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800bcc8:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800bccc:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800bcce:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800bcd2:	f1bb 0f00 	cmp.w	fp, #0
 800bcd6:	d042      	beq.n	800bd5e <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800bcd8:	454e      	cmp	r6, r9
 800bcda:	da42      	bge.n	800bd62 <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800bcdc:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800bce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce2:	b95b      	cbnz	r3, 800bcfc <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	2278      	movs	r2, #120	; 0x78
 800bce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bcec:	4628      	mov	r0, r5
 800bcee:	615a      	str	r2, [r3, #20]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800bcf4:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800bcfc:	f1c6 0619 	rsb	r6, r6, #25
 800bd00:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800bd04:	2619      	movs	r6, #25
 800bd06:	e02c      	b.n	800bd62 <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800bd08:	f1ba 0f00 	cmp.w	sl, #0
 800bd0c:	d107      	bne.n	800bd1e <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800bd0e:	69ab      	ldr	r3, [r5, #24]
 800bd10:	4628      	mov	r0, r5
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	4798      	blx	r3
 800bd16:	b350      	cbz	r0, 800bd6e <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800bd18:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800bd1a:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800bd1e:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800bd22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      if (c == 0xFF) {
 800bd26:	2aff      	cmp	r2, #255	; 0xff
 800bd28:	d116      	bne.n	800bd58 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800bd2a:	f1ba 0f00 	cmp.w	sl, #0
 800bd2e:	d109      	bne.n	800bd44 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800bd30:	69ab      	ldr	r3, [r5, #24]
 800bd32:	4628      	mov	r0, r5
 800bd34:	9201      	str	r2, [sp, #4]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	4798      	blx	r3
 800bd3a:	b1c0      	cbz	r0, 800bd6e <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800bd3c:	69ab      	ldr	r3, [r5, #24]
 800bd3e:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800bd40:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800bd44:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800bd48:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	} while (c == 0xFF);
 800bd4c:	2bff      	cmp	r3, #255	; 0xff
 800bd4e:	d0ec      	beq.n	800bd2a <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800bd50:	b113      	cbz	r3, 800bd58 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800bd52:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800bd56:	e7bf      	b.n	800bcd8 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800bd58:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800bd5c:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800bd5e:	2e18      	cmp	r6, #24
 800bd60:	ddd2      	ble.n	800bd08 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800bd62:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800bd66:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800bd6a:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800bd6e:	4658      	mov	r0, fp
 800bd70:	b003      	add	sp, #12
 800bd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800bd78 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7a:	9d06      	ldr	r5, [sp, #24]
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	468c      	mov	ip, r1
 800bd80:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800bd82:	4295      	cmp	r5, r2
{
 800bd84:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800bd86:	dd08      	ble.n	800bd9a <jpeg_huff_decode+0x22>
 800bd88:	462b      	mov	r3, r5
 800bd8a:	f7ff ff97 	bl	800bcbc <jpeg_fill_bit_buffer>
 800bd8e:	b910      	cbnz	r0, 800bd96 <jpeg_huff_decode+0x1e>
 800bd90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800bd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800bd96:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800bd9a:	1b62      	subs	r2, r4, r5
 800bd9c:	4b1a      	ldr	r3, [pc, #104]	; (800be08 <jpeg_huff_decode+0x90>)
 800bd9e:	fa4c f002 	asr.w	r0, ip, r2
 800bda2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bda6:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800bda8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800bdac:	4283      	cmp	r3, r0
 800bdae:	db0d      	blt.n	800bdcc <jpeg_huff_decode+0x54>
  if (l > 16) {
 800bdb0:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800bdb2:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800bdb6:	dd1e      	ble.n	800bdf6 <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800bdb8:	6930      	ldr	r0, [r6, #16]
 800bdba:	2279      	movs	r2, #121	; 0x79
 800bdbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bdc0:	6803      	ldr	r3, [r0, #0]
 800bdc2:	615a      	str	r2, [r3, #20]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800bdc8:	2000      	movs	r0, #0
 800bdca:	e7e3      	b.n	800bd94 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800bdcc:	2a00      	cmp	r2, #0
    code <<= 1;
 800bdce:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800bdd2:	dc08      	bgt.n	800bde6 <jpeg_huff_decode+0x6e>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	4661      	mov	r1, ip
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f7ff ff6f 	bl	800bcbc <jpeg_fill_bit_buffer>
 800bdde:	2800      	cmp	r0, #0
 800bde0:	d0d6      	beq.n	800bd90 <jpeg_huff_decode+0x18>
 800bde2:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800bde6:	3a01      	subs	r2, #1
    l++;
 800bde8:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800bdea:	fa4c f002 	asr.w	r0, ip, r2
 800bdee:	f000 0001 	and.w	r0, r0, #1
 800bdf2:	4320      	orrs	r0, r4
    l++;
 800bdf4:	e7d8      	b.n	800bda8 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800bdf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdfa:	3512      	adds	r5, #18
 800bdfc:	4418      	add	r0, r3
 800bdfe:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800be02:	4410      	add	r0, r2
 800be04:	7c40      	ldrb	r0, [r0, #17]
 800be06:	e7c5      	b.n	800bd94 <jpeg_huff_decode+0x1c>
 800be08:	0802e130 	.word	0x0802e130

0800be0c <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800be0c:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800be0e:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800be12:	2600      	movs	r6, #0
{
 800be14:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800be16:	68eb      	ldr	r3, [r5, #12]
 800be18:	6991      	ldr	r1, [r2, #24]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	bfb8      	it	lt
 800be1e:	3307      	addlt	r3, #7
 800be20:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800be24:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800be26:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 800be28:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800be2a:	4798      	blx	r3
 800be2c:	b190      	cbz	r0, 800be54 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800be2e:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800be32:	4631      	mov	r1, r6
 800be34:	f105 0014 	add.w	r0, r5, #20
 800be38:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800be3c:	0092      	lsls	r2, r2, #2
 800be3e:	f01e fc99 	bl	802a774 <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800be42:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800be46:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800be48:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800be4a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800be4e:	b903      	cbnz	r3, 800be52 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800be50:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800be52:	2001      	movs	r0, #1
}
 800be54:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be58 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800be5c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800be60:	b091      	sub	sp, #68	; 0x44
 800be62:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800be64:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800be68:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800be6a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800be6e:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800be70:	b933      	cbnz	r3, 800be80 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800be72:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be74:	b17e      	cbz	r6, 800be96 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800be76:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800be78:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800be7a:	3b01      	subs	r3, #1
 800be7c:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800be7e:	e007      	b.n	800be90 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800be80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1f5      	bne.n	800be72 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800be86:	f7ff ffc1 	bl	800be0c <process_restart>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d1f1      	bne.n	800be72 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800be8e:	2000      	movs	r0, #0
}
 800be90:	b011      	add	sp, #68	; 0x44
 800be92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800be96:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800be98:	f104 0810 	add.w	r8, r4, #16
 800be9c:	af0b      	add	r7, sp, #44	; 0x2c
 800be9e:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	f104 0b10 	add.w	fp, r4, #16
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	9206      	str	r2, [sp, #24]
 800beac:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800beae:	f8df a118 	ldr.w	sl, [pc, #280]	; 800bfc8 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800beb2:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800beb4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800beb8:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800bebc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800bebe:	f8d8 3000 	ldr.w	r3, [r8]
 800bec2:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bec4:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800bec8:	42b3      	cmp	r3, r6
 800beca:	dc0d      	bgt.n	800bee8 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800becc:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bece:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bed0:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bed2:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bed4:	601a      	str	r2, [r3, #0]
 800bed6:	9a07      	ldr	r2, [sp, #28]
 800bed8:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800beda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bedc:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800bee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bee2:	6833      	ldr	r3, [r6, #0]
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	e7c6      	b.n	800be76 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800bee8:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800beea:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800beee:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800bef2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800bef6:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800bef8:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800befc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf06:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bf0a:	dc0c      	bgt.n	800bf26 <decode_mcu_DC_first+0xce>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4662      	mov	r2, ip
 800bf10:	4671      	mov	r1, lr
 800bf12:	a806      	add	r0, sp, #24
 800bf14:	f7ff fed2 	bl	800bcbc <jpeg_fill_bit_buffer>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d0b8      	beq.n	800be8e <decode_mcu_DC_first+0x36>
 800bf1c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bf20:	f1bc 0f07 	cmp.w	ip, #7
 800bf24:	dd3e      	ble.n	800bfa4 <decode_mcu_DC_first+0x14c>
 800bf26:	f1ac 0308 	sub.w	r3, ip, #8
 800bf2a:	fa4e f303 	asr.w	r3, lr, r3
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bf34:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bf38:	2a00      	cmp	r2, #0
 800bf3a:	d042      	beq.n	800bfc2 <decode_mcu_DC_first+0x16a>
 800bf3c:	4443      	add	r3, r8
 800bf3e:	ebac 0c02 	sub.w	ip, ip, r2
 800bf42:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800bf46:	f1b8 0f00 	cmp.w	r8, #0
 800bf4a:	d01b      	beq.n	800bf84 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bf4c:	45e0      	cmp	r8, ip
 800bf4e:	dd09      	ble.n	800bf64 <decode_mcu_DC_first+0x10c>
 800bf50:	4643      	mov	r3, r8
 800bf52:	4662      	mov	r2, ip
 800bf54:	4671      	mov	r1, lr
 800bf56:	a806      	add	r0, sp, #24
 800bf58:	f7ff feb0 	bl	800bcbc <jpeg_fill_bit_buffer>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d096      	beq.n	800be8e <decode_mcu_DC_first+0x36>
 800bf60:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800bf64:	ebac 0c08 	sub.w	ip, ip, r8
 800bf68:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800bf6c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	r = GET_BITS(s);
 800bf70:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800bf74:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800bf78:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800bf7a:	4299      	cmp	r1, r3
 800bf7c:	bfac      	ite	ge
 800bf7e:	eba3 0802 	subge.w	r8, r3, r2
 800bf82:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800bf84:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bf86:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800bf88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 800bf8c:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 800bf8e:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800bf92:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 800bf94:	fa00 f803 	lsl.w	r8, r0, r3
 800bf98:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 800bf9a:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800bf9e:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bfa2:	e78f      	b.n	800bec4 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	4662      	mov	r2, ip
 800bfaa:	4643      	mov	r3, r8
 800bfac:	4671      	mov	r1, lr
 800bfae:	a806      	add	r0, sp, #24
 800bfb0:	f7ff fee2 	bl	800bd78 <jpeg_huff_decode>
 800bfb4:	f1b0 0800 	subs.w	r8, r0, #0
 800bfb8:	f6ff af69 	blt.w	800be8e <decode_mcu_DC_first+0x36>
 800bfbc:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bfc0:	e7c1      	b.n	800bf46 <decode_mcu_DC_first+0xee>
 800bfc2:	2309      	movs	r3, #9
 800bfc4:	e7ef      	b.n	800bfa6 <decode_mcu_DC_first+0x14e>
 800bfc6:	bf00      	nop
 800bfc8:	0802e130 	.word	0x0802e130

0800bfcc <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bfcc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd4:	4607      	mov	r7, r0
 800bfd6:	b08d      	sub	sp, #52	; 0x34
 800bfd8:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bfda:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bfde:	b933      	cbnz	r3, 800bfee <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800bfe0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bfe2:	b17b      	cbz	r3, 800c004 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bfe4:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800bfe6:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800bfec:	e007      	b.n	800bffe <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800bfee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1f5      	bne.n	800bfe0 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800bff4:	f7ff ff0a 	bl	800be0c <process_restart>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d1f1      	bne.n	800bfe0 <decode_mcu_AC_first+0x14>
	return FALSE;
 800bffc:	2000      	movs	r0, #0
}
 800bffe:	b00d      	add	sp, #52	; 0x34
 800c000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800c004:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800c006:	b116      	cbz	r6, 800c00e <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800c008:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800c00a:	612e      	str	r6, [r5, #16]
 800c00c:	e7ea      	b.n	800bfe4 <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 800c00e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800c012:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800c016:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800c018:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 800c01c:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 800c020:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c022:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800c024:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	9207      	str	r2, [sp, #28]
 800c02e:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 800c030:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800c128 <decode_mcu_AC_first+0x15c>
      block = MCU_data[0];
 800c034:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c036:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800c038:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c03a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	4598      	cmp	r8, r3
 800c042:	dc69      	bgt.n	800c118 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800c044:	2a07      	cmp	r2, #7
 800c046:	dc09      	bgt.n	800c05c <decode_mcu_AC_first+0x90>
 800c048:	2300      	movs	r3, #0
 800c04a:	a807      	add	r0, sp, #28
 800c04c:	f7ff fe36 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c050:	2800      	cmp	r0, #0
 800c052:	d0d3      	beq.n	800bffc <decode_mcu_AC_first+0x30>
 800c054:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800c058:	2a07      	cmp	r2, #7
 800c05a:	dd33      	ble.n	800c0c4 <decode_mcu_AC_first+0xf8>
 800c05c:	f1a2 0308 	sub.w	r3, r2, #8
 800c060:	fa41 f303 	asr.w	r3, r1, r3
 800c064:	b2db      	uxtb	r3, r3
 800c066:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c06a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800c06e:	b3a0      	cbz	r0, 800c0da <decode_mcu_AC_first+0x10e>
 800c070:	444b      	add	r3, r9
 800c072:	1a12      	subs	r2, r2, r0
 800c074:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c078:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800c07c:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c080:	d02d      	beq.n	800c0de <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c082:	42a2      	cmp	r2, r4
	  k += r;
 800c084:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c086:	da07      	bge.n	800c098 <decode_mcu_AC_first+0xcc>
 800c088:	4623      	mov	r3, r4
 800c08a:	a807      	add	r0, sp, #28
 800c08c:	f7ff fe16 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c090:	2800      	cmp	r0, #0
 800c092:	d0b3      	beq.n	800bffc <decode_mcu_AC_first+0x30>
 800c094:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800c098:	1b12      	subs	r2, r2, r4
 800c09a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c09e:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c0a0:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800c0a4:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c0a8:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800c0aa:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800c0ac:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800c0ae:	bfa8      	it	ge
 800c0b0:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800c0b2:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800c0b6:	40a3      	lsls	r3, r4
 800c0b8:	9c05      	ldr	r4, [sp, #20]
 800c0ba:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800c0be:	f108 0801 	add.w	r8, r8, #1
 800c0c2:	e7bc      	b.n	800c03e <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	a807      	add	r0, sp, #28
 800c0ca:	464b      	mov	r3, r9
 800c0cc:	f7ff fe54 	bl	800bd78 <jpeg_huff_decode>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	db93      	blt.n	800bffc <decode_mcu_AC_first+0x30>
 800c0d4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800c0d8:	e7ce      	b.n	800c078 <decode_mcu_AC_first+0xac>
 800c0da:	2309      	movs	r3, #9
 800c0dc:	e7f3      	b.n	800c0c6 <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800c0de:	2b0f      	cmp	r3, #15
 800c0e0:	d102      	bne.n	800c0e8 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800c0e2:	f108 080f 	add.w	r8, r8, #15
 800c0e6:	e7ea      	b.n	800c0be <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800c0e8:	2601      	movs	r6, #1
 800c0ea:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800c0ec:	b19b      	cbz	r3, 800c116 <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	da09      	bge.n	800c106 <decode_mcu_AC_first+0x13a>
 800c0f2:	a807      	add	r0, sp, #28
 800c0f4:	9303      	str	r3, [sp, #12]
 800c0f6:	f7ff fde1 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	f43f af7e 	beq.w	800bffc <decode_mcu_AC_first+0x30>
 800c100:	9b03      	ldr	r3, [sp, #12]
 800c102:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800c106:	1ad2      	subs	r2, r2, r3
 800c108:	4807      	ldr	r0, [pc, #28]	; (800c128 <decode_mcu_AC_first+0x15c>)
 800c10a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c10e:	fa41 f302 	asr.w	r3, r1, r2
 800c112:	4003      	ands	r3, r0
	      EOBRUN += r;
 800c114:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800c116:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	9807      	ldr	r0, [sp, #28]
 800c11c:	6018      	str	r0, [r3, #0]
 800c11e:	9808      	ldr	r0, [sp, #32]
 800c120:	6058      	str	r0, [r3, #4]
 800c122:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800c126:	e770      	b.n	800c00a <decode_mcu_AC_first+0x3e>
 800c128:	0802e130 	.word	0x0802e130

0800c12c <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800c12c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c130:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800c134:	2701      	movs	r7, #1
{   
 800c136:	b087      	sub	sp, #28
 800c138:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c13a:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c13c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800c140:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c142:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800c146:	b9c3      	cbnz	r3, 800c17a <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c148:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c14a:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c14c:	9405      	str	r4, [sp, #20]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	9201      	str	r2, [sp, #4]
 800c154:	9302      	str	r3, [sp, #8]
 800c156:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c15a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800c15e:	42b3      	cmp	r3, r6
 800c160:	dc16      	bgt.n	800c190 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c162:	69a3      	ldr	r3, [r4, #24]
 800c164:	9801      	ldr	r0, [sp, #4]
 800c166:	6018      	str	r0, [r3, #0]
 800c168:	9802      	ldr	r0, [sp, #8]
 800c16a:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800c16c:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c16e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c170:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c172:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800c176:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c178:	e007      	b.n	800c18a <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800c17a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1e3      	bne.n	800c148 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800c180:	f7ff fe44 	bl	800be0c <process_restart>
 800c184:	2800      	cmp	r0, #0
 800c186:	d1df      	bne.n	800c148 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800c188:	2000      	movs	r0, #0
}
 800c18a:	b007      	add	sp, #28
 800c18c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800c190:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800c192:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800c196:	dc07      	bgt.n	800c1a8 <decode_mcu_DC_refine+0x7c>
 800c198:	2301      	movs	r3, #1
 800c19a:	a801      	add	r0, sp, #4
 800c19c:	f7ff fd8e 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d0f1      	beq.n	800c188 <decode_mcu_DC_refine+0x5c>
 800c1a4:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800c1a8:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c1aa:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800c1ac:	fa41 f302 	asr.w	r3, r1, r2
 800c1b0:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800c1b2:	bf42      	ittt	mi
 800c1b4:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800c1b8:	433b      	orrmi	r3, r7
 800c1ba:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c1be:	e7cc      	b.n	800c15a <decode_mcu_DC_refine+0x2e>

0800c1c0 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c1c0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800c1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c8:	4606      	mov	r6, r0
 800c1ca:	b0d1      	sub	sp, #324	; 0x144
 800c1cc:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c1ce:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800c1d2:	b95b      	cbnz	r3, 800c1ec <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800c1d4:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 800c1d8:	f1bb 0f00 	cmp.w	fp, #0
 800c1dc:	d012      	beq.n	800c204 <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c1de:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 800c1e2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 800c1ea:	e008      	b.n	800c1fe <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 800c1ec:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1ef      	bne.n	800c1d4 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800c1f4:	f7ff fe0a 	bl	800be0c <process_restart>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d1eb      	bne.n	800c1d4 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800c1fc:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800c1fe:	b051      	add	sp, #324	; 0x144
 800c200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800c204:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c208:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c20a:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 800c20c:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 800c210:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c212:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 800c216:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c21a:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c21c:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c21e:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800c220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c224:	fa02 f303 	lsl.w	r3, r2, r3
 800c228:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800c22a:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 800c22e:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c230:	69b3      	ldr	r3, [r6, #24]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	602a      	str	r2, [r5, #0]
 800c238:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800c23a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c23e:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800c242:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 800c244:	2b00      	cmp	r3, #0
 800c246:	f040 80bf 	bne.w	800c3c8 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 800c24a:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800c24e:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 800c250:	9b06      	ldr	r3, [sp, #24]
 800c252:	429f      	cmp	r7, r3
 800c254:	dd0a      	ble.n	800c26c <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c256:	69b3      	ldr	r3, [r6, #24]
 800c258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c25a:	6019      	str	r1, [r3, #0]
 800c25c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c25e:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800c260:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c262:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800c266:	f8c8 3010 	str.w	r3, [r8, #16]
 800c26a:	e7b8      	b.n	800c1de <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c26c:	2a07      	cmp	r2, #7
 800c26e:	dc0a      	bgt.n	800c286 <decode_mcu_AC_refine+0xc6>
 800c270:	2300      	movs	r3, #0
 800c272:	4621      	mov	r1, r4
 800c274:	4628      	mov	r0, r5
 800c276:	f7ff fd21 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d06e      	beq.n	800c35c <decode_mcu_AC_refine+0x19c>
 800c27e:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800c282:	2a07      	cmp	r2, #7
 800c284:	dd61      	ble.n	800c34a <decode_mcu_AC_refine+0x18a>
 800c286:	f1a2 0308 	sub.w	r3, r2, #8
 800c28a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c28c:	fa44 f303 	asr.w	r3, r4, r3
 800c290:	b2db      	uxtb	r3, r3
 800c292:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c296:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800c29a:	2900      	cmp	r1, #0
 800c29c:	d06b      	beq.n	800c376 <decode_mcu_AC_refine+0x1b6>
 800c29e:	4403      	add	r3, r0
 800c2a0:	1a52      	subs	r2, r2, r1
 800c2a2:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c2a6:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800c2aa:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 800c2ae:	9304      	str	r3, [sp, #16]
 800c2b0:	d066      	beq.n	800c380 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d009      	beq.n	800c2ca <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800c2b6:	6833      	ldr	r3, [r6, #0]
 800c2b8:	2179      	movs	r1, #121	; 0x79
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	9204      	str	r2, [sp, #16]
 800c2be:	6159      	str	r1, [r3, #20]
 800c2c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	4798      	blx	r3
 800c2c8:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c2ca:	2a00      	cmp	r2, #0
 800c2cc:	dc08      	bgt.n	800c2e0 <decode_mcu_AC_refine+0x120>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f7ff fcf2 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	d03f      	beq.n	800c35c <decode_mcu_AC_refine+0x19c>
 800c2dc:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 800c2e0:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800c2e2:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800c2e4:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800c2e8:	f013 0f01 	tst.w	r3, #1
 800c2ec:	9b03      	ldr	r3, [sp, #12]
 800c2ee:	bf08      	it	eq
 800c2f0:	460b      	moveq	r3, r1
 800c2f2:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800c2f4:	9b08      	ldr	r3, [sp, #32]
 800c2f6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800c2fa:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800c2fc:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d068      	beq.n	800c3d6 <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c304:	2a00      	cmp	r2, #0
 800c306:	dc07      	bgt.n	800c318 <decode_mcu_AC_refine+0x158>
 800c308:	2301      	movs	r3, #1
 800c30a:	4621      	mov	r1, r4
 800c30c:	4628      	mov	r0, r5
 800c30e:	f7ff fcd5 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c312:	b318      	cbz	r0, 800c35c <decode_mcu_AC_refine+0x19c>
 800c314:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 800c318:	3a01      	subs	r2, #1
 800c31a:	fa44 f302 	asr.w	r3, r4, r2
 800c31e:	07d9      	lsls	r1, r3, #31
 800c320:	d50e      	bpl.n	800c340 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800c322:	9b05      	ldr	r3, [sp, #20]
 800c324:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 800c328:	9b03      	ldr	r3, [sp, #12]
 800c32a:	4219      	tst	r1, r3
 800c32c:	d108      	bne.n	800c340 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 800c32e:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800c330:	b28b      	uxth	r3, r1
 800c332:	bfac      	ite	ge
 800c334:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800c336:	9907      	ldrlt	r1, [sp, #28]
 800c338:	440b      	add	r3, r1
 800c33a:	9905      	ldr	r1, [sp, #20]
 800c33c:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 800c340:	3701      	adds	r7, #1
	} while (k <= Se);
 800c342:	9b06      	ldr	r3, [sp, #24]
 800c344:	42bb      	cmp	r3, r7
 800c346:	dad5      	bge.n	800c2f4 <decode_mcu_AC_refine+0x134>
 800c348:	e048      	b.n	800c3dc <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c34a:	2301      	movs	r3, #1
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	4621      	mov	r1, r4
 800c350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c352:	4628      	mov	r0, r5
 800c354:	f7ff fd10 	bl	800bd78 <jpeg_huff_decode>
 800c358:	2800      	cmp	r0, #0
 800c35a:	da0e      	bge.n	800c37a <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800c35c:	ab10      	add	r3, sp, #64	; 0x40
 800c35e:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800c360:	f1bb 0f00 	cmp.w	fp, #0
 800c364:	f43f af4a 	beq.w	800c1fc <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800c368:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c36c:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800c370:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 800c374:	e7f4      	b.n	800c360 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c376:	2309      	movs	r3, #9
 800c378:	e7e8      	b.n	800c34c <decode_mcu_AC_refine+0x18c>
 800c37a:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800c37e:	e792      	b.n	800c2a6 <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 800c380:	f1ba 0f0f 	cmp.w	sl, #15
 800c384:	d0b6      	beq.n	800c2f4 <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800c386:	2301      	movs	r3, #1
 800c388:	fa03 f30a 	lsl.w	r3, r3, sl
 800c38c:	9302      	str	r3, [sp, #8]
	    if (r) {
 800c38e:	f1ba 0f00 	cmp.w	sl, #0
 800c392:	d015      	beq.n	800c3c0 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800c394:	4552      	cmp	r2, sl
 800c396:	da08      	bge.n	800c3aa <decode_mcu_AC_refine+0x1ea>
 800c398:	4653      	mov	r3, sl
 800c39a:	4621      	mov	r1, r4
 800c39c:	a80b      	add	r0, sp, #44	; 0x2c
 800c39e:	f7ff fc8d 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d0da      	beq.n	800c35c <decode_mcu_AC_refine+0x19c>
 800c3a6:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800c3aa:	4b26      	ldr	r3, [pc, #152]	; (800c444 <decode_mcu_AC_refine+0x284>)
 800c3ac:	eba2 020a 	sub.w	r2, r2, sl
 800c3b0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800c3b4:	fa44 f302 	asr.w	r3, r4, r2
 800c3b8:	400b      	ands	r3, r1
	      EOBRUN += r;
 800c3ba:	9902      	ldr	r1, [sp, #8]
 800c3bc:	4419      	add	r1, r3
 800c3be:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 800c3c0:	9b02      	ldr	r3, [sp, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f43f af47 	beq.w	800c256 <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 800c3c8:	9b06      	ldr	r3, [sp, #24]
 800c3ca:	429f      	cmp	r7, r3
 800c3cc:	dd15      	ble.n	800c3fa <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 800c3ce:	9b02      	ldr	r3, [sp, #8]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	9302      	str	r3, [sp, #8]
 800c3d4:	e73f      	b.n	800c256 <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 800c3d6:	f1ba 0a01 	subs.w	sl, sl, #1
 800c3da:	d2b1      	bcs.n	800c340 <decode_mcu_AC_refine+0x180>
	if (s) {
 800c3dc:	9b04      	ldr	r3, [sp, #16]
 800c3de:	b153      	cbz	r3, 800c3f6 <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 800c3e0:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800c3e2:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800c3e4:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800c3e8:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800c3ec:	a910      	add	r1, sp, #64	; 0x40
 800c3ee:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 800c3f2:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 800c3f6:	3701      	adds	r7, #1
 800c3f8:	e72a      	b.n	800c250 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 800c3fa:	9b08      	ldr	r3, [sp, #32]
 800c3fc:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 800c400:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 800c404:	b1e3      	cbz	r3, 800c440 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c406:	2a00      	cmp	r2, #0
 800c408:	dc08      	bgt.n	800c41c <decode_mcu_AC_refine+0x25c>
 800c40a:	2301      	movs	r3, #1
 800c40c:	4621      	mov	r1, r4
 800c40e:	a80b      	add	r0, sp, #44	; 0x2c
 800c410:	f7ff fc54 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c414:	2800      	cmp	r0, #0
 800c416:	d0a1      	beq.n	800c35c <decode_mcu_AC_refine+0x19c>
 800c418:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800c41c:	3a01      	subs	r2, #1
 800c41e:	fa44 f302 	asr.w	r3, r4, r2
 800c422:	07db      	lsls	r3, r3, #31
 800c424:	d50c      	bpl.n	800c440 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800c426:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 800c42a:	9b03      	ldr	r3, [sp, #12]
 800c42c:	4219      	tst	r1, r3
 800c42e:	d107      	bne.n	800c440 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 800c430:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800c432:	b28b      	uxth	r3, r1
 800c434:	bfac      	ite	ge
 800c436:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800c438:	9907      	ldrlt	r1, [sp, #28]
 800c43a:	440b      	add	r3, r1
 800c43c:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 800c440:	3701      	adds	r7, #1
 800c442:	e7c1      	b.n	800c3c8 <decode_mcu_AC_refine+0x208>
 800c444:	0802e130 	.word	0x0802e130

0800c448 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c44c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c450:	b093      	sub	sp, #76	; 0x4c
 800c452:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c454:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c458:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800c45a:	b933      	cbnz	r3, 800c46a <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c45c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c45e:	b17f      	cbz	r7, 800c480 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c460:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c462:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c464:	3b01      	subs	r3, #1
 800c466:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c468:	e007      	b.n	800c47a <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800c46a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1f5      	bne.n	800c45c <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800c470:	f7ff fccc 	bl	800be0c <process_restart>
 800c474:	2800      	cmp	r0, #0
 800c476:	d1f1      	bne.n	800c45c <decode_mcu_sub+0x14>
	return FALSE;
 800c478:	2000      	movs	r0, #0
}
 800c47a:	b013      	add	sp, #76	; 0x4c
 800c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800c480:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800c484:	f105 0810 	add.w	r8, r5, #16
 800c488:	ac0d      	add	r4, sp, #52	; 0x34
 800c48a:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 800c48e:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800c490:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800c494:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800c734 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800c498:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c49a:	69b3      	ldr	r3, [r6, #24]
 800c49c:	960c      	str	r6, [sp, #48]	; 0x30
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	9208      	str	r2, [sp, #32]
 800c4a4:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800c4a6:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c4aa:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c4ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c4b4:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c4b6:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c4ba:	42bb      	cmp	r3, r7
 800c4bc:	dc0e      	bgt.n	800c4dc <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c4be:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c4c0:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c4c2:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800c4c4:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c4c8:	601a      	str	r2, [r3, #0]
 800c4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4cc:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c4ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c4d0:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c4d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4d6:	6833      	ldr	r3, [r6, #0]
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	e7c1      	b.n	800c460 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c4dc:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c4de:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c4e2:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800c4e6:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c4ea:	dc0c      	bgt.n	800c506 <decode_mcu_sub+0xbe>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	4662      	mov	r2, ip
 800c4f0:	4671      	mov	r1, lr
 800c4f2:	a808      	add	r0, sp, #32
 800c4f4:	f7ff fbe2 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d0bd      	beq.n	800c478 <decode_mcu_sub+0x30>
 800c4fc:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c500:	f1bc 0f07 	cmp.w	ip, #7
 800c504:	dd4a      	ble.n	800c59c <decode_mcu_sub+0x154>
 800c506:	f1ac 0308 	sub.w	r3, ip, #8
 800c50a:	fa4e f303 	asr.w	r3, lr, r3
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c514:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c518:	2a00      	cmp	r2, #0
 800c51a:	d04d      	beq.n	800c5b8 <decode_mcu_sub+0x170>
 800c51c:	4423      	add	r3, r4
 800c51e:	ebac 0c02 	sub.w	ip, ip, r2
 800c522:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c526:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800c52a:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800c52e:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c530:	2b00      	cmp	r3, #0
 800c532:	f000 80a0 	beq.w	800c676 <decode_mcu_sub+0x22e>
	if (s) {
 800c536:	b1cc      	cbz	r4, 800c56c <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c538:	45a4      	cmp	ip, r4
 800c53a:	da09      	bge.n	800c550 <decode_mcu_sub+0x108>
 800c53c:	4623      	mov	r3, r4
 800c53e:	4662      	mov	r2, ip
 800c540:	4671      	mov	r1, lr
 800c542:	a808      	add	r0, sp, #32
 800c544:	f7ff fbba 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c548:	2800      	cmp	r0, #0
 800c54a:	d095      	beq.n	800c478 <decode_mcu_sub+0x30>
 800c54c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800c550:	ebac 0c04 	sub.w	ip, ip, r4
 800c554:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c558:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c55a:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c55e:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c562:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800c564:	4299      	cmp	r1, r3
 800c566:	bfac      	ite	ge
 800c568:	1a9c      	subge	r4, r3, r2
 800c56a:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800c56c:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c570:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c574:	ab12      	add	r3, sp, #72	; 0x48
 800c576:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c57a:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c57e:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800c580:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c584:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800c588:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800c58a:	9b03      	ldr	r3, [sp, #12]
 800c58c:	429c      	cmp	r4, r3
 800c58e:	db15      	blt.n	800c5bc <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800c590:	9b05      	ldr	r3, [sp, #20]
 800c592:	429c      	cmp	r4, r3
 800c594:	f340 8081 	ble.w	800c69a <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c598:	3701      	adds	r7, #1
 800c59a:	e78c      	b.n	800c4b6 <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c59c:	2301      	movs	r3, #1
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	4662      	mov	r2, ip
 800c5a2:	4623      	mov	r3, r4
 800c5a4:	4671      	mov	r1, lr
 800c5a6:	a808      	add	r0, sp, #32
 800c5a8:	f7ff fbe6 	bl	800bd78 <jpeg_huff_decode>
 800c5ac:	1e04      	subs	r4, r0, #0
 800c5ae:	f6ff af63 	blt.w	800c478 <decode_mcu_sub+0x30>
 800c5b2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c5b6:	e7b6      	b.n	800c526 <decode_mcu_sub+0xde>
 800c5b8:	2309      	movs	r3, #9
 800c5ba:	e7f0      	b.n	800c59e <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c5bc:	f1bc 0f07 	cmp.w	ip, #7
 800c5c0:	dc0d      	bgt.n	800c5de <decode_mcu_sub+0x196>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	4662      	mov	r2, ip
 800c5c6:	4671      	mov	r1, lr
 800c5c8:	a808      	add	r0, sp, #32
 800c5ca:	f7ff fb77 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	f43f af52 	beq.w	800c478 <decode_mcu_sub+0x30>
 800c5d4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c5d8:	f1bc 0f07 	cmp.w	ip, #7
 800c5dc:	dd37      	ble.n	800c64e <decode_mcu_sub+0x206>
 800c5de:	f1ac 0308 	sub.w	r3, ip, #8
 800c5e2:	fa4e f303 	asr.w	r3, lr, r3
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c5ec:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c5f0:	2a00      	cmp	r2, #0
 800c5f2:	d03a      	beq.n	800c66a <decode_mcu_sub+0x222>
 800c5f4:	4443      	add	r3, r8
 800c5f6:	ebac 0c02 	sub.w	ip, ip, r2
 800c5fa:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c5fe:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c602:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c606:	d032      	beq.n	800c66e <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c608:	459c      	cmp	ip, r3
	    k += r;
 800c60a:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c60c:	da0b      	bge.n	800c626 <decode_mcu_sub+0x1de>
 800c60e:	4662      	mov	r2, ip
 800c610:	4671      	mov	r1, lr
 800c612:	a808      	add	r0, sp, #32
 800c614:	9307      	str	r3, [sp, #28]
 800c616:	f7ff fb51 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	f43f af2c 	beq.w	800c478 <decode_mcu_sub+0x30>
 800c620:	9b07      	ldr	r3, [sp, #28]
 800c622:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800c626:	ebac 0c03 	sub.w	ip, ip, r3
 800c62a:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c62e:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c630:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c634:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c638:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c63a:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c63c:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800c63e:	bfa8      	it	ge
 800c640:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c642:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c646:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c64a:	3401      	adds	r4, #1
 800c64c:	e79d      	b.n	800c58a <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c64e:	2301      	movs	r3, #1
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	4662      	mov	r2, ip
 800c654:	4643      	mov	r3, r8
 800c656:	4671      	mov	r1, lr
 800c658:	a808      	add	r0, sp, #32
 800c65a:	f7ff fb8d 	bl	800bd78 <jpeg_huff_decode>
 800c65e:	2800      	cmp	r0, #0
 800c660:	f6ff af0a 	blt.w	800c478 <decode_mcu_sub+0x30>
 800c664:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c668:	e7c9      	b.n	800c5fe <decode_mcu_sub+0x1b6>
 800c66a:	2309      	movs	r3, #9
 800c66c:	e7f0      	b.n	800c650 <decode_mcu_sub+0x208>
	    if (r != 15)
 800c66e:	2a0f      	cmp	r2, #15
 800c670:	d192      	bne.n	800c598 <decode_mcu_sub+0x150>
	    k += 15;
 800c672:	340f      	adds	r4, #15
 800c674:	e7e9      	b.n	800c64a <decode_mcu_sub+0x202>
	if (s) {
 800c676:	b174      	cbz	r4, 800c696 <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c678:	45a4      	cmp	ip, r4
 800c67a:	da0a      	bge.n	800c692 <decode_mcu_sub+0x24a>
 800c67c:	4623      	mov	r3, r4
 800c67e:	4662      	mov	r2, ip
 800c680:	4671      	mov	r1, lr
 800c682:	a808      	add	r0, sp, #32
 800c684:	f7ff fb1a 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c688:	2800      	cmp	r0, #0
 800c68a:	f43f aef5 	beq.w	800c478 <decode_mcu_sub+0x30>
 800c68e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c692:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c696:	2401      	movs	r4, #1
 800c698:	e77a      	b.n	800c590 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c69a:	f1bc 0f07 	cmp.w	ip, #7
 800c69e:	dc0d      	bgt.n	800c6bc <decode_mcu_sub+0x274>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	4662      	mov	r2, ip
 800c6a4:	4671      	mov	r1, lr
 800c6a6:	a808      	add	r0, sp, #32
 800c6a8:	f7ff fb08 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	f43f aee3 	beq.w	800c478 <decode_mcu_sub+0x30>
 800c6b2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c6b6:	f1bc 0f07 	cmp.w	ip, #7
 800c6ba:	dd25      	ble.n	800c708 <decode_mcu_sub+0x2c0>
 800c6bc:	f1ac 0308 	sub.w	r3, ip, #8
 800c6c0:	fa4e f303 	asr.w	r3, lr, r3
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c6ca:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c6ce:	b34a      	cbz	r2, 800c724 <decode_mcu_sub+0x2dc>
 800c6d0:	4443      	add	r3, r8
 800c6d2:	ebac 0c02 	sub.w	ip, ip, r2
 800c6d6:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c6da:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c6de:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c6e2:	d021      	beq.n	800c728 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c6e4:	45dc      	cmp	ip, fp
	  k += r;
 800c6e6:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c6e8:	da0a      	bge.n	800c700 <decode_mcu_sub+0x2b8>
 800c6ea:	465b      	mov	r3, fp
 800c6ec:	4662      	mov	r2, ip
 800c6ee:	4671      	mov	r1, lr
 800c6f0:	a808      	add	r0, sp, #32
 800c6f2:	f7ff fae3 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	f43f aebe 	beq.w	800c478 <decode_mcu_sub+0x30>
 800c6fc:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c700:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800c704:	3401      	adds	r4, #1
 800c706:	e743      	b.n	800c590 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c708:	2301      	movs	r3, #1
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	4662      	mov	r2, ip
 800c70e:	4643      	mov	r3, r8
 800c710:	4671      	mov	r1, lr
 800c712:	a808      	add	r0, sp, #32
 800c714:	f7ff fb30 	bl	800bd78 <jpeg_huff_decode>
 800c718:	2800      	cmp	r0, #0
 800c71a:	f6ff aead 	blt.w	800c478 <decode_mcu_sub+0x30>
 800c71e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c722:	e7da      	b.n	800c6da <decode_mcu_sub+0x292>
 800c724:	2309      	movs	r3, #9
 800c726:	e7f0      	b.n	800c70a <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800c728:	2b0f      	cmp	r3, #15
 800c72a:	f47f af35 	bne.w	800c598 <decode_mcu_sub+0x150>
	  k += 15;
 800c72e:	340f      	adds	r4, #15
 800c730:	e7e8      	b.n	800c704 <decode_mcu_sub+0x2bc>
 800c732:	bf00      	nop
 800c734:	0802e130 	.word	0x0802e130

0800c738 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c73c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c740:	b091      	sub	sp, #68	; 0x44
 800c742:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c744:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c748:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800c74a:	b933      	cbnz	r3, 800c75a <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c74c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c74e:	b17f      	cbz	r7, 800c770 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c750:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c752:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c754:	3b01      	subs	r3, #1
 800c756:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c758:	e007      	b.n	800c76a <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800c75a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1f5      	bne.n	800c74c <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800c760:	f7ff fb54 	bl	800be0c <process_restart>
 800c764:	2800      	cmp	r0, #0
 800c766:	d1f1      	bne.n	800c74c <decode_mcu+0x14>
	return FALSE;
 800c768:	2000      	movs	r0, #0
}
 800c76a:	b011      	add	sp, #68	; 0x44
 800c76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c770:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800c772:	f105 0810 	add.w	r8, r5, #16
 800c776:	ac0b      	add	r4, sp, #44	; 0x2c
 800c778:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	9206      	str	r2, [sp, #24]
 800c782:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800c784:	f8df a290 	ldr.w	sl, [pc, #656]	; 800ca18 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c788:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800c78a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c78e:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c794:	f8d8 3000 	ldr.w	r3, [r8]
 800c798:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c79a:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c79e:	42bb      	cmp	r3, r7
 800c7a0:	dc0e      	bgt.n	800c7c0 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c7a2:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c7a4:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c7a6:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c7a8:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	9a07      	ldr	r2, [sp, #28]
 800c7b0:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c7b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c7b4:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c7b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7ba:	6833      	ldr	r3, [r6, #0]
 800c7bc:	6023      	str	r3, [r4, #0]
 800c7be:	e7c7      	b.n	800c750 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c7c0:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c7c2:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c7c6:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800c7ca:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c7ce:	dc0c      	bgt.n	800c7ea <decode_mcu+0xb2>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	4662      	mov	r2, ip
 800c7d4:	4671      	mov	r1, lr
 800c7d6:	a806      	add	r0, sp, #24
 800c7d8:	f7ff fa70 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d0c3      	beq.n	800c768 <decode_mcu+0x30>
 800c7e0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c7e4:	f1bc 0f07 	cmp.w	ip, #7
 800c7e8:	dd49      	ble.n	800c87e <decode_mcu+0x146>
 800c7ea:	f1ac 0308 	sub.w	r3, ip, #8
 800c7ee:	fa4e f303 	asr.w	r3, lr, r3
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c7f8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7fc:	2a00      	cmp	r2, #0
 800c7fe:	d04c      	beq.n	800c89a <decode_mcu+0x162>
 800c800:	4423      	add	r3, r4
 800c802:	ebac 0c02 	sub.w	ip, ip, r2
 800c806:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c80a:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800c80e:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800c812:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 809f 	beq.w	800c958 <decode_mcu+0x220>
	if (s) {
 800c81a:	b1cc      	cbz	r4, 800c850 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c81c:	45a4      	cmp	ip, r4
 800c81e:	da09      	bge.n	800c834 <decode_mcu+0xfc>
 800c820:	4623      	mov	r3, r4
 800c822:	4662      	mov	r2, ip
 800c824:	4671      	mov	r1, lr
 800c826:	a806      	add	r0, sp, #24
 800c828:	f7ff fa48 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d09b      	beq.n	800c768 <decode_mcu+0x30>
 800c830:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800c834:	ebac 0c04 	sub.w	ip, ip, r4
 800c838:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c83c:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c83e:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c842:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c846:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800c848:	4299      	cmp	r1, r3
 800c84a:	bfac      	ite	ge
 800c84c:	1a9c      	subge	r4, r3, r2
 800c84e:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800c850:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c854:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c858:	ab10      	add	r3, sp, #64	; 0x40
 800c85a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c85e:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c862:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800c864:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c868:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800c86c:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800c86e:	9b03      	ldr	r3, [sp, #12]
 800c870:	429c      	cmp	r4, r3
 800c872:	db14      	blt.n	800c89e <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800c874:	2c3f      	cmp	r4, #63	; 0x3f
 800c876:	f340 8081 	ble.w	800c97c <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c87a:	3701      	adds	r7, #1
 800c87c:	e78d      	b.n	800c79a <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c87e:	2301      	movs	r3, #1
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	4662      	mov	r2, ip
 800c884:	4623      	mov	r3, r4
 800c886:	4671      	mov	r1, lr
 800c888:	a806      	add	r0, sp, #24
 800c88a:	f7ff fa75 	bl	800bd78 <jpeg_huff_decode>
 800c88e:	1e04      	subs	r4, r0, #0
 800c890:	f6ff af6a 	blt.w	800c768 <decode_mcu+0x30>
 800c894:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c898:	e7b7      	b.n	800c80a <decode_mcu+0xd2>
 800c89a:	2309      	movs	r3, #9
 800c89c:	e7f0      	b.n	800c880 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c89e:	f1bc 0f07 	cmp.w	ip, #7
 800c8a2:	dc0d      	bgt.n	800c8c0 <decode_mcu+0x188>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4662      	mov	r2, ip
 800c8a8:	4671      	mov	r1, lr
 800c8aa:	a806      	add	r0, sp, #24
 800c8ac:	f7ff fa06 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	f43f af59 	beq.w	800c768 <decode_mcu+0x30>
 800c8b6:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c8ba:	f1bc 0f07 	cmp.w	ip, #7
 800c8be:	dd37      	ble.n	800c930 <decode_mcu+0x1f8>
 800c8c0:	f1ac 0308 	sub.w	r3, ip, #8
 800c8c4:	fa4e f303 	asr.w	r3, lr, r3
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c8ce:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c8d2:	2a00      	cmp	r2, #0
 800c8d4:	d03a      	beq.n	800c94c <decode_mcu+0x214>
 800c8d6:	4443      	add	r3, r8
 800c8d8:	ebac 0c02 	sub.w	ip, ip, r2
 800c8dc:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c8e0:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c8e4:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c8e8:	d032      	beq.n	800c950 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c8ea:	459c      	cmp	ip, r3
	    k += r;
 800c8ec:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c8ee:	da0b      	bge.n	800c908 <decode_mcu+0x1d0>
 800c8f0:	4662      	mov	r2, ip
 800c8f2:	4671      	mov	r1, lr
 800c8f4:	a806      	add	r0, sp, #24
 800c8f6:	9305      	str	r3, [sp, #20]
 800c8f8:	f7ff f9e0 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	f43f af33 	beq.w	800c768 <decode_mcu+0x30>
 800c902:	9b05      	ldr	r3, [sp, #20]
 800c904:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800c908:	ebac 0c03 	sub.w	ip, ip, r3
 800c90c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c910:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c912:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c916:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c91a:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c91c:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c91e:	4b3d      	ldr	r3, [pc, #244]	; (800ca14 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800c920:	bfa8      	it	ge
 800c922:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c924:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c928:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c92c:	3401      	adds	r4, #1
 800c92e:	e79e      	b.n	800c86e <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c930:	2301      	movs	r3, #1
 800c932:	9300      	str	r3, [sp, #0]
 800c934:	4662      	mov	r2, ip
 800c936:	4643      	mov	r3, r8
 800c938:	4671      	mov	r1, lr
 800c93a:	a806      	add	r0, sp, #24
 800c93c:	f7ff fa1c 	bl	800bd78 <jpeg_huff_decode>
 800c940:	2800      	cmp	r0, #0
 800c942:	f6ff af11 	blt.w	800c768 <decode_mcu+0x30>
 800c946:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c94a:	e7c9      	b.n	800c8e0 <decode_mcu+0x1a8>
 800c94c:	2309      	movs	r3, #9
 800c94e:	e7f0      	b.n	800c932 <decode_mcu+0x1fa>
	    if (r != 15)
 800c950:	2a0f      	cmp	r2, #15
 800c952:	d192      	bne.n	800c87a <decode_mcu+0x142>
	    k += 15;
 800c954:	340f      	adds	r4, #15
 800c956:	e7e9      	b.n	800c92c <decode_mcu+0x1f4>
	if (s) {
 800c958:	b174      	cbz	r4, 800c978 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c95a:	45a4      	cmp	ip, r4
 800c95c:	da0a      	bge.n	800c974 <decode_mcu+0x23c>
 800c95e:	4623      	mov	r3, r4
 800c960:	4662      	mov	r2, ip
 800c962:	4671      	mov	r1, lr
 800c964:	a806      	add	r0, sp, #24
 800c966:	f7ff f9a9 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	f43f aefc 	beq.w	800c768 <decode_mcu+0x30>
 800c970:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c974:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c978:	2401      	movs	r4, #1
 800c97a:	e77b      	b.n	800c874 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c97c:	f1bc 0f07 	cmp.w	ip, #7
 800c980:	dc0d      	bgt.n	800c99e <decode_mcu+0x266>
 800c982:	2300      	movs	r3, #0
 800c984:	4662      	mov	r2, ip
 800c986:	4671      	mov	r1, lr
 800c988:	a806      	add	r0, sp, #24
 800c98a:	f7ff f997 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c98e:	2800      	cmp	r0, #0
 800c990:	f43f aeea 	beq.w	800c768 <decode_mcu+0x30>
 800c994:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c998:	f1bc 0f07 	cmp.w	ip, #7
 800c99c:	dd25      	ble.n	800c9ea <decode_mcu+0x2b2>
 800c99e:	f1ac 0308 	sub.w	r3, ip, #8
 800c9a2:	fa4e f303 	asr.w	r3, lr, r3
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c9ac:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c9b0:	b34a      	cbz	r2, 800ca06 <decode_mcu+0x2ce>
 800c9b2:	4443      	add	r3, r8
 800c9b4:	ebac 0c02 	sub.w	ip, ip, r2
 800c9b8:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c9bc:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c9c0:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c9c4:	d021      	beq.n	800ca0a <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c9c6:	45dc      	cmp	ip, fp
	  k += r;
 800c9c8:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c9ca:	da0a      	bge.n	800c9e2 <decode_mcu+0x2aa>
 800c9cc:	465b      	mov	r3, fp
 800c9ce:	4662      	mov	r2, ip
 800c9d0:	4671      	mov	r1, lr
 800c9d2:	a806      	add	r0, sp, #24
 800c9d4:	f7ff f972 	bl	800bcbc <jpeg_fill_bit_buffer>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	f43f aec5 	beq.w	800c768 <decode_mcu+0x30>
 800c9de:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c9e2:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800c9e6:	3401      	adds	r4, #1
 800c9e8:	e744      	b.n	800c874 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	4662      	mov	r2, ip
 800c9f0:	4643      	mov	r3, r8
 800c9f2:	4671      	mov	r1, lr
 800c9f4:	a806      	add	r0, sp, #24
 800c9f6:	f7ff f9bf 	bl	800bd78 <jpeg_huff_decode>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	f6ff aeb4 	blt.w	800c768 <decode_mcu+0x30>
 800ca00:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800ca04:	e7da      	b.n	800c9bc <decode_mcu+0x284>
 800ca06:	2309      	movs	r3, #9
 800ca08:	e7f0      	b.n	800c9ec <decode_mcu+0x2b4>
	  if (r != 15)
 800ca0a:	2b0f      	cmp	r3, #15
 800ca0c:	f47f af35 	bne.w	800c87a <decode_mcu+0x142>
	  k += 15;
 800ca10:	340f      	adds	r4, #15
 800ca12:	e7e8      	b.n	800c9e6 <decode_mcu+0x2ae>
 800ca14:	0802fa08 	.word	0x0802fa08
 800ca18:	0802e130 	.word	0x0802e130

0800ca1c <jpeg_make_d_derived_tbl>:
{
 800ca1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800ca20:	2a03      	cmp	r2, #3
{
 800ca22:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800ca26:	4604      	mov	r4, r0
 800ca28:	4616      	mov	r6, r2
 800ca2a:	461f      	mov	r7, r3
 800ca2c:	9103      	str	r1, [sp, #12]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800ca2e:	d905      	bls.n	800ca3c <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800ca30:	6803      	ldr	r3, [r0, #0]
 800ca32:	2234      	movs	r2, #52	; 0x34
 800ca34:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800ca3c:	9b03      	ldr	r3, [sp, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d044      	beq.n	800cacc <jpeg_make_d_derived_tbl+0xb0>
 800ca42:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ca46:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800ca4a:	b935      	cbnz	r5, 800ca5a <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800ca4c:	6823      	ldr	r3, [r4, #0]
 800ca4e:	2234      	movs	r2, #52	; 0x34
 800ca50:	4620      	mov	r0, r4
 800ca52:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4798      	blx	r3
  if (*pdtbl == NULL)
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	b93b      	cbnz	r3, 800ca6e <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca5e:	6863      	ldr	r3, [r4, #4]
 800ca60:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800ca64:	2101      	movs	r1, #1
 800ca66:	4620      	mov	r0, r4
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800ca6c:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800ca6e:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800ca72:	2601      	movs	r6, #1
  p = 0;
 800ca74:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800ca76:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800ca7a:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800ca7e:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800ca82:	46ba      	mov	sl, r7
 800ca84:	444f      	add	r7, r9
 800ca86:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800ca8a:	dd05      	ble.n	800ca98 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800ca8c:	6823      	ldr	r3, [r4, #0]
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f8c3 b014 	str.w	fp, [r3, #20]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4798      	blx	r3
 800ca98:	f10a 0318 	add.w	r3, sl, #24
 800ca9c:	446b      	add	r3, sp
    while (i--)
 800ca9e:	f1b9 0901 	subs.w	r9, r9, #1
 800caa2:	d218      	bcs.n	800cad6 <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800caa4:	3601      	adds	r6, #1
 800caa6:	2e11      	cmp	r6, #17
 800caa8:	d1e9      	bne.n	800ca7e <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800caaa:	2200      	movs	r2, #0
 800caac:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800caae:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800cab2:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800cab6:	55da      	strb	r2, [r3, r7]
  p = 0;
 800cab8:	4691      	mov	r9, r2
  si = huffsize[0];
 800caba:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800cabe:	ab06      	add	r3, sp, #24
 800cac0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cac4:	b313      	cbz	r3, 800cb0c <jpeg_make_d_derived_tbl+0xf0>
 800cac6:	4649      	mov	r1, r9
 800cac8:	1a52      	subs	r2, r2, r1
 800caca:	e00a      	b.n	800cae2 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800cacc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cad0:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800cad4:	e7b9      	b.n	800ca4a <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800cad6:	f803 6b01 	strb.w	r6, [r3], #1
 800cada:	e7e0      	b.n	800ca9e <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800cadc:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800cae0:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800cae2:	a806      	add	r0, sp, #24
 800cae4:	1853      	adds	r3, r2, r1
 800cae6:	4689      	mov	r9, r1
 800cae8:	5c40      	ldrb	r0, [r0, r1]
 800caea:	42b0      	cmp	r0, r6
 800caec:	d0f6      	beq.n	800cadc <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800caee:	fa0b f206 	lsl.w	r2, fp, r6
 800caf2:	429a      	cmp	r2, r3
 800caf4:	dc07      	bgt.n	800cb06 <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800caf6:	6822      	ldr	r2, [r4, #0]
 800caf8:	2109      	movs	r1, #9
 800cafa:	4620      	mov	r0, r4
 800cafc:	9301      	str	r3, [sp, #4]
 800cafe:	6151      	str	r1, [r2, #20]
 800cb00:	6812      	ldr	r2, [r2, #0]
 800cb02:	4790      	blx	r2
 800cb04:	9b01      	ldr	r3, [sp, #4]
    code <<= 1;
 800cb06:	005a      	lsls	r2, r3, #1
    si++;
 800cb08:	3601      	adds	r6, #1
 800cb0a:	e7d8      	b.n	800cabe <jpeg_make_d_derived_tbl+0xa2>
 800cb0c:	1c68      	adds	r0, r5, #1
 800cb0e:	f108 0204 	add.w	r2, r8, #4
 800cb12:	f108 0c44 	add.w	ip, r8, #68	; 0x44
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800cb16:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800cb1a:	ae47      	add	r6, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 800cb1c:	f810 9b01 	ldrb.w	r9, [r0], #1
 800cb20:	f1b9 0f00 	cmp.w	r9, #0
 800cb24:	d029      	beq.n	800cb7a <jpeg_make_d_derived_tbl+0x15e>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800cb26:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800cb2a:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 800cb2c:	444b      	add	r3, r9
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800cb2e:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800cb30:	1e59      	subs	r1, r3, #1
 800cb32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800cb36:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 800cb38:	3204      	adds	r2, #4
 800cb3a:	4594      	cmp	ip, r2
 800cb3c:	d1ee      	bne.n	800cb1c <jpeg_make_d_derived_tbl+0x100>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800cb3e:	4b2d      	ldr	r3, [pc, #180]	; (800cbf4 <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800cb40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cb44:	2100      	movs	r1, #0
 800cb46:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800cb4a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800cb4e:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800cb50:	f01d fe10 	bl	802a774 <memset>
  p = 0;
 800cb54:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800cb58:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800cb5a:	5daa      	ldrb	r2, [r5, r6]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cb5c:	2101      	movs	r1, #1
 800cb5e:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800cb60:	9201      	str	r2, [sp, #4]
 800cb62:	f1c6 0208 	rsb	r2, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cb66:	fa01 fb02 	lsl.w	fp, r1, r2
 800cb6a:	9202      	str	r2, [sp, #8]
 800cb6c:	9a01      	ldr	r2, [sp, #4]
 800cb6e:	4452      	add	r2, sl
 800cb70:	9204      	str	r2, [sp, #16]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800cb72:	f105 0211 	add.w	r2, r5, #17
 800cb76:	9205      	str	r2, [sp, #20]
 800cb78:	e020      	b.n	800cbbc <jpeg_make_d_derived_tbl+0x1a0>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800cb7a:	f8c2 e000 	str.w	lr, [r2]
 800cb7e:	e7db      	b.n	800cb38 <jpeg_make_d_derived_tbl+0x11c>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800cb80:	9a02      	ldr	r2, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cb82:	46dc      	mov	ip, fp
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800cb84:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800cb88:	4090      	lsls	r0, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800cb8a:	9a05      	ldr	r2, [sp, #20]
 800cb8c:	f812 1009 	ldrb.w	r1, [r2, r9]
 800cb90:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800cb94:	eb08 0282 	add.w	r2, r8, r2, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cb98:	f1bc 0c01 	subs.w	ip, ip, #1
	dtbl->look_nbits[lookbits] = l;
 800cb9c:	f842 6b04 	str.w	r6, [r2], #4
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cba0:	d1fa      	bne.n	800cb98 <jpeg_make_d_derived_tbl+0x17c>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800cba2:	f1bb 0f00 	cmp.w	fp, #0
 800cba6:	f500 6092 	add.w	r0, r0, #1168	; 0x490
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800cbaa:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800cbae:	bfcc      	ite	gt
 800cbb0:	465a      	movgt	r2, fp
 800cbb2:	2201      	movle	r2, #1
 800cbb4:	4440      	add	r0, r8
 800cbb6:	f01d fddd 	bl	802a774 <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800cbba:	ab47      	add	r3, sp, #284	; 0x11c
 800cbbc:	9a04      	ldr	r2, [sp, #16]
 800cbbe:	4591      	cmp	r9, r2
 800cbc0:	d1de      	bne.n	800cb80 <jpeg_make_d_derived_tbl+0x164>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800cbc2:	3601      	adds	r6, #1
 800cbc4:	9a01      	ldr	r2, [sp, #4]
 800cbc6:	2e09      	cmp	r6, #9
 800cbc8:	4492      	add	sl, r2
 800cbca:	d1c6      	bne.n	800cb5a <jpeg_make_d_derived_tbl+0x13e>
  if (isDC) {
 800cbcc:	9b03      	ldr	r3, [sp, #12]
 800cbce:	b11b      	cbz	r3, 800cbd8 <jpeg_make_d_derived_tbl+0x1bc>
 800cbd0:	3511      	adds	r5, #17
 800cbd2:	442f      	add	r7, r5
    for (i = 0; i < numsymbols; i++) {
 800cbd4:	42af      	cmp	r7, r5
 800cbd6:	d103      	bne.n	800cbe0 <jpeg_make_d_derived_tbl+0x1c4>
}
 800cbd8:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800cbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 800cbe0:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800cbe4:	2b0f      	cmp	r3, #15
 800cbe6:	d9f5      	bls.n	800cbd4 <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	4620      	mov	r0, r4
 800cbec:	615e      	str	r6, [r3, #20]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800cbf2:	e7ef      	b.n	800cbd4 <jpeg_make_d_derived_tbl+0x1b8>
 800cbf4:	000fffff 	.word	0x000fffff

0800cbf8 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800cbf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800cbfc:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800cc00:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800cc02:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800cc06:	f500 74aa 	add.w	r4, r0, #340	; 0x154
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800cc0a:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800cc0e:	2d00      	cmp	r5, #0
 800cc10:	f000 80b1 	beq.w	800cd76 <start_pass_huff_decoder+0x17e>
    if (cinfo->Ss == 0) {
 800cc14:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800cc18:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800cc1c:	b962      	cbnz	r2, 800cc38 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800cc1e:	b1a9      	cbz	r1, 800cc4c <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800cc20:	f8da 3000 	ldr.w	r3, [sl]
 800cc24:	2711      	movs	r7, #17
 800cc26:	4650      	mov	r0, sl
 800cc28:	625d      	str	r5, [r3, #36]	; 0x24
 800cc2a:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800cc2e:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4798      	blx	r3
 800cc36:	e00f      	b.n	800cc58 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800cc38:	428a      	cmp	r2, r1
 800cc3a:	dcf1      	bgt.n	800cc20 <start_pass_huff_decoder+0x28>
 800cc3c:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800cc40:	428b      	cmp	r3, r1
 800cc42:	dbed      	blt.n	800cc20 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800cc44:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d1e9      	bne.n	800cc20 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800cc4c:	b116      	cbz	r6, 800cc54 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800cc4e:	1e73      	subs	r3, r6, #1
 800cc50:	42ab      	cmp	r3, r5
 800cc52:	d1e5      	bne.n	800cc20 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800cc54:	2d0d      	cmp	r5, #13
 800cc56:	dce3      	bgt.n	800cc20 <start_pass_huff_decoder+0x28>
{
 800cc58:	46a1      	mov	r9, r4
 800cc5a:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cc5c:	f8da 2150 	ldr.w	r2, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800cc60:	f8da 3198 	ldr.w	r3, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cc64:	42ba      	cmp	r2, r7
 800cc66:	dc1e      	bgt.n	800cca6 <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800cc68:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800cc6c:	2a00      	cmp	r2, #0
 800cc6e:	d158      	bne.n	800cd22 <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d154      	bne.n	800cd1e <start_pass_huff_decoder+0x126>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800cc74:	4bbb      	ldr	r3, [pc, #748]	; (800cf64 <start_pass_huff_decoder+0x36c>)
{
 800cc76:	2600      	movs	r6, #0
 800cc78:	f10b 0714 	add.w	r7, fp, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800cc7c:	f8cb 3004 	str.w	r3, [fp, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cc80:	46b0      	mov	r8, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cc82:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800cc86:	42b3      	cmp	r3, r6
 800cc88:	dc50      	bgt.n	800cd2c <start_pass_huff_decoder+0x134>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800cc90:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800cc92:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800cc96:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800cc9a:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800cc9e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800cca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800cca6:	f859 2b04 	ldr.w	r2, [r9], #4
 800ccaa:	f8d2 8004 	ldr.w	r8, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800ccae:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800ccb2:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800ccb6:	eb02 2608 	add.w	r6, r2, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800ccba:	b173      	cbz	r3, 800ccda <start_pass_huff_decoder+0xe2>
 800ccbc:	5853      	ldr	r3, [r2, r1]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	da0b      	bge.n	800ccda <start_pass_huff_decoder+0xe2>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800ccc2:	f8da 3000 	ldr.w	r3, [sl]
 800ccc6:	2276      	movs	r2, #118	; 0x76
 800ccc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cccc:	4650      	mov	r0, sl
 800ccce:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	61da      	str	r2, [r3, #28]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800ccda:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800ccde:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800cce2:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800cce6:	42ab      	cmp	r3, r5
 800cce8:	da01      	bge.n	800ccee <start_pass_huff_decoder+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ccea:	3701      	adds	r7, #1
 800ccec:	e7b6      	b.n	800cc5c <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800ccee:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800ccf0:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800ccf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d00a      	beq.n	800cd12 <start_pass_huff_decoder+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800ccfc:	f8da 3000 	ldr.w	r3, [sl]
 800cd00:	2276      	movs	r2, #118	; 0x76
 800cd02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cd06:	4650      	mov	r0, sl
 800cd08:	61dd      	str	r5, [r3, #28]
 800cd0a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800cd12:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800cd16:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800cd18:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800cd1c:	e7e1      	b.n	800cce2 <start_pass_huff_decoder+0xea>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800cd1e:	4b92      	ldr	r3, [pc, #584]	; (800cf68 <start_pass_huff_decoder+0x370>)
 800cd20:	e7a9      	b.n	800cc76 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0)
 800cd22:	b90b      	cbnz	r3, 800cd28 <start_pass_huff_decoder+0x130>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800cd24:	4b91      	ldr	r3, [pc, #580]	; (800cf6c <start_pass_huff_decoder+0x374>)
 800cd26:	e7a6      	b.n	800cc76 <start_pass_huff_decoder+0x7e>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800cd28:	4b91      	ldr	r3, [pc, #580]	; (800cf70 <start_pass_huff_decoder+0x378>)
 800cd2a:	e7a4      	b.n	800cc76 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800cd2c:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800cd30:	f854 3b04 	ldr.w	r3, [r4], #4
      if (cinfo->Ss == 0) {
 800cd34:	b97a      	cbnz	r2, 800cd56 <start_pass_huff_decoder+0x15e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800cd36:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800cd3a:	b942      	cbnz	r2, 800cd4e <start_pass_huff_decoder+0x156>
	  tbl = compptr->dc_tbl_no;
 800cd3c:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800cd3e:	2101      	movs	r1, #1
 800cd40:	4650      	mov	r0, sl
 800cd42:	f102 030b 	add.w	r3, r2, #11
 800cd46:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cd4a:	f7ff fe67 	bl	800ca1c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cd4e:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800cd50:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cd54:	e795      	b.n	800cc82 <start_pass_huff_decoder+0x8a>
	tbl = compptr->ac_tbl_no;
 800cd56:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cd58:	2100      	movs	r1, #0
 800cd5a:	4650      	mov	r0, sl
 800cd5c:	f105 030b 	add.w	r3, r5, #11
 800cd60:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800cd62:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cd66:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cd6a:	f7ff fe57 	bl	800ca1c <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800cd6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800cd70:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800cd74:	e7eb      	b.n	800cd4e <start_pass_huff_decoder+0x156>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800cd76:	b982      	cbnz	r2, 800cd9a <start_pass_huff_decoder+0x1a2>
 800cd78:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800cd7c:	b96b      	cbnz	r3, 800cd9a <start_pass_huff_decoder+0x1a2>
 800cd7e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800cd82:	b953      	cbnz	r3, 800cd9a <start_pass_huff_decoder+0x1a2>
 800cd84:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800cd88:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800cd8c:	b90a      	cbnz	r2, 800cd92 <start_pass_huff_decoder+0x19a>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800cd8e:	2b3f      	cmp	r3, #63	; 0x3f
 800cd90:	dc0c      	bgt.n	800cdac <start_pass_huff_decoder+0x1b4>
 800cd92:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d008      	beq.n	800cdac <start_pass_huff_decoder+0x1b4>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800cd9a:	f8da 3000 	ldr.w	r3, [sl]
 800cd9e:	227d      	movs	r2, #125	; 0x7d
 800cda0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cda4:	4650      	mov	r0, sl
 800cda6:	615a      	str	r2, [r3, #20]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800cdac:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800cdb0:	2600      	movs	r6, #0
 800cdb2:	4b70      	ldr	r3, [pc, #448]	; (800cf74 <start_pass_huff_decoder+0x37c>)
 800cdb4:	f10b 0714 	add.w	r7, fp, #20
 800cdb8:	4a6f      	ldr	r2, [pc, #444]	; (800cf78 <start_pass_huff_decoder+0x380>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cdba:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800cdbc:	293f      	cmp	r1, #63	; 0x3f
 800cdbe:	bf08      	it	eq
 800cdc0:	4613      	moveq	r3, r2
 800cdc2:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cdc6:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800cdca:	42b3      	cmp	r3, r6
 800cdcc:	dc3c      	bgt.n	800ce48 <start_pass_huff_decoder+0x250>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cdce:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800cdd2:	f10b 0160 	add.w	r1, fp, #96	; 0x60
 800cdd6:	f50a 76b8 	add.w	r6, sl, #368	; 0x170
 800cdda:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800cdde:	4f67      	ldr	r7, [pc, #412]	; (800cf7c <start_pass_huff_decoder+0x384>)
	  entropy->coef_limit[blkn] = 1;
 800cde0:	f04f 0801 	mov.w	r8, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cde4:	42a8      	cmp	r0, r5
 800cde6:	f77f af53 	ble.w	800cc90 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800cdea:	f856 3b04 	ldr.w	r3, [r6], #4
      compptr = cinfo->cur_comp_info[ci];
 800cdee:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800cdf2:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800cdf6:	6953      	ldr	r3, [r2, #20]
 800cdf8:	3310      	adds	r3, #16
 800cdfa:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800cdfe:	f841 3b04 	str.w	r3, [r1], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800ce02:	6993      	ldr	r3, [r2, #24]
 800ce04:	3314      	adds	r3, #20
 800ce06:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800ce0a:	624b      	str	r3, [r1, #36]	; 0x24
      if (compptr->component_needed) {
 800ce0c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d052      	beq.n	800ceb8 <start_pass_huff_decoder+0x2c0>
	switch (cinfo->lim_Se) {
 800ce12:	f8da 41b0 	ldr.w	r4, [sl, #432]	; 0x1b0
 800ce16:	2c0f      	cmp	r4, #15
	i = compptr->DCT_h_scaled_size;
 800ce18:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800ce1c:	d075      	beq.n	800cf0a <start_pass_huff_decoder+0x312>
 800ce1e:	dc30      	bgt.n	800ce82 <start_pass_huff_decoder+0x28a>
 800ce20:	2c03      	cmp	r4, #3
 800ce22:	d04f      	beq.n	800cec4 <start_pass_huff_decoder+0x2cc>
 800ce24:	2c08      	cmp	r4, #8
 800ce26:	d05d      	beq.n	800cee4 <start_pass_huff_decoder+0x2ec>
 800ce28:	2c00      	cmp	r4, #0
 800ce2a:	d047      	beq.n	800cebc <start_pass_huff_decoder+0x2c4>
	  if (ci <= 0 || ci > 8) ci = 8;
 800ce2c:	1e5c      	subs	r4, r3, #1
 800ce2e:	2c08      	cmp	r4, #8
	  if (i <= 0 || i > 8) i = 8;
 800ce30:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
	  if (ci <= 0 || ci > 8) ci = 8;
 800ce34:	bf28      	it	cs
 800ce36:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800ce38:	2c08      	cmp	r4, #8
 800ce3a:	bf28      	it	cs
 800ce3c:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800ce3e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ce42:	4b4f      	ldr	r3, [pc, #316]	; (800cf80 <start_pass_huff_decoder+0x388>)
 800ce44:	3a09      	subs	r2, #9
 800ce46:	e04a      	b.n	800cede <start_pass_huff_decoder+0x2e6>
      compptr = cinfo->cur_comp_info[ci];
 800ce48:	f854 9b04 	ldr.w	r9, [r4], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800ce4c:	2101      	movs	r1, #1
 800ce4e:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800ce50:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800ce54:	f102 0310 	add.w	r3, r2, #16
 800ce58:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800ce5c:	f7ff fdde 	bl	800ca1c <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800ce60:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800ce64:	b14b      	cbz	r3, 800ce7a <start_pass_huff_decoder+0x282>
	tbl = compptr->ac_tbl_no;
 800ce66:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	4650      	mov	r0, sl
 800ce6e:	f102 0314 	add.w	r3, r2, #20
 800ce72:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800ce76:	f7ff fdd1 	bl	800ca1c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ce7a:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800ce7c:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ce80:	e7a1      	b.n	800cdc6 <start_pass_huff_decoder+0x1ce>
	switch (cinfo->lim_Se) {
 800ce82:	2c23      	cmp	r4, #35	; 0x23
 800ce84:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 800ce88:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
 800ce8c:	d04b      	beq.n	800cf26 <start_pass_huff_decoder+0x32e>
 800ce8e:	2c30      	cmp	r4, #48	; 0x30
 800ce90:	d057      	beq.n	800cf42 <start_pass_huff_decoder+0x34a>
 800ce92:	2c18      	cmp	r4, #24
 800ce94:	d1ca      	bne.n	800ce2c <start_pass_huff_decoder+0x234>
	  if (ci <= 0 || ci > 5) ci = 5;
 800ce96:	f1be 0f05 	cmp.w	lr, #5
 800ce9a:	bf28      	it	cs
 800ce9c:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800ce9e:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800cea2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
	  if (i <= 0 || i > 5) i = 5;
 800cea6:	bf28      	it	cs
 800cea8:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800ceaa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ceae:	3a01      	subs	r2, #1
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800ceb6:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 800ceb8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ceba:	e001      	b.n	800cec0 <start_pass_huff_decoder+0x2c8>
	  entropy->coef_limit[blkn] = 1;
 800cebc:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cec0:	3501      	adds	r5, #1
 800cec2:	e78f      	b.n	800cde4 <start_pass_huff_decoder+0x1ec>
	  if (ci <= 0 || ci > 2) ci = 2;
 800cec4:	1e5c      	subs	r4, r3, #1
 800cec6:	2c02      	cmp	r4, #2
	  if (i <= 0 || i > 2) i = 2;
 800cec8:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
	  if (ci <= 0 || ci > 2) ci = 2;
 800cecc:	bf28      	it	cs
 800cece:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800ced0:	2c02      	cmp	r4, #2
 800ced2:	bf28      	it	cs
 800ced4:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800ced6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800ceda:	4b2a      	ldr	r3, [pc, #168]	; (800cf84 <start_pass_huff_decoder+0x38c>)
 800cedc:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800cede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cee2:	e7e8      	b.n	800ceb6 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 3) ci = 3;
 800cee4:	1e5c      	subs	r4, r3, #1
 800cee6:	2c03      	cmp	r4, #3
	  if (i <= 0 || i > 3) i = 3;
 800cee8:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
	  if (ci <= 0 || ci > 3) ci = 3;
 800ceec:	bf28      	it	cs
 800ceee:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800cef0:	2c03      	cmp	r4, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800cef2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
	  if (i <= 0 || i > 3) i = 3;
 800cef6:	bf28      	it	cs
 800cef8:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800cefa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cefe:	3a01      	subs	r2, #1
 800cf00:	4413      	add	r3, r2
 800cf02:	4a21      	ldr	r2, [pc, #132]	; (800cf88 <start_pass_huff_decoder+0x390>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800cf04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf08:	e7d5      	b.n	800ceb6 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 4) ci = 4;
 800cf0a:	1e5c      	subs	r4, r3, #1
 800cf0c:	2c04      	cmp	r4, #4
	  if (i <= 0 || i > 4) i = 4;
 800cf0e:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
	  if (ci <= 0 || ci > 4) ci = 4;
 800cf12:	bf28      	it	cs
 800cf14:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800cf16:	2c04      	cmp	r4, #4
 800cf18:	bf28      	it	cs
 800cf1a:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800cf1c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cf20:	4b1a      	ldr	r3, [pc, #104]	; (800cf8c <start_pass_huff_decoder+0x394>)
 800cf22:	3a05      	subs	r2, #5
 800cf24:	e7db      	b.n	800cede <start_pass_huff_decoder+0x2e6>
	  if (ci <= 0 || ci > 6) ci = 6;
 800cf26:	f1be 0f06 	cmp.w	lr, #6
 800cf2a:	bf28      	it	cs
 800cf2c:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800cf2e:	f1b9 0f06 	cmp.w	r9, #6
 800cf32:	bf28      	it	cs
 800cf34:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800cf36:	3b01      	subs	r3, #1
 800cf38:	3a01      	subs	r2, #1
 800cf3a:	fb0c 2303 	mla	r3, ip, r3, r2
 800cf3e:	4a14      	ldr	r2, [pc, #80]	; (800cf90 <start_pass_huff_decoder+0x398>)
 800cf40:	e7e0      	b.n	800cf04 <start_pass_huff_decoder+0x30c>
	  if (ci <= 0 || ci > 7) ci = 7;
 800cf42:	f1be 0f07 	cmp.w	lr, #7
 800cf46:	bf28      	it	cs
 800cf48:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800cf4a:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800cf4e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
	  if (i <= 0 || i > 7) i = 7;
 800cf52:	bf28      	it	cs
 800cf54:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800cf56:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cf5a:	3a01      	subs	r2, #1
 800cf5c:	4413      	add	r3, r2
 800cf5e:	4a0d      	ldr	r2, [pc, #52]	; (800cf94 <start_pass_huff_decoder+0x39c>)
 800cf60:	e7d0      	b.n	800cf04 <start_pass_huff_decoder+0x30c>
 800cf62:	bf00      	nop
 800cf64:	0800be59 	.word	0x0800be59
 800cf68:	0800bfcd 	.word	0x0800bfcd
 800cf6c:	0800c12d 	.word	0x0800c12d
 800cf70:	0800c1c1 	.word	0x0800c1c1
 800cf74:	0800c449 	.word	0x0800c449
 800cf78:	0800c739 	.word	0x0800c739
 800cf7c:	0802e2e4 	.word	0x0802e2e4
 800cf80:	0802e170 	.word	0x0802e170
 800cf84:	0802e270 	.word	0x0802e270
 800cf88:	0802e280 	.word	0x0802e280
 800cf8c:	0802e2a4 	.word	0x0802e2a4
 800cf90:	0802e348 	.word	0x0802e348
 800cf94:	0802e3d8 	.word	0x0802e3d8

0800cf98 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cf9a:	6843      	ldr	r3, [r0, #4]
 800cf9c:	22d8      	movs	r2, #216	; 0xd8
 800cf9e:	2101      	movs	r1, #1
{
 800cfa0:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800cfa6:	4b17      	ldr	r3, [pc, #92]	; (800d004 <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800cfa8:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cfac:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800cfae:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800cfb0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800cfb4:	b943      	cbnz	r3, 800cfc8 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800cfb6:	6503      	str	r3, [r0, #80]	; 0x50
 800cfb8:	6403      	str	r3, [r0, #64]	; 0x40
 800cfba:	6543      	str	r3, [r0, #84]	; 0x54
 800cfbc:	6443      	str	r3, [r0, #68]	; 0x44
 800cfbe:	6583      	str	r3, [r0, #88]	; 0x58
 800cfc0:	6483      	str	r3, [r0, #72]	; 0x48
 800cfc2:	65c3      	str	r3, [r0, #92]	; 0x5c
 800cfc4:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800cfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cfc8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800cfca:	2101      	movs	r1, #1
 800cfcc:	686b      	ldr	r3, [r5, #4]
 800cfce:	4628      	mov	r0, r5
 800cfd0:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800cfd2:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4798      	blx	r3
 800cfd8:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800cfda:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800cfde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cfe0:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800cfe4:	42b3      	cmp	r3, r6
 800cfe6:	dc05      	bgt.n	800cff4 <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800cfee:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800cff2:	e7e8      	b.n	800cfc6 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800cff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cff8:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800cffa:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800cffc:	f01d fbba 	bl	802a774 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800d000:	e7ed      	b.n	800cfde <jinit_huff_decoder+0x46>
 800d002:	bf00      	nop
 800d004:	0800cbf9 	.word	0x0800cbf9

0800d008 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800d008:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800d00c:	4a01      	ldr	r2, [pc, #4]	; (800d014 <finish_input_pass+0xc>)
 800d00e:	601a      	str	r2, [r3, #0]
}
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	0800d1d1 	.word	0x0800d1d1

0800d018 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800d018:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800d01a:	4a0a      	ldr	r2, [pc, #40]	; (800d044 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800d01c:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800d01e:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800d022:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800d024:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800d026:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800d028:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800d02c:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800d02e:	6803      	ldr	r3, [r0, #0]
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800d034:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d038:	4620      	mov	r0, r4
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800d03e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	0800d1d1 	.word	0x0800d1d1

0800d048 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800d048:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800d04c:	2a01      	cmp	r2, #1
{
 800d04e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d052:	4604      	mov	r4, r0
 800d054:	f500 76aa 	add.w	r6, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 800d058:	d135      	bne.n	800d0c6 <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800d05a:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800d05e:	69d9      	ldr	r1, [r3, #28]
 800d060:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800d064:	6a19      	ldr	r1, [r3, #32]
 800d066:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800d06a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800d06c:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800d06e:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800d072:	68d8      	ldr	r0, [r3, #12]
 800d074:	fbb1 f5f0 	udiv	r5, r1, r0
 800d078:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800d07c:	2900      	cmp	r1, #0
 800d07e:	bf08      	it	eq
 800d080:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800d082:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800d086:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800d088:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800d08a:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800d08e:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800d092:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d094:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800d096:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d09a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d09e:	429f      	cmp	r7, r3
 800d0a0:	db71      	blt.n	800d186 <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800d0a2:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800d0ac:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800d0b6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800d0ba:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800d0be:	6852      	ldr	r2, [r2, #4]
 800d0c0:	601a      	str	r2, [r3, #0]
}
 800d0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800d0c6:	1e53      	subs	r3, r2, #1
 800d0c8:	2b03      	cmp	r3, #3
 800d0ca:	d907      	bls.n	800d0dc <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800d0cc:	6803      	ldr	r3, [r0, #0]
 800d0ce:	211b      	movs	r1, #27
 800d0d0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d0d4:	2204      	movs	r2, #4
 800d0d6:	61da      	str	r2, [r3, #28]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d0dc:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800d0e0:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d0e2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d0e6:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800d0e8:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800d0ea:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800d0ee:	4359      	muls	r1, r3
 800d0f0:	f009 fdd4 	bl	8016c9c <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d0f4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800d0f8:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800d0fc:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800d100:	4359      	muls	r1, r3
 800d102:	6a20      	ldr	r0, [r4, #32]
 800d104:	f009 fdca 	bl	8016c9c <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800d108:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800d10c:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d110:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d114:	429d      	cmp	r5, r3
 800d116:	dabc      	bge.n	800d092 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800d118:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 800d11c:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d11e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800d120:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d122:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800d124:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d128:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800d12a:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800d12c:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800d12e:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800d130:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800d132:	fbb2 fcf1 	udiv	ip, r2, r1
 800d136:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800d13a:	2a00      	cmp	r2, #0
 800d13c:	bf08      	it	eq
 800d13e:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800d140:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800d142:	6a1a      	ldr	r2, [r3, #32]
 800d144:	fbb2 f1f0 	udiv	r1, r2, r0
 800d148:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800d14c:	2a00      	cmp	r2, #0
 800d14e:	bf08      	it	eq
 800d150:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800d152:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800d154:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800d158:	443b      	add	r3, r7
 800d15a:	2b0a      	cmp	r3, #10
 800d15c:	dd05      	ble.n	800d16a <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800d15e:	6823      	ldr	r3, [r4, #0]
 800d160:	4620      	mov	r0, r4
 800d162:	f8c3 9014 	str.w	r9, [r3, #20]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4798      	blx	r3
      while (mcublks-- > 0) {
 800d16a:	2f00      	cmp	r7, #0
 800d16c:	dc01      	bgt.n	800d172 <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d16e:	3501      	adds	r5, #1
 800d170:	e7ce      	b.n	800d110 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800d172:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800d176:	3f01      	subs	r7, #1
 800d178:	1c5a      	adds	r2, r3, #1
 800d17a:	335c      	adds	r3, #92	; 0x5c
 800d17c:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800d180:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800d184:	e7f1      	b.n	800d16a <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800d186:	f859 6b04 	ldr.w	r6, [r9], #4
    if (compptr->quant_table != NULL)
 800d18a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800d18c:	b9eb      	cbnz	r3, 800d1ca <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800d18e:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800d190:	2a03      	cmp	r2, #3
 800d192:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800d196:	d803      	bhi.n	800d1a0 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800d198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	b92b      	cbnz	r3, 800d1ac <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d1ac:	6863      	ldr	r3, [r4, #4]
 800d1ae:	2284      	movs	r2, #132	; 0x84
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800d1b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d1ba:	4798      	blx	r3
 800d1bc:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800d1be:	2284      	movs	r2, #132	; 0x84
 800d1c0:	6869      	ldr	r1, [r5, #4]
 800d1c2:	f01d fac9 	bl	802a758 <memcpy>
    compptr->quant_table = qtbl;
 800d1c6:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d1ca:	3701      	adds	r7, #1
 800d1cc:	e765      	b.n	800d09a <start_input_pass+0x52>
	...

0800d1d0 <consume_markers>:
{
 800d1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800d1d4:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800d1d8:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800d1da:	6973      	ldr	r3, [r6, #20]
 800d1dc:	b9eb      	cbnz	r3, 800d21a <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800d1de:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800d1e2:	4db0      	ldr	r5, [pc, #704]	; (800d4a4 <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800d1e4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	4798      	blx	r3
    switch (val) {
 800d1ee:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800d1f0:	4607      	mov	r7, r0
    switch (val) {
 800d1f2:	d016      	beq.n	800d222 <consume_markers+0x52>
 800d1f4:	2802      	cmp	r0, #2
 800d1f6:	d111      	bne.n	800d21c <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800d1fc:	69b3      	ldr	r3, [r6, #24]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f000 8174 	beq.w	800d4ec <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800d204:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	b133      	cbz	r3, 800d21a <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	223d      	movs	r2, #61	; 0x3d
 800d210:	4620      	mov	r0, r4
 800d212:	615a      	str	r2, [r3, #20]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4798      	blx	r3
 800d218:	e000      	b.n	800d21c <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800d21a:	2702      	movs	r7, #2
}
 800d21c:	4638      	mov	r0, r7
 800d21e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800d222:	69b3      	ldr	r3, [r6, #24]
 800d224:	2b00      	cmp	r3, #0
 800d226:	f000 8150 	beq.w	800d4ca <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	f040 80d8 	bne.w	800d3e0 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800d230:	6a22      	ldr	r2, [r4, #32]
 800d232:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800d236:	429a      	cmp	r2, r3
 800d238:	dc02      	bgt.n	800d240 <consume_markers+0x70>
 800d23a:	69e2      	ldr	r2, [r4, #28]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	dd08      	ble.n	800d252 <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800d240:	6823      	ldr	r3, [r4, #0]
 800d242:	212a      	movs	r1, #42	; 0x2a
 800d244:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800d248:	4620      	mov	r0, r4
 800d24a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800d252:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800d256:	2a08      	cmp	r2, #8
 800d258:	d006      	beq.n	800d268 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	2110      	movs	r1, #16
 800d25e:	4620      	mov	r0, r4
 800d260:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800d268:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d26a:	2a0a      	cmp	r2, #10
 800d26c:	dd08      	ble.n	800d280 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800d26e:	6823      	ldr	r3, [r4, #0]
 800d270:	211b      	movs	r1, #27
 800d272:	4620      	mov	r0, r4
 800d274:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d278:	220a      	movs	r2, #10
 800d27a:	61da      	str	r2, [r3, #28]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d280:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800d284:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800d288:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800d28c:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d292:	459a      	cmp	sl, r3
 800d294:	db0d      	blt.n	800d2b2 <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800d296:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800d29a:	b92b      	cbnz	r3, 800d2a8 <consume_markers+0xd8>
 800d29c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d2a0:	b383      	cbz	r3, 800d304 <consume_markers+0x134>
 800d2a2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d2a6:	b36b      	cbz	r3, 800d304 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800d2a8:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800d2aa:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800d2ae:	233f      	movs	r3, #63	; 0x3f
 800d2b0:	e071      	b.n	800d396 <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800d2b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d804      	bhi.n	800d2c6 <consume_markers+0xf6>
 800d2bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2c0:	3b01      	subs	r3, #1
 800d2c2:	2b03      	cmp	r3, #3
 800d2c4:	d905      	bls.n	800d2d2 <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f8c3 b014 	str.w	fp, [r3, #20]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d2d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800d2d6:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d2da:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800d2de:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	bfac      	ite	ge
 800d2e6:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800d2ea:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800d2ee:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800d2f2:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	bfac      	ite	ge
 800d2fa:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800d2fe:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800d302:	e7c5      	b.n	800d290 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800d304:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800d308:	2b50      	cmp	r3, #80	; 0x50
 800d30a:	f000 808a 	beq.w	800d422 <consume_markers+0x252>
 800d30e:	dc2b      	bgt.n	800d368 <consume_markers+0x198>
 800d310:	2b18      	cmp	r3, #24
 800d312:	d078      	beq.n	800d406 <consume_markers+0x236>
 800d314:	dc1d      	bgt.n	800d352 <consume_markers+0x182>
 800d316:	2b08      	cmp	r3, #8
 800d318:	d070      	beq.n	800d3fc <consume_markers+0x22c>
 800d31a:	dc13      	bgt.n	800d344 <consume_markers+0x174>
 800d31c:	b3bb      	cbz	r3, 800d38e <consume_markers+0x1be>
 800d31e:	2b03      	cmp	r3, #3
 800d320:	d065      	beq.n	800d3ee <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800d322:	6822      	ldr	r2, [r4, #0]
 800d324:	2111      	movs	r1, #17
 800d326:	4620      	mov	r0, r4
 800d328:	6151      	str	r1, [r2, #20]
 800d32a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800d32e:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800d332:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800d336:	6213      	str	r3, [r2, #32]
 800d338:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800d33c:	6253      	str	r3, [r2, #36]	; 0x24
 800d33e:	6813      	ldr	r3, [r2, #0]
 800d340:	4798      	blx	r3
      break;
 800d342:	e02a      	b.n	800d39a <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800d344:	2b0f      	cmp	r3, #15
 800d346:	d1ec      	bne.n	800d322 <consume_markers+0x152>
      cinfo->block_size = 4;
 800d348:	2204      	movs	r2, #4
 800d34a:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800d34e:	4a56      	ldr	r2, [pc, #344]	; (800d4a8 <consume_markers+0x2d8>)
 800d350:	e051      	b.n	800d3f6 <consume_markers+0x226>
    switch (cinfo->Se) {
 800d352:	2b30      	cmp	r3, #48	; 0x30
 800d354:	d05c      	beq.n	800d410 <consume_markers+0x240>
 800d356:	2b3f      	cmp	r3, #63	; 0x3f
 800d358:	d05f      	beq.n	800d41a <consume_markers+0x24a>
 800d35a:	2b23      	cmp	r3, #35	; 0x23
 800d35c:	d1e1      	bne.n	800d322 <consume_markers+0x152>
      cinfo->block_size = 6;
 800d35e:	2206      	movs	r2, #6
 800d360:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800d364:	4a51      	ldr	r2, [pc, #324]	; (800d4ac <consume_markers+0x2dc>)
 800d366:	e046      	b.n	800d3f6 <consume_markers+0x226>
    switch (cinfo->Se) {
 800d368:	2ba8      	cmp	r3, #168	; 0xa8
 800d36a:	d060      	beq.n	800d42e <consume_markers+0x25e>
 800d36c:	dc07      	bgt.n	800d37e <consume_markers+0x1ae>
 800d36e:	2b78      	cmp	r3, #120	; 0x78
 800d370:	d059      	beq.n	800d426 <consume_markers+0x256>
 800d372:	2b8f      	cmp	r3, #143	; 0x8f
 800d374:	d059      	beq.n	800d42a <consume_markers+0x25a>
 800d376:	2b63      	cmp	r3, #99	; 0x63
 800d378:	d1d3      	bne.n	800d322 <consume_markers+0x152>
      cinfo->block_size = 10;
 800d37a:	230a      	movs	r3, #10
 800d37c:	e795      	b.n	800d2aa <consume_markers+0xda>
    switch (cinfo->Se) {
 800d37e:	2be0      	cmp	r3, #224	; 0xe0
 800d380:	d057      	beq.n	800d432 <consume_markers+0x262>
 800d382:	2bff      	cmp	r3, #255	; 0xff
 800d384:	d057      	beq.n	800d436 <consume_markers+0x266>
 800d386:	2bc3      	cmp	r3, #195	; 0xc3
 800d388:	d1cb      	bne.n	800d322 <consume_markers+0x152>
      cinfo->block_size = 14;
 800d38a:	230e      	movs	r3, #14
 800d38c:	e78d      	b.n	800d2aa <consume_markers+0xda>
      cinfo->block_size = 1;
 800d38e:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800d392:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800d396:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d39a:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800d39e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d3a2:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800d3a6:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800d3a8:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d3ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800d3ae:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d3b2:	459a      	cmp	sl, r3
 800d3b4:	db41      	blt.n	800d43a <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d3b6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800d3ba:	6a20      	ldr	r0, [r4, #32]
 800d3bc:	4359      	muls	r1, r3
 800d3be:	f009 fc6d 	bl	8016c9c <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d3c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3c4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800d3c8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800d3d2:	db03      	blt.n	800d3dc <consume_markers+0x20c>
 800d3d4:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800d3d8:	2a00      	cmp	r2, #0
 800d3da:	d071      	beq.n	800d4c0 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800d3dc:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800d3e0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d16d      	bne.n	800d4c4 <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800d3e8:	2302      	movs	r3, #2
 800d3ea:	61b3      	str	r3, [r6, #24]
	  break;
 800d3ec:	e6fa      	b.n	800d1e4 <consume_markers+0x14>
      cinfo->block_size = 2;
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800d3f4:	4a2e      	ldr	r2, [pc, #184]	; (800d4b0 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800d3f6:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800d3fa:	e7cc      	b.n	800d396 <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800d3fc:	2203      	movs	r2, #3
 800d3fe:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800d402:	4a2c      	ldr	r2, [pc, #176]	; (800d4b4 <consume_markers+0x2e4>)
 800d404:	e7f7      	b.n	800d3f6 <consume_markers+0x226>
      cinfo->block_size = 5;
 800d406:	2205      	movs	r2, #5
 800d408:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800d40c:	4a2a      	ldr	r2, [pc, #168]	; (800d4b8 <consume_markers+0x2e8>)
 800d40e:	e7f2      	b.n	800d3f6 <consume_markers+0x226>
      cinfo->block_size = 7;
 800d410:	2207      	movs	r2, #7
 800d412:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800d416:	4a29      	ldr	r2, [pc, #164]	; (800d4bc <consume_markers+0x2ec>)
 800d418:	e7ed      	b.n	800d3f6 <consume_markers+0x226>
      cinfo->block_size = 8;
 800d41a:	2208      	movs	r2, #8
 800d41c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800d420:	e7b7      	b.n	800d392 <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800d422:	2309      	movs	r3, #9
 800d424:	e741      	b.n	800d2aa <consume_markers+0xda>
      cinfo->block_size = 11;
 800d426:	230b      	movs	r3, #11
 800d428:	e73f      	b.n	800d2aa <consume_markers+0xda>
      cinfo->block_size = 12;
 800d42a:	230c      	movs	r3, #12
 800d42c:	e73d      	b.n	800d2aa <consume_markers+0xda>
      cinfo->block_size = 13;
 800d42e:	230d      	movs	r3, #13
 800d430:	e73b      	b.n	800d2aa <consume_markers+0xda>
      cinfo->block_size = 15;
 800d432:	230f      	movs	r3, #15
 800d434:	e739      	b.n	800d2aa <consume_markers+0xda>
      cinfo->block_size = 16;
 800d436:	2310      	movs	r3, #16
 800d438:	e737      	b.n	800d2aa <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800d43a:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d43e:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800d442:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d446:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d44a:	69e3      	ldr	r3, [r4, #28]
 800d44c:	4351      	muls	r1, r2
 800d44e:	4358      	muls	r0, r3
 800d450:	f009 fc24 	bl	8016c9c <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800d454:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d458:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d45c:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d460:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d462:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d466:	4358      	muls	r0, r3
 800d468:	4351      	muls	r1, r2
 800d46a:	f009 fc17 	bl	8016c9c <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800d46e:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d472:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800d476:	69e3      	ldr	r3, [r4, #28]
 800d478:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800d47c:	4358      	muls	r0, r3
 800d47e:	f009 fc0d 	bl	8016c9c <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800d482:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d486:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800d48a:	6a23      	ldr	r3, [r4, #32]
 800d48c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800d490:	4358      	muls	r0, r3
 800d492:	f009 fc03 	bl	8016c9c <jdiv_round_up>
    compptr->quant_table = NULL;
 800d496:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800d49a:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800d49e:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800d4a2:	e783      	b.n	800d3ac <consume_markers+0x1dc>
 800d4a4:	0802fa08 	.word	0x0802fa08
 800d4a8:	0802fbfc 	.word	0x0802fbfc
 800d4ac:	0802fd20 	.word	0x0802fd20
 800d4b0:	0802fb48 	.word	0x0802fb48
 800d4b4:	0802fb98 	.word	0x0802fb98
 800d4b8:	0802fc7c 	.word	0x0802fc7c
 800d4bc:	0802fdf0 	.word	0x0802fdf0
    cinfo->inputctl->has_multiple_scans = FALSE;
 800d4c0:	611a      	str	r2, [r3, #16]
 800d4c2:	e78d      	b.n	800d3e0 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	61b3      	str	r3, [r6, #24]
 800d4c8:	e6a8      	b.n	800d21c <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800d4ca:	6933      	ldr	r3, [r6, #16]
 800d4cc:	b92b      	cbnz	r3, 800d4da <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	2224      	movs	r2, #36	; 0x24
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	615a      	str	r2, [r3, #20]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800d4da:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f43f ae80 	beq.w	800d1e4 <consume_markers+0x14>
	start_input_pass(cinfo);
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f7ff fdaf 	bl	800d048 <start_input_pass>
 800d4ea:	e697      	b.n	800d21c <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800d4ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d4f0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	f77f ae90 	ble.w	800d21a <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800d4fa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800d4fe:	e68d      	b.n	800d21c <consume_markers+0x4c>

0800d500 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800d500:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800d504:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d506:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d508:	434a      	muls	r2, r1
 800d50a:	429a      	cmp	r2, r3
{
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800d510:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800d512:	d80c      	bhi.n	800d52e <jpeg_core_output_dimensions+0x2e>
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800d514:	f009 fbc2 	bl	8016c9c <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800d518:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800d51c:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800d51e:	6a20      	ldr	r0, [r4, #32]
 800d520:	f009 fbbc 	bl	8016c9c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 1;
 800d524:	2301      	movs	r3, #1
    cinfo->output_height = (JDIMENSION)
 800d526:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 16;
 800d528:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 800d52c:	e059      	b.n	800d5e2 <jpeg_core_output_dimensions+0xe2>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800d52e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800d532:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d536:	d80c      	bhi.n	800d552 <jpeg_core_output_dimensions+0x52>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800d538:	0040      	lsls	r0, r0, #1
 800d53a:	f009 fbaf 	bl	8016c9c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d53e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800d540:	6a20      	ldr	r0, [r4, #32]
 800d542:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d546:	0040      	lsls	r0, r0, #1
 800d548:	f009 fba8 	bl	8016c9c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 2;
 800d54c:	2302      	movs	r3, #2
    cinfo->output_height = (JDIMENSION)
 800d54e:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800d550:	e7ea      	b.n	800d528 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800d552:	441d      	add	r5, r3
 800d554:	42aa      	cmp	r2, r5
 800d556:	d80e      	bhi.n	800d576 <jpeg_core_output_dimensions+0x76>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800d558:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d55c:	f009 fb9e 	bl	8016c9c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d560:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800d562:	6a20      	ldr	r0, [r4, #32]
 800d564:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d568:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d56c:	f009 fb96 	bl	8016c9c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 3;
 800d570:	2303      	movs	r3, #3
    cinfo->output_height = (JDIMENSION)
 800d572:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800d574:	e7d8      	b.n	800d528 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800d576:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800d57a:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800d57e:	d80c      	bhi.n	800d59a <jpeg_core_output_dimensions+0x9a>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800d580:	0080      	lsls	r0, r0, #2
 800d582:	f009 fb8b 	bl	8016c9c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d586:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800d588:	6a20      	ldr	r0, [r4, #32]
 800d58a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d58e:	0080      	lsls	r0, r0, #2
 800d590:	f009 fb84 	bl	8016c9c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 4;
 800d594:	2304      	movs	r3, #4
    cinfo->output_height = (JDIMENSION)
 800d596:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800d598:	e7c6      	b.n	800d528 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800d59a:	441d      	add	r5, r3
 800d59c:	42aa      	cmp	r2, r5
 800d59e:	d80e      	bhi.n	800d5be <jpeg_core_output_dimensions+0xbe>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800d5a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d5a4:	f009 fb7a 	bl	8016c9c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d5a8:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800d5aa:	6a20      	ldr	r0, [r4, #32]
 800d5ac:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d5b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d5b4:	f009 fb72 	bl	8016c9c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 5;
 800d5b8:	2305      	movs	r3, #5
    cinfo->output_height = (JDIMENSION)
 800d5ba:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800d5bc:	e7b4      	b.n	800d528 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800d5be:	2506      	movs	r5, #6
 800d5c0:	fb05 f603 	mul.w	r6, r5, r3
 800d5c4:	42b2      	cmp	r2, r6
 800d5c6:	d813      	bhi.n	800d5f0 <jpeg_core_output_dimensions+0xf0>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800d5c8:	4368      	muls	r0, r5
 800d5ca:	f009 fb67 	bl	8016c9c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d5ce:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800d5d0:	6a20      	ldr	r0, [r4, #32]
 800d5d2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d5d6:	4368      	muls	r0, r5
 800d5d8:	f009 fb60 	bl	8016c9c <jdiv_round_up>
    cinfo->output_height = (JDIMENSION)
 800d5dc:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 14;
 800d5de:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d5e2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d5ea:	4291      	cmp	r1, r2
 800d5ec:	dc6f      	bgt.n	800d6ce <jpeg_core_output_dimensions+0x1ce>
}
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800d5f0:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800d5f4:	00dd      	lsls	r5, r3, #3
 800d5f6:	42b2      	cmp	r2, r6
 800d5f8:	d80e      	bhi.n	800d618 <jpeg_core_output_dimensions+0x118>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800d5fa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d5fe:	f009 fb4d 	bl	8016c9c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d602:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800d604:	6a20      	ldr	r0, [r4, #32]
 800d606:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d60a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d60e:	f009 fb45 	bl	8016c9c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 7;
 800d612:	2307      	movs	r3, #7
    cinfo->output_height = (JDIMENSION)
 800d614:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800d616:	e787      	b.n	800d528 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800d618:	42aa      	cmp	r2, r5
 800d61a:	d80c      	bhi.n	800d636 <jpeg_core_output_dimensions+0x136>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800d61c:	00c0      	lsls	r0, r0, #3
 800d61e:	f009 fb3d 	bl	8016c9c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d622:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800d624:	6a20      	ldr	r0, [r4, #32]
 800d626:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d62a:	00c0      	lsls	r0, r0, #3
 800d62c:	f009 fb36 	bl	8016c9c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 8;
 800d630:	2308      	movs	r3, #8
    cinfo->output_height = (JDIMENSION)
 800d632:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800d634:	e778      	b.n	800d528 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800d636:	441d      	add	r5, r3
 800d638:	42aa      	cmp	r2, r5
 800d63a:	d80e      	bhi.n	800d65a <jpeg_core_output_dimensions+0x15a>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800d63c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d640:	f009 fb2c 	bl	8016c9c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d644:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800d646:	6a20      	ldr	r0, [r4, #32]
 800d648:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d64c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d650:	f009 fb24 	bl	8016c9c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 9;
 800d654:	2309      	movs	r3, #9
    cinfo->output_height = (JDIMENSION)
 800d656:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800d658:	e766      	b.n	800d528 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800d65a:	250a      	movs	r5, #10
 800d65c:	fb05 f603 	mul.w	r6, r5, r3
 800d660:	42b2      	cmp	r2, r6
 800d662:	d9b1      	bls.n	800d5c8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800d664:	250b      	movs	r5, #11
 800d666:	fb05 f603 	mul.w	r6, r5, r3
 800d66a:	42b2      	cmp	r2, r6
 800d66c:	d9ac      	bls.n	800d5c8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800d66e:	250c      	movs	r5, #12
 800d670:	fb05 f603 	mul.w	r6, r5, r3
 800d674:	42b2      	cmp	r2, r6
 800d676:	d9a7      	bls.n	800d5c8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800d678:	250d      	movs	r5, #13
 800d67a:	fb05 f603 	mul.w	r6, r5, r3
 800d67e:	42b2      	cmp	r2, r6
 800d680:	d9a2      	bls.n	800d5c8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800d682:	250e      	movs	r5, #14
 800d684:	fb05 f603 	mul.w	r6, r5, r3
 800d688:	42b2      	cmp	r2, r6
 800d68a:	d99d      	bls.n	800d5c8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800d68c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800d690:	429a      	cmp	r2, r3
 800d692:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800d696:	d80d      	bhi.n	800d6b4 <jpeg_core_output_dimensions+0x1b4>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800d698:	1a18      	subs	r0, r3, r0
 800d69a:	f009 faff 	bl	8016c9c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d69e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800d6a0:	6a20      	ldr	r0, [r4, #32]
 800d6a2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d6a6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800d6aa:	f009 faf7 	bl	8016c9c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 15;
 800d6ae:	230f      	movs	r3, #15
    cinfo->output_height = (JDIMENSION)
 800d6b0:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800d6b2:	e739      	b.n	800d528 <jpeg_core_output_dimensions+0x28>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f009 faf1 	bl	8016c9c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d6ba:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800d6bc:	6a20      	ldr	r0, [r4, #32]
 800d6be:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d6c2:	0100      	lsls	r0, r0, #4
 800d6c4:	f009 faea 	bl	8016c9c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 16;
 800d6c8:	2310      	movs	r3, #16
    cinfo->output_height = (JDIMENSION)
 800d6ca:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800d6cc:	e72c      	b.n	800d528 <jpeg_core_output_dimensions+0x28>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d6ce:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800d6d2:	3201      	adds	r2, #1
 800d6d4:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d6d6:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800d6da:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800d6de:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800d6e2:	e782      	b.n	800d5ea <jpeg_core_output_dimensions+0xea>

0800d6e4 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d6e4:	6843      	ldr	r3, [r0, #4]
 800d6e6:	221c      	movs	r2, #28
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	681b      	ldr	r3, [r3, #0]
{
 800d6ec:	b510      	push	{r4, lr}
 800d6ee:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d6f0:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800d6f2:	4b08      	ldr	r3, [pc, #32]	; (800d714 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800d6f4:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800d6f8:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800d6fa:	4b07      	ldr	r3, [pc, #28]	; (800d718 <jinit_input_controller+0x34>)
 800d6fc:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800d6fe:	4b07      	ldr	r3, [pc, #28]	; (800d71c <jinit_input_controller+0x38>)
 800d700:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800d702:	4b07      	ldr	r3, [pc, #28]	; (800d720 <jinit_input_controller+0x3c>)
 800d704:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800d706:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800d708:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800d70c:	2301      	movs	r3, #1
 800d70e:	6183      	str	r3, [r0, #24]
}
 800d710:	bd10      	pop	{r4, pc}
 800d712:	bf00      	nop
 800d714:	0800d1d1 	.word	0x0800d1d1
 800d718:	0800d019 	.word	0x0800d019
 800d71c:	0800d049 	.word	0x0800d049
 800d720:	0800d009 	.word	0x0800d009

0800d724 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800d724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d728:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800d72c:	4602      	mov	r2, r0

  switch (pass_mode) {
 800d72e:	b149      	cbz	r1, 800d744 <start_pass_main+0x20>
 800d730:	2902      	cmp	r1, #2
 800d732:	d070      	beq.n	800d816 <start_pass_main+0xf2>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d734:	6803      	ldr	r3, [r0, #0]
 800d736:	2203      	movs	r2, #3
 800d738:	615a      	str	r2, [r3, #20]
 800d73a:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800d73c:	b003      	add	sp, #12
 800d73e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d742:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800d744:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800d748:	6880      	ldr	r0, [r0, #8]
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d060      	beq.n	800d810 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 800d74e:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 800d752:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d756:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800d75a:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800d75c:	482f      	ldr	r0, [pc, #188]	; (800d81c <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d75e:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d760:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 800d762:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d764:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d766:	9a00      	ldr	r2, [sp, #0]
 800d768:	4291      	cmp	r1, r2
 800d76a:	db09      	blt.n	800d780 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800d76c:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800d76e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800d772:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800d774:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800d776:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800d77a:	b003      	add	sp, #12
 800d77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d780:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800d782:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d784:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d786:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d788:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800d78a:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 800d78e:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d792:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d794:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 800d798:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d79c:	fb02 f905 	mul.w	r9, r2, r5
 800d7a0:	2500      	movs	r5, #0
 800d7a2:	454d      	cmp	r5, r9
 800d7a4:	db1c      	blt.n	800d7e0 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d7a6:	fb02 fb07 	mul.w	fp, r2, r7
 800d7aa:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800d7ae:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d7b2:	fb05 b502 	mla	r5, r5, r2, fp
 800d7b6:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800d7ba:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800d7be:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d7c2:	2400      	movs	r4, #0
 800d7c4:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800d7c8:	4554      	cmp	r4, sl
 800d7ca:	db11      	blt.n	800d7f0 <start_pass_main+0xcc>
 800d7cc:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800d7d0:	2400      	movs	r4, #0
 800d7d2:	fb00 c502 	mla	r5, r0, r2, ip
 800d7d6:	42a2      	cmp	r2, r4
 800d7d8:	dc14      	bgt.n	800d804 <start_pass_main+0xe0>
       ci++, compptr++) {
 800d7da:	3101      	adds	r1, #1
 800d7dc:	3658      	adds	r6, #88	; 0x58
 800d7de:	e7c2      	b.n	800d766 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 800d7e0:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800d7e4:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800d7e8:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d7ec:	3501      	adds	r5, #1
 800d7ee:	e7d8      	b.n	800d7a2 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d7f0:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d7f4:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d7f6:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800d7fa:	f855 bb04 	ldr.w	fp, [r5], #4
 800d7fe:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d802:	e7e1      	b.n	800d7c8 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 800d804:	f8dc 0000 	ldr.w	r0, [ip]
 800d808:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d80c:	3401      	adds	r4, #1
 800d80e:	e7e2      	b.n	800d7d6 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 800d810:	4a03      	ldr	r2, [pc, #12]	; (800d820 <start_pass_main+0xfc>)
 800d812:	605a      	str	r2, [r3, #4]
 800d814:	e7ae      	b.n	800d774 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 800d816:	4a03      	ldr	r2, [pc, #12]	; (800d824 <start_pass_main+0x100>)
 800d818:	605a      	str	r2, [r3, #4]
    break;
 800d81a:	e7ae      	b.n	800d77a <start_pass_main+0x56>
 800d81c:	0800d881 	.word	0x0800d881
 800d820:	0800d829 	.word	0x0800d829
 800d824:	0800da75 	.word	0x0800da75

0800d828 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800d828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d82c:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d830:	4698      	mov	r8, r3
 800d832:	460e      	mov	r6, r1
 800d834:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d836:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d838:	4605      	mov	r5, r0
 800d83a:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d83c:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800d840:	b943      	cbnz	r3, 800d854 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d842:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800d846:	9105      	str	r1, [sp, #20]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	4798      	blx	r3
 800d84c:	b1a8      	cbz	r0, 800d87a <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d84e:	2301      	movs	r3, #1
 800d850:	9905      	ldr	r1, [sp, #20]
 800d852:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800d854:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800d858:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d85c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d860:	4628      	mov	r0, r5
 800d862:	9600      	str	r6, [sp, #0]
 800d864:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d868:	685e      	ldr	r6, [r3, #4]
 800d86a:	464b      	mov	r3, r9
 800d86c:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800d86e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d870:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800d872:	bf24      	itt	cs
 800d874:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800d876:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800d87a:	b007      	add	sp, #28
 800d87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d880 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d884:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d888:	4698      	mov	r8, r3
 800d88a:	b08b      	sub	sp, #44	; 0x2c
 800d88c:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d88e:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d890:	4689      	mov	r9, r1
 800d892:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800d894:	b973      	cbnz	r3, 800d8b4 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800d896:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d898:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800d89c:	330e      	adds	r3, #14
 800d89e:	68d2      	ldr	r2, [r2, #12]
 800d8a0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800d8a4:	4790      	blx	r2
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d05a      	beq.n	800d960 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800d8ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800d8b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d011      	beq.n	800d8de <process_data_context_main+0x5e>
 800d8ba:	2b02      	cmp	r3, #2
 800d8bc:	d036      	beq.n	800d92c <process_data_context_main+0xac>
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d14e      	bne.n	800d960 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d8c2:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800d8c6:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d8c8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d8ca:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    main->rowgroup_ctr = 0;
 800d8ce:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d8d0:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d8d2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d045      	beq.n	800d966 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d8de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8e0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	f103 010e 	add.w	r1, r3, #14
 800d8ea:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d8ee:	f8cd 9000 	str.w	r9, [sp]
 800d8f2:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d8f6:	685e      	ldr	r6, [r3, #4]
 800d8f8:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d8fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d8fe:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d900:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d902:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d904:	429a      	cmp	r2, r3
 800d906:	d32b      	bcc.n	800d960 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800d908:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800d90a:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d063      	beq.n	800d9da <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800d912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d914:	f083 0301 	eor.w	r3, r3, #1
 800d918:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800d91a:	2300      	movs	r3, #0
 800d91c:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d91e:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d920:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d922:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800d924:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d926:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800d928:	6463      	str	r3, [r4, #68]	; 0x44
 800d92a:	e019      	b.n	800d960 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d92c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d92e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d932:	4628      	mov	r0, r5
 800d934:	f103 010e 	add.w	r1, r3, #14
 800d938:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d93c:	f8cd 9000 	str.w	r9, [sp]
 800d940:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d944:	685e      	ldr	r6, [r3, #4]
 800d946:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d94a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d94c:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d94e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d950:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d952:	429a      	cmp	r2, r3
 800d954:	d304      	bcc.n	800d960 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800d956:	2300      	movs	r3, #0
 800d958:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	4543      	cmp	r3, r8
 800d95e:	d3b0      	bcc.n	800d8c2 <process_data_context_main+0x42>
  }
}
 800d960:	b00b      	add	sp, #44	; 0x2c
 800d962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d966:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d968:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d96c:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d970:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800d974:	9206      	str	r2, [sp, #24]
 800d976:	9a06      	ldr	r2, [sp, #24]
 800d978:	4296      	cmp	r6, r2
 800d97a:	daae      	bge.n	800d8da <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800d97c:	68d8      	ldr	r0, [r3, #12]
 800d97e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d980:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800d982:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d984:	fbb0 fbf2 	udiv	fp, r0, r2
 800d988:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800d98c:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800d990:	2800      	cmp	r0, #0
 800d992:	bf08      	it	eq
 800d994:	4610      	moveq	r0, r2
    if (ci == 0) {
 800d996:	b926      	cbnz	r6, 800d9a2 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800d998:	1e42      	subs	r2, r0, #1
 800d99a:	fb92 f2fa 	sdiv	r2, r2, sl
 800d99e:	3201      	adds	r2, #1
 800d9a0:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800d9a2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d9a4:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800d9a6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800d9aa:	320e      	adds	r2, #14
 800d9ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d9b0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d9b4:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	4658      	mov	r0, fp
 800d9bc:	3004      	adds	r0, #4
 800d9be:	9205      	str	r2, [sp, #20]
 800d9c0:	9a05      	ldr	r2, [sp, #20]
 800d9c2:	4552      	cmp	r2, sl
 800d9c4:	db02      	blt.n	800d9cc <process_data_context_main+0x14c>
       ci++, compptr++) {
 800d9c6:	3601      	adds	r6, #1
 800d9c8:	3358      	adds	r3, #88	; 0x58
 800d9ca:	e7d4      	b.n	800d976 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d9cc:	f8db 2000 	ldr.w	r2, [fp]
 800d9d0:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d9d4:	9a05      	ldr	r2, [sp, #20]
 800d9d6:	3201      	adds	r2, #1
 800d9d8:	e7f1      	b.n	800d9be <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d9da:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d9de:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d9e2:	9305      	str	r3, [sp, #20]
 800d9e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d9e6:	2500      	movs	r5, #0
 800d9e8:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d9ea:	1c43      	adds	r3, r0, #1
 800d9ec:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d9ee:	9b08      	ldr	r3, [sp, #32]
 800d9f0:	429d      	cmp	r5, r3
 800d9f2:	da8e      	bge.n	800d912 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d9f4:	9b05      	ldr	r3, [sp, #20]
 800d9f6:	68da      	ldr	r2, [r3, #12]
 800d9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9fa:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800d9fc:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800da00:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800da04:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800da08:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800da0c:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800da10:	9b07      	ldr	r3, [sp, #28]
 800da12:	4353      	muls	r3, r2
 800da14:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800da18:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800da1c:	4413      	add	r3, r2
 800da1e:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800da20:	2100      	movs	r1, #0
 800da22:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800da26:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800da2a:	461e      	mov	r6, r3
 800da2c:	f06f 0303 	mvn.w	r3, #3
 800da30:	fb03 fe02 	mul.w	lr, r3, r2
 800da34:	eb07 030e 	add.w	r3, r7, lr
 800da38:	44e6      	add	lr, ip
 800da3a:	9309      	str	r3, [sp, #36]	; 0x24
 800da3c:	428a      	cmp	r2, r1
 800da3e:	dc04      	bgt.n	800da4a <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800da40:	9b05      	ldr	r3, [sp, #20]
 800da42:	3501      	adds	r5, #1
 800da44:	3358      	adds	r3, #88	; 0x58
 800da46:	9305      	str	r3, [sp, #20]
 800da48:	e7d1      	b.n	800d9ee <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800da4a:	9b06      	ldr	r3, [sp, #24]
 800da4c:	f853 bb04 	ldr.w	fp, [r3], #4
 800da50:	9306      	str	r3, [sp, #24]
 800da52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da54:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800da58:	f85a bb04 	ldr.w	fp, [sl], #4
 800da5c:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800da60:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800da64:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800da68:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800da6c:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800da6e:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800da72:	e7e3      	b.n	800da3c <process_data_context_main+0x1bc>

0800da74 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800da74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800da76:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800da7a:	9100      	str	r1, [sp, #0]
 800da7c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800da80:	2300      	movs	r3, #0
 800da82:	6864      	ldr	r4, [r4, #4]
 800da84:	461a      	mov	r2, r3
 800da86:	4619      	mov	r1, r3
 800da88:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800da8a:	b004      	add	sp, #16
 800da8c:	bd10      	pop	{r4, pc}
	...

0800da90 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800da90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800da94:	6843      	ldr	r3, [r0, #4]
{
 800da96:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800da98:	2250      	movs	r2, #80	; 0x50
 800da9a:	2101      	movs	r1, #1
 800da9c:	681b      	ldr	r3, [r3, #0]
{
 800da9e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800daa0:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800daa2:	4b3a      	ldr	r3, [pc, #232]	; (800db8c <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800daa4:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800daa8:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800daaa:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800daac:	b12d      	cbz	r5, 800daba <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	2203      	movs	r2, #3
 800dab2:	4620      	mov	r0, r4
 800dab4:	615a      	str	r2, [r3, #20]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800daba:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800dabe:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	b31b      	cbz	r3, 800db0e <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800dac6:	2d01      	cmp	r5, #1
 800dac8:	dc05      	bgt.n	800dad6 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800daca:	6823      	ldr	r3, [r4, #0]
 800dacc:	2230      	movs	r2, #48	; 0x30
 800dace:	4620      	mov	r0, r4
 800dad0:	615a      	str	r2, [r3, #20]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dad6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dad8:	2101      	movs	r1, #1
 800dada:	6863      	ldr	r3, [r4, #4]
 800dadc:	4620      	mov	r0, r4
 800dade:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800dae0:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dae4:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dae6:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800daea:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800daee:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800daf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800daf2:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800daf4:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800daf8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dafc:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800db00:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800db02:	6a63      	ldr	r3, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800db04:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800db08:	4598      	cmp	r8, r3
 800db0a:	db0a      	blt.n	800db22 <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800db0c:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800db0e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800db12:	3608      	adds	r6, #8
 800db14:	f04f 0800 	mov.w	r8, #0
 800db18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db1a:	4543      	cmp	r3, r8
 800db1c:	dc1d      	bgt.n	800db5a <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800db1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800db22:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db24:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800db26:	68eb      	ldr	r3, [r5, #12]
       ci++, compptr++) {
 800db28:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800db2a:	4353      	muls	r3, r2
 800db2c:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db30:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800db32:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db36:	4620      	mov	r0, r4
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800db3e:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800db40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800db42:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800db46:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800db4a:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800db4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db50:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800db54:	f108 0801 	add.w	r8, r8, #1
 800db58:	e7d3      	b.n	800db02 <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800db5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800db5c:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800db60:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800db62:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800db64:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800db68:	4353      	muls	r3, r2
 800db6a:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800db6e:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800db70:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800db74:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800db78:	436b      	muls	r3, r5
 800db7a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800db7e:	4620      	mov	r0, r4
 800db80:	434a      	muls	r2, r1
 800db82:	2101      	movs	r1, #1
 800db84:	47c8      	blx	r9
 800db86:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800db8a:	e7c5      	b.n	800db18 <jinit_d_main_controller+0x88>
 800db8c:	0800d725 	.word	0x0800d725

0800db90 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800db90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800db94:	6986      	ldr	r6, [r0, #24]
{
 800db96:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800db98:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800db9c:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800dba0:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800dba4:	b93d      	cbnz	r5, 800dbb6 <get_sof+0x26>
 800dba6:	68f3      	ldr	r3, [r6, #12]
 800dba8:	4798      	blx	r3
 800dbaa:	b910      	cbnz	r0, 800dbb2 <get_sof+0x22>
 800dbac:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800dbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dbb2:	e9d6 c500 	ldrd	ip, r5, [r6]
 800dbb6:	1e6b      	subs	r3, r5, #1
 800dbb8:	f89c 7000 	ldrb.w	r7, [ip]
 800dbbc:	f000 8088 	beq.w	800dcd0 <get_sof+0x140>
 800dbc0:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dbc4:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dbc6:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dbca:	f000 808a 	beq.w	800dce2 <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dbce:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dbd0:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dbd2:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dbd4:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dbd8:	f000 808c 	beq.w	800dcf4 <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dbdc:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dbde:	782a      	ldrb	r2, [r5, #0]
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800dbe6:	6222      	str	r2, [r4, #32]
 800dbe8:	f000 808d 	beq.w	800dd06 <get_sof+0x176>
 800dbec:	3501      	adds	r5, #1
 800dbee:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dbf0:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dbf2:	6a22      	ldr	r2, [r4, #32]
 800dbf4:	440a      	add	r2, r1
 800dbf6:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dbf8:	f000 808e 	beq.w	800dd18 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dbfc:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dbfe:	782a      	ldrb	r2, [r5, #0]
 800dc00:	3b01      	subs	r3, #1
 800dc02:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800dc06:	61e2      	str	r2, [r4, #28]
 800dc08:	f000 808f 	beq.w	800dd2a <get_sof+0x19a>
 800dc0c:	3501      	adds	r5, #1
 800dc0e:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800dc10:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dc12:	69e2      	ldr	r2, [r4, #28]
 800dc14:	440a      	add	r2, r1
 800dc16:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800dc18:	f000 8090 	beq.w	800dd3c <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dc1c:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800dc1e:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800dc22:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800dc26:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800dc2a:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800dc2c:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800dc2e:	4620      	mov	r0, r4
 800dc30:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dc32:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800dc36:	619a      	str	r2, [r3, #24]
  length -= 8;
 800dc38:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800dc3c:	69e2      	ldr	r2, [r4, #28]
 800dc3e:	61da      	str	r2, [r3, #28]
 800dc40:	6a22      	ldr	r2, [r4, #32]
 800dc42:	621a      	str	r2, [r3, #32]
 800dc44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dc46:	625a      	str	r2, [r3, #36]	; 0x24
 800dc48:	2266      	movs	r2, #102	; 0x66
 800dc4a:	615a      	str	r2, [r3, #20]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800dc50:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800dc54:	691b      	ldr	r3, [r3, #16]
 800dc56:	b12b      	cbz	r3, 800dc64 <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800dc58:	6823      	ldr	r3, [r4, #0]
 800dc5a:	223c      	movs	r2, #60	; 0x3c
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	615a      	str	r2, [r3, #20]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800dc64:	6a23      	ldr	r3, [r4, #32]
 800dc66:	b123      	cbz	r3, 800dc72 <get_sof+0xe2>
 800dc68:	69e3      	ldr	r3, [r4, #28]
 800dc6a:	b113      	cbz	r3, 800dc72 <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800dc6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	dc05      	bgt.n	800dc7e <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	2221      	movs	r2, #33	; 0x21
 800dc76:	4620      	mov	r0, r4
 800dc78:	615a      	str	r2, [r3, #20]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800dc7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dc84:	4543      	cmp	r3, r8
 800dc86:	d005      	beq.n	800dc94 <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800dc88:	6823      	ldr	r3, [r4, #0]
 800dc8a:	220c      	movs	r2, #12
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	615a      	str	r2, [r3, #20]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800dc94:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800dc98:	b94b      	cbnz	r3, 800dcae <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800dc9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dc9c:	2158      	movs	r1, #88	; 0x58
 800dc9e:	6863      	ldr	r3, [r4, #4]
 800dca0:	4620      	mov	r0, r4
 800dca2:	434a      	muls	r2, r1
 800dca4:	2101      	movs	r1, #1
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4798      	blx	r3
 800dcaa:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dcae:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800dcb2:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dcb6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800dcba:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dcbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcbe:	4543      	cmp	r3, r8
 800dcc0:	dc45      	bgt.n	800dd4e <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800dcc2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800dcc6:	2001      	movs	r0, #1
 800dcc8:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800dcca:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800dcce:	e76e      	b.n	800dbae <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dcd0:	68f3      	ldr	r3, [r6, #12]
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	4798      	blx	r3
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	f43f af68 	beq.w	800dbac <get_sof+0x1c>
 800dcdc:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dce0:	e770      	b.n	800dbc4 <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dce2:	68f3      	ldr	r3, [r6, #12]
 800dce4:	4620      	mov	r0, r4
 800dce6:	4798      	blx	r3
 800dce8:	2800      	cmp	r0, #0
 800dcea:	f43f af5f 	beq.w	800dbac <get_sof+0x1c>
 800dcee:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dcf2:	e76d      	b.n	800dbd0 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dcf4:	68f3      	ldr	r3, [r6, #12]
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	4798      	blx	r3
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	f43f af56 	beq.w	800dbac <get_sof+0x1c>
 800dd00:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dd04:	e76b      	b.n	800dbde <get_sof+0x4e>
 800dd06:	68f3      	ldr	r3, [r6, #12]
 800dd08:	4620      	mov	r0, r4
 800dd0a:	4798      	blx	r3
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	f43f af4d 	beq.w	800dbac <get_sof+0x1c>
 800dd12:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dd16:	e76a      	b.n	800dbee <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dd18:	68f3      	ldr	r3, [r6, #12]
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	4798      	blx	r3
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	f43f af44 	beq.w	800dbac <get_sof+0x1c>
 800dd24:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dd28:	e769      	b.n	800dbfe <get_sof+0x6e>
 800dd2a:	68f3      	ldr	r3, [r6, #12]
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	4798      	blx	r3
 800dd30:	2800      	cmp	r0, #0
 800dd32:	f43f af3b 	beq.w	800dbac <get_sof+0x1c>
 800dd36:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dd3a:	e768      	b.n	800dc0e <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800dd3c:	68f3      	ldr	r3, [r6, #12]
 800dd3e:	4620      	mov	r0, r4
 800dd40:	4798      	blx	r3
 800dd42:	2800      	cmp	r0, #0
 800dd44:	f43f af32 	beq.w	800dbac <get_sof+0x1c>
 800dd48:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dd4c:	e767      	b.n	800dc1e <get_sof+0x8e>
    compptr->component_index = ci;
 800dd4e:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800dd52:	f1b9 0f00 	cmp.w	r9, #0
 800dd56:	d107      	bne.n	800dd68 <get_sof+0x1d8>
 800dd58:	68f3      	ldr	r3, [r6, #12]
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	4798      	blx	r3
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	f43f af24 	beq.w	800dbac <get_sof+0x1c>
 800dd64:	e9d6 5900 	ldrd	r5, r9, [r6]
 800dd68:	782b      	ldrb	r3, [r5, #0]
 800dd6a:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800dd6e:	f1b9 0301 	subs.w	r3, r9, #1
 800dd72:	d029      	beq.n	800ddc8 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800dd74:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800dd76:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800dd78:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800dd7a:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800dd7e:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800dd82:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800dd86:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800dd8a:	d026      	beq.n	800ddda <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800dd8c:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800dd8e:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800dd92:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dd96:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800dd9a:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800dd9c:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dda0:	4620      	mov	r0, r4
 800dda2:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800dda4:	f108 0801 	add.w	r8, r8, #1
 800dda8:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800ddaa:	619a      	str	r2, [r3, #24]
 800ddac:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800ddb0:	61da      	str	r2, [r3, #28]
 800ddb2:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800ddb6:	621a      	str	r2, [r3, #32]
 800ddb8:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800ddbc:	f8c3 a014 	str.w	sl, [r3, #20]
 800ddc0:	625a      	str	r2, [r3, #36]	; 0x24
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	4798      	blx	r3
       ci++, compptr++) {
 800ddc6:	e779      	b.n	800dcbc <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800ddc8:	68f3      	ldr	r3, [r6, #12]
 800ddca:	4620      	mov	r0, r4
 800ddcc:	4798      	blx	r3
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	f43f aeec 	beq.w	800dbac <get_sof+0x1c>
 800ddd4:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ddd8:	e7cd      	b.n	800dd76 <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800ddda:	68f3      	ldr	r3, [r6, #12]
 800dddc:	4620      	mov	r0, r4
 800ddde:	4798      	blx	r3
 800dde0:	2800      	cmp	r0, #0
 800dde2:	f43f aee3 	beq.w	800dbac <get_sof+0x1c>
 800dde6:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ddea:	e7d0      	b.n	800dd8e <get_sof+0x1fe>

0800ddec <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800ddec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800ddf0:	2a0d      	cmp	r2, #13
{
 800ddf2:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800ddf4:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800ddf6:	eb02 0603 	add.w	r6, r2, r3
{
 800ddfa:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800ddfc:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800ddfe:	d96d      	bls.n	800dedc <examine_app0+0xf0>
 800de00:	7822      	ldrb	r2, [r4, #0]
 800de02:	2a4a      	cmp	r2, #74	; 0x4a
 800de04:	f040 808f 	bne.w	800df26 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800de08:	7862      	ldrb	r2, [r4, #1]
 800de0a:	2a46      	cmp	r2, #70	; 0x46
 800de0c:	f040 808b 	bne.w	800df26 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800de10:	78a2      	ldrb	r2, [r4, #2]
 800de12:	2a49      	cmp	r2, #73	; 0x49
 800de14:	d16a      	bne.n	800deec <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800de16:	78e2      	ldrb	r2, [r4, #3]
 800de18:	2a46      	cmp	r2, #70	; 0x46
 800de1a:	d167      	bne.n	800deec <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800de1c:	7922      	ldrb	r2, [r4, #4]
 800de1e:	2a00      	cmp	r2, #0
 800de20:	d164      	bne.n	800deec <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800de22:	2201      	movs	r2, #1
 800de24:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800de28:	7962      	ldrb	r2, [r4, #5]
 800de2a:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800de2e:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800de30:	f894 c006 	ldrb.w	ip, [r4, #6]
 800de34:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800de38:	79e7      	ldrb	r7, [r4, #7]
 800de3a:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800de3e:	f894 e008 	ldrb.w	lr, [r4, #8]
 800de42:	7a67      	ldrb	r7, [r4, #9]
 800de44:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800de48:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800de4c:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800de50:	7ae7      	ldrb	r7, [r4, #11]
 800de52:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800de56:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800de5a:	d007      	beq.n	800de6c <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800de5c:	277a      	movs	r7, #122	; 0x7a
 800de5e:	f8c1 c01c 	str.w	ip, [r1, #28]
 800de62:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800de66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800de6a:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800de6c:	682b      	ldr	r3, [r5, #0]
 800de6e:	2101      	movs	r1, #1
 800de70:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800de74:	4628      	mov	r0, r5
 800de76:	619a      	str	r2, [r3, #24]
 800de78:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800de7c:	61da      	str	r2, [r3, #28]
 800de7e:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800de82:	621a      	str	r2, [r3, #32]
 800de84:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800de88:	625a      	str	r2, [r3, #36]	; 0x24
 800de8a:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800de8e:	629a      	str	r2, [r3, #40]	; 0x28
 800de90:	2259      	movs	r2, #89	; 0x59
 800de92:	615a      	str	r2, [r3, #20]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800de98:	7b22      	ldrb	r2, [r4, #12]
 800de9a:	7b63      	ldrb	r3, [r4, #13]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	d00a      	beq.n	800deb6 <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800dea0:	682b      	ldr	r3, [r5, #0]
 800dea2:	225c      	movs	r2, #92	; 0x5c
 800dea4:	2101      	movs	r1, #1
 800dea6:	4628      	mov	r0, r5
 800dea8:	615a      	str	r2, [r3, #20]
 800deaa:	7b22      	ldrb	r2, [r4, #12]
 800deac:	619a      	str	r2, [r3, #24]
 800deae:	7b62      	ldrb	r2, [r4, #13]
 800deb0:	61da      	str	r2, [r3, #28]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800deb6:	7b22      	ldrb	r2, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800deb8:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800deba:	7b63      	ldrb	r3, [r4, #13]
 800debc:	fb12 f203 	smulbb	r2, r2, r3
 800dec0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (totallen !=
 800dec4:	42b2      	cmp	r2, r6
 800dec6:	d030      	beq.n	800df2a <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800dec8:	682a      	ldr	r2, [r5, #0]
 800deca:	235a      	movs	r3, #90	; 0x5a
 800decc:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800ded0:	6853      	ldr	r3, [r2, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800ded2:	4628      	mov	r0, r5
 800ded4:	2101      	movs	r1, #1
  }
}
 800ded6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800deda:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800dedc:	2a05      	cmp	r2, #5
 800dede:	d922      	bls.n	800df26 <examine_app0+0x13a>
 800dee0:	7822      	ldrb	r2, [r4, #0]
 800dee2:	2a4a      	cmp	r2, #74	; 0x4a
 800dee4:	d11f      	bne.n	800df26 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800dee6:	7862      	ldrb	r2, [r4, #1]
 800dee8:	2a46      	cmp	r2, #70	; 0x46
 800deea:	d11c      	bne.n	800df26 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800deec:	78a2      	ldrb	r2, [r4, #2]
 800deee:	2a58      	cmp	r2, #88	; 0x58
 800def0:	d119      	bne.n	800df26 <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800def2:	78e2      	ldrb	r2, [r4, #3]
 800def4:	2a58      	cmp	r2, #88	; 0x58
 800def6:	d116      	bne.n	800df26 <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800def8:	7922      	ldrb	r2, [r4, #4]
 800defa:	b9a2      	cbnz	r2, 800df26 <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800defc:	7962      	ldrb	r2, [r4, #5]
 800defe:	2a11      	cmp	r2, #17
 800df00:	d007      	beq.n	800df12 <examine_app0+0x126>
 800df02:	2a13      	cmp	r2, #19
 800df04:	d007      	beq.n	800df16 <examine_app0+0x12a>
 800df06:	2a10      	cmp	r2, #16
 800df08:	d107      	bne.n	800df1a <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800df0a:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800df0c:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800df10:	e7df      	b.n	800ded2 <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800df12:	226f      	movs	r2, #111	; 0x6f
 800df14:	e7fa      	b.n	800df0c <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800df16:	2270      	movs	r2, #112	; 0x70
 800df18:	e7f8      	b.n	800df0c <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800df1a:	225b      	movs	r2, #91	; 0x5b
 800df1c:	614a      	str	r2, [r1, #20]
 800df1e:	7962      	ldrb	r2, [r4, #5]
 800df20:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800df24:	e7d5      	b.n	800ded2 <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800df26:	224f      	movs	r2, #79	; 0x4f
 800df28:	e7f0      	b.n	800df0c <examine_app0+0x120>
}
 800df2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df2e <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800df2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800df32:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800df34:	6804      	ldr	r4, [r0, #0]
{
 800df36:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800df38:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800df3a:	d92b      	bls.n	800df94 <examine_app14+0x66>
 800df3c:	780f      	ldrb	r7, [r1, #0]
 800df3e:	2f41      	cmp	r7, #65	; 0x41
 800df40:	d128      	bne.n	800df94 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800df42:	784f      	ldrb	r7, [r1, #1]
 800df44:	2f64      	cmp	r7, #100	; 0x64
 800df46:	d125      	bne.n	800df94 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800df48:	788f      	ldrb	r7, [r1, #2]
 800df4a:	2f6f      	cmp	r7, #111	; 0x6f
 800df4c:	d122      	bne.n	800df94 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800df4e:	78cf      	ldrb	r7, [r1, #3]
 800df50:	2f62      	cmp	r7, #98	; 0x62
 800df52:	d11f      	bne.n	800df94 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800df54:	790f      	ldrb	r7, [r1, #4]
 800df56:	2f65      	cmp	r7, #101	; 0x65
 800df58:	d11c      	bne.n	800df94 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800df5a:	79cb      	ldrb	r3, [r1, #7]
 800df5c:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800df5e:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800df60:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800df64:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800df66:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800df6a:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800df6e:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800df70:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800df72:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800df76:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800df7a:	234e      	movs	r3, #78	; 0x4e
 800df7c:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800df80:	6163      	str	r3, [r4, #20]
 800df82:	2101      	movs	r1, #1
 800df84:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800df86:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800df88:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800df8c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800df90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800df94:	2150      	movs	r1, #80	; 0x50
 800df96:	4413      	add	r3, r2
 800df98:	4628      	mov	r0, r5
 800df9a:	6161      	str	r1, [r4, #20]
 800df9c:	2101      	movs	r1, #1
 800df9e:	61a3      	str	r3, [r4, #24]
 800dfa0:	4633      	mov	r3, r6
}
 800dfa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800dfa6:	4718      	bx	r3

0800dfa8 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800dfa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800dfac:	6986      	ldr	r6, [r0, #24]
{
 800dfae:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800dfb0:	6877      	ldr	r7, [r6, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800dfb2:	b39f      	cbz	r7, 800e01c <get_interesting_appn+0x74>
  INPUT_VARS(cinfo);
 800dfb4:	6834      	ldr	r4, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dfb6:	7825      	ldrb	r5, [r4, #0]
 800dfb8:	3f01      	subs	r7, #1
 800dfba:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800dfbe:	d037      	beq.n	800e030 <get_interesting_appn+0x88>
 800dfc0:	3401      	adds	r4, #1
 800dfc2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dfc6:	3f01      	subs	r7, #1
 800dfc8:	444d      	add	r5, r9
  length -= 2;
 800dfca:	3d02      	subs	r5, #2

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 800dfcc:	2d0d      	cmp	r5, #13
 800dfce:	dc37      	bgt.n	800e040 <get_interesting_appn+0x98>
    numtoread = APPN_DATA_LEN;
  else if (length > 0)
 800dfd0:	2d00      	cmp	r5, #0
 800dfd2:	dd38      	ble.n	800e046 <get_interesting_appn+0x9e>
    numtoread = (unsigned int) length;
 800dfd4:	46a9      	mov	r9, r5
  else
    numtoread = 0;
  for (i = 0; i < numtoread; i++)
 800dfd6:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800dfda:	b92f      	cbnz	r7, 800dfe8 <get_interesting_appn+0x40>
 800dfdc:	68f3      	ldr	r3, [r6, #12]
 800dfde:	4640      	mov	r0, r8
 800dfe0:	4798      	blx	r3
 800dfe2:	b1f0      	cbz	r0, 800e022 <get_interesting_appn+0x7a>
 800dfe4:	e9d6 4700 	ldrd	r4, r7, [r6]
 800dfe8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dfec:	3f01      	subs	r7, #1
 800dfee:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800dff2:	f10a 0a01 	add.w	sl, sl, #1
 800dff6:	45d1      	cmp	r9, sl
 800dff8:	d1ef      	bne.n	800dfda <get_interesting_appn+0x32>
  length -= numtoread;

  /* process it */
  switch (cinfo->unread_marker) {
 800dffa:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800dffe:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800e002:	2ae0      	cmp	r2, #224	; 0xe0
 800e004:	d022      	beq.n	800e04c <get_interesting_appn+0xa4>
 800e006:	2aee      	cmp	r2, #238	; 0xee
 800e008:	d032      	beq.n	800e070 <get_interesting_appn+0xc8>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
    break;
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e00a:	f8d8 3000 	ldr.w	r3, [r8]
 800e00e:	2146      	movs	r1, #70	; 0x46
 800e010:	4640      	mov	r0, r8
 800e012:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4798      	blx	r3
    break;
 800e01a:	e01d      	b.n	800e058 <get_interesting_appn+0xb0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e01c:	68f3      	ldr	r3, [r6, #12]
 800e01e:	4798      	blx	r3
 800e020:	b918      	cbnz	r0, 800e02a <get_interesting_appn+0x82>
 800e022:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800e024:	b004      	add	sp, #16
 800e026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e02a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e02e:	e7c2      	b.n	800dfb6 <get_interesting_appn+0xe>
 800e030:	68f3      	ldr	r3, [r6, #12]
 800e032:	4640      	mov	r0, r8
 800e034:	4798      	blx	r3
 800e036:	2800      	cmp	r0, #0
 800e038:	d0f3      	beq.n	800e022 <get_interesting_appn+0x7a>
 800e03a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e03e:	e7c0      	b.n	800dfc2 <get_interesting_appn+0x1a>
    numtoread = APPN_DATA_LEN;
 800e040:	f04f 090e 	mov.w	r9, #14
 800e044:	e7c7      	b.n	800dfd6 <get_interesting_appn+0x2e>
    numtoread = 0;
 800e046:	f04f 0900 	mov.w	r9, #0
 800e04a:	e7d6      	b.n	800dffa <get_interesting_appn+0x52>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800e04c:	462b      	mov	r3, r5
 800e04e:	464a      	mov	r2, r9
 800e050:	4669      	mov	r1, sp
 800e052:	4640      	mov	r0, r8
 800e054:	f7ff feca 	bl	800ddec <examine_app0>
  if (length > 0)
 800e058:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800e05a:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800e05e:	dd05      	ble.n	800e06c <get_interesting_appn+0xc4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800e060:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e064:	4629      	mov	r1, r5
 800e066:	4640      	mov	r0, r8
 800e068:	691b      	ldr	r3, [r3, #16]
 800e06a:	4798      	blx	r3
  return TRUE;
 800e06c:	2001      	movs	r0, #1
 800e06e:	e7d9      	b.n	800e024 <get_interesting_appn+0x7c>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800e070:	462b      	mov	r3, r5
 800e072:	464a      	mov	r2, r9
 800e074:	4669      	mov	r1, sp
 800e076:	4640      	mov	r0, r8
 800e078:	f7ff ff59 	bl	800df2e <examine_app14>
    break;
 800e07c:	e7ec      	b.n	800e058 <get_interesting_appn+0xb0>

0800e07e <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800e07e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800e082:	6984      	ldr	r4, [r0, #24]
{
 800e084:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800e086:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800e088:	b31b      	cbz	r3, 800e0d2 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 800e08a:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e08c:	782e      	ldrb	r6, [r5, #0]
 800e08e:	f1b3 0801 	subs.w	r8, r3, #1
 800e092:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800e096:	d025      	beq.n	800e0e4 <skip_variable+0x66>
 800e098:	3501      	adds	r5, #1
 800e09a:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800e09e:	235d      	movs	r3, #93	; 0x5d
 800e0a0:	683a      	ldr	r2, [r7, #0]
 800e0a2:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0a4:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800e0a6:	4638      	mov	r0, r7
 800e0a8:	6153      	str	r3, [r2, #20]
  length -= 2;
 800e0aa:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800e0ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e0b0:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800e0b4:	6853      	ldr	r3, [r2, #4]
 800e0b6:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0b8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 800e0bc:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800e0be:	6025      	str	r5, [r4, #0]
 800e0c0:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800e0c2:	dd04      	ble.n	800e0ce <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800e0c4:	69bb      	ldr	r3, [r7, #24]
 800e0c6:	4631      	mov	r1, r6
 800e0c8:	4638      	mov	r0, r7
 800e0ca:	691b      	ldr	r3, [r3, #16]
 800e0cc:	4798      	blx	r3

  return TRUE;
 800e0ce:	2001      	movs	r0, #1
 800e0d0:	e003      	b.n	800e0da <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0d2:	68e3      	ldr	r3, [r4, #12]
 800e0d4:	4798      	blx	r3
 800e0d6:	b910      	cbnz	r0, 800e0de <skip_variable+0x60>
 800e0d8:	2000      	movs	r0, #0
}
 800e0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0de:	e9d4 5300 	ldrd	r5, r3, [r4]
 800e0e2:	e7d3      	b.n	800e08c <skip_variable+0xe>
 800e0e4:	68e3      	ldr	r3, [r4, #12]
 800e0e6:	4638      	mov	r0, r7
 800e0e8:	4798      	blx	r3
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d0f4      	beq.n	800e0d8 <skip_variable+0x5a>
 800e0ee:	e9d4 5800 	ldrd	r5, r8, [r4]
 800e0f2:	e7d2      	b.n	800e09a <skip_variable+0x1c>

0800e0f4 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800e0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800e0f8:	6986      	ldr	r6, [r0, #24]
{
 800e0fa:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800e0fc:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800e100:	b987      	cbnz	r7, 800e124 <next_marker+0x30>
 800e102:	68f3      	ldr	r3, [r6, #12]
 800e104:	4640      	mov	r0, r8
 800e106:	4798      	blx	r3
 800e108:	b950      	cbnz	r0, 800e120 <next_marker+0x2c>
 800e10a:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800e10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800e110:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800e114:	6993      	ldr	r3, [r2, #24]
 800e116:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800e118:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800e11a:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e11e:	e7ef      	b.n	800e100 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800e120:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e124:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e128:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800e12a:	2bff      	cmp	r3, #255	; 0xff
 800e12c:	d1f0      	bne.n	800e110 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800e12e:	b937      	cbnz	r7, 800e13e <next_marker+0x4a>
 800e130:	68f3      	ldr	r3, [r6, #12]
 800e132:	4640      	mov	r0, r8
 800e134:	4798      	blx	r3
 800e136:	2800      	cmp	r0, #0
 800e138:	d0e7      	beq.n	800e10a <next_marker+0x16>
 800e13a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e13e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e142:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800e144:	2dff      	cmp	r5, #255	; 0xff
 800e146:	d0f2      	beq.n	800e12e <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800e148:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800e14c:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800e14e:	b90d      	cbnz	r5, 800e154 <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800e150:	3302      	adds	r3, #2
 800e152:	e7e1      	b.n	800e118 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800e154:	b173      	cbz	r3, 800e174 <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800e156:	f8d8 2000 	ldr.w	r2, [r8]
 800e15a:	2177      	movs	r1, #119	; 0x77
 800e15c:	4640      	mov	r0, r8
 800e15e:	61d5      	str	r5, [r2, #28]
 800e160:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e164:	6853      	ldr	r3, [r2, #4]
 800e166:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e16a:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800e16c:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800e170:	2200      	movs	r2, #0
 800e172:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800e174:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800e178:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e17a:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800e17e:	e7c5      	b.n	800e10c <next_marker+0x18>

0800e180 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800e180:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800e184:	b510      	push	{r4, lr}
 800e186:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800e188:	b1e3      	cbz	r3, 800e1c4 <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800e18a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800e18e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800e192:	6959      	ldr	r1, [r3, #20]
 800e194:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800e198:	429a      	cmp	r2, r3
 800e19a:	d119      	bne.n	800e1d0 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800e19c:	6823      	ldr	r3, [r4, #0]
 800e19e:	2264      	movs	r2, #100	; 0x64
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	2103      	movs	r1, #3
 800e1aa:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800e1b2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800e1b6:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800e1b8:	6953      	ldr	r3, [r2, #20]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	f003 0307 	and.w	r3, r3, #7
 800e1c0:	6153      	str	r3, [r2, #20]
  return TRUE;
 800e1c2:	e004      	b.n	800e1ce <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800e1c4:	f7ff ff96 	bl	800e0f4 <next_marker>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d1de      	bne.n	800e18a <read_restart_marker+0xa>
      return FALSE;
 800e1cc:	2000      	movs	r0, #0
}
 800e1ce:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800e1d0:	69a3      	ldr	r3, [r4, #24]
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	695b      	ldr	r3, [r3, #20]
 800e1d6:	4798      	blx	r3
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d1ea      	bne.n	800e1b2 <read_restart_marker+0x32>
 800e1dc:	e7f6      	b.n	800e1cc <read_restart_marker+0x4c>

0800e1de <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800e1de:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800e1e0:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800e1e4:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800e1e8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800e1ec:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800e1f0:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800e1f2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800e1f6:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800e1fa:	4770      	bx	lr

0800e1fc <get_dht>:
{
 800e1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800e200:	6987      	ldr	r7, [r0, #24]
{
 800e202:	b0c9      	sub	sp, #292	; 0x124
 800e204:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800e206:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e208:	b1fe      	cbz	r6, 800e24a <get_dht+0x4e>
  INPUT_VARS(cinfo);
 800e20a:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e20c:	f894 9000 	ldrb.w	r9, [r4]
 800e210:	3e01      	subs	r6, #1
 800e212:	ea4f 2809 	mov.w	r8, r9, lsl #8
 800e216:	d022      	beq.n	800e25e <get_dht+0x62>
 800e218:	3401      	adds	r4, #1
 800e21a:	f814 9b01 	ldrb.w	r9, [r4], #1
 800e21e:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800e220:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e224:	44c1      	add	r9, r8
  length -= 2;
 800e226:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800e22a:	f1b9 0f10 	cmp.w	r9, #16
 800e22e:	dc1e      	bgt.n	800e26e <get_dht+0x72>
  if (length != 0)
 800e230:	f1b9 0f00 	cmp.w	r9, #0
 800e234:	d005      	beq.n	800e242 <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e236:	682b      	ldr	r3, [r5, #0]
 800e238:	220c      	movs	r2, #12
 800e23a:	4628      	mov	r0, r5
 800e23c:	615a      	str	r2, [r3, #20]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4798      	blx	r3
  return TRUE;
 800e242:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e244:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800e248:	e003      	b.n	800e252 <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	4798      	blx	r3
 800e24e:	b918      	cbnz	r0, 800e258 <get_dht+0x5c>
 800e250:	2000      	movs	r0, #0
}
 800e252:	b049      	add	sp, #292	; 0x124
 800e254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e258:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e25c:	e7d6      	b.n	800e20c <get_dht+0x10>
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	4628      	mov	r0, r5
 800e262:	4798      	blx	r3
 800e264:	2800      	cmp	r0, #0
 800e266:	d0f3      	beq.n	800e250 <get_dht+0x54>
 800e268:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e26c:	e7d5      	b.n	800e21a <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e26e:	b936      	cbnz	r6, 800e27e <get_dht+0x82>
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	4628      	mov	r0, r5
 800e274:	4790      	blx	r2
 800e276:	2800      	cmp	r0, #0
 800e278:	d0ea      	beq.n	800e250 <get_dht+0x54>
 800e27a:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e27e:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800e282:	2152      	movs	r1, #82	; 0x52
 800e284:	682a      	ldr	r2, [r5, #0]
 800e286:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800e288:	f8cd 8000 	str.w	r8, [sp]
 800e28c:	3e01      	subs	r6, #1
    count = 0;
 800e28e:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800e292:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800e296:	6852      	ldr	r2, [r2, #4]
 800e298:	2101      	movs	r1, #1
 800e29a:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800e29c:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800e29e:	b946      	cbnz	r6, 800e2b2 <get_dht+0xb6>
 800e2a0:	68f9      	ldr	r1, [r7, #12]
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	9201      	str	r2, [sp, #4]
 800e2a6:	4788      	blx	r1
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d0d1      	beq.n	800e250 <get_dht+0x54>
 800e2ac:	9a01      	ldr	r2, [sp, #4]
 800e2ae:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2b6:	3e01      	subs	r6, #1
 800e2b8:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800e2bc:	3201      	adds	r2, #1
      count += bits[i];
 800e2be:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800e2c0:	2a11      	cmp	r2, #17
 800e2c2:	d1ec      	bne.n	800e29e <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e2c4:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800e2c6:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e2ca:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800e2ce:	f04f 0958 	mov.w	r9, #88	; 0x58
 800e2d2:	4628      	mov	r0, r5
    length -= 1 + 16;
 800e2d4:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e2d6:	6191      	str	r1, [r2, #24]
 800e2d8:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800e2dc:	f8c2 9014 	str.w	r9, [r2, #20]
 800e2e0:	61d1      	str	r1, [r2, #28]
 800e2e2:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800e2e6:	6211      	str	r1, [r2, #32]
 800e2e8:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800e2ec:	6251      	str	r1, [r2, #36]	; 0x24
 800e2ee:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800e2f2:	6291      	str	r1, [r2, #40]	; 0x28
 800e2f4:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800e2f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e2fa:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800e2fe:	6311      	str	r1, [r2, #48]	; 0x30
 800e300:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800e304:	6351      	str	r1, [r2, #52]	; 0x34
 800e306:	2102      	movs	r1, #2
 800e308:	6852      	ldr	r2, [r2, #4]
 800e30a:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e30c:	682a      	ldr	r2, [r5, #0]
 800e30e:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800e312:	4628      	mov	r0, r5
 800e314:	f8c2 9014 	str.w	r9, [r2, #20]
 800e318:	6191      	str	r1, [r2, #24]
 800e31a:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800e31e:	61d1      	str	r1, [r2, #28]
 800e320:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800e324:	6211      	str	r1, [r2, #32]
 800e326:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800e32a:	6251      	str	r1, [r2, #36]	; 0x24
 800e32c:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800e330:	6291      	str	r1, [r2, #40]	; 0x28
 800e332:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e336:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e338:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800e33c:	6311      	str	r1, [r2, #48]	; 0x30
 800e33e:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800e342:	6351      	str	r1, [r2, #52]	; 0x34
 800e344:	2102      	movs	r1, #2
 800e346:	6852      	ldr	r2, [r2, #4]
 800e348:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800e34a:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800e34e:	dc02      	bgt.n	800e356 <get_dht+0x15a>
 800e350:	9b01      	ldr	r3, [sp, #4]
 800e352:	4553      	cmp	r3, sl
 800e354:	da05      	bge.n	800e362 <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800e356:	682a      	ldr	r2, [r5, #0]
 800e358:	2109      	movs	r1, #9
 800e35a:	4628      	mov	r0, r5
 800e35c:	6151      	str	r1, [r2, #20]
 800e35e:	6812      	ldr	r2, [r2, #0]
 800e360:	4790      	blx	r2
 800e362:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e366:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800e368:	45d1      	cmp	r9, sl
 800e36a:	d13f      	bne.n	800e3ec <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 800e36c:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800e370:	9b01      	ldr	r3, [sp, #4]
 800e372:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800e376:	bf17      	itett	ne
 800e378:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800e37c:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800e380:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800e384:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800e386:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800e388:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800e38c:	2b03      	cmp	r3, #3
 800e38e:	d906      	bls.n	800e39e <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800e390:	682a      	ldr	r2, [r5, #0]
 800e392:	211f      	movs	r1, #31
 800e394:	4628      	mov	r0, r5
 800e396:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e39a:	6812      	ldr	r2, [r2, #0]
 800e39c:	4790      	blx	r2
    if (*htblptr == NULL)
 800e39e:	f8d8 2000 	ldr.w	r2, [r8]
 800e3a2:	b922      	cbnz	r2, 800e3ae <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	f7fb fb8b 	bl	8009ac0 <jpeg_alloc_huff_table>
 800e3aa:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	46de      	mov	lr, fp
 800e3b2:	f10d 0a1c 	add.w	sl, sp, #28
 800e3b6:	f88b 2000 	strb.w	r2, [fp]
 800e3ba:	f8d8 2000 	ldr.w	r2, [r8]
 800e3be:	46f4      	mov	ip, lr
 800e3c0:	3208      	adds	r2, #8
 800e3c2:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800e3c6:	45d4      	cmp	ip, sl
 800e3c8:	f842 0c08 	str.w	r0, [r2, #-8]
 800e3cc:	f842 1c04 	str.w	r1, [r2, #-4]
 800e3d0:	46e6      	mov	lr, ip
 800e3d2:	d1f4      	bne.n	800e3be <get_dht+0x1c2>
 800e3d4:	f89c 1000 	ldrb.w	r1, [ip]
 800e3d8:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800e3da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3de:	f8d8 0000 	ldr.w	r0, [r8]
 800e3e2:	a908      	add	r1, sp, #32
 800e3e4:	3011      	adds	r0, #17
 800e3e6:	f01c f9b7 	bl	802a758 <memcpy>
 800e3ea:	e71e      	b.n	800e22a <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e3ec:	b946      	cbnz	r6, 800e400 <get_dht+0x204>
 800e3ee:	68fa      	ldr	r2, [r7, #12]
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	4790      	blx	r2
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	f43f af2b 	beq.w	800e250 <get_dht+0x54>
 800e3fa:	a908      	add	r1, sp, #32
 800e3fc:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e400:	f814 2b01 	ldrb.w	r2, [r4], #1
 800e404:	3e01      	subs	r6, #1
 800e406:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800e40a:	f109 0901 	add.w	r9, r9, #1
 800e40e:	e7ab      	b.n	800e368 <get_dht+0x16c>

0800e410 <read_markers>:
{
 800e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e414:	4604      	mov	r4, r0
 800e416:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800e418:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e41c:	bb2b      	cbnz	r3, 800e46a <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 800e41e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d17c      	bne.n	800e522 <read_markers+0x112>
  INPUT_VARS(cinfo);
 800e428:	69a7      	ldr	r7, [r4, #24]
 800e42a:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d06a      	beq.n	800e506 <read_markers+0xf6>
  INPUT_VARS(cinfo);
 800e430:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e432:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e434:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e438:	d06c      	beq.n	800e514 <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e43a:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e43c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e440:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 800e444:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e448:	d102      	bne.n	800e450 <read_markers+0x40>
 800e44a:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800e44e:	d008      	beq.n	800e462 <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800e450:	6823      	ldr	r3, [r4, #0]
 800e452:	2237      	movs	r2, #55	; 0x37
 800e454:	4620      	mov	r0, r4
 800e456:	f8c3 901c 	str.w	r9, [r3, #28]
 800e45a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800e462:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800e466:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800e46a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e46e:	2b01      	cmp	r3, #1
 800e470:	f000 83c3 	beq.w	800ebfa <read_markers+0x7ea>
 800e474:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800e478:	2a3e      	cmp	r2, #62	; 0x3e
 800e47a:	f200 83cb 	bhi.w	800ec14 <read_markers+0x804>
 800e47e:	2a3e      	cmp	r2, #62	; 0x3e
 800e480:	f200 83c8 	bhi.w	800ec14 <read_markers+0x804>
 800e484:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e488:	009b0092 	.word	0x009b0092
 800e48c:	00a7009e 	.word	0x00a7009e
 800e490:	00a70239 	.word	0x00a70239
 800e494:	00a700a7 	.word	0x00a700a7
 800e498:	00a200a7 	.word	0x00a200a7
 800e49c:	00a700a4 	.word	0x00a700a4
 800e4a0:	00a701bf 	.word	0x00a701bf
 800e4a4:	00a700a7 	.word	0x00a700a7
 800e4a8:	03b903b9 	.word	0x03b903b9
 800e4ac:	03b903b9 	.word	0x03b903b9
 800e4b0:	03b903b9 	.word	0x03b903b9
 800e4b4:	03b903b9 	.word	0x03b903b9
 800e4b8:	01b30054 	.word	0x01b30054
 800e4bc:	023d00af 	.word	0x023d00af
 800e4c0:	035b03c2 	.word	0x035b03c2
 800e4c4:	03c603c6 	.word	0x03c603c6
 800e4c8:	03ad03ad 	.word	0x03ad03ad
 800e4cc:	03ad03ad 	.word	0x03ad03ad
 800e4d0:	03ad03ad 	.word	0x03ad03ad
 800e4d4:	03ad03ad 	.word	0x03ad03ad
 800e4d8:	03ad03ad 	.word	0x03ad03ad
 800e4dc:	03ad03ad 	.word	0x03ad03ad
 800e4e0:	03ad03ad 	.word	0x03ad03ad
 800e4e4:	03ad03ad 	.word	0x03ad03ad
 800e4e8:	03c603c6 	.word	0x03c603c6
 800e4ec:	03c603c6 	.word	0x03c603c6
 800e4f0:	03c603c6 	.word	0x03c603c6
 800e4f4:	03c603c6 	.word	0x03c603c6
 800e4f8:	03c603c6 	.word	0x03c603c6
 800e4fc:	03c603c6 	.word	0x03c603c6
 800e500:	03c603c6 	.word	0x03c603c6
 800e504:	03b5      	.short	0x03b5
  INPUT_BYTE(cinfo, c, return FALSE);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	4620      	mov	r0, r4
 800e50a:	4798      	blx	r3
 800e50c:	b170      	cbz	r0, 800e52c <read_markers+0x11c>
 800e50e:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e512:	e78e      	b.n	800e432 <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	4620      	mov	r0, r4
 800e518:	4798      	blx	r3
 800e51a:	b138      	cbz	r0, 800e52c <read_markers+0x11c>
 800e51c:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e520:	e78c      	b.n	800e43c <read_markers+0x2c>
	if (! next_marker(cinfo))
 800e522:	4620      	mov	r0, r4
 800e524:	f7ff fde6 	bl	800e0f4 <next_marker>
 800e528:	2800      	cmp	r0, #0
 800e52a:	d19e      	bne.n	800e46a <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 800e52c:	2000      	movs	r0, #0
 800e52e:	e0e9      	b.n	800e704 <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800e530:	6823      	ldr	r3, [r4, #0]
 800e532:	2268      	movs	r2, #104	; 0x68
 800e534:	2101      	movs	r1, #1
 800e536:	4620      	mov	r0, r4
 800e538:	615a      	str	r2, [r3, #20]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800e53e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	b12b      	cbz	r3, 800e552 <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	223f      	movs	r2, #63	; 0x3f
 800e54a:	4620      	mov	r0, r4
 800e54c:	615a      	str	r2, [r3, #20]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800e552:	2210      	movs	r2, #16
 800e554:	2100      	movs	r1, #0
 800e556:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800e55a:	f01c f90b 	bl	802a774 <memset>
    cinfo->arith_dc_U[i] = 1;
 800e55e:	2210      	movs	r2, #16
 800e560:	2101      	movs	r1, #1
 800e562:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800e566:	f01c f905 	bl	802a774 <memset>
    cinfo->arith_ac_K[i] = 5;
 800e56a:	2210      	movs	r2, #16
 800e56c:	2105      	movs	r1, #5
 800e56e:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800e572:	f01c f8ff 	bl	802a774 <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e576:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800e57a:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e57c:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800e580:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800e584:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800e588:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800e58c:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800e590:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800e594:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800e598:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800e59c:	2201      	movs	r2, #1
 800e59e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e5a2:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800e5aa:	e735      	b.n	800e418 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f7ff faec 	bl	800db90 <get_sof>
      if (! skip_variable(cinfo))
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	d1f3      	bne.n	800e5a4 <read_markers+0x194>
 800e5bc:	e7b6      	b.n	800e52c <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800e5be:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	e001      	b.n	800e5c8 <read_markers+0x1b8>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	e7f2      	b.n	800e5b2 <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e7f7      	b.n	800e5c0 <read_markers+0x1b0>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	e7f8      	b.n	800e5c8 <read_markers+0x1b8>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800e5d6:	6822      	ldr	r2, [r4, #0]
 800e5d8:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e5da:	4620      	mov	r0, r4
 800e5dc:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e5e0:	6813      	ldr	r3, [r2, #0]
 800e5e2:	4798      	blx	r3
      break;
 800e5e4:	e7de      	b.n	800e5a4 <read_markers+0x194>
  if (! cinfo->marker->saw_SOF)
 800e5e6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800e5ea:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800e5ec:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800e5ee:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800e5f2:	b92b      	cbnz	r3, 800e600 <read_markers+0x1f0>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800e5f4:	6823      	ldr	r3, [r4, #0]
 800e5f6:	2240      	movs	r2, #64	; 0x40
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	615a      	str	r2, [r3, #20]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e600:	b936      	cbnz	r6, 800e610 <read_markers+0x200>
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	4620      	mov	r0, r4
 800e606:	4798      	blx	r3
 800e608:	2800      	cmp	r0, #0
 800e60a:	d08f      	beq.n	800e52c <read_markers+0x11c>
 800e60c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e610:	f895 8000 	ldrb.w	r8, [r5]
 800e614:	3e01      	subs	r6, #1
 800e616:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800e61a:	d076      	beq.n	800e70a <read_markers+0x2fa>
 800e61c:	3501      	adds	r5, #1
 800e61e:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e620:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e622:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e624:	d07a      	beq.n	800e71c <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e626:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e628:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e62c:	2269      	movs	r2, #105	; 0x69
 800e62e:	6823      	ldr	r3, [r4, #0]
 800e630:	2101      	movs	r1, #1
 800e632:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e634:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e636:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800e63e:	f109 0303 	add.w	r3, r9, #3
 800e642:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800e646:	d108      	bne.n	800e65a <read_markers+0x24a>
 800e648:	f1b9 0f04 	cmp.w	r9, #4
 800e64c:	dc05      	bgt.n	800e65a <read_markers+0x24a>
 800e64e:	f1b9 0f00 	cmp.w	r9, #0
 800e652:	d108      	bne.n	800e666 <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800e654:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800e658:	b92b      	cbnz	r3, 800e666 <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e65a:	6823      	ldr	r3, [r4, #0]
 800e65c:	220c      	movs	r2, #12
 800e65e:	4620      	mov	r0, r4
 800e660:	615a      	str	r2, [r3, #20]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800e666:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 800e66a:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800e66e:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800e672:	9301      	str	r3, [sp, #4]
 800e674:	45d1      	cmp	r9, sl
 800e676:	dc5a      	bgt.n	800e72e <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e678:	b93e      	cbnz	r6, 800e68a <read_markers+0x27a>
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	4620      	mov	r0, r4
 800e67e:	4798      	blx	r3
 800e680:	2800      	cmp	r0, #0
 800e682:	f43f af53 	beq.w	800e52c <read_markers+0x11c>
 800e686:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e68a:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e68c:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e68e:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800e692:	f000 809a 	beq.w	800e7ca <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e696:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e698:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e69a:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e69c:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800e6a0:	f000 809c 	beq.w	800e7dc <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e6a4:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e6a6:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e6aa:	2101      	movs	r1, #1
 800e6ac:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800e6ae:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800e6b0:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800e6b2:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800e6b6:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800e6ba:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e6be:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800e6c2:	6823      	ldr	r3, [r4, #0]
 800e6c4:	619a      	str	r2, [r3, #24]
 800e6c6:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800e6ca:	61da      	str	r2, [r3, #28]
 800e6cc:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800e6d0:	621a      	str	r2, [r3, #32]
 800e6d2:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800e6d6:	625a      	str	r2, [r3, #36]	; 0x24
 800e6d8:	226b      	movs	r2, #107	; 0x6b
 800e6da:	615a      	str	r2, [r3, #20]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800e6e0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800e6e8:	f1b9 0f00 	cmp.w	r9, #0
 800e6ec:	d004      	beq.n	800e6f8 <read_markers+0x2e8>
 800e6ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800e6f8:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800e6fa:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e6fc:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800e700:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800e704:	b005      	add	sp, #20
 800e706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	4620      	mov	r0, r4
 800e70e:	4798      	blx	r3
 800e710:	2800      	cmp	r0, #0
 800e712:	f43f af0b 	beq.w	800e52c <read_markers+0x11c>
 800e716:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e71a:	e780      	b.n	800e61e <read_markers+0x20e>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	4620      	mov	r0, r4
 800e720:	4798      	blx	r3
 800e722:	2800      	cmp	r0, #0
 800e724:	f43f af02 	beq.w	800e52c <read_markers+0x11c>
 800e728:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e72c:	e77c      	b.n	800e628 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e72e:	b93e      	cbnz	r6, 800e740 <read_markers+0x330>
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	4620      	mov	r0, r4
 800e734:	4798      	blx	r3
 800e736:	2800      	cmp	r0, #0
 800e738:	f43f aef8 	beq.w	800e52c <read_markers+0x11c>
 800e73c:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e740:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e742:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e746:	d02f      	beq.n	800e7a8 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e748:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800e74a:	3e01      	subs	r6, #1
 800e74c:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e750:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800e754:	2000      	movs	r0, #0
 800e756:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e758:	4290      	cmp	r0, r2
 800e75a:	db2e      	blt.n	800e7ba <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800e75c:	6821      	ldr	r1, [r4, #0]
 800e75e:	4620      	mov	r0, r4
 800e760:	9302      	str	r3, [sp, #8]
 800e762:	2304      	movs	r3, #4
 800e764:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800e768:	6809      	ldr	r1, [r1, #0]
 800e76a:	4788      	blx	r1
 800e76c:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800e76e:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e770:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800e772:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e776:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800e778:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 800e77c:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e780:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e784:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800e786:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e78a:	f8c1 b018 	str.w	fp, [r1, #24]
 800e78e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800e792:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e794:	61cb      	str	r3, [r1, #28]
 800e796:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e79a:	620b      	str	r3, [r1, #32]
 800e79c:	236a      	movs	r3, #106	; 0x6a
 800e79e:	614b      	str	r3, [r1, #20]
 800e7a0:	684b      	ldr	r3, [r1, #4]
 800e7a2:	2101      	movs	r1, #1
 800e7a4:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800e7a6:	e765      	b.n	800e674 <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	4798      	blx	r3
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	f43f aebc 	beq.w	800e52c <read_markers+0x11c>
 800e7b4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e7b8:	e7c7      	b.n	800e74a <read_markers+0x33a>
      if (cc == compptr->component_id)
 800e7ba:	f8d8 1000 	ldr.w	r1, [r8]
 800e7be:	458b      	cmp	fp, r1
 800e7c0:	d0d5      	beq.n	800e76e <read_markers+0x35e>
	 ci++, compptr++) {
 800e7c2:	3001      	adds	r0, #1
 800e7c4:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800e7c8:	e7c6      	b.n	800e758 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	4798      	blx	r3
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	f43f aeab 	beq.w	800e52c <read_markers+0x11c>
 800e7d6:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e7da:	e75d      	b.n	800e698 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	4620      	mov	r0, r4
 800e7e0:	4798      	blx	r3
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	f43f aea2 	beq.w	800e52c <read_markers+0x11c>
 800e7e8:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e7ec:	e75b      	b.n	800e6a6 <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800e7ee:	6823      	ldr	r3, [r4, #0]
 800e7f0:	2257      	movs	r2, #87	; 0x57
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	2101      	movs	r1, #1
 800e7f6:	615a      	str	r2, [r3, #20]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800e7fc:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800e7fe:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800e800:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800e804:	e77e      	b.n	800e704 <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 800e806:	69a7      	ldr	r7, [r4, #24]
 800e808:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e80a:	b1e6      	cbz	r6, 800e846 <read_markers+0x436>
  INPUT_VARS(cinfo);
 800e80c:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e80e:	f895 9000 	ldrb.w	r9, [r5]
 800e812:	3e01      	subs	r6, #1
 800e814:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800e818:	d01e      	beq.n	800e858 <read_markers+0x448>
 800e81a:	3501      	adds	r5, #1
 800e81c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e820:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e822:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e826:	4499      	add	r9, r3
  length -= 2;
 800e828:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800e82c:	f1b9 0f00 	cmp.w	r9, #0
 800e830:	dc1b      	bgt.n	800e86a <read_markers+0x45a>
  if (length != 0)
 800e832:	d005      	beq.n	800e840 <read_markers+0x430>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e834:	6823      	ldr	r3, [r4, #0]
 800e836:	220c      	movs	r2, #12
 800e838:	4620      	mov	r0, r4
 800e83a:	615a      	str	r2, [r3, #20]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800e840:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800e842:	607e      	str	r6, [r7, #4]
  return TRUE;
 800e844:	e6ae      	b.n	800e5a4 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	4620      	mov	r0, r4
 800e84a:	4798      	blx	r3
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f43f ae6d 	beq.w	800e52c <read_markers+0x11c>
 800e852:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e856:	e7da      	b.n	800e80e <read_markers+0x3fe>
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	4620      	mov	r0, r4
 800e85c:	4798      	blx	r3
 800e85e:	2800      	cmp	r0, #0
 800e860:	f43f ae64 	beq.w	800e52c <read_markers+0x11c>
 800e864:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e868:	e7d8      	b.n	800e81c <read_markers+0x40c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e86a:	b93e      	cbnz	r6, 800e87c <read_markers+0x46c>
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	4620      	mov	r0, r4
 800e870:	4798      	blx	r3
 800e872:	2800      	cmp	r0, #0
 800e874:	f43f ae5a 	beq.w	800e52c <read_markers+0x11c>
 800e878:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e87c:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800e87e:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e882:	d01f      	beq.n	800e8c4 <read_markers+0x4b4>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e884:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e886:	6822      	ldr	r2, [r4, #0]
 800e888:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800e88a:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e88e:	2101      	movs	r1, #1
 800e890:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800e892:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e894:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800e898:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e89c:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800e8a0:	6852      	ldr	r2, [r2, #4]
 800e8a2:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800e8a4:	f1b8 0f1f 	cmp.w	r8, #31
 800e8a8:	d905      	bls.n	800e8b6 <read_markers+0x4a6>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e8aa:	6822      	ldr	r2, [r4, #0]
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800e8b2:	6812      	ldr	r2, [r2, #0]
 800e8b4:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800e8b6:	f1b8 0f0f 	cmp.w	r8, #15
 800e8ba:	44a0      	add	r8, r4
 800e8bc:	dd0b      	ble.n	800e8d6 <read_markers+0x4c6>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800e8be:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800e8c2:	e7b3      	b.n	800e82c <read_markers+0x41c>
    INPUT_BYTE(cinfo, val, return FALSE);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	4798      	blx	r3
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	f43f ae2e 	beq.w	800e52c <read_markers+0x11c>
 800e8d0:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e8d4:	e7d7      	b.n	800e886 <read_markers+0x476>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e8d6:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e8da:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e8de:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e8e0:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e8e4:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e8e8:	d9a0      	bls.n	800e82c <read_markers+0x41c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800e8ea:	6822      	ldr	r2, [r4, #0]
 800e8ec:	211e      	movs	r1, #30
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	6813      	ldr	r3, [r2, #0]
 800e8f2:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800e8f6:	4798      	blx	r3
 800e8f8:	e798      	b.n	800e82c <read_markers+0x41c>
      if (! get_dht(cinfo))
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	f7ff fc7e 	bl	800e1fc <get_dht>
 800e900:	e65a      	b.n	800e5b8 <read_markers+0x1a8>
  INPUT_VARS(cinfo);
 800e902:	69a6      	ldr	r6, [r4, #24]
 800e904:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e906:	b1db      	cbz	r3, 800e940 <read_markers+0x530>
  INPUT_VARS(cinfo);
 800e908:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e90a:	f895 8000 	ldrb.w	r8, [r5]
 800e90e:	3b01      	subs	r3, #1
 800e910:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800e914:	d01d      	beq.n	800e952 <read_markers+0x542>
 800e916:	3501      	adds	r5, #1
 800e918:	f815 8b01 	ldrb.w	r8, [r5], #1
 800e91c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800e920:	44b8      	add	r8, r7
  length -= 2;
 800e922:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800e926:	f1b8 0f00 	cmp.w	r8, #0
 800e92a:	dc1b      	bgt.n	800e964 <read_markers+0x554>
  if (length != 0)
 800e92c:	d005      	beq.n	800e93a <read_markers+0x52a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e92e:	6822      	ldr	r2, [r4, #0]
 800e930:	210c      	movs	r1, #12
 800e932:	4620      	mov	r0, r4
 800e934:	6151      	str	r1, [r2, #20]
 800e936:	6812      	ldr	r2, [r2, #0]
 800e938:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800e93a:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800e93e:	e631      	b.n	800e5a4 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e940:	68f3      	ldr	r3, [r6, #12]
 800e942:	4620      	mov	r0, r4
 800e944:	4798      	blx	r3
 800e946:	2800      	cmp	r0, #0
 800e948:	f43f adf0 	beq.w	800e52c <read_markers+0x11c>
 800e94c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e950:	e7db      	b.n	800e90a <read_markers+0x4fa>
 800e952:	68f3      	ldr	r3, [r6, #12]
 800e954:	4620      	mov	r0, r4
 800e956:	4798      	blx	r3
 800e958:	2800      	cmp	r0, #0
 800e95a:	f43f ade7 	beq.w	800e52c <read_markers+0x11c>
 800e95e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e962:	e7d9      	b.n	800e918 <read_markers+0x508>
    length--;
 800e964:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    INPUT_BYTE(cinfo, n, return FALSE);
 800e968:	f1ba 0f00 	cmp.w	sl, #0
 800e96c:	d107      	bne.n	800e97e <read_markers+0x56e>
 800e96e:	68f3      	ldr	r3, [r6, #12]
 800e970:	4620      	mov	r0, r4
 800e972:	4798      	blx	r3
 800e974:	2800      	cmp	r0, #0
 800e976:	f43f add9 	beq.w	800e52c <read_markers+0x11c>
 800e97a:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e97e:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e982:	2153      	movs	r1, #83	; 0x53
 800e984:	6822      	ldr	r2, [r4, #0]
 800e986:	4620      	mov	r0, r4
    prec = n >> 4;
 800e988:	ea4f 1329 	mov.w	r3, r9, asr #4
 800e98c:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800e990:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e994:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800e996:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e998:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e99c:	6852      	ldr	r2, [r2, #4]
 800e99e:	2101      	movs	r1, #1
 800e9a0:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800e9a2:	f019 0f0c 	tst.w	r9, #12
 800e9a6:	d006      	beq.n	800e9b6 <read_markers+0x5a6>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800e9a8:	6822      	ldr	r2, [r4, #0]
 800e9aa:	2120      	movs	r1, #32
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e9b2:	6812      	ldr	r2, [r2, #0]
 800e9b4:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800e9b6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800e9ba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e9be:	b922      	cbnz	r2, 800e9ca <read_markers+0x5ba>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f7fb f873 	bl	8009aac <jpeg_alloc_quant_table>
 800e9c6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800e9ca:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800e9cc:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d057      	beq.n	800ea84 <read_markers+0x674>
      if (length < DCTSIZE2 * 2) {
 800e9d4:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800e9d8:	dc6c      	bgt.n	800eab4 <read_markers+0x6a4>
 800e9da:	f1ab 0202 	sub.w	r2, fp, #2
 800e9de:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e9e2:	2001      	movs	r0, #1
 800e9e4:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e9e8:	4291      	cmp	r1, r2
 800e9ea:	d1fb      	bne.n	800e9e4 <read_markers+0x5d4>
	count = length >> 1;
 800e9ec:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800e9f0:	f1b9 0f19 	cmp.w	r9, #25
 800e9f4:	d062      	beq.n	800eabc <read_markers+0x6ac>
 800e9f6:	dc53      	bgt.n	800eaa0 <read_markers+0x690>
 800e9f8:	f1b9 0f09 	cmp.w	r9, #9
 800e9fc:	d060      	beq.n	800eac0 <read_markers+0x6b0>
 800e9fe:	f1b9 0f10 	cmp.w	r9, #16
 800ea02:	d05f      	beq.n	800eac4 <read_markers+0x6b4>
    default:    natural_order = jpeg_natural_order;  break;
 800ea04:	4f85      	ldr	r7, [pc, #532]	; (800ec1c <read_markers+0x80c>)
 800ea06:	4a86      	ldr	r2, [pc, #536]	; (800ec20 <read_markers+0x810>)
 800ea08:	f1b9 0f04 	cmp.w	r9, #4
 800ea0c:	bf18      	it	ne
 800ea0e:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800ea10:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800ea14:	9302      	str	r3, [sp, #8]
 800ea16:	9b02      	ldr	r3, [sp, #8]
 800ea18:	42bb      	cmp	r3, r7
 800ea1a:	d157      	bne.n	800eacc <read_markers+0x6bc>
    if (cinfo->err->trace_level >= 2) {
 800ea1c:	6822      	ldr	r2, [r4, #0]
 800ea1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ea20:	2a01      	cmp	r2, #1
 800ea22:	dd26      	ble.n	800ea72 <read_markers+0x662>
 800ea24:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800ea28:	275f      	movs	r7, #95	; 0x5f
 800ea2a:	f8bb 1000 	ldrh.w	r1, [fp]
 800ea2e:	4620      	mov	r0, r4
 800ea30:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800ea32:	f10b 0b10 	add.w	fp, fp, #16
 800ea36:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800ea38:	6191      	str	r1, [r2, #24]
 800ea3a:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800ea3e:	61d1      	str	r1, [r2, #28]
 800ea40:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800ea44:	6211      	str	r1, [r2, #32]
 800ea46:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800ea4a:	6251      	str	r1, [r2, #36]	; 0x24
 800ea4c:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800ea50:	6291      	str	r1, [r2, #40]	; 0x28
 800ea52:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800ea56:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ea58:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800ea5c:	6311      	str	r1, [r2, #48]	; 0x30
 800ea5e:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800ea62:	6157      	str	r7, [r2, #20]
 800ea64:	6351      	str	r1, [r2, #52]	; 0x34
 800ea66:	2102      	movs	r1, #2
 800ea68:	6852      	ldr	r2, [r2, #4]
 800ea6a:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800ea6c:	9b02      	ldr	r3, [sp, #8]
 800ea6e:	459b      	cmp	fp, r3
 800ea70:	d1db      	bne.n	800ea2a <read_markers+0x61a>
    if (prec) length -= count;
 800ea72:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800ea74:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	f43f af54 	beq.w	800e926 <read_markers+0x516>
 800ea7e:	eba8 0809 	sub.w	r8, r8, r9
 800ea82:	e750      	b.n	800e926 <read_markers+0x516>
      if (length < DCTSIZE2) {
 800ea84:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800ea88:	dc14      	bgt.n	800eab4 <read_markers+0x6a4>
 800ea8a:	f1ab 0202 	sub.w	r2, fp, #2
 800ea8e:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800ea92:	2001      	movs	r0, #1
 800ea94:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800ea98:	4291      	cmp	r1, r2
 800ea9a:	d1fb      	bne.n	800ea94 <read_markers+0x684>
 800ea9c:	46c1      	mov	r9, r8
 800ea9e:	e7a7      	b.n	800e9f0 <read_markers+0x5e0>
    switch (count) {
 800eaa0:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800eaa4:	d010      	beq.n	800eac8 <read_markers+0x6b8>
    default:    natural_order = jpeg_natural_order;  break;
 800eaa6:	4f5e      	ldr	r7, [pc, #376]	; (800ec20 <read_markers+0x810>)
 800eaa8:	4b5e      	ldr	r3, [pc, #376]	; (800ec24 <read_markers+0x814>)
 800eaaa:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800eaae:	bf08      	it	eq
 800eab0:	461f      	moveq	r7, r3
 800eab2:	e7ad      	b.n	800ea10 <read_markers+0x600>
	count = DCTSIZE2;
 800eab4:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800eab8:	4f59      	ldr	r7, [pc, #356]	; (800ec20 <read_markers+0x810>)
 800eaba:	e7a9      	b.n	800ea10 <read_markers+0x600>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800eabc:	4f5a      	ldr	r7, [pc, #360]	; (800ec28 <read_markers+0x818>)
 800eabe:	e7a7      	b.n	800ea10 <read_markers+0x600>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800eac0:	4f5a      	ldr	r7, [pc, #360]	; (800ec2c <read_markers+0x81c>)
 800eac2:	e7a5      	b.n	800ea10 <read_markers+0x600>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800eac4:	4f5a      	ldr	r7, [pc, #360]	; (800ec30 <read_markers+0x820>)
 800eac6:	e7a3      	b.n	800ea10 <read_markers+0x600>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800eac8:	4f5a      	ldr	r7, [pc, #360]	; (800ec34 <read_markers+0x824>)
 800eaca:	e7a1      	b.n	800ea10 <read_markers+0x600>
      if (prec)
 800eacc:	9b01      	ldr	r3, [sp, #4]
 800eace:	b333      	cbz	r3, 800eb1e <read_markers+0x70e>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800ead0:	f1ba 0f00 	cmp.w	sl, #0
 800ead4:	d107      	bne.n	800eae6 <read_markers+0x6d6>
 800ead6:	68f3      	ldr	r3, [r6, #12]
 800ead8:	4620      	mov	r0, r4
 800eada:	4798      	blx	r3
 800eadc:	2800      	cmp	r0, #0
 800eade:	f43f ad25 	beq.w	800e52c <read_markers+0x11c>
 800eae2:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800eae6:	782a      	ldrb	r2, [r5, #0]
 800eae8:	f1ba 0301 	subs.w	r3, sl, #1
 800eaec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800eaf0:	d00a      	beq.n	800eb08 <read_markers+0x6f8>
 800eaf2:	3501      	adds	r5, #1
 800eaf4:	f815 1b01 	ldrb.w	r1, [r5], #1
 800eaf8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800eafc:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800eafe:	f857 1b04 	ldr.w	r1, [r7], #4
 800eb02:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800eb06:	e786      	b.n	800ea16 <read_markers+0x606>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800eb08:	68f3      	ldr	r3, [r6, #12]
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	9203      	str	r2, [sp, #12]
 800eb0e:	4798      	blx	r3
 800eb10:	2800      	cmp	r0, #0
 800eb12:	f43f ad0b 	beq.w	800e52c <read_markers+0x11c>
 800eb16:	9a03      	ldr	r2, [sp, #12]
 800eb18:	e9d6 5300 	ldrd	r5, r3, [r6]
 800eb1c:	e7ea      	b.n	800eaf4 <read_markers+0x6e4>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800eb1e:	f1ba 0f00 	cmp.w	sl, #0
 800eb22:	d107      	bne.n	800eb34 <read_markers+0x724>
 800eb24:	68f3      	ldr	r3, [r6, #12]
 800eb26:	4620      	mov	r0, r4
 800eb28:	4798      	blx	r3
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	f43f acfe 	beq.w	800e52c <read_markers+0x11c>
 800eb30:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800eb34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800eb38:	f815 2b01 	ldrb.w	r2, [r5], #1
 800eb3c:	e7df      	b.n	800eafe <read_markers+0x6ee>
  INPUT_VARS(cinfo);
 800eb3e:	69a7      	ldr	r7, [r4, #24]
 800eb40:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800eb42:	b353      	cbz	r3, 800eb9a <read_markers+0x78a>
  INPUT_VARS(cinfo);
 800eb44:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800eb46:	782a      	ldrb	r2, [r5, #0]
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800eb4e:	d02d      	beq.n	800ebac <read_markers+0x79c>
 800eb50:	3501      	adds	r5, #1
 800eb52:	782a      	ldrb	r2, [r5, #0]
 800eb54:	1e5e      	subs	r6, r3, #1
 800eb56:	4442      	add	r2, r8
  if (length != 4)
 800eb58:	2a04      	cmp	r2, #4
 800eb5a:	d005      	beq.n	800eb68 <read_markers+0x758>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800eb5c:	6823      	ldr	r3, [r4, #0]
 800eb5e:	220c      	movs	r2, #12
 800eb60:	4620      	mov	r0, r4
 800eb62:	615a      	str	r2, [r3, #20]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800eb68:	b34e      	cbz	r6, 800ebbe <read_markers+0x7ae>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800eb6a:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800eb6c:	f895 8000 	ldrb.w	r8, [r5]
 800eb70:	3e01      	subs	r6, #1
 800eb72:	ea4f 2908 	mov.w	r9, r8, lsl #8
 800eb76:	d02b      	beq.n	800ebd0 <read_markers+0x7c0>
 800eb78:	3501      	adds	r5, #1
 800eb7a:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800eb7e:	2254      	movs	r2, #84	; 0x54
 800eb80:	6823      	ldr	r3, [r4, #0]
 800eb82:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800eb84:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800eb86:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800eb88:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800eb8a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800eb92:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800eb96:	603d      	str	r5, [r7, #0]
 800eb98:	e653      	b.n	800e842 <read_markers+0x432>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	4798      	blx	r3
 800eba0:	2800      	cmp	r0, #0
 800eba2:	f43f acc3 	beq.w	800e52c <read_markers+0x11c>
 800eba6:	e9d7 5300 	ldrd	r5, r3, [r7]
 800ebaa:	e7cc      	b.n	800eb46 <read_markers+0x736>
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	4620      	mov	r0, r4
 800ebb0:	4798      	blx	r3
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	f43f acba 	beq.w	800e52c <read_markers+0x11c>
 800ebb8:	e9d7 5300 	ldrd	r5, r3, [r7]
 800ebbc:	e7c9      	b.n	800eb52 <read_markers+0x742>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	4798      	blx	r3
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	f43f acb1 	beq.w	800e52c <read_markers+0x11c>
 800ebca:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ebce:	e7cd      	b.n	800eb6c <read_markers+0x75c>
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	4798      	blx	r3
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	f43f aca8 	beq.w	800e52c <read_markers+0x11c>
 800ebdc:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ebe0:	e7cb      	b.n	800eb7a <read_markers+0x76a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800ebe2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800ebe6:	3bd8      	subs	r3, #216	; 0xd8
 800ebe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebec:	4620      	mov	r0, r4
 800ebee:	4798      	blx	r3
 800ebf0:	e4e2      	b.n	800e5b8 <read_markers+0x1a8>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800ebf2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ebf6:	69db      	ldr	r3, [r3, #28]
 800ebf8:	e7f8      	b.n	800ebec <read_markers+0x7dc>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800ebfa:	6822      	ldr	r2, [r4, #0]
 800ebfc:	215e      	movs	r1, #94	; 0x5e
 800ebfe:	4620      	mov	r0, r4
 800ec00:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800ec04:	6853      	ldr	r3, [r2, #4]
 800ec06:	2101      	movs	r1, #1
 800ec08:	4798      	blx	r3
      break;
 800ec0a:	e4cb      	b.n	800e5a4 <read_markers+0x194>
      if (! skip_variable(cinfo))
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f7ff fa36 	bl	800e07e <skip_variable>
 800ec12:	e4d1      	b.n	800e5b8 <read_markers+0x1a8>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800ec14:	6822      	ldr	r2, [r4, #0]
 800ec16:	2146      	movs	r1, #70	; 0x46
 800ec18:	e4df      	b.n	800e5da <read_markers+0x1ca>
 800ec1a:	bf00      	nop
 800ec1c:	0802fb48 	.word	0x0802fb48
 800ec20:	0802fa08 	.word	0x0802fa08
 800ec24:	0802fdf0 	.word	0x0802fdf0
 800ec28:	0802fc7c 	.word	0x0802fc7c
 800ec2c:	0802fb98 	.word	0x0802fb98
 800ec30:	0802fbfc 	.word	0x0802fbfc
 800ec34:	0802fd20 	.word	0x0802fd20

0800ec38 <jpeg_resync_to_restart>:
{
 800ec38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec3c:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ec3e:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800ec40:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ec44:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ec46:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ec4a:	61d9      	str	r1, [r3, #28]
 800ec4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 800ec50:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ec52:	f008 0807 	and.w	r8, r8, #7
 800ec56:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ec5a:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800ec62:	2dbf      	cmp	r5, #191	; 0xbf
 800ec64:	dd2e      	ble.n	800ecc4 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800ec66:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800ec6a:	2b07      	cmp	r3, #7
 800ec6c:	d828      	bhi.n	800ecc0 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ec6e:	4545      	cmp	r5, r8
 800ec70:	d026      	beq.n	800ecc0 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800ec72:	1cbb      	adds	r3, r7, #2
 800ec74:	f003 0307 	and.w	r3, r3, #7
 800ec78:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ec7a:	429d      	cmp	r5, r3
 800ec7c:	d020      	beq.n	800ecc0 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800ec7e:	1e7b      	subs	r3, r7, #1
 800ec80:	f003 0307 	and.w	r3, r3, #7
 800ec84:	33d0      	adds	r3, #208	; 0xd0
 800ec86:	429d      	cmp	r5, r3
 800ec88:	d01c      	beq.n	800ecc4 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800ec8a:	1ebc      	subs	r4, r7, #2
 800ec8c:	f004 0407 	and.w	r4, r4, #7
 800ec90:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800ec92:	42a5      	cmp	r5, r4
 800ec94:	bf14      	ite	ne
 800ec96:	2401      	movne	r4, #1
 800ec98:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800ec9a:	6833      	ldr	r3, [r6, #0]
 800ec9c:	2263      	movs	r2, #99	; 0x63
 800ec9e:	2104      	movs	r1, #4
 800eca0:	4630      	mov	r0, r6
 800eca2:	61dc      	str	r4, [r3, #28]
 800eca4:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	4798      	blx	r3
    switch (action) {
 800ecac:	2c02      	cmp	r4, #2
 800ecae:	d00b      	beq.n	800ecc8 <jpeg_resync_to_restart+0x90>
 800ecb0:	2c03      	cmp	r4, #3
 800ecb2:	d002      	beq.n	800ecba <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800ecba:	2001      	movs	r0, #1
}
 800ecbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800ecc0:	2403      	movs	r4, #3
 800ecc2:	e7ea      	b.n	800ec9a <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800ecc4:	2402      	movs	r4, #2
 800ecc6:	e7e8      	b.n	800ec9a <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f7ff fa13 	bl	800e0f4 <next_marker>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	d0f4      	beq.n	800ecbc <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800ecd2:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800ecd6:	e7c4      	b.n	800ec62 <jpeg_resync_to_restart+0x2a>

0800ecd8 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800ecd8:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800ecda:	6843      	ldr	r3, [r0, #4]
 800ecdc:	22ac      	movs	r2, #172	; 0xac
 800ecde:	2100      	movs	r1, #0
{
 800ece0:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800ece6:	4b11      	ldr	r3, [pc, #68]	; (800ed2c <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800ece8:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800ecec:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800ecee:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800ecf0:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800ecf4:	4b0e      	ldr	r3, [pc, #56]	; (800ed30 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800ecf6:	4a0f      	ldr	r2, [pc, #60]	; (800ed34 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800ecf8:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800ecfa:	4b0f      	ldr	r3, [pc, #60]	; (800ed38 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800ecfc:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800ecfe:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800ed00:	2300      	movs	r3, #0
 800ed02:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800ed04:	f100 0320 	add.w	r3, r0, #32
    marker->process_APPn[i] = skip_variable;
 800ed08:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < 16; i++) {
 800ed0c:	4299      	cmp	r1, r3
 800ed0e:	d1fb      	bne.n	800ed08 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800ed10:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800ed14:	2240      	movs	r2, #64	; 0x40
 800ed16:	2100      	movs	r1, #0
 800ed18:	f01b fd2c 	bl	802a774 <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800ed1c:	4b07      	ldr	r3, [pc, #28]	; (800ed3c <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800ed1e:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800ed20:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800ed22:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800ed24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800ed28:	f7ff ba59 	b.w	800e1de <reset_marker_reader>
 800ed2c:	0800e1df 	.word	0x0800e1df
 800ed30:	0800e411 	.word	0x0800e411
 800ed34:	0800e07f 	.word	0x0800e07f
 800ed38:	0800e181 	.word	0x0800e181
 800ed3c:	0800dfa9 	.word	0x0800dfa9

0800ed40 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800ed40:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800ed42:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800ed46:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800ed48:	68ab      	ldr	r3, [r5, #8]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d02a      	beq.n	800eda4 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800ed4e:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800ed50:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800ed54:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800ed5a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800ed5e:	2102      	movs	r1, #2
 800ed60:	4620      	mov	r0, r4
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800ed66:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800ed6a:	2102      	movs	r1, #2
 800ed6c:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800ed6e:	4620      	mov	r0, r4
 800ed70:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800ed72:	68a2      	ldr	r2, [r4, #8]
 800ed74:	b1aa      	cbz	r2, 800eda2 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800ed76:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800ed78:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800ed7a:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800ed7c:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800ed7e:	bf14      	ite	ne
 800ed80:	2102      	movne	r1, #2
 800ed82:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800ed84:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800ed86:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800ed88:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800ed8a:	b151      	cbz	r1, 800eda2 <prepare_for_output_pass+0x62>
 800ed8c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800ed90:	6949      	ldr	r1, [r1, #20]
 800ed92:	b931      	cbnz	r1, 800eda2 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800ed94:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ed96:	2900      	cmp	r1, #0
 800ed98:	bf14      	ite	ne
 800ed9a:	2102      	movne	r1, #2
 800ed9c:	2101      	moveq	r1, #1
 800ed9e:	440b      	add	r3, r1
 800eda0:	6113      	str	r3, [r2, #16]
    }
  }
}
 800eda2:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800eda4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800eda6:	b16b      	cbz	r3, 800edc4 <prepare_for_output_pass+0x84>
 800eda8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800edac:	b953      	cbnz	r3, 800edc4 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800edae:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d037      	beq.n	800ee24 <prepare_for_output_pass+0xe4>
 800edb4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d034      	beq.n	800ee24 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800edba:	69ab      	ldr	r3, [r5, #24]
 800edbc:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800edc0:	2301      	movs	r3, #1
 800edc2:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800edc4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800edc8:	4620      	mov	r0, r4
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800edce:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800edd2:	4620      	mov	r0, r4
 800edd4:	689b      	ldr	r3, [r3, #8]
 800edd6:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800edd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d1c9      	bne.n	800ed72 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800edde:	692b      	ldr	r3, [r5, #16]
 800ede0:	b923      	cbnz	r3, 800edec <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800ede2:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800ede6:	4620      	mov	r0, r4
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800edec:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800edf0:	4620      	mov	r0, r4
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800edf6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800edf8:	b12b      	cbz	r3, 800ee06 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800edfa:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800edfe:	4620      	mov	r0, r4
 800ee00:	68a9      	ldr	r1, [r5, #8]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800ee06:	68aa      	ldr	r2, [r5, #8]
 800ee08:	4620      	mov	r0, r4
 800ee0a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800ee0e:	2a00      	cmp	r2, #0
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	bf14      	ite	ne
 800ee14:	2103      	movne	r1, #3
 800ee16:	2100      	moveq	r1, #0
 800ee18:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800ee1a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800ee1e:	2100      	movs	r1, #0
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	e7a4      	b.n	800ed6e <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800ee24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee26:	b11b      	cbz	r3, 800ee30 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800ee28:	696b      	ldr	r3, [r5, #20]
 800ee2a:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800ee2e:	e7c9      	b.n	800edc4 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800ee30:	6823      	ldr	r3, [r4, #0]
 800ee32:	222f      	movs	r2, #47	; 0x2f
 800ee34:	4620      	mov	r0, r4
 800ee36:	615a      	str	r2, [r3, #20]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4798      	blx	r3
 800ee3c:	e7c2      	b.n	800edc4 <prepare_for_output_pass+0x84>

0800ee3e <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800ee3e:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800ee40:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800ee42:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800ee46:	b11a      	cbz	r2, 800ee50 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800ee48:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	4798      	blx	r3
  master->pass_number++;
 800ee50:	68e3      	ldr	r3, [r4, #12]
 800ee52:	3301      	adds	r3, #1
 800ee54:	60e3      	str	r3, [r4, #12]
}
 800ee56:	bd10      	pop	{r4, pc}

0800ee58 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800ee58:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800ee5a:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d143      	bne.n	800eee8 <use_merged_upsample+0x90>
 800ee60:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 800ee64:	2a00      	cmp	r2, #0
 800ee66:	d141      	bne.n	800eeec <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800ee68:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800ee6c:	2b03      	cmp	r3, #3
 800ee6e:	d139      	bne.n	800eee4 <use_merged_upsample+0x8c>
 800ee70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d136      	bne.n	800eee4 <use_merged_upsample+0x8c>
 800ee76:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	d132      	bne.n	800eee4 <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 800ee7e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800ee80:	2b03      	cmp	r3, #3
 800ee82:	d12f      	bne.n	800eee4 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800ee84:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800ee88:	6899      	ldr	r1, [r3, #8]
 800ee8a:	2902      	cmp	r1, #2
 800ee8c:	d12a      	bne.n	800eee4 <use_merged_upsample+0x8c>
 800ee8e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800ee90:	2901      	cmp	r1, #1
 800ee92:	d127      	bne.n	800eee4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800ee94:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800ee98:	2901      	cmp	r1, #1
 800ee9a:	d123      	bne.n	800eee4 <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800ee9c:	68d9      	ldr	r1, [r3, #12]
 800ee9e:	2902      	cmp	r1, #2
 800eea0:	dc20      	bgt.n	800eee4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800eea2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800eea4:	2901      	cmp	r1, #1
 800eea6:	d11d      	bne.n	800eee4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800eea8:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800eeac:	2901      	cmp	r1, #1
 800eeae:	d119      	bne.n	800eee4 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800eeb0:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 800eeb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800eeb6:	42a1      	cmp	r1, r4
 800eeb8:	d114      	bne.n	800eee4 <use_merged_upsample+0x8c>
 800eeba:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800eebc:	42a1      	cmp	r1, r4
 800eebe:	d111      	bne.n	800eee4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800eec0:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800eec4:	42a1      	cmp	r1, r4
 800eec6:	d10d      	bne.n	800eee4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800eec8:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800eecc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800eece:	4281      	cmp	r1, r0
 800eed0:	d108      	bne.n	800eee4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800eed2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800eed6:	4281      	cmp	r1, r0
 800eed8:	d104      	bne.n	800eee4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800eeda:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800eede:	1a53      	subs	r3, r2, r1
 800eee0:	425a      	negs	r2, r3
 800eee2:	415a      	adcs	r2, r3
}
 800eee4:	4610      	mov	r0, r2
 800eee6:	bd10      	pop	{r4, pc}
    return FALSE;
 800eee8:	2200      	movs	r2, #0
 800eeea:	e7fb      	b.n	800eee4 <use_merged_upsample+0x8c>
 800eeec:	461a      	mov	r2, r3
 800eeee:	e7f9      	b.n	800eee4 <use_merged_upsample+0x8c>

0800eef0 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800eef0:	6942      	ldr	r2, [r0, #20]
 800eef2:	2aca      	cmp	r2, #202	; 0xca
{
 800eef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eef8:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800eefa:	d005      	beq.n	800ef08 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800eefc:	6803      	ldr	r3, [r0, #0]
 800eefe:	2115      	movs	r1, #21
 800ef00:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800ef08:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ef0a:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800ef0c:	f7fe faf8 	bl	800d500 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ef10:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800ef14:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800ef18:	462b      	mov	r3, r5
 800ef1a:	45b4      	cmp	ip, r6
 800ef1c:	dd6b      	ble.n	800eff6 <jpeg_calc_output_dimensions+0x106>
 800ef1e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800ef20:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800ef22:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800ef26:	2a00      	cmp	r2, #0
 800ef28:	bf14      	ite	ne
 800ef2a:	2708      	movne	r7, #8
 800ef2c:	2704      	moveq	r7, #4
 800ef2e:	e00a      	b.n	800ef46 <jpeg_calc_output_dimensions+0x56>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800ef30:	689a      	ldr	r2, [r3, #8]
 800ef32:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 800ef36:	434a      	muls	r2, r1
 800ef38:	0052      	lsls	r2, r2, #1
 800ef3a:	fb9e f9f2 	sdiv	r9, lr, r2
 800ef3e:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800ef42:	b922      	cbnz	r2, 800ef4e <jpeg_calc_output_dimensions+0x5e>
      ssize = ssize * 2;
 800ef44:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800ef46:	fb01 f008 	mul.w	r0, r1, r8
 800ef4a:	42b8      	cmp	r0, r7
 800ef4c:	ddf0      	ble.n	800ef30 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800ef4e:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800ef50:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800ef54:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 800ef58:	fb08 f109 	mul.w	r1, r8, r9
 800ef5c:	42b9      	cmp	r1, r7
 800ef5e:	dd0b      	ble.n	800ef78 <jpeg_calc_output_dimensions+0x88>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800ef60:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800ef64:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800ef66:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ef6a:	dc14      	bgt.n	800ef96 <jpeg_calc_output_dimensions+0xa6>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800ef6c:	0042      	lsls	r2, r0, #1
 800ef6e:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800ef72:	bfc8      	it	gt
 800ef74:	629a      	strgt	r2, [r3, #40]	; 0x28
 800ef76:	e00f      	b.n	800ef98 <jpeg_calc_output_dimensions+0xa8>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800ef78:	68da      	ldr	r2, [r3, #12]
 800ef7a:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800ef7e:	fb02 f208 	mul.w	r2, r2, r8
 800ef82:	0052      	lsls	r2, r2, #1
 800ef84:	fb9e faf2 	sdiv	sl, lr, r2
 800ef88:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800ef8c:	2a00      	cmp	r2, #0
 800ef8e:	d1e7      	bne.n	800ef60 <jpeg_calc_output_dimensions+0x70>
      ssize = ssize * 2;
 800ef90:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800ef94:	e7e0      	b.n	800ef58 <jpeg_calc_output_dimensions+0x68>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800ef96:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800ef98:	3601      	adds	r6, #1
 800ef9a:	3358      	adds	r3, #88	; 0x58
 800ef9c:	e7bd      	b.n	800ef1a <jpeg_calc_output_dimensions+0x2a>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ef9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 800efa0:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800efa2:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800efa4:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800efa6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800efaa:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800efae:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800efb0:	69e3      	ldr	r3, [r4, #28]
 800efb2:	4351      	muls	r1, r2
 800efb4:	4358      	muls	r0, r3
 800efb6:	f007 fe71 	bl	8016c9c <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800efba:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800efbe:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800efc2:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800efc6:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800efca:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800efce:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800efd0:	6a23      	ldr	r3, [r4, #32]
 800efd2:	4351      	muls	r1, r2
 800efd4:	4358      	muls	r0, r3
 800efd6:	f007 fe61 	bl	8016c9c <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800efda:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800efde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800efe0:	42b2      	cmp	r2, r6
 800efe2:	dcdc      	bgt.n	800ef9e <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800efe4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800efe8:	2b03      	cmp	r3, #3
 800efea:	d806      	bhi.n	800effa <jpeg_calc_output_dimensions+0x10a>
 800efec:	2b01      	cmp	r3, #1
 800efee:	d809      	bhi.n	800f004 <jpeg_calc_output_dimensions+0x114>
 800eff0:	d009      	beq.n	800f006 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = cinfo->num_components;
 800eff2:	67a2      	str	r2, [r4, #120]	; 0x78
    break;
 800eff4:	e008      	b.n	800f008 <jpeg_calc_output_dimensions+0x118>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eff6:	2600      	movs	r6, #0
 800eff8:	e7f1      	b.n	800efde <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800effa:	3b04      	subs	r3, #4
 800effc:	2b01      	cmp	r3, #1
 800effe:	d8f8      	bhi.n	800eff2 <jpeg_calc_output_dimensions+0x102>
    cinfo->out_color_components = 4;
 800f000:	2304      	movs	r3, #4
 800f002:	e000      	b.n	800f006 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800f004:	2303      	movs	r3, #3
    cinfo->out_color_components = 4;
 800f006:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800f008:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f00a:	b95b      	cbnz	r3, 800f024 <jpeg_calc_output_dimensions+0x134>
 800f00c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 800f00e:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800f010:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800f012:	f7ff ff21 	bl	800ee58 <use_merged_upsample>
 800f016:	b138      	cbz	r0, 800f028 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800f018:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800f01c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800f020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800f024:	2301      	movs	r3, #1
 800f026:	e7f2      	b.n	800f00e <jpeg_calc_output_dimensions+0x11e>
    cinfo->rec_outbuf_height = 1;
 800f028:	2301      	movs	r3, #1
 800f02a:	e7f7      	b.n	800f01c <jpeg_calc_output_dimensions+0x12c>

0800f02c <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800f02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f02e:	6843      	ldr	r3, [r0, #4]
 800f030:	221c      	movs	r2, #28
 800f032:	2101      	movs	r1, #1
{
 800f034:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f036:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800f038:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f03a:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800f03c:	4b6d      	ldr	r3, [pc, #436]	; (800f1f4 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800f03e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f042:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800f044:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800f046:	4b6c      	ldr	r3, [pc, #432]	; (800f1f8 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800f048:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800f04a:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800f04c:	4620      	mov	r0, r4
 800f04e:	f7ff ff4f 	bl	800eef0 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f052:	6863      	ldr	r3, [r4, #4]
 800f054:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800f058:	2101      	movs	r1, #1
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4620      	mov	r0, r4
 800f05e:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800f060:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f064:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800f066:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800f068:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800f06c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f070:	f01b fb80 	bl	802a774 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800f074:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800f078:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800f07a:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800f07e:	3101      	adds	r1, #1
 800f080:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f084:	d1f9      	bne.n	800f07a <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 800f086:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800f08a:	21ff      	movs	r1, #255	; 0xff
 800f08c:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 800f090:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800f092:	f01b fb6f 	bl	802a774 <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800f096:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800f09a:	2100      	movs	r1, #0
 800f09c:	f507 7060 	add.w	r0, r7, #896	; 0x380
 800f0a0:	f01b fb68 	bl	802a774 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800f0a4:	2280      	movs	r2, #128	; 0x80
 800f0a6:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800f0aa:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 800f0ae:	f01b fb53 	bl	802a758 <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800f0b2:	4620      	mov	r0, r4
  master->pass_number = 0;
 800f0b4:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800f0b6:	f7ff fecf 	bl	800ee58 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800f0ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800f0bc:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800f0be:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800f0c2:	b1b3      	cbz	r3, 800f0f2 <jinit_master_decompress+0xc6>
 800f0c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f0c6:	b1a2      	cbz	r2, 800f0f2 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 800f0c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d166      	bne.n	800f19c <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 800f0ce:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f0d0:	2b03      	cmp	r3, #3
 800f0d2:	f04f 0301 	mov.w	r3, #1
 800f0d6:	d068      	beq.n	800f1aa <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 800f0d8:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800f0da:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800f0dc:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800f0e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	f006 fef1 	bl	8015ecc <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800f0ea:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f0ee:	616b      	str	r3, [r5, #20]
 800f0f0:	e062      	b.n	800f1b8 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 800f0f2:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800f0f6:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1e5      	bne.n	800f0c8 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 800f0fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f0fe:	b94b      	cbnz	r3, 800f114 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 800f100:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800f102:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800f104:	2b00      	cmp	r3, #0
 800f106:	d069      	beq.n	800f1dc <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800f108:	f000 fa1c 	bl	800f544 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800f10c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800f10e:	4620      	mov	r0, r4
 800f110:	f000 fb98 	bl	800f844 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800f114:	4620      	mov	r0, r4
 800f116:	f7fc fda7 	bl	800bc68 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800f11a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800f11e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800f120:	2b00      	cmp	r3, #0
 800f122:	d061      	beq.n	800f1e8 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 800f124:	f7fb fc16 	bl	800a954 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800f128:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800f12c:	691b      	ldr	r3, [r3, #16]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d15d      	bne.n	800f1ee <jinit_master_decompress+0x1c2>
 800f132:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f134:	3900      	subs	r1, #0
 800f136:	bf18      	it	ne
 800f138:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800f13a:	4620      	mov	r0, r4
 800f13c:	f7fc f8fc 	bl	800b338 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800f140:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f142:	b911      	cbnz	r1, 800f14a <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800f144:	4620      	mov	r0, r4
 800f146:	f7fe fca3 	bl	800da90 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800f14a:	6863      	ldr	r3, [r4, #4]
 800f14c:	4620      	mov	r0, r4
 800f14e:	699b      	ldr	r3, [r3, #24]
 800f150:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800f152:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800f156:	4620      	mov	r0, r4
 800f158:	689b      	ldr	r3, [r3, #8]
 800f15a:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800f15c:	68a2      	ldr	r2, [r4, #8]
 800f15e:	b1e2      	cbz	r2, 800f19a <jinit_master_decompress+0x16e>
 800f160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f162:	b9d3      	cbnz	r3, 800f19a <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 800f164:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800f168:	691b      	ldr	r3, [r3, #16]
 800f16a:	b1b3      	cbz	r3, 800f19a <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 800f16c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 800f170:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 800f172:	b111      	cbz	r1, 800f17a <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 800f174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f178:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800f17a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800f17e:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800f180:	434b      	muls	r3, r1
    cinfo->progress->pass_counter = 0L;
 800f182:	6050      	str	r0, [r2, #4]
    cinfo->progress->completed_passes = 0;
 800f184:	e9c2 3002 	strd	r3, r0, [r2, #8]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800f188:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f18a:	4283      	cmp	r3, r0
 800f18c:	bf14      	ite	ne
 800f18e:	2303      	movne	r3, #3
 800f190:	2302      	moveq	r3, #2
 800f192:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800f194:	68eb      	ldr	r3, [r5, #12]
 800f196:	3301      	adds	r3, #1
 800f198:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800f19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800f19c:	6823      	ldr	r3, [r4, #0]
 800f19e:	2230      	movs	r2, #48	; 0x30
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	615a      	str	r2, [r3, #20]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4798      	blx	r3
 800f1a8:	e791      	b.n	800f0ce <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 800f1aa:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800f1ae:	b17a      	cbz	r2, 800f1d0 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 800f1b0:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800f1b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d195      	bne.n	800f0e4 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800f1b8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f1ba:	b913      	cbnz	r3, 800f1c2 <jinit_master_decompress+0x196>
 800f1bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d09c      	beq.n	800f0fc <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f007 fcfe 	bl	8016bc4 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800f1c8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f1cc:	61ab      	str	r3, [r5, #24]
 800f1ce:	e795      	b.n	800f0fc <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 800f1d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f1d2:	b10a      	cbz	r2, 800f1d8 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 800f1d4:	66e3      	str	r3, [r4, #108]	; 0x6c
 800f1d6:	e7ec      	b.n	800f1b2 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 800f1d8:	6663      	str	r3, [r4, #100]	; 0x64
 800f1da:	e783      	b.n	800f0e4 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 800f1dc:	f7fc fad2 	bl	800b784 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f000 fc4f 	bl	800fa84 <jinit_upsampler>
 800f1e6:	e791      	b.n	800f10c <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 800f1e8:	f7fd fed6 	bl	800cf98 <jinit_huff_decoder>
 800f1ec:	e79c      	b.n	800f128 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800f1ee:	2101      	movs	r1, #1
 800f1f0:	e7a3      	b.n	800f13a <jinit_master_decompress+0x10e>
 800f1f2:	bf00      	nop
 800f1f4:	0800ed41 	.word	0x0800ed41
 800f1f8:	0800ee3f 	.word	0x0800ee3f

0800f1fc <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f1fc:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800f200:	2200      	movs	r2, #0
 800f202:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f204:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f206:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f208:	4770      	bx	lr

0800f20a <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800f20a:	b570      	push	{r4, r5, r6, lr}
 800f20c:	9d05      	ldr	r5, [sp, #20]
 800f20e:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800f210:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800f214:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800f216:	68de      	ldr	r6, [r3, #12]
 800f218:	9b04      	ldr	r3, [sp, #16]
 800f21a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f21e:	6822      	ldr	r2, [r4, #0]
 800f220:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800f222:	682b      	ldr	r3, [r5, #0]
 800f224:	3301      	adds	r3, #1
 800f226:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800f228:	6823      	ldr	r3, [r4, #0]
 800f22a:	3301      	adds	r3, #1
 800f22c:	6023      	str	r3, [r4, #0]
}
 800f22e:	bd70      	pop	{r4, r5, r6, pc}

0800f230 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800f230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f234:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800f238:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800f23a:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800f23e:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800f240:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800f244:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800f246:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 800f248:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800f24a:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800f24e:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f250:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800f252:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f254:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 800f256:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800f25a:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f25c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f25e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f260:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f264:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f268:	9903      	ldr	r1, [sp, #12]
 800f26a:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f26c:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800f26e:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f272:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800f276:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800f27a:	9205      	str	r2, [sp, #20]
 800f27c:	9a05      	ldr	r2, [sp, #20]
 800f27e:	3306      	adds	r3, #6
 800f280:	3102      	adds	r1, #2
 800f282:	4295      	cmp	r5, r2
 800f284:	d128      	bne.n	800f2d8 <h2v1_merged_upsample+0xa8>
 800f286:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800f288:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800f28a:	fb03 f30e 	mul.w	r3, r3, lr
 800f28e:	07d2      	lsls	r2, r2, #31
 800f290:	eb0c 0103 	add.w	r1, ip, r3
 800f294:	d51d      	bpl.n	800f2d2 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800f296:	9a04      	ldr	r2, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f298:	9802      	ldr	r0, [sp, #8]
    cred = Crrtab[cr];
 800f29a:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f29e:	782a      	ldrb	r2, [r5, #0]
 800f2a0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800f2a4:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800f2a8:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f2aa:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800f2ac:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f2ae:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cblue = Cbbtab[cb];
 800f2b2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f2b6:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800f2ba:	9a03      	ldr	r2, [sp, #12]
 800f2bc:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f2c0:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f2c2:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800f2c4:	5dbe      	ldrb	r6, [r7, r6]
 800f2c6:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f2c8:	5c80      	ldrb	r0, [r0, r2]
 800f2ca:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f2cc:	5ca2      	ldrb	r2, [r4, r2]
 800f2ce:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800f2d2:	b007      	add	sp, #28
 800f2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800f2d8:	f819 ab01 	ldrb.w	sl, [r9], #1
 800f2dc:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f2de:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 800f2e2:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f2e6:	9a02      	ldr	r2, [sp, #8]
 800f2e8:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 800f2ec:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 800f2f0:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f2f4:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 800f2f6:	9f01      	ldr	r7, [sp, #4]
 800f2f8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f2fc:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f300:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 800f304:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f308:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800f30a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f30e:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800f312:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f316:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800f31a:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800f31e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f322:	f817 700a 	ldrb.w	r7, [r7, sl]
 800f326:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f32a:	f812 200a 	ldrb.w	r2, [r2, sl]
 800f32e:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f332:	f816 200a 	ldrb.w	r2, [r6, sl]
 800f336:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f33a:	e79f      	b.n	800f27c <h2v1_merged_upsample+0x4c>

0800f33c <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800f33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f340:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800f344:	b08b      	sub	sp, #44	; 0x2c
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800f346:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800f34a:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800f34c:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800f350:	9603      	str	r6, [sp, #12]
  int * Cbbtab = upsample->Cb_b_tab;
 800f352:	696e      	ldr	r6, [r5, #20]
 800f354:	9604      	str	r6, [sp, #16]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f356:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f358:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f35a:	9605      	str	r6, [sp, #20]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f35c:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800f360:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800f364:	686d      	ldr	r5, [r5, #4]
 800f366:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f368:	9606      	str	r6, [sp, #24]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800f36a:	9507      	str	r5, [sp, #28]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f36c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f36e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f370:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f374:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f378:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800f37a:	9208      	str	r2, [sp, #32]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f37c:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800f37e:	681a      	ldr	r2, [r3, #0]
 800f380:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f38a:	9109      	str	r1, [sp, #36]	; 0x24
  inptr2 = input_buf[2][in_row_group_ctr];
 800f38c:	9908      	ldr	r1, [sp, #32]
  outptr0 = output_buf[0];
 800f38e:	9200      	str	r2, [sp, #0]
  outptr1 = output_buf[1];
 800f390:	9301      	str	r3, [sp, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f392:	9102      	str	r1, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f394:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f396:	3206      	adds	r2, #6
 800f398:	3306      	adds	r3, #6
 800f39a:	f10e 0e02 	add.w	lr, lr, #2
 800f39e:	4588      	cmp	r8, r1
 800f3a0:	f10c 0c02 	add.w	ip, ip, #2
 800f3a4:	d13a      	bne.n	800f41c <h2v2_merged_upsample+0xe0>
 800f3a6:	2306      	movs	r3, #6
 800f3a8:	9a00      	ldr	r2, [sp, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800f3aa:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f3ac:	437b      	muls	r3, r7
 800f3ae:	07c0      	lsls	r0, r0, #31
 800f3b0:	eb02 0103 	add.w	r1, r2, r3
 800f3b4:	9a01      	ldr	r2, [sp, #4]
 800f3b6:	441a      	add	r2, r3
 800f3b8:	d52d      	bpl.n	800f416 <h2v2_merged_upsample+0xda>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800f3ba:	9808      	ldr	r0, [sp, #32]
 800f3bc:	9d03      	ldr	r5, [sp, #12]
 800f3be:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f3c0:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800f3c4:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f3c8:	9d05      	ldr	r5, [sp, #20]
 800f3ca:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800f3ce:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f3d2:	eb0e 0504 	add.w	r5, lr, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f3d6:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 800f3d8:	9804      	ldr	r0, [sp, #16]
 800f3da:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f3de:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 800f3e2:	9806      	ldr	r0, [sp, #24]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f3e4:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 800f3e6:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f3ea:	f815 e000 	ldrb.w	lr, [r5, r0]
 800f3ee:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f3f2:	f81c e000 	ldrb.w	lr, [ip, r0]
 800f3f6:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f3fa:	5c21      	ldrb	r1, [r4, r0]
 800f3fc:	9800      	ldr	r0, [sp, #0]
 800f3fe:	54c1      	strb	r1, [r0, r3]
    y  = GETJSAMPLE(*inptr01);
 800f400:	9907      	ldr	r1, [sp, #28]
 800f402:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f406:	5c68      	ldrb	r0, [r5, r1]
 800f408:	7090      	strb	r0, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f40a:	f81c 0001 	ldrb.w	r0, [ip, r1]
 800f40e:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f410:	5c62      	ldrb	r2, [r4, r1]
 800f412:	9901      	ldr	r1, [sp, #4]
 800f414:	54ca      	strb	r2, [r1, r3]
  }
}
 800f416:	b00b      	add	sp, #44	; 0x2c
 800f418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800f41c:	9902      	ldr	r1, [sp, #8]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f41e:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 800f422:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f426:	f85a 6025 	ldr.w	r6, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 800f42a:	9102      	str	r1, [sp, #8]
 800f42c:	9903      	ldr	r1, [sp, #12]
 800f42e:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f432:	9905      	ldr	r1, [sp, #20]
 800f434:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 800f438:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f43c:	4431      	add	r1, r6
    cblue = Cbbtab[cb];
 800f43e:	9e04      	ldr	r6, [sp, #16]
 800f440:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f444:	eb0b 0604 	add.w	r6, fp, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f448:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f44c:	f816 b009 	ldrb.w	fp, [r6, r9]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f450:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f452:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f456:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f45a:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f45e:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f462:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800f466:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f46a:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f46e:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f472:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f476:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f47a:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f47e:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800f482:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f486:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f48a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f48e:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f492:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f496:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f49a:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800f49e:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f4a2:	f816 6009 	ldrb.w	r6, [r6, r9]
 800f4a6:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f4aa:	f811 1009 	ldrb.w	r1, [r1, r9]
 800f4ae:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f4b2:	f815 1009 	ldrb.w	r1, [r5, r9]
 800f4b6:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f4ba:	e76b      	b.n	800f394 <h2v2_merged_upsample+0x58>

0800f4bc <merged_2v_upsample>:
{
 800f4bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f4c0:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f4c4:	4616      	mov	r6, r2
 800f4c6:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800f4ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800f4cc:	f8d8 3000 	ldr.w	r3, [r8]
 800f4d0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 800f4d4:	b1dd      	cbz	r5, 800f50e <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800f4d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f4d8:	2501      	movs	r5, #1
 800f4da:	f104 0020 	add.w	r0, r4, #32
 800f4de:	9301      	str	r3, [sp, #4]
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	9500      	str	r5, [sp, #0]
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	f007 fbe6 	bl	8016cb6 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800f4ee:	f8d8 3000 	ldr.w	r3, [r8]
 800f4f2:	442b      	add	r3, r5
 800f4f4:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800f4f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4fa:	1b5b      	subs	r3, r3, r5
 800f4fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800f4fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f500:	b913      	cbnz	r3, 800f508 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800f502:	6833      	ldr	r3, [r6, #0]
 800f504:	3301      	adds	r3, #1
 800f506:	6033      	str	r3, [r6, #0]
}
 800f508:	b004      	add	sp, #16
 800f50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800f50e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800f510:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800f512:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800f514:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800f518:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800f51c:	bf28      	it	cs
 800f51e:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800f520:	9302      	str	r3, [sp, #8]
 800f522:	42bd      	cmp	r5, r7
 800f524:	bf28      	it	cs
 800f526:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800f528:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800f52a:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800f52c:	bf17      	itett	ne
 800f52e:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800f530:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800f532:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800f534:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800f536:	bf0c      	ite	eq
 800f538:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800f53a:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800f53c:	ab02      	add	r3, sp, #8
 800f53e:	6832      	ldr	r2, [r6, #0]
 800f540:	47b8      	blx	r7
 800f542:	e7d4      	b.n	800f4ee <merged_2v_upsample+0x32>

0800f544 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f544:	6843      	ldr	r3, [r0, #4]
 800f546:	2230      	movs	r2, #48	; 0x30
 800f548:	2101      	movs	r1, #1
 800f54a:	681b      	ldr	r3, [r3, #0]
{
 800f54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f550:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f552:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800f554:	4b37      	ldr	r3, [pc, #220]	; (800f634 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f556:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f558:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800f55a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800f55c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f560:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 800f562:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 800f566:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800f568:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 800f56a:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f56c:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 800f56e:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 800f570:	d15a      	bne.n	800f628 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800f572:	4b31      	ldr	r3, [pc, #196]	; (800f638 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f574:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 800f576:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800f578:	4b30      	ldr	r3, [pc, #192]	; (800f63c <jinit_merged_upsampler+0xf8>)
 800f57a:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f57c:	4620      	mov	r0, r4
 800f57e:	6863      	ldr	r3, [r4, #4]
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 800f584:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f586:	6863      	ldr	r3, [r4, #4]
 800f588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f58c:	2101      	movs	r1, #1
 800f58e:	4620      	mov	r0, r4
 800f590:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f592:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f596:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f598:	6863      	ldr	r3, [r4, #4]
 800f59a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800f59e:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f5a0:	2101      	movs	r1, #1
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f5a8:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800f5aa:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f5ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	2101      	movs	r1, #1
 800f5b4:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f5b6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800f654 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f5ba:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f5bc:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800f5be:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f5c0:	2101      	movs	r1, #1
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f5ca:	4f1d      	ldr	r7, [pc, #116]	; (800f640 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f5cc:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f5ce:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800f5d0:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f5d2:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f5d4:	f8df e080 	ldr.w	lr, [pc, #128]	; 800f658 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f5d8:	491a      	ldr	r1, [pc, #104]	; (800f644 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800f5da:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f5de:	4d1a      	ldr	r5, [pc, #104]	; (800f648 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f5e0:	fb08 e203 	mla	r2, r8, r3, lr
 800f5e4:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800f5e6:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f5ea:	fb07 f203 	mul.w	r2, r7, r3
 800f5ee:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800f5f2:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800f5f6:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800f5f8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f5fc:	fb05 f203 	mul.w	r2, r5, r3
 800f600:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800f604:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800f608:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f60c:	fb01 f203 	mul.w	r2, r1, r3
 800f610:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800f614:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800f618:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f61c:	3301      	adds	r3, #1
 800f61e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f622:	d1dd      	bne.n	800f5e0 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800f624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800f628:	4a08      	ldr	r2, [pc, #32]	; (800f64c <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 800f62a:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 800f62c:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800f62e:	4a08      	ldr	r2, [pc, #32]	; (800f650 <jinit_merged_upsampler+0x10c>)
 800f630:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 800f632:	e7a8      	b.n	800f586 <jinit_merged_upsampler+0x42>
 800f634:	0800f1fd 	.word	0x0800f1fd
 800f638:	0800f4bd 	.word	0x0800f4bd
 800f63c:	0800f33d 	.word	0x0800f33d
 800f640:	0001c5a2 	.word	0x0001c5a2
 800f644:	ffffa7e6 	.word	0xffffa7e6
 800f648:	ffff492e 	.word	0xffff492e
 800f64c:	0800f20b 	.word	0x0800f20b
 800f650:	0800f231 	.word	0x0800f231
 800f654:	000166e9 	.word	0x000166e9
 800f658:	ff4d0b80 	.word	0xff4d0b80

0800f65c <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800f65c:	2902      	cmp	r1, #2
{
 800f65e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f660:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800f664:	d023      	beq.n	800f6ae <start_pass_dpost+0x52>
 800f666:	2903      	cmp	r1, #3
 800f668:	d019      	beq.n	800f69e <start_pass_dpost+0x42>
 800f66a:	2900      	cmp	r1, #0
 800f66c:	d128      	bne.n	800f6c0 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800f66e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f670:	b182      	cbz	r2, 800f694 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800f672:	4a16      	ldr	r2, [pc, #88]	; (800f6cc <start_pass_dpost+0x70>)
 800f674:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800f676:	68e2      	ldr	r2, [r4, #12]
 800f678:	b93a      	cbnz	r2, 800f68a <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800f67a:	6843      	ldr	r3, [r0, #4]
 800f67c:	2101      	movs	r1, #1
 800f67e:	9100      	str	r1, [sp, #0]
 800f680:	69dd      	ldr	r5, [r3, #28]
 800f682:	68a1      	ldr	r1, [r4, #8]
 800f684:	6923      	ldr	r3, [r4, #16]
 800f686:	47a8      	blx	r5
 800f688:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800f68a:	2300      	movs	r3, #0
 800f68c:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800f690:	b003      	add	sp, #12
 800f692:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800f694:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800f698:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800f69a:	6063      	str	r3, [r4, #4]
    break;
 800f69c:	e7f5      	b.n	800f68a <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800f69e:	68a2      	ldr	r2, [r4, #8]
 800f6a0:	b91a      	cbnz	r2, 800f6aa <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f6a2:	6803      	ldr	r3, [r0, #0]
 800f6a4:	6159      	str	r1, [r3, #20]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800f6aa:	4b09      	ldr	r3, [pc, #36]	; (800f6d0 <start_pass_dpost+0x74>)
 800f6ac:	e7f5      	b.n	800f69a <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800f6ae:	68a2      	ldr	r2, [r4, #8]
 800f6b0:	b922      	cbnz	r2, 800f6bc <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f6b2:	6803      	ldr	r3, [r0, #0]
 800f6b4:	2203      	movs	r2, #3
 800f6b6:	615a      	str	r2, [r3, #20]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800f6bc:	4b05      	ldr	r3, [pc, #20]	; (800f6d4 <start_pass_dpost+0x78>)
 800f6be:	e7ec      	b.n	800f69a <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f6c0:	6803      	ldr	r3, [r0, #0]
 800f6c2:	2203      	movs	r2, #3
 800f6c4:	615a      	str	r2, [r3, #20]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4798      	blx	r3
    break;
 800f6ca:	e7de      	b.n	800f68a <start_pass_dpost+0x2e>
 800f6cc:	0800f6d9 	.word	0x0800f6d9
 800f6d0:	0800f739 	.word	0x0800f739
 800f6d4:	0800f7c7 	.word	0x0800f7c7

0800f6d8 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6dc:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f6de:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800f6e6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f6e8:	682f      	ldr	r7, [r5, #0]
 800f6ea:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800f6ec:	2700      	movs	r7, #0
 800f6ee:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800f6f0:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800f6f4:	9705      	str	r7, [sp, #20]
 800f6f6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f6fa:	42be      	cmp	r6, r7
 800f6fc:	bf94      	ite	ls
 800f6fe:	9602      	strls	r6, [sp, #8]
 800f700:	9702      	strhi	r7, [sp, #8]
 800f702:	ae07      	add	r6, sp, #28
 800f704:	9601      	str	r6, [sp, #4]
 800f706:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800f70a:	9600      	str	r6, [sp, #0]
 800f70c:	9e05      	ldr	r6, [sp, #20]
 800f70e:	6876      	ldr	r6, [r6, #4]
 800f710:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800f712:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f714:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f718:	4620      	mov	r0, r4
 800f71a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f71c:	685e      	ldr	r6, [r3, #4]
 800f71e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f722:	9b07      	ldr	r3, [sp, #28]
 800f724:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800f728:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800f72a:	682b      	ldr	r3, [r5, #0]
 800f72c:	9a07      	ldr	r2, [sp, #28]
 800f72e:	4413      	add	r3, r2
 800f730:	602b      	str	r3, [r5, #0]
}
 800f732:	b008      	add	sp, #32
 800f734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f738 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f73c:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f740:	b085      	sub	sp, #20
 800f742:	469a      	mov	sl, r3
 800f744:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f746:	69a3      	ldr	r3, [r4, #24]
{
 800f748:	460e      	mov	r6, r1
 800f74a:	4691      	mov	r9, r2
 800f74c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800f750:	b943      	cbnz	r3, 800f764 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f752:	6843      	ldr	r3, [r0, #4]
 800f754:	2201      	movs	r2, #1
 800f756:	9200      	str	r2, [sp, #0]
 800f758:	69df      	ldr	r7, [r3, #28]
 800f75a:	68a1      	ldr	r1, [r4, #8]
 800f75c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f760:	47b8      	blx	r7
 800f762:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800f764:	6922      	ldr	r2, [r4, #16]
 800f766:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800f768:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800f76a:	4628      	mov	r0, r5
 800f76c:	9202      	str	r2, [sp, #8]
 800f76e:	f104 0218 	add.w	r2, r4, #24
 800f772:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800f776:	9201      	str	r2, [sp, #4]
 800f778:	68e2      	ldr	r2, [r4, #12]
 800f77a:	9200      	str	r2, [sp, #0]
 800f77c:	464a      	mov	r2, r9
 800f77e:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800f782:	4653      	mov	r3, sl
 800f784:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800f786:	69a6      	ldr	r6, [r4, #24]
 800f788:	42be      	cmp	r6, r7
 800f78a:	d910      	bls.n	800f7ae <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f78c:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800f790:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f792:	68e1      	ldr	r1, [r4, #12]
 800f794:	2200      	movs	r2, #0
 800f796:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f79a:	4628      	mov	r0, r5
 800f79c:	4633      	mov	r3, r6
 800f79e:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800f7a2:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800f7a4:	f8d8 3000 	ldr.w	r3, [r8]
 800f7a8:	4433      	add	r3, r6
 800f7aa:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800f7ae:	6922      	ldr	r2, [r4, #16]
 800f7b0:	69a3      	ldr	r3, [r4, #24]
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d304      	bcc.n	800f7c0 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800f7b6:	6963      	ldr	r3, [r4, #20]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	61a3      	str	r3, [r4, #24]
  }
}
 800f7c0:	b005      	add	sp, #20
 800f7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f7c6 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f7c6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f7ca:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f7ce:	4607      	mov	r7, r0
 800f7d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f7d2:	69a3      	ldr	r3, [r4, #24]
 800f7d4:	b93b      	cbnz	r3, 800f7e6 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f7d6:	6842      	ldr	r2, [r0, #4]
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	69d5      	ldr	r5, [r2, #28]
 800f7dc:	68a1      	ldr	r1, [r4, #8]
 800f7de:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f7e2:	47a8      	blx	r5
 800f7e4:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800f7e6:	6963      	ldr	r3, [r4, #20]
 800f7e8:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f7ea:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800f7ec:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f7ee:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f7f0:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f7f2:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f7f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f7f6:	429d      	cmp	r5, r3
 800f7f8:	bf28      	it	cs
 800f7fa:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f7fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7fe:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f800:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f804:	429d      	cmp	r5, r3
 800f806:	bf28      	it	cs
 800f808:	461d      	movcs	r5, r3
 800f80a:	68e3      	ldr	r3, [r4, #12]
 800f80c:	9303      	str	r3, [sp, #12]
 800f80e:	9803      	ldr	r0, [sp, #12]
 800f810:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800f814:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f818:	4638      	mov	r0, r7
 800f81a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800f81e:	462b      	mov	r3, r5
 800f820:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800f822:	6833      	ldr	r3, [r6, #0]
 800f824:	442b      	add	r3, r5
 800f826:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800f828:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f82a:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800f82c:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800f82e:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800f830:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f832:	d304      	bcc.n	800f83e <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800f834:	6963      	ldr	r3, [r4, #20]
 800f836:	4413      	add	r3, r2
 800f838:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f83a:	2300      	movs	r3, #0
 800f83c:	61a3      	str	r3, [r4, #24]
  }
}
 800f83e:	b004      	add	sp, #16
 800f840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f844 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f844:	6843      	ldr	r3, [r0, #4]
 800f846:	221c      	movs	r2, #28
{
 800f848:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f84a:	681b      	ldr	r3, [r3, #0]
{
 800f84c:	b085      	sub	sp, #20
 800f84e:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f850:	2101      	movs	r1, #1
{
 800f852:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f854:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800f856:	4b15      	ldr	r3, [pc, #84]	; (800f8ac <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800f858:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800f85a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f85e:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800f860:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800f862:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800f864:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800f868:	b1bb      	cbz	r3, 800f89a <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f86a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f86e:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f870:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f872:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f874:	6861      	ldr	r1, [r4, #4]
 800f876:	4342      	muls	r2, r0
    if (need_full_buffer) {
 800f878:	b18f      	cbz	r7, 800f89e <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f87a:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800f87c:	4619      	mov	r1, r3
 800f87e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f880:	9203      	str	r2, [sp, #12]
 800f882:	f007 fa10 	bl	8016ca6 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f886:	692b      	ldr	r3, [r5, #16]
 800f888:	2101      	movs	r1, #1
 800f88a:	9a03      	ldr	r2, [sp, #12]
 800f88c:	e9cd 0300 	strd	r0, r3, [sp]
 800f890:	4613      	mov	r3, r2
 800f892:	4620      	mov	r0, r4
 800f894:	4632      	mov	r2, r6
 800f896:	47b8      	blx	r7
 800f898:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800f89a:	b005      	add	sp, #20
 800f89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800f89e:	688e      	ldr	r6, [r1, #8]
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	2101      	movs	r1, #1
 800f8a4:	47b0      	blx	r6
 800f8a6:	60e8      	str	r0, [r5, #12]
}
 800f8a8:	e7f7      	b.n	800f89a <jinit_d_post_controller+0x56>
 800f8aa:	bf00      	nop
 800f8ac:	0800f65d 	.word	0x0800f65d

0800f8b0 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f8b0:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f8b4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f8b8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f8ba:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f8bc:	661a      	str	r2, [r3, #96]	; 0x60
}
 800f8be:	4770      	bx	lr

0800f8c0 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800f8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f8c4:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f8c8:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f8ca:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 800f8ce:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f8d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800f8d2:	4683      	mov	fp, r0
 800f8d4:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	db10      	blt.n	800f8fc <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f8da:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800f8de:	2600      	movs	r6, #0
 800f8e0:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800f8e4:	9303      	str	r3, [sp, #12]
 800f8e6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f8ea:	9a03      	ldr	r2, [sp, #12]
 800f8ec:	fb0a 2106 	mla	r1, sl, r6, r2
 800f8f0:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800f8f4:	42b2      	cmp	r2, r6
 800f8f6:	dc32      	bgt.n	800f95e <sep_upsample+0x9e>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800f8fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f8fe:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f900:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f902:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f90a:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 800f90e:	1ace      	subs	r6, r1, r3
 800f910:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f912:	428e      	cmp	r6, r1
 800f914:	bf28      	it	cs
 800f916:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f918:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800f91c:	4566      	cmp	r6, ip
 800f91e:	bf28      	it	cs
 800f920:	4666      	movcs	r6, ip
 800f922:	9600      	str	r6, [sp, #0]
 800f924:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800f928:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f92a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f92e:	f104 010c 	add.w	r1, r4, #12
 800f932:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800f934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4433      	add	r3, r6
 800f93c:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800f93e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f940:	1b9b      	subs	r3, r3, r6
 800f942:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800f944:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f946:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800f948:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800f94c:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800f94e:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800f950:	bfa2      	ittt	ge
 800f952:	682b      	ldrge	r3, [r5, #0]
 800f954:	3301      	addge	r3, #1
 800f956:	602b      	strge	r3, [r5, #0]
}
 800f958:	b005      	add	sp, #20
 800f95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800f95e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f960:	f103 0904 	add.w	r9, r3, #4
 800f964:	682a      	ldr	r2, [r5, #0]
 800f966:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800f968:	f853 0928 	ldr.w	r0, [r3], #-40
 800f96c:	4607      	mov	r7, r0
 800f96e:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800f972:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800f974:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f978:	4658      	mov	r0, fp
 800f97a:	47b8      	blx	r7
	 ci++, compptr++) {
 800f97c:	464b      	mov	r3, r9
 800f97e:	e7b4      	b.n	800f8ea <sep_upsample+0x2a>

0800f980 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800f980:	601a      	str	r2, [r3, #0]
}
 800f982:	4770      	bx	lr

0800f984 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800f984:	2200      	movs	r2, #0
 800f986:	601a      	str	r2, [r3, #0]
}
 800f988:	4770      	bx	lr

0800f98a <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f98a:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800f98c:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f98e:	2300      	movs	r3, #0
 800f990:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800f994:	4299      	cmp	r1, r3
 800f996:	dc00      	bgt.n	800f99a <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800f998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800f99a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f99e:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800f9a0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f9a4:	440c      	add	r4, r1
    while (outptr < outend) {
 800f9a6:	42a1      	cmp	r1, r4
 800f9a8:	d301      	bcc.n	800f9ae <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	e7f0      	b.n	800f990 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f9ae:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800f9b2:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800f9b6:	f801 6c01 	strb.w	r6, [r1, #-1]
 800f9ba:	e7f4      	b.n	800f9a6 <h2v1_upsample+0x1c>

0800f9bc <int_upsample>:
{
 800f9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c0:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800f9c2:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f9c4:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 800f9c8:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 800f9ca:	684b      	ldr	r3, [r1, #4]
 800f9cc:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 800f9ce:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 800f9d0:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 800f9d2:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800f9d6:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f9da:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800f9de:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 800f9e0:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f9e4:	42a3      	cmp	r3, r4
 800f9e6:	dc02      	bgt.n	800f9ee <int_upsample+0x32>
}
 800f9e8:	b005      	add	sp, #20
 800f9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 800f9ee:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f9f2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f9f4:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800f9f8:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 800f9fc:	454b      	cmp	r3, r9
 800f9fe:	d30e      	bcc.n	800fa1e <int_upsample+0x62>
    if (v_expand > 1) {
 800fa00:	f1b8 0f01 	cmp.w	r8, #1
 800fa04:	dd09      	ble.n	800fa1a <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800fa06:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fa08:	463a      	mov	r2, r7
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	4638      	mov	r0, r7
 800fa0e:	9301      	str	r3, [sp, #4]
 800fa10:	9b03      	ldr	r3, [sp, #12]
 800fa12:	9300      	str	r3, [sp, #0]
 800fa14:	1c63      	adds	r3, r4, #1
 800fa16:	f007 f94e 	bl	8016cb6 <jcopy_sample_rows>
    outrow += v_expand;
 800fa1a:	4444      	add	r4, r8
 800fa1c:	e7e0      	b.n	800f9e0 <int_upsample+0x24>
	*outptr++ = invalue;
 800fa1e:	4618      	mov	r0, r3
 800fa20:	4652      	mov	r2, sl
 800fa22:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800fa26:	f01a fea5 	bl	802a774 <memset>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	4453      	add	r3, sl
 800fa2e:	e7e5      	b.n	800f9fc <int_upsample+0x40>

0800fa30 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800fa30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fa34:	4605      	mov	r5, r0
 800fa36:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800fa38:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800fa3a:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800fa3c:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800fa40:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800fa44:	42a3      	cmp	r3, r4
 800fa46:	dc02      	bgt.n	800fa4e <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800fa48:	b002      	add	sp, #8
 800fa4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800fa4e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800fa52:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800fa54:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800fa58:	441a      	add	r2, r3
    while (outptr < outend) {
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d30a      	bcc.n	800fa74 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800fa5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fa60:	4621      	mov	r1, r4
 800fa62:	4632      	mov	r2, r6
 800fa64:	4630      	mov	r0, r6
 800fa66:	e9cd 8300 	strd	r8, r3, [sp]
 800fa6a:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800fa6c:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800fa6e:	f007 f922 	bl	8016cb6 <jcopy_sample_rows>
    outrow += 2;
 800fa72:	e7e5      	b.n	800fa40 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800fa74:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800fa78:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800fa7c:	f803 0c01 	strb.w	r0, [r3, #-1]
 800fa80:	e7eb      	b.n	800fa5a <h2v2_upsample+0x2a>
	...

0800fa84 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800fa84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fa88:	6843      	ldr	r3, [r0, #4]
 800fa8a:	22a0      	movs	r2, #160	; 0xa0
 800fa8c:	2101      	movs	r1, #1
{
 800fa8e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800fa94:	4b3f      	ldr	r3, [pc, #252]	; (800fb94 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800fa96:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fa9a:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800fa9c:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800fa9e:	4b3e      	ldr	r3, [pc, #248]	; (800fb98 <jinit_upsampler+0x114>)
 800faa0:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800faa2:	2300      	movs	r3, #0
 800faa4:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800faa6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800faaa:	b12b      	cbz	r3, 800fab8 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800faac:	6823      	ldr	r3, [r4, #0]
 800faae:	221a      	movs	r2, #26
 800fab0:	4620      	mov	r0, r4
 800fab2:	615a      	str	r2, [r3, #20]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fab8:	f105 060c 	add.w	r6, r5, #12
 800fabc:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800fac0:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800fac4:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800fac8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800fba8 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800facc:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800fad0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800fbac <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fad4:	3574      	adds	r5, #116	; 0x74
 800fad6:	eb05 0308 	add.w	r3, r5, r8
 800fada:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fadc:	429a      	cmp	r2, r3
 800fade:	dc01      	bgt.n	800fae4 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800fae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800fae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fae6:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800fae8:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800faec:	4343      	muls	r3, r0
 800faee:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800faf2:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800faf6:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800fafa:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800fafe:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800fb02:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800fb04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb06:	b932      	cbnz	r2, 800fb16 <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800fb08:	4b24      	ldr	r3, [pc, #144]	; (800fb9c <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800fb0a:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800fb0c:	3758      	adds	r7, #88	; 0x58
 800fb0e:	3604      	adds	r6, #4
 800fb10:	f108 0801 	add.w	r8, r8, #1
 800fb14:	e7df      	b.n	800fad6 <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800fb16:	fb0c f20e 	mul.w	r2, ip, lr
 800fb1a:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800fb1e:	4559      	cmp	r1, fp
 800fb20:	d103      	bne.n	800fb2a <jinit_upsampler+0xa6>
 800fb22:	4283      	cmp	r3, r0
 800fb24:	d101      	bne.n	800fb2a <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800fb26:	4b1e      	ldr	r3, [pc, #120]	; (800fba0 <jinit_upsampler+0x11c>)
 800fb28:	e7ef      	b.n	800fb0a <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800fb2a:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 800fb2e:	d119      	bne.n	800fb64 <jinit_upsampler+0xe0>
 800fb30:	4283      	cmp	r3, r0
 800fb32:	d111      	bne.n	800fb58 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800fb34:	4b1b      	ldr	r3, [pc, #108]	; (800fba4 <jinit_upsampler+0x120>)
 800fb36:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fb38:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800fb3a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800fb3e:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fb40:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800fb44:	f007 f8af 	bl	8016ca6 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fb48:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800fb4c:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fb4e:	2101      	movs	r1, #1
 800fb50:	4620      	mov	r0, r4
 800fb52:	47d8      	blx	fp
 800fb54:	6030      	str	r0, [r6, #0]
 800fb56:	e7d9      	b.n	800fb0c <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800fb58:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800fb5c:	d102      	bne.n	800fb64 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800fb5e:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800fb62:	e7e9      	b.n	800fb38 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800fb64:	fb9b f2f1 	sdiv	r2, fp, r1
 800fb68:	fb01 b112 	mls	r1, r1, r2, fp
 800fb6c:	b959      	cbnz	r1, 800fb86 <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800fb6e:	fb90 f1f3 	sdiv	r1, r0, r3
 800fb72:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800fb76:	b933      	cbnz	r3, 800fb86 <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800fb78:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800fb7c:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800fb80:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 800fb84:	e7d8      	b.n	800fb38 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800fb86:	6823      	ldr	r3, [r4, #0]
 800fb88:	2227      	movs	r2, #39	; 0x27
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	615a      	str	r2, [r3, #20]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4798      	blx	r3
    if (need_buffer) {
 800fb92:	e7d1      	b.n	800fb38 <jinit_upsampler+0xb4>
 800fb94:	0800f8b1 	.word	0x0800f8b1
 800fb98:	0800f8c1 	.word	0x0800f8c1
 800fb9c:	0800f985 	.word	0x0800f985
 800fba0:	0800f981 	.word	0x0800f981
 800fba4:	0800f98b 	.word	0x0800f98b
 800fba8:	0800f9bd 	.word	0x0800f9bd
 800fbac:	0800fa31 	.word	0x0800fa31

0800fbb0 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800fbb0:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800fbb2:	6803      	ldr	r3, [r0, #0]
{
 800fbb4:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	4669      	mov	r1, sp
 800fbba:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800fbbc:	b033      	add	sp, #204	; 0xcc
 800fbbe:	f85d fb04 	ldr.w	pc, [sp], #4

0800fbc2 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800fbc2:	2900      	cmp	r1, #0
{
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800fbc8:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800fbca:	da0b      	bge.n	800fbe4 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800fbcc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800fbce:	b112      	cbz	r2, 800fbd6 <emit_message+0x14>
 800fbd0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800fbd2:	2a02      	cmp	r2, #2
 800fbd4:	dd02      	ble.n	800fbdc <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800fbd6:	68a2      	ldr	r2, [r4, #8]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800fbdc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fbde:	3301      	adds	r3, #1
 800fbe0:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800fbe2:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800fbe4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800fbe6:	428b      	cmp	r3, r1
 800fbe8:	dbfb      	blt.n	800fbe2 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800fbea:	68a3      	ldr	r3, [r4, #8]
}
 800fbec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800fbf0:	4718      	bx	r3

0800fbf2 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800fbf2:	6803      	ldr	r3, [r0, #0]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800fbf8:	615a      	str	r2, [r3, #20]
}
 800fbfa:	4770      	bx	lr

0800fbfc <format_message>:
{
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800fc00:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800fc02:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800fc04:	2b00      	cmp	r3, #0
{
 800fc06:	b530      	push	{r4, r5, lr}
 800fc08:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800fc0a:	dd1f      	ble.n	800fc4c <format_message+0x50>
 800fc0c:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800fc0e:	4299      	cmp	r1, r3
 800fc10:	db1c      	blt.n	800fc4c <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800fc12:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800fc14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800fc18:	b911      	cbnz	r1, 800fc20 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800fc1a:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800fc1c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800fc1e:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800fc20:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800fc22:	f813 4b01 	ldrb.w	r4, [r3], #1
 800fc26:	b9fc      	cbnz	r4, 800fc68 <format_message+0x6c>
    sprintf(buffer, msgtext,
 800fc28:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fc2a:	9305      	str	r3, [sp, #20]
 800fc2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800fc2e:	9304      	str	r3, [sp, #16]
 800fc30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800fc32:	9303      	str	r3, [sp, #12]
 800fc34:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800fc36:	9302      	str	r3, [sp, #8]
 800fc38:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fc3a:	9301      	str	r3, [sp, #4]
 800fc3c:	6a13      	ldr	r3, [r2, #32]
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800fc44:	f01b f9c0 	bl	802afc8 <siprintf>
}
 800fc48:	b007      	add	sp, #28
 800fc4a:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800fc4c:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800fc4e:	2c00      	cmp	r4, #0
 800fc50:	d0e3      	beq.n	800fc1a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800fc52:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800fc54:	4299      	cmp	r1, r3
 800fc56:	dce0      	bgt.n	800fc1a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800fc58:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800fc5c:	429d      	cmp	r5, r3
 800fc5e:	dbdc      	blt.n	800fc1a <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800fc60:	1a59      	subs	r1, r3, r1
 800fc62:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800fc66:	e7d7      	b.n	800fc18 <format_message+0x1c>
    if (ch == '%') {
 800fc68:	2c25      	cmp	r4, #37	; 0x25
 800fc6a:	d1da      	bne.n	800fc22 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	2b73      	cmp	r3, #115	; 0x73
 800fc70:	d1da      	bne.n	800fc28 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800fc72:	3218      	adds	r2, #24
}
 800fc74:	b007      	add	sp, #28
 800fc76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800fc7a:	f01b b9a5 	b.w	802afc8 <siprintf>

0800fc7e <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800fc7e:	6803      	ldr	r3, [r0, #0]
{
 800fc80:	b510      	push	{r4, lr}
 800fc82:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800fc88:	4620      	mov	r0, r4
}
 800fc8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800fc8e:	f7f9 bf03 	b.w	8009a98 <jpeg_destroy>
	...

0800fc94 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800fc94:	4a0a      	ldr	r2, [pc, #40]	; (800fcc0 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800fc96:	490b      	ldr	r1, [pc, #44]	; (800fcc4 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800fc98:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800fc9a:	4a0b      	ldr	r2, [pc, #44]	; (800fcc8 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800fc9c:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800fc9e:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800fca0:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800fca2:	4a0a      	ldr	r2, [pc, #40]	; (800fccc <jpeg_std_error+0x38>)
 800fca4:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800fca6:	4a0a      	ldr	r2, [pc, #40]	; (800fcd0 <jpeg_std_error+0x3c>)
 800fca8:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800fcaa:	4a0a      	ldr	r2, [pc, #40]	; (800fcd4 <jpeg_std_error+0x40>)
 800fcac:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800fcae:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800fcb0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800fcb4:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800fcb6:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800fcba:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800fcbe:	4770      	bx	lr
 800fcc0:	0800fc7f 	.word	0x0800fc7f
 800fcc4:	0802f6ec 	.word	0x0802f6ec
 800fcc8:	0800fbc3 	.word	0x0800fbc3
 800fccc:	0800fbb1 	.word	0x0800fbb1
 800fcd0:	0800fbfd 	.word	0x0800fbfd
 800fcd4:	0800fbf3 	.word	0x0800fbf3

0800fcd8 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800fcdc:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800fce0:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800fce2:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fce6:	3a02      	subs	r2, #2
 800fce8:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800fcec:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fcee:	ed9f 5abd 	vldr	s10, [pc, #756]	; 800ffe4 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fcf2:	ed9f 4abd 	vldr	s8, [pc, #756]	; 800ffe8 <jpeg_idct_float+0x310>
 800fcf6:	eddf 4abd 	vldr	s9, [pc, #756]	; 800ffec <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fcfa:	eddf 3abd 	vldr	s7, [pc, #756]	; 800fff0 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fcfe:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 800fd02:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fd04:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fd08:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800fd0c:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fd10:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800fd14:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800fd18:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fd1c:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800fd20:	ecbc 7a01 	vldmia	ip!, {s14}
 800fd24:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fd28:	ea4e 0b09 	orr.w	fp, lr, r9
 800fd2c:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fd30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fd34:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fd38:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fd3c:	ea41 0b0b 	orr.w	fp, r1, fp
 800fd40:	ea45 0b0b 	orr.w	fp, r5, fp
 800fd44:	ea50 0b0b 	orrs.w	fp, r0, fp
 800fd48:	f040 80c0 	bne.w	800fecc <jpeg_idct_float+0x1f4>
      wsptr[DCTSIZE*0] = dcval;
 800fd4c:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800fd50:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800fd54:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800fd58:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800fd5c:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800fd60:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800fd64:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800fd68:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fd6c:	45e2      	cmp	sl, ip
 800fd6e:	d1c6      	bne.n	800fcfe <jpeg_idct_float+0x26>
 800fd70:	1f1c      	subs	r4, r3, #4
 800fd72:	f103 001c 	add.w	r0, r3, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800fd76:	466a      	mov	r2, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fd78:	eddf 2a9e 	vldr	s5, [pc, #632]	; 800fff4 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fd7c:	eddf 4a99 	vldr	s9, [pc, #612]	; 800ffe4 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fd80:	ed9f 3a99 	vldr	s6, [pc, #612]	; 800ffe8 <jpeg_idct_float+0x310>
 800fd84:	ed9f 4a99 	vldr	s8, [pc, #612]	; 800ffec <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fd88:	eddf 3a99 	vldr	s7, [pc, #612]	; 800fff0 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fd8c:	edd2 5a00 	vldr	s11, [r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800fd90:	3220      	adds	r2, #32
    tmp10 = z5 + wsptr[4];
 800fd92:	ed52 7a04 	vldr	s15, [r2, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fd96:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 800fd9a:	ed52 6a02 	vldr	s13, [r2, #-8]
    z11 = wsptr[1] + wsptr[7];
 800fd9e:	ed12 1a01 	vldr	s2, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 800fda2:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 800fda6:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr = output_buf[ctr] + output_col;
 800fdaa:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800fdac:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 800fdb0:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800fdb4:	18e9      	adds	r1, r5, r3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fdb6:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 800fdb8:	ee37 7aa6 	vadd.f32	s14, s15, s13
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fdbc:	42a0      	cmp	r0, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fdbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fdc2:	eeb0 2a47 	vmov.f32	s4, s14
    tmp0 = tmp10 + tmp13;
 800fdc6:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 800fdca:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 800fdce:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fdd2:	ee97 2aa4 	vfnms.f32	s4, s15, s9
    z13 = wsptr[5] + wsptr[3];
 800fdd6:	ed52 7a03 	vldr	s15, [r2, #-12]
 800fdda:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 800fdde:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 800fde2:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 800fde6:	ee75 6a82 	vadd.f32	s13, s11, s4
    tmp2 = tmp11 - tmp12;
 800fdea:	ee75 5ac2 	vsub.f32	s11, s11, s4
    z11 = wsptr[1] + wsptr[7];
 800fdee:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 800fdf2:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 800fdf6:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800fdfa:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800fdfe:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fe02:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fe06:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fe0a:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fe0e:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 800fe12:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 800fe16:	eef0 1a67 	vmov.f32	s3, s15
 800fe1a:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fe1e:	ee36 2a01 	vadd.f32	s4, s12, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fe22:	ee36 6a41 	vsub.f32	s12, s12, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fe26:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fe2a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tmp4 = tmp10 - tmp5;
 800fe2e:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fe32:	ee12 3a10 	vmov	r3, s4
 800fe36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fe3a:	5cf3      	ldrb	r3, [r6, r3]
 800fe3c:	55eb      	strb	r3, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fe3e:	ee16 3a10 	vmov	r3, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fe42:	ee36 6aa7 	vadd.f32	s12, s13, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fe46:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fe4a:	ee76 6ae7 	vsub.f32	s13, s13, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fe4e:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fe52:	5cf3      	ldrb	r3, [r6, r3]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fe54:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fe58:	71cb      	strb	r3, [r1, #7]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fe5a:	ee75 6aa1 	vadd.f32	s13, s11, s3
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fe5e:	ee16 3a10 	vmov	r3, s12
 800fe62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fe66:	5cf3      	ldrb	r3, [r6, r3]
 800fe68:	704b      	strb	r3, [r1, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fe6a:	ee17 3a90 	vmov	r3, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fe6e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fe72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fe76:	5cf3      	ldrb	r3, [r6, r3]
 800fe78:	718b      	strb	r3, [r1, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fe7a:	ee17 3a90 	vmov	r3, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fe7e:	ee75 7ae1 	vsub.f32	s15, s11, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fe82:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fe86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fe8a:	5cf3      	ldrb	r3, [r6, r3]
 800fe8c:	708b      	strb	r3, [r1, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fe8e:	ee17 3a90 	vmov	r3, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800fe92:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800fe96:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fe9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800fe9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fea2:	5cf3      	ldrb	r3, [r6, r3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800fea4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fea8:	714b      	strb	r3, [r1, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800feaa:	ee17 3a90 	vmov	r3, s15
 800feae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800feb2:	5cf3      	ldrb	r3, [r6, r3]
 800feb4:	70cb      	strb	r3, [r1, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800feb6:	ee17 3a10 	vmov	r3, s14
 800feba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800febe:	5cf3      	ldrb	r3, [r6, r3]
 800fec0:	710b      	strb	r3, [r1, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fec2:	f47f af63 	bne.w	800fd8c <jpeg_idct_float+0xb4>
  }
}
 800fec6:	b041      	add	sp, #260	; 0x104
 800fec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fecc:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fed0:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fed4:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fed8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fedc:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fee0:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fee4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fee8:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800feec:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fef0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fef4:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fef8:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fefc:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800ff00:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 800ff04:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800ff08:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800ff0c:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800ff10:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800ff14:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800ff18:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800ff1c:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 800ff20:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800ff24:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800ff28:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 800ff2c:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 800ff30:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ff34:	ee07 ea90 	vmov	s15, lr
 800ff38:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800ff3c:	ee07 8a90 	vmov	s15, r8
 800ff40:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800ff44:	ee07 1a90 	vmov	s15, r1
 800ff48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff4c:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800ff50:	ee07 0a10 	vmov	s14, r0
 800ff54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff58:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 800ff5c:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 800ff60:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 800ff64:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 800ff68:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 800ff6c:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 800ff70:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800ff74:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800ff78:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 800ff7c:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800ff80:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800ff84:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800ff88:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800ff8c:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800ff90:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 800ff94:	eeb0 6a67 	vmov.f32	s12, s15
 800ff98:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800ff9c:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800ffa0:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800ffa4:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800ffa8:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800ffac:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800ffb0:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800ffb4:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 800ffb8:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800ffbc:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800ffc0:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800ffc4:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800ffc8:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800ffcc:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800ffd0:	ee33 7a47 	vsub.f32	s14, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800ffd4:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800ffd8:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800ffdc:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 800ffe0:	e6c4      	b.n	800fd6c <jpeg_idct_float+0x94>
 800ffe2:	bf00      	nop
 800ffe4:	3fb504f3 	.word	0x3fb504f3
 800ffe8:	3f8a8bd4 	.word	0x3f8a8bd4
 800ffec:	3fec835e 	.word	0x3fec835e
 800fff0:	40273d75 	.word	0x40273d75
 800fff4:	43008000 	.word	0x43008000

0800fff8 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffc:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800fffe:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010000:	3a02      	subs	r2, #2
{
 8010002:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010004:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010008:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801000c:	f105 0320 	add.w	r3, r5, #32
 8010010:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 8010012:	ab04      	add	r3, sp, #16
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010014:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8010018:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801001a:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
 801001e:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8010022:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 8010026:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801002a:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 801002e:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010032:	f855 0b04 	ldr.w	r0, [r5], #4
 8010036:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801003a:	9101      	str	r1, [sp, #4]
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801003c:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801003e:	ea46 000c 	orr.w	r0, r6, ip
 8010042:	4338      	orrs	r0, r7
 8010044:	ea4a 0000 	orr.w	r0, sl, r0
 8010048:	4308      	orrs	r0, r1
 801004a:	ea4e 0000 	orr.w	r0, lr, r0
 801004e:	ea58 0100 	orrs.w	r1, r8, r0
 8010052:	d146      	bne.n	80100e2 <jpeg_idct_ifast+0xea>
      wsptr[DCTSIZE*0] = dcval;
 8010054:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8010058:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 801005a:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 801005c:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 801005e:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8010060:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010064:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010068:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801006c:	9903      	ldr	r1, [sp, #12]
 801006e:	42a9      	cmp	r1, r5
 8010070:	d1d0      	bne.n	8010014 <jpeg_idct_ifast+0x1c>
 8010072:	9b02      	ldr	r3, [sp, #8]
 8010074:	f1a3 0b04 	sub.w	fp, r3, #4
 8010078:	331c      	adds	r3, #28
 801007a:	9302      	str	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 801007c:	ab04      	add	r3, sp, #16
 801007e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010080:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8010082:	f85b af04 	ldr.w	sl, [fp, #4]!
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8010086:	9a00      	ldr	r2, [sp, #0]
    outptr = output_buf[ctr] + output_col;
 8010088:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 801008c:	9b00      	ldr	r3, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 801008e:	9d00      	ldr	r5, [sp, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8010090:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 8010094:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010096:	ea4e 0701 	orr.w	r7, lr, r1
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 801009a:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801009e:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 80100a2:	431f      	orrs	r7, r3
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 80100a4:	9500      	str	r5, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80100a6:	ea47 0708 	orr.w	r7, r7, r8
 80100aa:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 80100ae:	4327      	orrs	r7, r4
 80100b0:	ea47 070c 	orr.w	r7, r7, ip
 80100b4:	ea57 0502 	orrs.w	r5, r7, r2
 80100b8:	d17e      	bne.n	80101b8 <jpeg_idct_ifast+0x1c0>
				  & RANGE_MASK];
 80100ba:	f3c6 1849 	ubfx	r8, r6, #5, #10
      
      outptr[0] = dcval;
 80100be:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 80100c0:	f819 3008 	ldrb.w	r3, [r9, r8]
      outptr[0] = dcval;
 80100c4:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 80100c8:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 80100ca:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 80100cc:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 80100ce:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 80100d0:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 80100d2:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 80100d4:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80100d6:	9b02      	ldr	r3, [sp, #8]
 80100d8:	455b      	cmp	r3, fp
 80100da:	d1d1      	bne.n	8010080 <jpeg_idct_ifast+0x88>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 80100dc:	b045      	add	sp, #276	; 0x114
 80100de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80100e2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 80100e4:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80100e8:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80100ec:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80100ee:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80100f2:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 80100f6:	fb00 f00e 	mul.w	r0, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 80100fa:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 80100fe:	eba4 040a 	sub.w	r4, r4, sl
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8010102:	eb0c 0a00 	add.w	sl, ip, r0
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8010106:	ebac 0000 	sub.w	r0, ip, r0
 801010a:	4348      	muls	r0, r1
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 801010c:	eb0b 0e0a 	add.w	lr, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8010110:	ebca 2020 	rsb	r0, sl, r0, asr #8
    tmp3 = tmp10 - tmp13;
 8010114:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp1 = tmp11 + tmp12;
 8010118:	eb04 0c00 	add.w	ip, r4, r0
    tmp2 = tmp11 - tmp12;
 801011c:	1a21      	subs	r1, r4, r0
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801011e:	69e8      	ldr	r0, [r5, #28]
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010120:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp2 = tmp11 - tmp12;
 8010124:	9100      	str	r1, [sp, #0]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010126:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010128:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801012a:	9901      	ldr	r1, [sp, #4]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801012c:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801012e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8010132:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010134:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 8010138:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 801013c:	eb07 0b01 	add.w	fp, r7, r1
    z10 = tmp6 - tmp5;
 8010140:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 8010142:	eb06 0800 	add.w	r8, r6, r0
    z12 = tmp4 - tmp7;
 8010146:	1a36      	subs	r6, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010148:	1988      	adds	r0, r1, r6
    tmp7 = z11 + z13;		/* phase 5 */
 801014a:	eb0b 0708 	add.w	r7, fp, r8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 801014e:	eba8 0b0b 	sub.w	fp, r8, fp
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010152:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010154:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 8010158:	4361      	muls	r1, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 801015a:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 801015e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010162:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010166:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010168:	4366      	muls	r6, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801016a:	eb01 2120 	add.w	r1, r1, r0, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 801016e:	1236      	asrs	r6, r6, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8010170:	1bc9      	subs	r1, r1, r7
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010172:	eba6 2020 	sub.w	r0, r6, r0, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 8010176:	eb0e 0607 	add.w	r6, lr, r7
    tmp5 = tmp11 - tmp6;
 801017a:	ebc1 2b2b 	rsb	fp, r1, fp, asr #8
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 801017e:	ebae 0707 	sub.w	r7, lr, r7
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 8010182:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 8010186:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 801018a:	ebac 0101 	sub.w	r1, ip, r1
    tmp4 = tmp10 + tmp5;
 801018e:	4458      	add	r0, fp
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 8010190:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 8010194:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 8010198:	9900      	ldr	r1, [sp, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 801019a:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 801019c:	4459      	add	r1, fp
 801019e:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 80101a0:	9900      	ldr	r1, [sp, #0]
 80101a2:	eba1 040b 	sub.w	r4, r1, fp
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 80101a6:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 80101aa:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 80101ae:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 80101b2:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 80101b4:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 80101b6:	e759      	b.n	801006c <jpeg_idct_ifast+0x74>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 80101b8:	eb08 0706 	add.w	r7, r8, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80101bc:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 80101c0:	eba6 0808 	sub.w	r8, r6, r8
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 80101c4:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80101c8:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 80101cc:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80101d0:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 80101d2:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 80101d4:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 80101d6:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80101da:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 80101de:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 80101e2:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 80101e4:	9501      	str	r5, [sp, #4]
    tmp1 = tmp11 + tmp12;
 80101e6:	eb08 0701 	add.w	r7, r8, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80101ea:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 80101ee:	eba8 0101 	sub.w	r1, r8, r1
    tmp7 = z11 + z13;		/* phase 5 */
 80101f2:	eb05 0804 	add.w	r8, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80101f6:	f240 15d9 	movw	r5, #473	; 0x1d9
 80101fa:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80101fe:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 8010202:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8010204:	9d01      	ldr	r5, [sp, #4]
 8010206:	1b64      	subs	r4, r4, r5
 8010208:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801020c:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 801020e:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010210:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010214:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010218:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801021a:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 801021c:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010220:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 8010222:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010226:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801022a:	eb0c 0208 	add.w	r2, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 801022e:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 8010232:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 8010236:	44a6      	add	lr, r4
			    & RANGE_MASK];
 8010238:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801023c:	f819 2002 	ldrb.w	r2, [r9, r2]
 8010240:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8010244:	f819 200c 	ldrb.w	r2, [r9, ip]
 8010248:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 801024a:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 801024c:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 801024e:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 8010252:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8010256:	f819 2002 	ldrb.w	r2, [r9, r2]
 801025a:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 801025c:	f819 3007 	ldrb.w	r3, [r9, r7]
 8010260:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 8010262:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 8010264:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 8010266:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 801026a:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 801026e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010272:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 8010274:	f819 3001 	ldrb.w	r3, [r9, r1]
 8010278:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 801027a:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 801027e:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 8010282:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 8010286:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 801028a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801028e:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8010290:	f819 300e 	ldrb.w	r3, [r9, lr]
 8010294:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8010296:	e71e      	b.n	80100d6 <jpeg_idct_ifast+0xde>

08010298 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801029c:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801029e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80102a0:	3a02      	subs	r2, #2
{
 80102a2:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 80102a4:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80102a6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80102aa:	3380      	adds	r3, #128	; 0x80
 80102ac:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80102ae:	f105 0320 	add.w	r3, r5, #32
 80102b2:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80102b4:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80102b8:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80102ba:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80102be:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 80102c2:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80102c6:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 80102ca:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80102ce:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80102d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80102d6:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 80102da:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80102dc:	ea4a 030b 	orr.w	r3, sl, fp
 80102e0:	ea4e 0303 	orr.w	r3, lr, r3
 80102e4:	433b      	orrs	r3, r7
 80102e6:	ea48 0303 	orr.w	r3, r8, r3
 80102ea:	4333      	orrs	r3, r6
 80102ec:	ea59 0303 	orrs.w	r3, r9, r3
 80102f0:	d145      	bne.n	801037e <jpeg_idct_islow+0xe6>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80102f2:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 80102f4:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 80102f8:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 80102fa:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 80102fc:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 80102fe:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8010300:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010304:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010308:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801030c:	9b05      	ldr	r3, [sp, #20]
 801030e:	42ab      	cmp	r3, r5
 8010310:	d1d0      	bne.n	80102b4 <jpeg_idct_islow+0x1c>
 8010312:	9b04      	ldr	r3, [sp, #16]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8010314:	ad06      	add	r5, sp, #24
 8010316:	f1a3 0904 	sub.w	r9, r3, #4
 801031a:	331c      	adds	r3, #28
 801031c:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801031e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8010322:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8010324:	9302      	str	r3, [sp, #8]
 8010326:	4413      	add	r3, r2
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010328:	f8d5 c01c 	ldr.w	ip, [r5, #28]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 801032c:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 8010330:	e9d5 e703 	ldrd	lr, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010334:	ea4a 0200 	orr.w	r2, sl, r0
 8010338:	ea42 020e 	orr.w	r2, r2, lr
 801033c:	e9d5 8105 	ldrd	r8, r1, [r5, #20]
 8010340:	433a      	orrs	r2, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8010342:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010346:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 801034a:	3610      	adds	r6, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801034c:	430a      	orrs	r2, r1
 801034e:	ea52 020c 	orrs.w	r2, r2, ip
 8010352:	f040 8098 	bne.w	8010486 <jpeg_idct_islow+0x1ee>
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8010356:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 8010358:	f3c6 1249 	ubfx	r2, r6, #5, #10

      outptr[0] = dcval;
 801035c:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 801035e:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 8010360:	9902      	ldr	r1, [sp, #8]
 8010362:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 8010364:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 8010366:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 8010368:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 801036a:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 801036c:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 801036e:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 8010370:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010372:	9b05      	ldr	r3, [sp, #20]
 8010374:	454b      	cmp	r3, r9
 8010376:	d1d2      	bne.n	801031e <jpeg_idct_islow+0x86>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 8010378:	b047      	add	sp, #284	; 0x11c
 801037a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801037e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8010380:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010384:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8010388:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801038a:	f241 1651 	movw	r6, #4433	; 0x1151
 801038e:	eb0b 0300 	add.w	r3, fp, r0
 8010392:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8010394:	f641 067e 	movw	r6, #6270	; 0x187e
 8010398:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801039c:	4e7a      	ldr	r6, [pc, #488]	; (8010588 <jpeg_idct_islow+0x2f0>)
 801039e:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 80103a2:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80103a4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80103a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80103aa:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 80103ac:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 80103b0:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 80103b4:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 80103b8:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80103bc:	69ec      	ldr	r4, [r5, #28]
    tmp11 = tmp1 + tmp3;
 80103be:	18f7      	adds	r7, r6, r3
    tmp13 = tmp0 - tmp2;
 80103c0:	9002      	str	r0, [sp, #8]
    tmp12 = tmp1 - tmp3;
 80103c2:	1b9b      	subs	r3, r3, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80103c4:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80103c8:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 80103cc:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80103ce:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80103d2:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80103d6:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 80103da:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80103de:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80103e0:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 80103e4:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 80103e8:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80103ec:	1930      	adds	r0, r6, r4
 80103ee:	4358      	muls	r0, r3
    z2 += z1;
 80103f0:	4b66      	ldr	r3, [pc, #408]	; (801058c <jpeg_idct_islow+0x2f4>)
 80103f2:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 80103f6:	4b66      	ldr	r3, [pc, #408]	; (8010590 <jpeg_idct_islow+0x2f8>)
 80103f8:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80103fc:	eb09 040a 	add.w	r4, r9, sl
 8010400:	4b64      	ldr	r3, [pc, #400]	; (8010594 <jpeg_idct_islow+0x2fc>)
 8010402:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8010404:	f640 138e 	movw	r3, #2446	; 0x98e
 8010408:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 801040c:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 801040e:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8010412:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010416:	4b60      	ldr	r3, [pc, #384]	; (8010598 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 8010418:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801041c:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8010420:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010424:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010428:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 801042a:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 801042c:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 801042e:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8010432:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8010436:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801043a:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801043e:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8010442:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8010444:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8010446:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801044a:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801044e:	eb07 040a 	add.w	r4, r7, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010452:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8010456:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010458:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801045c:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801045e:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8010460:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010462:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010464:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010466:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801046a:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801046c:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801046e:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010470:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8010472:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010476:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8010478:	9b02      	ldr	r3, [sp, #8]
 801047a:	eba3 0909 	sub.w	r9, r3, r9
 801047e:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8010482:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 8010484:	e742      	b.n	801030c <jpeg_idct_islow+0x74>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8010486:	1842      	adds	r2, r0, r1
 8010488:	f241 1451 	movw	r4, #4433	; 0x1151
 801048c:	4362      	muls	r2, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801048e:	f641 047e 	movw	r4, #6270	; 0x187e
 8010492:	fb04 2000 	mla	r0, r4, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8010496:	4c3c      	ldr	r4, [pc, #240]	; (8010588 <jpeg_idct_islow+0x2f0>)
 8010498:	fb04 2101 	mla	r1, r4, r1, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 801049c:	19bc      	adds	r4, r7, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 801049e:	1bf2      	subs	r2, r6, r7
    tmp10 = tmp0 + tmp2;
 80104a0:	eb00 3744 	add.w	r7, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 80104a4:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 80104a8:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = tmp1 + tmp3;
 80104ac:	eb01 3642 	add.w	r6, r1, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80104b0:	9003      	str	r0, [sp, #12]
    tmp12 = tmp1 - tmp3;
 80104b2:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    z3 = tmp1 + tmp3;
 80104b6:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 80104ba:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80104bc:	f242 52a1 	movw	r2, #9633	; 0x25a1
 80104c0:	1821      	adds	r1, r4, r0
 80104c2:	4351      	muls	r1, r2
    z2 += z1;
 80104c4:	4a31      	ldr	r2, [pc, #196]	; (801058c <jpeg_idct_islow+0x2f4>)
 80104c6:	fb02 1404 	mla	r4, r2, r4, r1
    z3 += z1;
 80104ca:	4a31      	ldr	r2, [pc, #196]	; (8010590 <jpeg_idct_islow+0x2f8>)
 80104cc:	fb02 1100 	mla	r1, r2, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80104d0:	eb0a 000c 	add.w	r0, sl, ip
 80104d4:	4a2f      	ldr	r2, [pc, #188]	; (8010594 <jpeg_idct_islow+0x2fc>)
 80104d6:	4350      	muls	r0, r2
    tmp0 += z1 + z2;
 80104d8:	f640 128e 	movw	r2, #2446	; 0x98e
 80104dc:	eb04 0b00 	add.w	fp, r4, r0
    tmp3 += z1 + z3;
 80104e0:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 80104e2:	fb02 bc0c 	mla	ip, r2, ip, fp
    tmp3 += z1 + z3;
 80104e6:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80104ea:	4a2b      	ldr	r2, [pc, #172]	; (8010598 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 80104ec:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80104f0:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 80104f4:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80104f8:	fb02 fa0a 	mul.w	sl, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80104fc:	9a01      	ldr	r2, [sp, #4]
    tmp1 += z1 + z3;
 80104fe:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 8010500:	4454      	add	r4, sl
 8010502:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8010506:	fb0b 1b08 	mla	fp, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801050a:	eb07 0800 	add.w	r8, r7, r0
    tmp2 += z1 + z2;
 801050e:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010512:	9950      	ldr	r1, [sp, #320]	; 0x140
			    & RANGE_MASK];
 8010514:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010518:	1a3f      	subs	r7, r7, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801051a:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801051e:	f812 e008 	ldrb.w	lr, [r2, r8]
			    & RANGE_MASK];
 8010522:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010526:	9a02      	ldr	r2, [sp, #8]
			    & RANGE_MASK];
 8010528:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801052c:	f802 e001 	strb.w	lr, [r2, r1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010530:	9a01      	ldr	r2, [sp, #4]
 8010532:	5dd0      	ldrb	r0, [r2, r7]
 8010534:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8010536:	1930      	adds	r0, r6, r4
			    & RANGE_MASK];
 8010538:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801053c:	5c10      	ldrb	r0, [r2, r0]
 801053e:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010540:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010544:	9a04      	ldr	r2, [sp, #16]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010546:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010548:	eb02 000b 	add.w	r0, r2, fp
 801054c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 801054e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010552:	5c10      	ldrb	r0, [r2, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010554:	9a04      	ldr	r2, [sp, #16]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010556:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010558:	eba2 010b 	sub.w	r1, r2, fp
 801055c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 801055e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010562:	5c52      	ldrb	r2, [r2, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010564:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010566:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010568:	9a03      	ldr	r2, [sp, #12]
 801056a:	4462      	add	r2, ip
			    & RANGE_MASK];
 801056c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010570:	5c8a      	ldrb	r2, [r1, r2]
 8010572:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8010574:	9a03      	ldr	r2, [sp, #12]
 8010576:	eba2 0c0c 	sub.w	ip, r2, ip
			    & RANGE_MASK];
 801057a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801057e:	f811 200c 	ldrb.w	r2, [r1, ip]
 8010582:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8010584:	e6f5      	b.n	8010372 <jpeg_idct_islow+0xda>
 8010586:	bf00      	nop
 8010588:	ffffc4df 	.word	0xffffc4df
 801058c:	ffffc13b 	.word	0xffffc13b
 8010590:	fffff384 	.word	0xfffff384
 8010594:	ffffe333 	.word	0xffffe333
 8010598:	ffffadfd 	.word	0xffffadfd

0801059c <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801059c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a0:	b0b9      	sub	sp, #228	; 0xe4
 80105a2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80105a4:	1e96      	subs	r6, r2, #2
 80105a6:	9304      	str	r3, [sp, #16]
 80105a8:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80105aa:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80105ae:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80105b2:	3380      	adds	r3, #128	; 0x80
 80105b4:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80105b6:	f102 030c 	add.w	r3, r2, #12
 80105ba:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80105bc:	f936 3f02 	ldrsh.w	r3, [r6, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 80105c0:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80105c4:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80105c8:	f10c 0c04 	add.w	ip, ip, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80105cc:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80105d0:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80105d2:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80105d6:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 80105da:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 80105dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80105e0:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80105e2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80105e4:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80105e6:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80105ea:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80105ee:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 80105f2:	4353      	muls	r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 80105f4:	ebae 0203 	sub.w	r2, lr, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
 80105f8:	eb04 0803 	add.w	r8, r4, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 80105fc:	fb01 f902 	mul.w	r9, r1, r2
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010600:	eba4 010e 	sub.w	r1, r4, lr
 8010604:	f640 2212 	movw	r2, #2578	; 0xa12
 8010608:	fb02 f701 	mul.w	r7, r2, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801060c:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801060e:	f642 01c6 	movw	r1, #10438	; 0x28c6
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010612:	eb09 0007 	add.w	r0, r9, r7
 8010616:	4410      	add	r0, r2
 8010618:	4a87      	ldr	r2, [pc, #540]	; (8010838 <jpeg_idct_7x7+0x29c>)
 801061a:	fb02 000e 	mla	r0, r2, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801061e:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
 8010620:	ebae 0e08 	sub.w	lr, lr, r8
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010624:	fb01 2108 	mla	r1, r1, r8, r2
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010628:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 801062c:	f642 5841 	movw	r8, #11585	; 0x2d41
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010630:	fb02 1203 	mla	r2, r2, r3, r1
 8010634:	eb02 0309 	add.w	r3, r2, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010638:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 801063c:	f641 52ef 	movw	r2, #7663	; 0x1def
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010640:	9303      	str	r3, [sp, #12]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010642:	4b7e      	ldr	r3, [pc, #504]	; (801083c <jpeg_idct_7x7+0x2a0>)
 8010644:	fb03 1104 	mla	r1, r3, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010648:	f9b6 4010 	ldrsh.w	r4, [r6, #16]
 801064c:	6a2b      	ldr	r3, [r5, #32]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801064e:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010650:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010654:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010656:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8010658:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801065a:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
 801065e:	fb07 f709 	mul.w	r7, r7, r9
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010662:	eb03 0904 	add.w	r9, r3, r4
 8010666:	fb02 fb09 	mul.w	fp, r2, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801066a:	eba3 0904 	sub.w	r9, r3, r4
 801066e:	f240 5273 	movw	r2, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010672:	443b      	add	r3, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010674:	443c      	add	r4, r7
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010676:	fb02 f909 	mul.w	r9, r2, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801067a:	4a71      	ldr	r2, [pc, #452]	; (8010840 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 801067c:	ebab 0a09 	sub.w	sl, fp, r9
    tmp1 += tmp2;
 8010680:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010682:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010686:	4354      	muls	r4, r2
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010688:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801068c:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8010690:	44a1      	add	r9, r4
    tmp0 += z2;
 8010692:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010694:	fb0b 3707 	mla	r7, fp, r7, r3

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010698:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801069a:	443c      	add	r4, r7
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801069c:	4453      	add	r3, sl
 801069e:	12db      	asrs	r3, r3, #11
 80106a0:	f84c 3c04 	str.w	r3, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80106a4:	9b03      	ldr	r3, [sp, #12]
 80106a6:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80106aa:	eb00 0309 	add.w	r3, r0, r9
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80106ae:	eba0 0009 	sub.w	r0, r0, r9
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80106b2:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80106b4:	ea4f 22ea 	mov.w	r2, sl, asr #11
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80106b8:	f8cc 3018 	str.w	r3, [ip, #24]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80106bc:	190b      	adds	r3, r1, r4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80106be:	1b0c      	subs	r4, r1, r4
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80106c0:	12c0      	asrs	r0, r0, #11
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80106c2:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80106c4:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80106c8:	12e4      	asrs	r4, r4, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80106ca:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80106ce:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80106d2:	9b02      	ldr	r3, [sp, #8]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80106d4:	f8cc 406c 	str.w	r4, [ip, #108]	; 0x6c
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80106d8:	fb08 3e0e 	mla	lr, r8, lr, r3
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 80106dc:	ea4f 23ee 	mov.w	r3, lr, asr #11
 80106e0:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80106e4:	9b05      	ldr	r3, [sp, #20]
 80106e6:	42b3      	cmp	r3, r6
 80106e8:	f47f af68 	bne.w	80105bc <jpeg_idct_7x7+0x20>
 80106ec:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 80106ee:	ac07      	add	r4, sp, #28
 80106f0:	f1a3 0904 	sub.w	r9, r3, #4
 80106f4:	3318      	adds	r3, #24
 80106f6:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80106f8:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 80106fc:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 80106fe:	9a42      	ldr	r2, [sp, #264]	; 0x108
    z3 = (INT32) wsptr[6];
 8010700:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 8010704:	189e      	adds	r6, r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010706:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 801070a:	9304      	str	r3, [sp, #16]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801070c:	1b51      	subs	r1, r2, r5
 801070e:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8010712:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010716:	fb02 fe01 	mul.w	lr, r2, r1
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 801071a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801071e:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp0 = z1 + z3;
 8010722:	eb03 0805 	add.w	r8, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010726:	eba3 0c02 	sub.w	ip, r3, r2
 801072a:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801072e:	3710      	adds	r7, #16
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010730:	4941      	ldr	r1, [pc, #260]	; (8010838 <jpeg_idct_7x7+0x29c>)
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010732:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010736:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 801073a:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801073e:	eb0e 000c 	add.w	r0, lr, ip
 8010742:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8010746:	fb01 0002 	mla	r0, r1, r2, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801074a:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801074e:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010752:	fb02 f208 	mul.w	r2, r2, r8
 8010756:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801075a:	fb01 2105 	mla	r1, r1, r5, r2
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801075e:	4d37      	ldr	r5, [pc, #220]	; (801083c <jpeg_idct_7x7+0x2a0>)
 8010760:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 8010764:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010768:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 801076a:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801076e:	4463      	add	r3, ip
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010770:	eb02 050a 	add.w	r5, r2, sl
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010774:	9102      	str	r1, [sp, #8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010776:	9303      	str	r3, [sp, #12]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010778:	f641 53ef 	movw	r3, #7663	; 0x1def
 801077c:	fb03 fb05 	mul.w	fp, r3, r5
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010780:	eba2 050a 	sub.w	r5, r2, sl
 8010784:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010788:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801078a:	44f2      	add	sl, lr
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801078c:	435d      	muls	r5, r3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801078e:	4b2c      	ldr	r3, [pc, #176]	; (8010840 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 8010790:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 8010794:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010796:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801079a:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801079e:	9b01      	ldr	r3, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80107a0:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80107a4:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 80107a8:	4455      	add	r5, sl
    tmp0 += z2;
 80107aa:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80107ac:	fb0b 220e 	mla	r2, fp, lr, r2
 80107b0:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80107b2:	eb01 020c 	add.w	r2, r1, ip
 80107b6:	9942      	ldr	r1, [sp, #264]	; 0x108
			    & RANGE_MASK];
 80107b8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80107bc:	5c9a      	ldrb	r2, [r3, r2]
 80107be:	9b04      	ldr	r3, [sp, #16]
 80107c0:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80107c2:	9b02      	ldr	r3, [sp, #8]
 80107c4:	eba3 0c0c 	sub.w	ip, r3, ip
 80107c8:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80107ca:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80107ce:	f813 200c 	ldrb.w	r2, [r3, ip]
 80107d2:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80107d4:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80107d6:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 80107d8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80107dc:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80107e0:	5c9a      	ldrb	r2, [r3, r2]
 80107e2:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80107e4:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80107e6:	9b03      	ldr	r3, [sp, #12]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80107e8:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80107ea:	eb03 020a 	add.w	r2, r3, sl
 80107ee:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80107f0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80107f4:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80107f6:	9b03      	ldr	r3, [sp, #12]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80107f8:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80107fa:	eba3 0a0a 	sub.w	sl, r3, sl
 80107fe:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8010800:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010804:	f813 300a 	ldrb.w	r3, [r3, sl]
 8010808:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 801080a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801080e:	eba3 0808 	sub.w	r8, r3, r8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010812:	f642 5341 	movw	r3, #11585	; 0x2d41
 8010816:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 801081a:	9b01      	ldr	r3, [sp, #4]
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 801081c:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8010820:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8010824:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010828:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 801082a:	9b05      	ldr	r3, [sp, #20]
 801082c:	454b      	cmp	r3, r9
 801082e:	f47f af63 	bne.w	80106f8 <jpeg_idct_7x7+0x15c>
  }
}
 8010832:	b039      	add	sp, #228	; 0xe4
 8010834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010838:	ffffc515 	.word	0xffffc515
 801083c:	ffffb0f1 	.word	0xffffb0f1
 8010840:	ffffd3e1 	.word	0xffffd3e1

08010844 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010848:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801084c:	b0a7      	sub	sp, #156	; 0x9c
 801084e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010850:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010852:	3080      	adds	r0, #128	; 0x80
 8010854:	320a      	adds	r2, #10
 8010856:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010858:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801085a:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801085c:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801085e:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010862:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010866:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801086a:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801086c:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010870:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010872:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010876:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801087a:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 801087c:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801087e:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010882:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010886:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801088a:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801088e:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 8010890:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8010892:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010896:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8010898:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801089c:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80108a0:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80108a2:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp10 = tmp1 + tmp0;
 80108a4:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80108a8:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 = tmp1 - tmp0;
 80108ac:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80108ae:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80108b2:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80108b4:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80108b8:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80108bc:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80108c0:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80108c4:	eb02 0c08 	add.w	ip, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80108c8:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80108cc:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80108d0:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80108d4:	eba9 0808 	sub.w	r8, r9, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80108d8:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80108dc:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80108e0:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80108e4:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80108e8:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80108ec:	12d2      	asrs	r2, r2, #11
 80108ee:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80108f2:	ea4f 22ee 	mov.w	r2, lr, asr #11
 80108f6:	677a      	str	r2, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 80108f8:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 80108fc:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010900:	617a      	str	r2, [r7, #20]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010902:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010906:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[6*4] = (int) (tmp11 - tmp1);
 801090a:	65f9      	str	r1, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801090c:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801090e:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010912:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010914:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010916:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010918:	42b2      	cmp	r2, r6
 801091a:	d1a0      	bne.n	801085e <jpeg_idct_6x6+0x1a>
 801091c:	f1a3 0e04 	sub.w	lr, r3, #4
 8010920:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 8010924:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010926:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801092a:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 801092e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8010930:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010932:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 8010936:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8010938:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801093c:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010940:	fb00 f202 	mul.w	r2, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010944:	f851 4c10 	ldr.w	r4, [r1, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010948:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801094c:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010950:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8010954:	eb02 3543 	add.w	r5, r2, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8010958:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 801095c:	eba3 0302 	sub.w	r3, r3, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010960:	f242 7231 	movw	r2, #10033	; 0x2731
 8010964:	fb02 f204 	mul.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 8010968:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp10 = tmp1 + tmp0;
 801096c:	eb05 0602 	add.w	r6, r5, r2
    tmp12 = tmp1 - tmp0;
 8010970:	eba5 0202 	sub.w	r2, r5, r2
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010974:	eb04 0508 	add.w	r5, r4, r8
 8010978:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801097c:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8010980:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8010984:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010988:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801098c:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801098e:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8010992:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010996:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801099a:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801099e:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 80109a2:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80109a6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80109aa:	5d04      	ldrb	r4, [r0, r4]
 80109ac:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80109ae:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80109b2:	9800      	ldr	r0, [sp, #0]
 80109b4:	5d84      	ldrb	r4, [r0, r6]
 80109b6:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80109b8:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80109bc:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 80109c0:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80109c4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80109c8:	5d04      	ldrb	r4, [r0, r4]
 80109ca:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80109cc:	f810 3008 	ldrb.w	r3, [r0, r8]
 80109d0:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80109d2:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80109d6:	eba2 0505 	sub.w	r5, r2, r5
			    & RANGE_MASK];
 80109da:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80109de:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80109e2:	5cc3      	ldrb	r3, [r0, r3]
 80109e4:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80109e6:	5d43      	ldrb	r3, [r0, r5]
 80109e8:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 80109ea:	d19c      	bne.n	8010926 <jpeg_idct_6x6+0xe2>
  }
}
 80109ec:	b027      	add	sp, #156	; 0x9c
 80109ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080109f4 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80109f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80109f8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80109fc:	b09d      	sub	sp, #116	; 0x74
 80109fe:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010a00:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a02:	3080      	adds	r0, #128	; 0x80
 8010a04:	3208      	adds	r2, #8
 8010a06:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010a08:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010a0a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010a0e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a12:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010a14:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a16:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010a1a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a1c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010a20:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a24:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010a26:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010a28:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010a2c:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010a2e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010a32:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8010a34:	0352      	lsls	r2, r2, #13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010a36:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010a3a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010a3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010a42:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010a46:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010a4a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010a4e:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010a52:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010a54:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010a58:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010a5c:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = tmp12 + z2;
 8010a60:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010a62:	f641 209a 	movw	r0, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8010a66:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 8010a6a:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8010a6e:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010a72:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010a76:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010a78:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010a7c:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010a80:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010a82:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010a86:	483b      	ldr	r0, [pc, #236]	; (8010b74 <jpeg_idct_5x5+0x180>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010a88:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010a8a:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010a8e:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010a92:	eba9 0a0a 	sub.w	sl, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010a96:	42b2      	cmp	r2, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010a98:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010a9c:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010aa0:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010aa4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010aa8:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010aac:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010ab0:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010ab4:	f8c7 a04c 	str.w	sl, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010ab8:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010abc:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010abe:	d1aa      	bne.n	8010a16 <jpeg_idct_5x5+0x22>
 8010ac0:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 8010ac4:	a903      	add	r1, sp, #12
 8010ac6:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010ac8:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010acc:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8010ad0:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 8010ad2:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010ad6:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8010ada:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8010adc:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 8010ade:	f851 4c04 	ldr.w	r4, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8010ae2:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010ae6:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 8010aea:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010aee:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 8010af2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 8010af6:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010afa:	191a      	adds	r2, r3, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010afc:	1b1b      	subs	r3, r3, r4
 8010afe:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010b02:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 8010b06:	eb03 344c 	add.w	r4, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 8010b0a:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 8010b0c:	1915      	adds	r5, r2, r4
    tmp11 = z3 - z1;
 8010b0e:	1aa2      	subs	r2, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010b10:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 8010b14:	ebc3 3c4c 	rsb	ip, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010b18:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010b1a:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 8010b1e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010b22:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010b26:	4813      	ldr	r0, [pc, #76]	; (8010b74 <jpeg_idct_5x5+0x180>)
 8010b28:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b2c:	eb05 0b06 	add.w	fp, r5, r6
 8010b30:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010b32:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 8010b34:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8010b38:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b3c:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8010b40:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010b42:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010b46:	9800      	ldr	r0, [sp, #0]
 8010b48:	5d45      	ldrb	r5, [r0, r5]
 8010b4a:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010b4c:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010b4e:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8010b50:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8010b54:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010b58:	5d45      	ldrb	r5, [r0, r5]
 8010b5a:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010b5c:	5c82      	ldrb	r2, [r0, r2]
 8010b5e:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8010b60:	f810 300c 	ldrb.w	r3, [r0, ip]
 8010b64:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 8010b66:	9b01      	ldr	r3, [sp, #4]
 8010b68:	4573      	cmp	r3, lr
 8010b6a:	d1b2      	bne.n	8010ad2 <jpeg_idct_5x5+0xde>
  }
}
 8010b6c:	b01d      	add	sp, #116	; 0x74
 8010b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b72:	bf00      	nop
 8010b74:	ffffba5c 	.word	0xffffba5c

08010b78 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b7c:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010b7e:	b093      	sub	sp, #76	; 0x4c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010b80:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8010b84:	1e96      	subs	r6, r2, #2
 8010b86:	3c04      	subs	r4, #4
 8010b88:	1d97      	adds	r7, r2, #6
 8010b8a:	3580      	adds	r5, #128	; 0x80

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010b8c:	a902      	add	r1, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8010b8e:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010b92:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010b96:	f8df c108 	ldr.w	ip, [pc, #264]	; 8010ca0 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010b9a:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010b9e:	3104      	adds	r1, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ba0:	f854 2f04 	ldr.w	r2, [r4, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010ba4:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010ba8:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010baa:	fb02 f000 	mul.w	r0, r2, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010bae:	6c22      	ldr	r2, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010bb0:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010bb4:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010bb8:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8010bbc:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8010bc0:	eba0 0002 	sub.w	r0, r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010bc4:	6a22      	ldr	r2, [r4, #32]
 8010bc6:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010bca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010bcc:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8010bd0:	eb0a 020b 	add.w	r2, sl, fp
 8010bd4:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010bdc:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010be0:	fb0c 220b 	mla	r2, ip, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010be4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010be8:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 8010bec:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8010bf0:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010bf4:	eb02 0980 	add.w	r9, r2, r0, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 8010bf8:	f841 bc04 	str.w	fp, [r1, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8010bfc:	ebc2 0280 	rsb	r2, r2, r0, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8010c00:	f8c1 a02c 	str.w	sl, [r1, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010c04:	f8c1 900c 	str.w	r9, [r1, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8010c08:	61ca      	str	r2, [r1, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010c0a:	d1c6      	bne.n	8010b9a <jpeg_idct_4x4+0x22>
 8010c0c:	1f1e      	subs	r6, r3, #4
 8010c0e:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8010c12:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010c14:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010c18:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010c1c:	f8df e080 	ldr.w	lr, [pc, #128]	; 8010ca0 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 8010c20:	f856 3f04 	ldr.w	r3, [r6, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8010c24:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8010c26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010c28:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 8010c2c:	45b4      	cmp	ip, r6
    outptr = output_buf[ctr] + output_col;
 8010c2e:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8010c32:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8010c36:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010c3a:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 8010c3e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8010c42:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8010c46:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010c4a:	eb01 020b 	add.w	r2, r1, fp
 8010c4e:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010c52:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010c56:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010c5a:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010c5e:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010c62:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 8010c64:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010c68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 8010c6a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010c6e:	f815 b00b 	ldrb.w	fp, [r5, fp]
 8010c72:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010c76:	5c6b      	ldrb	r3, [r5, r1]
 8010c78:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010c7a:	9b01      	ldr	r3, [sp, #4]
 8010c7c:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 8010c80:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010c84:	5ceb      	ldrb	r3, [r5, r3]
 8010c86:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010c88:	9b01      	ldr	r3, [sp, #4]
 8010c8a:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 8010c8e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010c92:	5cab      	ldrb	r3, [r5, r2]
 8010c94:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 8010c96:	d1c3      	bne.n	8010c20 <jpeg_idct_4x4+0xa8>
  }
}
 8010c98:	b013      	add	sp, #76	; 0x4c
 8010c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c9e:	bf00      	nop
 8010ca0:	ffffc4df 	.word	0xffffc4df

08010ca4 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca8:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010caa:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8010cae:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010cb0:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010cb4:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010cb6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010cba:	f1a1 0c04 	sub.w	ip, r1, #4
 8010cbe:	1d10      	adds	r0, r2, #4
 8010cc0:	4621      	mov	r1, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010cc2:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010cc6:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010cca:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010cce:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010cd0:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010cd4:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010cd8:	4540      	cmp	r0, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010cda:	fb05 f202 	mul.w	r2, r5, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010cde:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ce2:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010ce6:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 <<= CONST_BITS;
 8010cea:	ea4f 3242 	mov.w	r2, r2, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010cee:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010cf6:	fb0a f505 	mul.w	r5, sl, r5
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010cfa:	fb07 f70b 	mul.w	r7, r7, fp
    tmp10 = tmp0 + tmp12;
 8010cfe:	eb02 0605 	add.w	r6, r2, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 8010d02:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010d06:	fb09 f707 	mul.w	r7, r9, r7

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8010d0a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010d0e:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010d12:	eba6 0707 	sub.w	r7, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8010d16:	60a2      	str	r2, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010d18:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010d1c:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010d20:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010d24:	6167      	str	r7, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010d26:	d1d0      	bne.n	8010cca <jpeg_idct_3x3+0x26>
 8010d28:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010d2a:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 8010d2e:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010d30:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8010d34:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8010d38:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 8010d3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010d3c:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8010d40:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8010d42:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010d46:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010d4a:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010d4e:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010d52:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010d56:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010d58:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8010d5c:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8010d60:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010d64:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010d68:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8010d6c:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8010d70:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8010d74:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8010d78:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010d7c:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8010d80:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010d84:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8010d88:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8010d8a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8010d8e:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 8010d90:	d1d0      	bne.n	8010d34 <jpeg_idct_3x3+0x90>
  }
}
 8010d92:	b00b      	add	sp, #44	; 0x2c
 8010d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d98 <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8010d9c:	6d4f      	ldr	r7, [r1, #84]	; 0x54
{
 8010d9e:	4698      	mov	r8, r3
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010da0:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010da4:	f9b2 1000 	ldrsh.w	r1, [r2]
 8010da8:	6838      	ldr	r0, [r7, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010daa:	3580      	adds	r5, #128	; 0x80
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010dac:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010db0:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010db2:	6a38      	ldr	r0, [r7, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010db4:	687b      	ldr	r3, [r7, #4]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010db6:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 8010db8:	3104      	adds	r1, #4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8010dba:	6a7f      	ldr	r7, [r7, #36]	; 0x24
  tmp0 = tmp4 + tmp5;
 8010dbc:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 8010dbe:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010dc0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8010dc4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010dc8:	435c      	muls	r4, r3
  tmp3 = tmp4 - tmp5;

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 8010dca:	f8d8 c000 	ldr.w	ip, [r8]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8010dce:	437a      	muls	r2, r7
{
 8010dd0:	9e06      	ldr	r6, [sp, #24]
  tmp1 = tmp4 + tmp5;
 8010dd2:	18a7      	adds	r7, r4, r2
  tmp3 = tmp4 - tmp5;
 8010dd4:	1aa2      	subs	r2, r4, r2
  outptr = output_buf[0] + output_col;
 8010dd6:	eb0c 0e06 	add.w	lr, ip, r6

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010dda:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010ddc:	1bc0      	subs	r0, r0, r7

  /* Row 1 */
  outptr = output_buf[1] + output_col;

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010dde:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010de0:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010de2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010de6:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010dea:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010dee:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010df2:	5d2c      	ldrb	r4, [r5, r4]
 8010df4:	f80c 4006 	strb.w	r4, [ip, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010df8:	5c28      	ldrb	r0, [r5, r0]
 8010dfa:	f88e 0001 	strb.w	r0, [lr, #1]
  outptr = output_buf[1] + output_col;
 8010dfe:	f8d8 0004 	ldr.w	r0, [r8, #4]
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010e02:	5ceb      	ldrb	r3, [r5, r3]
  outptr = output_buf[1] + output_col;
 8010e04:	1984      	adds	r4, r0, r6
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010e06:	5583      	strb	r3, [r0, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010e08:	5c6b      	ldrb	r3, [r5, r1]
 8010e0a:	7063      	strb	r3, [r4, #1]
}
 8010e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010e10 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8010e10:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010e12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010e16:	6809      	ldr	r1, [r1, #0]
 8010e18:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010e1a:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 8010e1e:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010e20:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8010e24:	440a      	add	r2, r1
 8010e26:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	9b00      	ldr	r3, [sp, #0]
 8010e2e:	54d1      	strb	r1, [r2, r3]
}
 8010e30:	4770      	bx	lr
	...

08010e34 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e38:	b0d1      	sub	sp, #324	; 0x144
 8010e3a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010e3c:	1e96      	subs	r6, r2, #2
 8010e3e:	9306      	str	r3, [sp, #24]
 8010e40:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010e42:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010e46:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010e48:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010e4c:	f102 030e 	add.w	r3, r2, #14
 8010e50:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010e52:	f936 5f02 	ldrsh.w	r5, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010e56:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010e58:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010e5c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010e60:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010e64:	f9b6 2040 	ldrsh.w	r2, [r6, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010e68:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010e6a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010e6e:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    tmp0 <<= CONST_BITS;
 8010e72:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010e74:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010e76:	f9b6 3060 	ldrsh.w	r3, [r6, #96]	; 0x60
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010e7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010e7e:	f9b6 c050 	ldrsh.w	ip, [r6, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010e82:	437b      	muls	r3, r7
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010e84:	f241 67a1 	movw	r7, #5793	; 0x16a1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010e88:	f9b6 e070 	ldrsh.w	lr, [r6, #112]	; 0x70
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010e8c:	437b      	muls	r3, r7
    tmp1 = tmp0 + tmp3;
 8010e8e:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010e90:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010e94:	f241 65a1 	movw	r5, #5793	; 0x16a1
    tmp2 = tmp0 - tmp3 - tmp3;
 8010e98:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010e9a:	1a8b      	subs	r3, r1, r2
 8010e9c:	436b      	muls	r3, r5
 8010e9e:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010ea0:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8010ea4:	442b      	add	r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010ea6:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp11 = tmp2 + tmp0;
 8010eaa:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010eac:	188b      	adds	r3, r1, r2
 8010eae:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010eb0:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8010eb4:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010eb6:	f240 75dc 	movw	r5, #2012	; 0x7dc
 8010eba:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8010ebc:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8010ebe:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8010ec0:	1aad      	subs	r5, r5, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 8010ec2:	440b      	add	r3, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 8010ec4:	1a79      	subs	r1, r7, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010ec6:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    tmp13 = tmp1 - tmp2 + tmp3;
 8010eca:	188a      	adds	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ecc:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
    tmp12 = tmp1 - tmp0 + tmp2;
 8010ed0:	9304      	str	r3, [sp, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 8010ed2:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ed4:	6a22      	ldr	r2, [r4, #32]

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010ed6:	4b89      	ldr	r3, [pc, #548]	; (80110fc <jpeg_idct_9x9+0x2c8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ed8:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010eda:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010edc:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010ede:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8010ee2:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010ee6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010eea:	435a      	muls	r2, r3

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010eec:	f641 5317 	movw	r3, #7447	; 0x1d17
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010ef0:	fb07 f70e 	mul.w	r7, r7, lr
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010ef4:	eb01 0b0c 	add.w	fp, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010ef8:	eb01 0907 	add.w	r9, r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010efc:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010f00:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010f04:	ebac 0e07 	sub.w	lr, ip, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f08:	eba1 0c0c 	sub.w	ip, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010f0c:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010f10:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f14:	ebac 0707 	sub.w	r7, ip, r7
    tmp0 = tmp2 + tmp3 - z2;
 8010f18:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010f1c:	fb03 f30e 	mul.w	r3, r3, lr
    tmp0 = tmp2 + tmp3 - z2;
 8010f20:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 8010f24:	eba2 0e03 	sub.w	lr, r2, r3
    tmp3 += z2 + tmp1;
 8010f28:	441a      	add	r2, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f2a:	f242 7331 	movw	r3, #10033	; 0x2731

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010f2e:	eb05 0108 	add.w	r1, r5, r8
    tmp2 += z2 - tmp1;
 8010f32:	44de      	add	lr, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f34:	435f      	muls	r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010f36:	9b03      	ldr	r3, [sp, #12]
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010f38:	12c9      	asrs	r1, r1, #11
    tmp3 += z2 + tmp1;
 8010f3a:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010f3c:	eba5 0508 	sub.w	r5, r5, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010f40:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010f44:	19d9      	adds	r1, r3, r7
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010f46:	1bdf      	subs	r7, r3, r7
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010f48:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010f4a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010f4c:	12ed      	asrs	r5, r5, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010f4e:	61c1      	str	r1, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010f50:	eb03 010e 	add.w	r1, r3, lr
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010f54:	eba3 0e0e 	sub.w	lr, r3, lr
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010f58:	12ff      	asrs	r7, r7, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010f5a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010f5c:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010f60:	ea4f 23ee 	mov.w	r3, lr, asr #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010f64:	f8c0 70dc 	str.w	r7, [r0, #220]	; 0xdc
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010f68:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010f6a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8010f6e:	9b05      	ldr	r3, [sp, #20]
 8010f70:	4413      	add	r3, r2
 8010f72:	12db      	asrs	r3, r3, #11
 8010f74:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8010f76:	9b05      	ldr	r3, [sp, #20]
 8010f78:	1a9a      	subs	r2, r3, r2
 8010f7a:	12d2      	asrs	r2, r2, #11
 8010f7c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 8010f80:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8010f84:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8010f88:	12db      	asrs	r3, r3, #11
 8010f8a:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010f8c:	9b07      	ldr	r3, [sp, #28]
 8010f8e:	42b3      	cmp	r3, r6
 8010f90:	f47f af5f 	bne.w	8010e52 <jpeg_idct_9x9+0x1e>
 8010f94:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8010f96:	aa08      	add	r2, sp, #32
 8010f98:	3b04      	subs	r3, #4
 8010f9a:	9301      	str	r3, [sp, #4]
 8010f9c:	9b06      	ldr	r3, [sp, #24]
 8010f9e:	3320      	adds	r3, #32
 8010fa0:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010fa2:	9b01      	ldr	r3, [sp, #4]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010fa4:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    z1 = (INT32) wsptr[2];
 8010fa8:	6890      	ldr	r0, [r2, #8]
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010faa:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8010fac:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z4 = (INT32) wsptr[7];
 8010fb0:	f852 9c04 	ldr.w	r9, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 8010fb4:	9106      	str	r1, [sp, #24]
 8010fb6:	9301      	str	r3, [sp, #4]
 8010fb8:	460b      	mov	r3, r1
 8010fba:	995a      	ldr	r1, [sp, #360]	; 0x168
 8010fbc:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010fbe:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z2 = (INT32) wsptr[4];
 8010fc2:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010fc6:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010fca:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8010fce:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010fd2:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 8010fd6:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010fda:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp2 = tmp0 - tmp3 - tmp3;
 8010fde:	1b9e      	subs	r6, r3, r6
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010fe0:	1a43      	subs	r3, r0, r1
 8010fe2:	fb0c f303 	mul.w	r3, ip, r3
 8010fe6:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010fe8:	18f3      	adds	r3, r6, r3
 8010fea:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010fec:	1843      	adds	r3, r0, r1
 8010fee:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010ff0:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8010ff4:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010ff6:	f240 75dc 	movw	r5, #2012	; 0x7dc
 8010ffa:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8010ffc:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8010ffe:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8011000:	1a6d      	subs	r5, r5, r1
    tmp12 = tmp1 - tmp0 + tmp2;
 8011002:	4403      	add	r3, r0
    tmp13 = tmp1 - tmp2 + tmp3;
 8011004:	1a38      	subs	r0, r7, r0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8011006:	4f3d      	ldr	r7, [pc, #244]	; (80110fc <jpeg_idct_9x9+0x2c8>)
    tmp13 = tmp1 - tmp2 + tmp3;
 8011008:	1841      	adds	r1, r0, r1
    z1 = (INT32) wsptr[1];
 801100a:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp12 = tmp1 - tmp0 + tmp2;
 801100e:	9304      	str	r3, [sp, #16]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011010:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp13 = tmp1 - tmp2 + tmp3;
 8011014:	9105      	str	r1, [sp, #20]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011016:	eb00 0e09 	add.w	lr, r0, r9
    z2 = (INT32) wsptr[3];
 801101a:	f852 1c14 	ldr.w	r1, [r2, #-20]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801101e:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011020:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8011024:	eb00 0b07 	add.w	fp, r0, r7
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011028:	eba7 0809 	sub.w	r8, r7, r9
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801102c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011030:	f640 737a 	movw	r3, #3962	; 0xf7a
 8011034:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011038:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 801103c:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011040:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011044:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8011048:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 801104c:	eba1 0708 	sub.w	r7, r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011050:	1ac0      	subs	r0, r0, r3
    tmp3 += z2 + tmp1;
 8011052:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011054:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp2 += z2 - tmp1;
 8011058:	445f      	add	r7, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801105a:	eba0 0909 	sub.w	r9, r0, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801105e:	eb05 000c 	add.w	r0, r5, ip
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011062:	eba5 050c 	sub.w	r5, r5, ip
    tmp3 += z2 + tmp1;
 8011066:	448e      	add	lr, r1
			    & RANGE_MASK];
 8011068:	f3c0 4089 	ubfx	r0, r0, #18, #10
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801106c:	fb03 f909 	mul.w	r9, r3, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011070:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 8011072:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011076:	f81a 0000 	ldrb.w	r0, [sl, r0]
 801107a:	9b06      	ldr	r3, [sp, #24]
 801107c:	5458      	strb	r0, [r3, r1]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801107e:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011080:	f81a 0005 	ldrb.w	r0, [sl, r5]
 8011084:	7220      	strb	r0, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011086:	eb03 0009 	add.w	r0, r3, r9
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801108a:	eba3 0909 	sub.w	r9, r3, r9
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801108e:	9b04      	ldr	r3, [sp, #16]
			    & RANGE_MASK];
 8011090:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8011094:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011098:	f81a 0000 	ldrb.w	r0, [sl, r0]
 801109c:	7060      	strb	r0, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801109e:	f81a 0009 	ldrb.w	r0, [sl, r9]
 80110a2:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80110a4:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80110a6:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 80110a8:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80110ac:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80110b0:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80110b4:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80110b6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80110ba:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 80110bc:	9b05      	ldr	r3, [sp, #20]
 80110be:	4473      	add	r3, lr
			    & RANGE_MASK];
 80110c0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 80110c4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80110c8:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80110ca:	9b05      	ldr	r3, [sp, #20]
 80110cc:	eba3 010e 	sub.w	r1, r3, lr
			    & RANGE_MASK];
 80110d0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80110d4:	f81a 3001 	ldrb.w	r3, [sl, r1]
  for (ctr = 0; ctr < 9; ctr++) {
 80110d8:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80110da:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 80110dc:	9b02      	ldr	r3, [sp, #8]
 80110de:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
			    & RANGE_MASK];
 80110e2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 80110e6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80110ea:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 80110ec:	9b07      	ldr	r3, [sp, #28]
 80110ee:	428b      	cmp	r3, r1
 80110f0:	f47f af57 	bne.w	8010fa2 <jpeg_idct_9x9+0x16e>
  }
}
 80110f4:	b051      	add	sp, #324	; 0x144
 80110f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110fa:	bf00      	nop
 80110fc:	ffffd8cf 	.word	0xffffd8cf

08011100 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011104:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8011108:	b0d7      	sub	sp, #348	; 0x15c
 801110a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801110c:	f1a2 0b02 	sub.w	fp, r2, #2
 8011110:	9303      	str	r3, [sp, #12]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011112:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8011116:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011118:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801111a:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801111c:	f102 030e 	add.w	r3, r2, #14
 8011120:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011122:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8011126:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801112a:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801112e:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011130:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011134:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011136:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801113a:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801113e:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8011140:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8011144:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8011146:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801114a:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801114e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8011152:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 8011154:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 8011156:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8011158:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801115a:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 801115e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011162:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8011166:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801116a:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801116c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8011170:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8011172:	19f3      	adds	r3, r6, r7
 8011174:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8011176:	f241 0071 	movw	r0, #4209	; 0x1071
 801117a:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801117e:	489d      	ldr	r0, [pc, #628]	; (80113f4 <jpeg_idct_10x10+0x2f4>)
 8011180:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8011184:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 8011188:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801118a:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 801118e:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8011190:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011192:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 8011196:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011198:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801119a:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801119e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80111a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp24 = tmp10 - tmp12;
 80111a2:	9001      	str	r0, [sp, #4]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80111a4:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80111a8:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80111aa:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 80111ae:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80111b2:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 80111b6:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 80111b8:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 80111bc:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80111be:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80111c2:	f641 606f 	movw	r0, #7791	; 0x1e6f
 80111c6:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80111ca:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 80111ce:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80111d2:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80111d6:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80111da:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80111de:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80111e0:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80111e2:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80111e6:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80111e8:	1b86      	subs	r6, r0, r6
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80111ea:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80111ee:	f642 0353 	movw	r3, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80111f2:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80111f4:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80111f8:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80111fa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80111fe:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011202:	f241 468c 	movw	r6, #5260	; 0x148c
 8011206:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011208:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801120c:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011210:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011214:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011218:	1b5b      	subs	r3, r3, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801121a:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801121c:	444d      	add	r5, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801121e:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011222:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8011226:	f8c1 211c 	str.w	r2, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801122a:	18fa      	adds	r2, r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801122c:	1aff      	subs	r7, r7, r3
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801122e:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011230:	12d2      	asrs	r2, r2, #11
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8011232:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011236:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011238:	61ca      	str	r2, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801123a:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 801123c:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801123e:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8011242:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8011246:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801124a:	9b02      	ldr	r3, [sp, #8]
 801124c:	442b      	add	r3, r5
 801124e:	12db      	asrs	r3, r3, #11
 8011250:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011252:	9b02      	ldr	r3, [sp, #8]
 8011254:	1b5d      	subs	r5, r3, r5
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011256:	9b01      	ldr	r3, [sp, #4]
 8011258:	4453      	add	r3, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801125a:	12ed      	asrs	r5, r5, #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801125c:	12db      	asrs	r3, r3, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801125e:	f8c1 50bc 	str.w	r5, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011262:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011264:	9b01      	ldr	r3, [sp, #4]
 8011266:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801126a:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801126c:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011270:	455b      	cmp	r3, fp
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011272:	f8c1 609c 	str.w	r6, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011276:	f47f af54 	bne.w	8011122 <jpeg_idct_10x10+0x22>
 801127a:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 801127c:	a906      	add	r1, sp, #24
 801127e:	f1a3 0b04 	sub.w	fp, r3, #4
 8011282:	3324      	adds	r3, #36	; 0x24
 8011284:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011286:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801128a:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 801128e:	9a60      	ldr	r2, [sp, #384]	; 0x180
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011290:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 8011292:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8011296:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8011298:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 801129c:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801129e:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80112a2:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80112a6:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80112aa:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80112ac:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 80112ae:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80112b2:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 80112b4:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 80112b8:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80112bc:	006d      	lsls	r5, r5, #1
 80112be:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 80112c2:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80112c6:	9301      	str	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80112c8:	19eb      	adds	r3, r5, r7
 80112ca:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80112cc:	f241 0071 	movw	r0, #4209	; 0x1071
 80112d0:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80112d4:	4847      	ldr	r0, [pc, #284]	; (80113f4 <jpeg_idct_10x10+0x2f4>)
 80112d6:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 80112da:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 80112de:	1b70      	subs	r0, r6, r5
    z2 = (INT32) wsptr[3];
 80112e0:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp21 = tmp11 + tmp13;
 80112e4:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 80112e6:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 80112e8:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80112ea:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 80112ee:	9303      	str	r3, [sp, #12]
    z4 = (INT32) wsptr[7];
 80112f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 80112f4:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 80112f8:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 80112fc:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80112fe:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8011302:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8011306:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 801130a:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 801130e:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011312:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 8011316:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801131a:	f240 7014 	movw	r0, #1812	; 0x714
 801131e:	fb00 f602 	mul.w	r6, r0, r2
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011322:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011326:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011328:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801132c:	eba6 0608 	sub.w	r6, r6, r8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011330:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8011334:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011336:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8011338:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801133c:	035b      	lsls	r3, r3, #13
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801133e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011342:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8011346:	eba3 3840 	sub.w	r8, r3, r0, lsl #13
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801134a:	f642 0353 	movw	r3, #10323	; 0x2853
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801134e:	9800      	ldr	r0, [sp, #0]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011350:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011352:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011354:	9e60      	ldr	r6, [sp, #384]	; 0x180
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011356:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801135a:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801135e:	eb0c 020e 	add.w	r2, ip, lr
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011362:	ebac 0c0e 	sub.w	ip, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011366:	1b5b      	subs	r3, r3, r5
			    & RANGE_MASK];
 8011368:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801136c:	444d      	add	r5, r9
			    & RANGE_MASK];
 801136e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011372:	5c82      	ldrb	r2, [r0, r2]
 8011374:	9804      	ldr	r0, [sp, #16]
 8011376:	5582      	strb	r2, [r0, r6]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011378:	9a00      	ldr	r2, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801137a:	9800      	ldr	r0, [sp, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801137c:	f812 200c 	ldrb.w	r2, [r2, ip]
 8011380:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011382:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011384:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8011386:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801138a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801138e:	5c82      	ldrb	r2, [r0, r2]
 8011390:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011392:	5dc3      	ldrb	r3, [r0, r7]
 8011394:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011396:	9b01      	ldr	r3, [sp, #4]
 8011398:	4443      	add	r3, r8
			    & RANGE_MASK];
 801139a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801139e:	5cc3      	ldrb	r3, [r0, r3]
 80113a0:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80113a2:	9b01      	ldr	r3, [sp, #4]
 80113a4:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 80113a8:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80113ac:	f810 3008 	ldrb.w	r3, [r0, r8]
 80113b0:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80113b2:	9b03      	ldr	r3, [sp, #12]
 80113b4:	442b      	add	r3, r5
			    & RANGE_MASK];
 80113b6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80113ba:	5cc3      	ldrb	r3, [r0, r3]
 80113bc:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80113be:	9b03      	ldr	r3, [sp, #12]
 80113c0:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 80113c2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80113c6:	5d43      	ldrb	r3, [r0, r5]
 80113c8:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80113ca:	9b02      	ldr	r3, [sp, #8]
 80113cc:	4453      	add	r3, sl
			    & RANGE_MASK];
 80113ce:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80113d2:	5cc3      	ldrb	r3, [r0, r3]
 80113d4:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80113d6:	9b02      	ldr	r3, [sp, #8]
 80113d8:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 80113dc:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80113e0:	f810 300a 	ldrb.w	r3, [r0, sl]
 80113e4:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 80113e6:	9b05      	ldr	r3, [sp, #20]
 80113e8:	455b      	cmp	r3, fp
 80113ea:	f47f af4c 	bne.w	8011286 <jpeg_idct_10x10+0x186>
  }
}
 80113ee:	b057      	add	sp, #348	; 0x15c
 80113f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f4:	ffffba5c 	.word	0xffffba5c

080113f8 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80113f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113fc:	b0e5      	sub	sp, #404	; 0x194
 80113fe:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011400:	f1a2 0a02 	sub.w	sl, r2, #2
 8011404:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011406:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801140a:	3380      	adds	r3, #128	; 0x80
 801140c:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801140e:	1f0b      	subs	r3, r1, #4
 8011410:	9302      	str	r3, [sp, #8]
 8011412:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8011416:	aa0c      	add	r2, sp, #48	; 0x30
 8011418:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801141a:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 801141c:	f642 3c6c 	movw	ip, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011420:	f93a 3f02 	ldrsh.w	r3, [sl, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011424:	3204      	adds	r2, #4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011426:	f851 0f04 	ldr.w	r0, [r1, #4]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801142a:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801142e:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011430:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011432:	f9ba 5040 	ldrsh.w	r5, [sl, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011436:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011438:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801143c:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp10 <<= CONST_BITS;
 8011440:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011442:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011444:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011448:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 801144a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801144e:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011450:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011454:	1a27      	subs	r7, r4, r0
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011456:	f9ba e010 	ldrsh.w	lr, [sl, #16]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801145a:	eba4 0b06 	sub.w	fp, r4, r6
 801145e:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011462:	f640 55c9 	movw	r5, #3529	; 0xdc9
 8011466:	436f      	muls	r7, r5
    z4 = z1 + z3;
 8011468:	1985      	adds	r5, r0, r6
    z4 -= z2;
 801146a:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 801146c:	fb0c 3301 	mla	r3, ip, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011470:	eb0b 0c07 	add.w	ip, fp, r7
    z4 -= z2;
 8011474:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011476:	449c      	add	ip, r3
 8011478:	49d0      	ldr	r1, [pc, #832]	; (80117bc <jpeg_idct_11x11+0x3c4>)
 801147a:	fb01 c104 	mla	r1, r1, r4, ip
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 801147e:	f244 3cb5 	movw	ip, #17333	; 0x43b5
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011482:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011484:	fb0c 3c06 	mla	ip, ip, r6, r3
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8011488:	49cd      	ldr	r1, [pc, #820]	; (80117c0 <jpeg_idct_11x11+0x3c8>)
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 801148a:	44e3      	add	fp, ip
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 801148c:	fb01 3c00 	mla	ip, r1, r0, r3
 8011490:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011494:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011498:	f9ba c050 	ldrsh.w	ip, [sl, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 801149c:	9104      	str	r1, [sp, #16]
    tmp24 += tmp25;
 801149e:	49c9      	ldr	r1, [pc, #804]	; (80117c4 <jpeg_idct_11x11+0x3cc>)
 80114a0:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80114a4:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 80114a8:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80114ac:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80114b0:	9105      	str	r1, [sp, #20]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80114b2:	49c5      	ldr	r1, [pc, #788]	; (80117c8 <jpeg_idct_11x11+0x3d0>)
 80114b4:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80114b6:	fb06 0004 	mla	r0, r6, r4, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80114ba:	f9ba 6070 	ldrsh.w	r6, [sl, #112]	; 0x70

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80114be:	f44f 644c 	mov.w	r4, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80114c2:	1941      	adds	r1, r0, r5
 80114c4:	9106      	str	r1, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80114c6:	9902      	ldr	r1, [sp, #8]
 80114c8:	6a08      	ldr	r0, [r1, #32]
 80114ca:	fb00 f90e 	mul.w	r9, r0, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80114ce:	6e08      	ldr	r0, [r1, #96]	; 0x60
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80114d0:	f241 5e74 	movw	lr, #5492	; 0x1574
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80114d4:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80114d6:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 80114da:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80114de:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
 80114e2:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 80114e4:	eb09 0007 	add.w	r0, r9, r7
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80114e8:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80114ec:	eb09 0806 	add.w	r8, r9, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80114f0:	4435      	add	r5, r6
 80114f2:	4365      	muls	r5, r4
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80114f4:	f641 446a 	movw	r4, #7274	; 0x1c6a
 80114f8:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80114fa:	eb09 040c 	add.w	r4, r9, ip
 80114fe:	fb0e f104 	mul.w	r1, lr, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011502:	f640 34b8 	movw	r4, #3000	; 0xbb8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011506:	eb00 0e01 	add.w	lr, r0, r1
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 801150a:	fb04 5808 	mla	r8, r4, r8, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801150e:	9107      	str	r1, [sp, #28]
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011510:	eb07 040c 	add.w	r4, r7, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011514:	44c6      	add	lr, r8
 8011516:	49ad      	ldr	r1, [pc, #692]	; (80117cc <jpeg_idct_11x11+0x3d4>)
 8011518:	fb01 ee09 	mla	lr, r1, r9, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 801151c:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011520:	f244 2958 	movw	r9, #16984	; 0x4258
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011524:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011528:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801152a:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801152e:	fb01 440c 	mla	r4, r1, ip, r4
 8011532:	9907      	ldr	r1, [sp, #28]
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011534:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011536:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011538:	440c      	add	r4, r1
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801153a:	49a5      	ldr	r1, [pc, #660]	; (80117d0 <jpeg_idct_11x11+0x3d8>)
 801153c:	4348      	muls	r0, r1
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801153e:	f244 3147 	movw	r1, #17223	; 0x4347
    tmp11 += z1;
 8011542:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011544:	fb01 0006 	mla	r0, r1, r6, r0

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011548:	9903      	ldr	r1, [sp, #12]
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801154a:	4480      	add	r8, r0
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 801154c:	f242 000b 	movw	r0, #8203	; 0x200b
 8011550:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011554:	489f      	ldr	r0, [pc, #636]	; (80117d4 <jpeg_idct_11x11+0x3dc>)
 8011556:	fb00 cc07 	mla	ip, r0, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 801155a:	f2a0 60f7 	subw	r0, r0, #1783	; 0x6f7
 801155e:	fb00 cc06 	mla	ip, r0, r6, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011562:	eb0b 000e 	add.w	r0, fp, lr
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011566:	ebab 0e0e 	sub.w	lr, fp, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801156a:	12c0      	asrs	r0, r0, #11
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 801156c:	4465      	add	r5, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801156e:	f842 0c04 	str.w	r0, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011572:	ea4f 20ee 	mov.w	r0, lr, asr #11
 8011576:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801157a:	eb01 0009 	add.w	r0, r1, r9
 801157e:	12c0      	asrs	r0, r0, #11
 8011580:	61d0      	str	r0, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011582:	eba1 0009 	sub.w	r0, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011586:	9905      	ldr	r1, [sp, #20]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011588:	12c0      	asrs	r0, r0, #11
 801158a:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801158e:	1908      	adds	r0, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011590:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011592:	12c0      	asrs	r0, r0, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011594:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011596:	63d0      	str	r0, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011598:	9904      	ldr	r1, [sp, #16]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801159a:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801159e:	eb01 0008 	add.w	r0, r1, r8
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80115a2:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80115a6:	9906      	ldr	r1, [sp, #24]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80115a8:	12c0      	asrs	r0, r0, #11
 80115aa:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80115ac:	ea4f 20e8 	mov.w	r0, r8, asr #11
 80115b0:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80115b4:	1948      	adds	r0, r1, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80115b6:	1b4d      	subs	r5, r1, r5
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80115b8:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80115ba:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80115bc:	12ed      	asrs	r5, r5, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80115be:	67d0      	str	r0, [r2, #124]	; 0x7c
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80115c0:	f645 00ad 	movw	r0, #22701	; 0x58ad
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80115c4:	f8c2 50bc 	str.w	r5, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80115c8:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 80115cc:	12db      	asrs	r3, r3, #11
 80115ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80115d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115d4:	4553      	cmp	r3, sl
 80115d6:	f47f af20 	bne.w	801141a <jpeg_idct_11x11+0x22>
 80115da:	9b08      	ldr	r3, [sp, #32]
 80115dc:	3b04      	subs	r3, #4
 80115de:	9303      	str	r3, [sp, #12]
 80115e0:	9b08      	ldr	r3, [sp, #32]
 80115e2:	3328      	adds	r3, #40	; 0x28
 80115e4:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 80115e6:	ab0c      	add	r3, sp, #48	; 0x30
 80115e8:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80115ea:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80115ec:	f245 1e7e 	movw	lr, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 80115f0:	9a02      	ldr	r2, [sp, #8]
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80115f2:	f241 5b74 	movw	fp, #5492	; 0x1574
    outptr = output_buf[ctr] + output_col;
 80115f6:	f853 1f04 	ldr.w	r1, [r3, #4]!
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80115fa:	f244 2a58 	movw	sl, #16984	; 0x4258
    z2 = (INT32) wsptr[4];
 80115fe:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8011600:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8011602:	9109      	str	r1, [sp, #36]	; 0x24
 8011604:	9303      	str	r3, [sp, #12]
 8011606:	460b      	mov	r3, r1
 8011608:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801160a:	1bf0      	subs	r0, r6, r7
    z1 = (INT32) wsptr[2];
 801160c:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 801160e:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011610:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 8011612:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011614:	fb0e fe00 	mul.w	lr, lr, r0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011618:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801161c:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801161e:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011622:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011624:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011626:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 801162a:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 801162c:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 801162e:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011630:	f642 306c 	movw	r0, #11116	; 0x2b6c
 8011634:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011638:	eb0e 000c 	add.w	r0, lr, ip
 801163c:	4a5f      	ldr	r2, [pc, #380]	; (80117bc <jpeg_idct_11x11+0x3c4>)
 801163e:	4418      	add	r0, r3
 8011640:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011644:	f244 30b5 	movw	r0, #17333	; 0x43b5
 8011648:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 801164c:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 801164e:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011652:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011654:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8011656:	4a5a      	ldr	r2, [pc, #360]	; (80117c0 <jpeg_idct_11x11+0x3c8>)
 8011658:	fb02 3e04 	mla	lr, r2, r4, r3
 801165c:	eb0e 020c 	add.w	r2, lr, ip
 8011660:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 8011662:	4a58      	ldr	r2, [pc, #352]	; (80117c4 <jpeg_idct_11x11+0x3cc>)
 8011664:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8011668:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 801166c:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011670:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8011674:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8011676:	4a54      	ldr	r2, [pc, #336]	; (80117c8 <jpeg_idct_11x11+0x3d0>)
 8011678:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801167a:	fb07 4406 	mla	r4, r7, r6, r4
 801167e:	1962      	adds	r2, r4, r5
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011680:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011684:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 8011686:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 8011688:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 801168c:	6857      	ldr	r7, [r2, #4]
    z3 = (INT32) wsptr[5];
 801168e:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 8011692:	eb07 040e 	add.w	r4, r7, lr
    z4 = (INT32) wsptr[7];
 8011696:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp10 = tmp11 + tmp12 + tmp13 -
 801169a:	4a4c      	ldr	r2, [pc, #304]	; (80117cc <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 801169c:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80116a0:	eb07 090c 	add.w	r9, r7, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80116a4:	4466      	add	r6, ip
 80116a6:	436e      	muls	r6, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80116a8:	f641 456a 	movw	r5, #7274	; 0x1c6a
 80116ac:	436c      	muls	r4, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80116ae:	eb07 0508 	add.w	r5, r7, r8
 80116b2:	fb0b fb05 	mul.w	fp, fp, r5
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80116b6:	f640 35b8 	movw	r5, #3000	; 0xbb8
 80116ba:	fb05 6909 	mla	r9, r5, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 80116be:	eb04 050b 	add.w	r5, r4, fp
 80116c2:	444d      	add	r5, r9
 80116c4:	fb02 5707 	mla	r7, r2, r7, r5
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 80116c8:	eb0e 0508 	add.w	r5, lr, r8
 80116cc:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 80116d0:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80116d4:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80116d6:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80116da:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80116de:	4a3c      	ldr	r2, [pc, #240]	; (80117d0 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80116e0:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80116e2:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80116e6:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80116e8:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80116ec:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80116ee:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 80116f0:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80116f2:	fb0b 440c 	mla	r4, fp, ip, r4
 80116f6:	44a1      	add	r9, r4
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80116f8:	f242 040b 	movw	r4, #8203	; 0x200b
 80116fc:	fb04 f808 	mul.w	r8, r4, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011700:	4c34      	ldr	r4, [pc, #208]	; (80117d4 <jpeg_idct_11x11+0x3dc>)
 8011702:	fb04 880e 	mla	r8, r4, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011706:	f2a4 64f7 	subw	r4, r4, #1783	; 0x6f7
 801170a:	fb04 880c 	mla	r8, r4, ip, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801170e:	19d4      	adds	r4, r2, r7
 8011710:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011712:	f3c4 4489 	ubfx	r4, r4, #18, #10
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011716:	4446      	add	r6, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011718:	5d14      	ldrb	r4, [r2, r4]
 801171a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801171c:	5414      	strb	r4, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801171e:	9a05      	ldr	r2, [sp, #20]
 8011720:	1bd0      	subs	r0, r2, r7
 8011722:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011724:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011728:	5c10      	ldrb	r0, [r2, r0]
 801172a:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801172c:	9a04      	ldr	r2, [sp, #16]
 801172e:	eb02 000a 	add.w	r0, r2, sl
 8011732:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011734:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011738:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801173a:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801173c:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801173e:	eba2 0a0a 	sub.w	sl, r2, sl
 8011742:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011744:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011748:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801174c:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801174e:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011750:	1950      	adds	r0, r2, r5
 8011752:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011754:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011758:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801175a:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801175c:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801175e:	1b55      	subs	r5, r2, r5
 8011760:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011762:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011766:	5d50      	ldrb	r0, [r2, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011768:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801176a:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801176c:	eb02 0009 	add.w	r0, r2, r9
 8011770:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011772:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011776:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011778:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801177a:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801177c:	eba2 0909 	sub.w	r9, r2, r9
 8011780:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011782:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011786:	f812 0009 	ldrb.w	r0, [r2, r9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801178a:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801178c:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801178e:	1990      	adds	r0, r2, r6
 8011790:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011792:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011796:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011798:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801179a:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801179c:	1b96      	subs	r6, r2, r6
 801179e:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80117a0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80117a4:	5d90      	ldrb	r0, [r2, r6]
 80117a6:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80117a8:	f645 00ad 	movw	r0, #22701	; 0x58ad
 80117ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117ae:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80117b2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80117b4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80117b8:	5cd3      	ldrb	r3, [r2, r3]
 80117ba:	e00d      	b.n	80117d8 <jpeg_idct_11x11+0x3e0>
 80117bc:	ffffc5b4 	.word	0xffffc5b4
 80117c0:	ffffcf91 	.word	0xffffcf91
 80117c4:	ffffdb05 	.word	0xffffdb05
 80117c8:	ffffd37d 	.word	0xffffd37d
 80117cc:	ffffe276 	.word	0xffffe276
 80117d0:	ffffc675 	.word	0xffffc675
 80117d4:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 80117d8:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80117da:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 80117dc:	9b02      	ldr	r3, [sp, #8]
 80117de:	3320      	adds	r3, #32
 80117e0:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 80117e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117e4:	4293      	cmp	r3, r2
 80117e6:	f47f af00 	bne.w	80115ea <jpeg_idct_11x11+0x1f2>
  }
}
 80117ea:	b065      	add	sp, #404	; 0x194
 80117ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080117f0 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80117f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f4:	b0eb      	sub	sp, #428	; 0x1ac
 80117f6:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80117f8:	f1a2 0902 	sub.w	r9, r2, #2
 80117fc:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80117fe:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011802:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011806:	1f0b      	subs	r3, r1, #4
 8011808:	9300      	str	r3, [sp, #0]
 801180a:	f102 030e 	add.w	r3, r2, #14
 801180e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8011810:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011812:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011814:	f641 388d 	movw	r8, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011818:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801181c:	f640 0a5b 	movw	sl, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011820:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011824:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011826:	f9b9 0040 	ldrsh.w	r0, [r9, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801182a:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801182c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011830:	f9b9 5020 	ldrsh.w	r5, [r9, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011834:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011836:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801183a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801183c:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801183e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011840:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011842:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011846:	f9b9 c060 	ldrsh.w	ip, [r9, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801184a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801184c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011850:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011854:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 8011856:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 8011858:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801185a:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 801185e:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8011862:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8011864:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 8011868:	eb07 010c 	add.w	r1, r7, ip
 801186c:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 801186e:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8011872:	1907      	adds	r7, r0, r4
    tmp12 = z4 - z1 - z2;
 8011874:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 8011878:	9102      	str	r1, [sp, #8]
    tmp20 = tmp10 + tmp12;
 801187a:	19f1      	adds	r1, r6, r7
    tmp12 = z4 - z1 - z2;
 801187c:	1b04      	subs	r4, r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801187e:	f9b9 c030 	ldrsh.w	ip, [r9, #48]	; 0x30
    tmp20 = tmp10 + tmp12;
 8011882:	9103      	str	r1, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8011884:	1bf1      	subs	r1, r6, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011886:	f9b9 7010 	ldrsh.w	r7, [r9, #16]
    tmp25 = tmp10 - tmp12;
 801188a:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 801188c:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 801188e:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011890:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011894:	f9b9 0070 	ldrsh.w	r0, [r9, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 8011898:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801189a:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 801189c:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801189e:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80118a2:	6a12      	ldr	r2, [r2, #32]
 80118a4:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80118a6:	9a00      	ldr	r2, [sp, #0]
 80118a8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80118aa:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80118ae:	9a00      	ldr	r2, [sp, #0]
 80118b0:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80118b4:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80118b8:	49b6      	ldr	r1, [pc, #728]	; (8011b94 <jpeg_idct_12x12+0x3a4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80118ba:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80118bc:	9a00      	ldr	r2, [sp, #0]
 80118be:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 80118c2:	197e      	adds	r6, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80118c4:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80118c6:	fb01 f00c 	mul.w	r0, r1, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80118ca:	49b3      	ldr	r1, [pc, #716]	; (8011b98 <jpeg_idct_12x12+0x3a8>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80118cc:	eb02 0e06 	add.w	lr, r2, r6
 80118d0:	fb08 fe0e 	mul.w	lr, r8, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80118d4:	fb0a ea06 	mla	sl, sl, r6, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80118d8:	f640 06f7 	movw	r6, #2295	; 0x8f7
 80118dc:	eb04 080a 	add.w	r8, r4, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80118e0:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80118e4:	fb06 8807 	mla	r8, r6, r7, r8
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80118e8:	18ae      	adds	r6, r5, r2
 80118ea:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80118ec:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80118ee:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80118f0:	49aa      	ldr	r1, [pc, #680]	; (8011b9c <jpeg_idct_12x12+0x3ac>)
 80118f2:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80118f6:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 80118f8:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80118fc:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011900:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011902:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 8011906:	fb0a 4402 	mla	r4, sl, r2, r4
 801190a:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801190c:	49a4      	ldr	r1, [pc, #656]	; (8011ba0 <jpeg_idct_12x12+0x3b0>)
 801190e:	fb01 0007 	mla	r0, r1, r7, r0
 8011912:	49a4      	ldr	r1, [pc, #656]	; (8011ba4 <jpeg_idct_12x12+0x3b4>)
 8011914:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8011918:	1aba      	subs	r2, r7, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801191a:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801191e:	f641 077e 	movw	r7, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011922:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011924:	eb02 0e05 	add.w	lr, r2, r5
 8011928:	fb0c fe0e 	mul.w	lr, ip, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801192c:	fb01 e505 	mla	r5, r1, r5, lr

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011930:	9903      	ldr	r1, [sp, #12]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8011932:	fb07 e202 	mla	r2, r7, r2, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011936:	eb01 0708 	add.w	r7, r1, r8
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801193a:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801193e:	12ff      	asrs	r7, r7, #11
 8011940:	f843 7c04 	str.w	r7, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011944:	ea4f 27e8 	mov.w	r7, r8, asr #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011948:	9901      	ldr	r1, [sp, #4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801194a:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801194e:	188f      	adds	r7, r1, r2
 8011950:	12ff      	asrs	r7, r7, #11
 8011952:	61df      	str	r7, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011954:	1a8f      	subs	r7, r1, r2
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011956:	9a05      	ldr	r2, [sp, #20]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011958:	12ff      	asrs	r7, r7, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801195a:	4432      	add	r2, r6
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801195c:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011960:	12d2      	asrs	r2, r2, #11
 8011962:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011964:	9a05      	ldr	r2, [sp, #20]
 8011966:	1b96      	subs	r6, r2, r6
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011968:	9a06      	ldr	r2, [sp, #24]
 801196a:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801196c:	12f6      	asrs	r6, r6, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801196e:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011970:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011974:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011976:	9a06      	ldr	r2, [sp, #24]
 8011978:	1b14      	subs	r4, r2, r4
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801197a:	9a02      	ldr	r2, [sp, #8]
 801197c:	442a      	add	r2, r5
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801197e:	12e4      	asrs	r4, r4, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011980:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011982:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011986:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011988:	9a02      	ldr	r2, [sp, #8]
 801198a:	1b55      	subs	r5, r2, r5
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801198c:	9a04      	ldr	r2, [sp, #16]
 801198e:	4402      	add	r2, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011990:	12ed      	asrs	r5, r5, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011992:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011994:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011998:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801199c:	9a04      	ldr	r2, [sp, #16]
 801199e:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80119a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80119a2:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80119a4:	454a      	cmp	r2, r9
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80119a6:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80119aa:	f47f af32 	bne.w	8011812 <jpeg_idct_12x12+0x22>
 80119ae:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 80119b0:	aa0a      	add	r2, sp, #40	; 0x28
 80119b2:	f1a3 0a04 	sub.w	sl, r3, #4
 80119b6:	332c      	adds	r3, #44	; 0x2c
 80119b8:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80119ba:	f85a 3f04 	ldr.w	r3, [sl, #4]!

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80119be:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 80119c2:	9974      	ldr	r1, [sp, #464]	; 0x1d0
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80119c4:	3220      	adds	r2, #32
    z2 = (INT32) wsptr[6];
 80119c6:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 80119ca:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 80119ce:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 80119d0:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80119d2:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 80119d6:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 80119d8:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 80119dc:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80119e0:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 80119e2:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80119e4:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80119e8:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80119ec:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80119ee:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 80119f2:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 80119f6:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 80119fa:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 80119fc:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8011a00:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8011a04:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 8011a08:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 8011a0c:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 8011a0e:	1b0c      	subs	r4, r1, r4
    tmp25 = tmp10 - tmp12;
 8011a10:	eba6 030c 	sub.w	r3, r6, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011a14:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z3 = (INT32) wsptr[5];
 8011a18:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp25 = tmp10 - tmp12;
 8011a1c:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 8011a1e:	1903      	adds	r3, r0, r4
    tmp20 = tmp10 + tmp12;
 8011a20:	eb06 070c 	add.w	r7, r6, ip
    tmp22 = tmp11 + tmp12;
 8011a24:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 8011a26:	1b03      	subs	r3, r0, r4
    z4 = (INT32) wsptr[7];
 8011a28:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 8011a2c:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011a2e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011a32:	eb05 0904 	add.w	r9, r5, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011a36:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011a3a:	4956      	ldr	r1, [pc, #344]	; (8011b94 <jpeg_idct_12x12+0x3a4>)
 8011a3c:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 8011a3e:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8011a42:	195e      	adds	r6, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011a44:	eb04 0c06 	add.w	ip, r4, r6
 8011a48:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8011a4c:	f640 0e5b 	movw	lr, #2139	; 0x85b
 8011a50:	fb0e c806 	mla	r8, lr, r6, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011a54:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8011a58:	eb00 0e08 	add.w	lr, r0, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011a5c:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011a60:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011a64:	4b4c      	ldr	r3, [pc, #304]	; (8011b98 <jpeg_idct_12x12+0x3a8>)
 8011a66:	fb03 f909 	mul.w	r9, r3, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011a6a:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 8011a6e:	eb01 0609 	add.w	r6, r1, r9
 8011a72:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011a76:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011a7a:	4446      	add	r6, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011a7c:	f243 28c6 	movw	r8, #12998	; 0x32c6
 8011a80:	fb08 0004 	mla	r0, r8, r4, r0
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011a84:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011a88:	4481      	add	r9, r0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011a8a:	4845      	ldr	r0, [pc, #276]	; (8011ba0 <jpeg_idct_12x12+0x3b0>)
 8011a8c:	fb00 1103 	mla	r1, r0, r3, r1
 8011a90:	4b44      	ldr	r3, [pc, #272]	; (8011ba4 <jpeg_idct_12x12+0x3b4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011a92:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011a94:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 8011a98:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8011a9c:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 8011a9e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011aa2:	4461      	add	r1, ip
    z2 -= z3;
 8011aa4:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011aa6:	4b40      	ldr	r3, [pc, #256]	; (8011ba8 <jpeg_idct_12x12+0x3b8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011aa8:	eb04 0c05 	add.w	ip, r4, r5
 8011aac:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8011ab0:	f641 087e 	movw	r8, #6270	; 0x187e
 8011ab4:	fb08 c404 	mla	r4, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011ab8:	eb07 080e 	add.w	r8, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011abc:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011ac0:	fb03 c505 	mla	r5, r3, r5, ip
			     & RANGE_MASK];
 8011ac4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011ac8:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8011aca:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011ace:	f81b c008 	ldrb.w	ip, [fp, r8]
 8011ad2:	f803 c000 	strb.w	ip, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011ad6:	9b00      	ldr	r3, [sp, #0]
 8011ad8:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8011adc:	72df      	strb	r7, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011ade:	9b01      	ldr	r3, [sp, #4]
 8011ae0:	191f      	adds	r7, r3, r4
 8011ae2:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011ae4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011ae8:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8011aec:	705f      	strb	r7, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011aee:	9b01      	ldr	r3, [sp, #4]
 8011af0:	eba3 0804 	sub.w	r8, r3, r4
			     & RANGE_MASK];
 8011af4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011af8:	f81b 4008 	ldrb.w	r4, [fp, r8]
 8011afc:	9b00      	ldr	r3, [sp, #0]
 8011afe:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011b00:	9b04      	ldr	r3, [sp, #16]
 8011b02:	199c      	adds	r4, r3, r6
 8011b04:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011b06:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011b0a:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8011b0e:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011b10:	9b04      	ldr	r3, [sp, #16]
 8011b12:	1b9e      	subs	r6, r3, r6
 8011b14:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011b16:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011b1a:	f81b 4006 	ldrb.w	r4, [fp, r6]
 8011b1e:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011b20:	9b05      	ldr	r3, [sp, #20]
 8011b22:	eb03 0409 	add.w	r4, r3, r9
 8011b26:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011b28:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011b2c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8011b30:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011b32:	9b05      	ldr	r3, [sp, #20]
 8011b34:	eba3 0009 	sub.w	r0, r3, r9
 8011b38:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011b3a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011b3e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011b42:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011b44:	9b02      	ldr	r3, [sp, #8]
 8011b46:	1958      	adds	r0, r3, r5
 8011b48:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011b4a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011b4e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011b52:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011b54:	9b02      	ldr	r3, [sp, #8]
 8011b56:	1b5d      	subs	r5, r3, r5
 8011b58:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011b5a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011b5e:	f81b 0005 	ldrb.w	r0, [fp, r5]
 8011b62:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011b64:	9b03      	ldr	r3, [sp, #12]
 8011b66:	1858      	adds	r0, r3, r1
 8011b68:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011b6a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011b6e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011b72:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011b74:	9b03      	ldr	r3, [sp, #12]
 8011b76:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8011b78:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011b7c:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8011b80:	9b00      	ldr	r3, [sp, #0]
 8011b82:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8011b84:	9b07      	ldr	r3, [sp, #28]
 8011b86:	4553      	cmp	r3, sl
 8011b88:	f47f af17 	bne.w	80119ba <jpeg_idct_12x12+0x1ca>
  }
}
 8011b8c:	b06b      	add	sp, #428	; 0x1ac
 8011b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b92:	bf00      	nop
 8011b94:	ffffeeaf 	.word	0xffffeeaf
 8011b98:	ffffde8b 	.word	0xffffde8b
 8011b9c:	ffffd0b0 	.word	0xffffd0b0
 8011ba0:	ffffea5c 	.word	0xffffea5c
 8011ba4:	ffffc08c 	.word	0xffffc08c
 8011ba8:	ffffc4df 	.word	0xffffc4df

08011bac <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb0:	b0f9      	sub	sp, #484	; 0x1e4
 8011bb2:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 8011bb4:	f1a2 0b02 	sub.w	fp, r2, #2
 8011bb8:	930c      	str	r3, [sp, #48]	; 0x30
 8011bba:	3f04      	subs	r7, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011bbc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011bc0:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011bc4:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8011bc8:	aa10      	add	r2, sp, #64	; 0x40
 8011bca:	930f      	str	r3, [sp, #60]	; 0x3c
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011bcc:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011bd0:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011bd4:	f857 1f04 	ldr.w	r1, [r7, #4]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011bd8:	f641 6802 	movw	r8, #7682	; 0x1e02
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011bdc:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011be0:	3204      	adds	r2, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011be2:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011be4:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011be8:	f9bb 0060 	ldrsh.w	r0, [fp, #96]	; 0x60
    z1 <<= CONST_BITS;
 8011bec:	035b      	lsls	r3, r3, #13
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011bf2:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bf6:	435c      	muls	r4, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011bf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011bfc:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011c02:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 8011c04:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 8011c06:	1a09      	subs	r1, r1, r0
 8011c08:	9104      	str	r1, [sp, #16]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011c0a:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011c0e:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011c10:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
 8011c14:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011c18:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8011c1c:	fb00 5004 	mla	r0, r0, r4, r5
 8011c20:	4408      	add	r0, r1
 8011c22:	9006      	str	r0, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011c24:	f241 000c 	movw	r0, #4108	; 0x100c
 8011c28:	4360      	muls	r0, r4
 8011c2a:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011c2c:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011c30:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011c32:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011c36:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011c3a:	9007      	str	r0, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011c3c:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011c40:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011c42:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011c44:	1a2d      	subs	r5, r5, r0
 8011c46:	440d      	add	r5, r1
 8011c48:	9508      	str	r5, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011c4a:	4dd0      	ldr	r5, [pc, #832]	; (8011f8c <jpeg_idct_13x13+0x3e0>)
 8011c4c:	fb05 0004 	mla	r0, r5, r4, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011c50:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011c54:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011c56:	9805      	ldr	r0, [sp, #20]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011c58:	9109      	str	r1, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011c5a:	f640 51f2 	movw	r1, #3570	; 0xdf2
 8011c5e:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011c60:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8011c64:	4371      	muls	r1, r6
 8011c66:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011c68:	48c9      	ldr	r0, [pc, #804]	; (8011f90 <jpeg_idct_13x13+0x3e4>)
 8011c6a:	4360      	muls	r0, r4
 8011c6c:	1ac0      	subs	r0, r0, r3
 8011c6e:	1a40      	subs	r0, r0, r1
 8011c70:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011c72:	48c8      	ldr	r0, [pc, #800]	; (8011f94 <jpeg_idct_13x13+0x3e8>)
 8011c74:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011c78:	f9bb 0030 	ldrsh.w	r0, [fp, #48]	; 0x30
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011c7c:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011c7e:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011c82:	930b      	str	r3, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011c84:	6a3b      	ldr	r3, [r7, #32]
 8011c86:	434b      	muls	r3, r1
 8011c88:	9302      	str	r3, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011c8c:	9902      	ldr	r1, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011c8e:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011c90:	f9bb 0050 	ldrsh.w	r0, [fp, #80]	; 0x50
 8011c94:	4368      	muls	r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011c96:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011c9a:	18ce      	adds	r6, r1, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011c9c:	9001      	str	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011c9e:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
 8011ca2:	4368      	muls	r0, r5
 8011ca4:	9003      	str	r0, [sp, #12]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011ca6:	f642 2050 	movw	r0, #10832	; 0x2a50
 8011caa:	4370      	muls	r0, r6
 8011cac:	4601      	mov	r1, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011cae:	e9dd 0501 	ldrd	r0, r5, [sp, #4]
 8011cb2:	4428      	add	r0, r5
 8011cb4:	f242 553e 	movw	r5, #9534	; 0x253e
 8011cb8:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8011cba:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011cbe:	eb01 0e05 	add.w	lr, r1, r5
    tmp15 = z1 + z4;
 8011cc2:	eb06 0900 	add.w	r9, r6, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011cc6:	48b4      	ldr	r0, [pc, #720]	; (8011f98 <jpeg_idct_13x13+0x3ec>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011cc8:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011ccc:	44d6      	add	lr, sl
 8011cce:	fb00 ee06 	mla	lr, r0, r6, lr
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011cd2:	9801      	ldr	r0, [sp, #4]
 8011cd4:	4eb1      	ldr	r6, [pc, #708]	; (8011f9c <jpeg_idct_13x13+0x3f0>)
 8011cd6:	1818      	adds	r0, r3, r0
 8011cd8:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011cda:	f641 26cb 	movw	r6, #6859	; 0x1acb
 8011cde:	fb06 0603 	mla	r6, r6, r3, r0
 8011ce2:	1871      	adds	r1, r6, r1
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011ce4:	4eae      	ldr	r6, [pc, #696]	; (8011fa0 <jpeg_idct_13x13+0x3f4>)
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011ce6:	910d      	str	r1, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011ce8:	9901      	ldr	r1, [sp, #4]
 8011cea:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
    tmp11 += tmp14;
 8011cee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011cf0:	1941      	adds	r1, r0, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011cf2:	f244 6094 	movw	r0, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011cf6:	910e      	str	r1, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011cf8:	9903      	ldr	r1, [sp, #12]
 8011cfa:	185d      	adds	r5, r3, r1
 8011cfc:	49a9      	ldr	r1, [pc, #676]	; (8011fa4 <jpeg_idct_13x13+0x3f8>)
 8011cfe:	434d      	muls	r5, r1
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011d00:	9903      	ldr	r1, [sp, #12]
    tmp11 += tmp14;
 8011d02:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011d04:	fb00 5501 	mla	r5, r0, r1, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011d08:	9901      	ldr	r1, [sp, #4]
 8011d0a:	9803      	ldr	r0, [sp, #12]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011d0c:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011d0e:	eb01 0a00 	add.w	sl, r1, r0
 8011d12:	49a5      	ldr	r1, [pc, #660]	; (8011fa8 <jpeg_idct_13x13+0x3fc>)
    tmp12 += tmp14;
 8011d14:	980e      	ldr	r0, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011d16:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011d1a:	9902      	ldr	r1, [sp, #8]
    tmp12 += tmp14;
 8011d1c:	4450      	add	r0, sl
    tmp13 += tmp14;
 8011d1e:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011d20:	f640 25d5 	movw	r5, #2773	; 0xad5
 8011d24:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011d28:	f640 2533 	movw	r5, #2611	; 0xa33
 8011d2c:	fb05 9101 	mla	r1, r5, r1, r9
 8011d30:	4d9e      	ldr	r5, [pc, #632]	; (8011fac <jpeg_idct_13x13+0x400>)
 8011d32:	fb05 1103 	mla	r1, r5, r3, r1
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011d36:	9d01      	ldr	r5, [sp, #4]
 8011d38:	1aeb      	subs	r3, r5, r3
 8011d3a:	fb08 f803 	mul.w	r8, r8, r3
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011d3e:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8011d42:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011d44:	fb03 8805 	mla	r8, r3, r5, r8
 8011d48:	9d03      	ldr	r5, [sp, #12]
 8011d4a:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
 8011d4e:	fb03 8805 	mla	r8, r3, r5, r8
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011d52:	9b06      	ldr	r3, [sp, #24]
 8011d54:	4473      	add	r3, lr
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011d56:	44c1      	add	r9, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011d58:	12db      	asrs	r3, r3, #11
 8011d5a:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011d5e:	9b06      	ldr	r3, [sp, #24]
 8011d60:	eba3 0e0e 	sub.w	lr, r3, lr
 8011d64:	ea4f 23ee 	mov.w	r3, lr, asr #11
 8011d68:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011d6c:	9b08      	ldr	r3, [sp, #32]
 8011d6e:	4433      	add	r3, r6
 8011d70:	12db      	asrs	r3, r3, #11
 8011d72:	61d3      	str	r3, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011d74:	9b08      	ldr	r3, [sp, #32]
 8011d76:	1b9e      	subs	r6, r3, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011d78:	9b07      	ldr	r3, [sp, #28]
 8011d7a:	4403      	add	r3, r0
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011d7c:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011d7e:	12db      	asrs	r3, r3, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011d80:	f8c2 615c 	str.w	r6, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011d84:	63d3      	str	r3, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011d86:	9b07      	ldr	r3, [sp, #28]
 8011d88:	1a18      	subs	r0, r3, r0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d8c:	4453      	add	r3, sl
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011d8e:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011d90:	12db      	asrs	r3, r3, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011d92:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011d96:	65d3      	str	r3, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d9a:	eba3 0a0a 	sub.w	sl, r3, sl
 8011d9e:	ea4f 25ea 	mov.w	r5, sl, asr #11
 8011da2:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011da8:	440b      	add	r3, r1
 8011daa:	12db      	asrs	r3, r3, #11
 8011dac:	67d3      	str	r3, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011db0:	1a59      	subs	r1, r3, r1
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011db4:	444b      	add	r3, r9
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011db6:	12c9      	asrs	r1, r1, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011db8:	12db      	asrs	r3, r3, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011dba:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011dbe:	9905      	ldr	r1, [sp, #20]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011dc0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dc6:	eba3 0909 	sub.w	r9, r3, r9
 8011dca:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8011dce:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011dd2:	9b04      	ldr	r3, [sp, #16]
 8011dd4:	1b1c      	subs	r4, r3, r4
 8011dd6:	f642 5341 	movw	r3, #11585	; 0x2d41
 8011dda:	fb03 1404 	mla	r4, r3, r4, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011dde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011de0:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011de2:	455b      	cmp	r3, fp
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011de4:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011de8:	f47f aef0 	bne.w	8011bcc <jpeg_idct_13x13+0x20>
 8011dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8011dee:	ac10      	add	r4, sp, #64	; 0x40
 8011df0:	3b04      	subs	r3, #4
 8011df2:	9303      	str	r3, [sp, #12]
 8011df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011df6:	3330      	adds	r3, #48	; 0x30
 8011df8:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011dfa:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011dfc:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 8011e00:	6920      	ldr	r0, [r4, #16]
    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011e02:	f642 2b50 	movw	fp, #10832	; 0x2a50
    outptr = output_buf[ctr] + output_col;
 8011e06:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011e0a:	f641 6802 	movw	r8, #7682	; 0x1e02
    z4 = (INT32) wsptr[6];
 8011e0e:	69a1      	ldr	r1, [r4, #24]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011e10:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8011e12:	920b      	str	r2, [sp, #44]	; 0x2c
 8011e14:	9303      	str	r3, [sp, #12]
 8011e16:	4613      	mov	r3, r2
 8011e18:	9a82      	ldr	r2, [sp, #520]	; 0x208
    z2 = (INT32) wsptr[2];
 8011e1a:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 8011e1e:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011e20:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8011e24:	3310      	adds	r3, #16
 8011e26:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 8011e28:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 8011e2a:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011e2c:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 8011e2e:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011e30:	f240 3119 	movw	r1, #793	; 0x319
 8011e34:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011e36:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011e38:	4341      	muls	r1, r0
 8011e3a:	9802      	ldr	r0, [sp, #8]
 8011e3c:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011e40:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8011e44:	fb00 500e 	mla	r0, r0, lr, r5
 8011e48:	4408      	add	r0, r1
 8011e4a:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011e4c:	f241 000c 	movw	r0, #4108	; 0x100c
 8011e50:	fb00 f00e 	mul.w	r0, r0, lr
 8011e54:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011e56:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011e5a:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011e5c:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011e60:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011e64:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011e66:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011e6a:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011e6e:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011e70:	1a2d      	subs	r5, r5, r0
 8011e72:	440d      	add	r5, r1
 8011e74:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011e76:	4d45      	ldr	r5, [pc, #276]	; (8011f8c <jpeg_idct_13x13+0x3e0>)
 8011e78:	fb05 000e 	mla	r0, r5, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011e7c:	f242 553e 	movw	r5, #9534	; 0x253e
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011e80:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011e82:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011e84:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011e86:	f640 51f2 	movw	r1, #3570	; 0xdf2
 8011e8a:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011e8c:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8011e90:	4371      	muls	r1, r6
 8011e92:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011e96:	483e      	ldr	r0, [pc, #248]	; (8011f90 <jpeg_idct_13x13+0x3e4>)
 8011e98:	fb00 f00e 	mul.w	r0, r0, lr
 8011e9c:	1ac0      	subs	r0, r0, r3
 8011e9e:	1a40      	subs	r0, r0, r1
 8011ea0:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011ea2:	483c      	ldr	r0, [pc, #240]	; (8011f94 <jpeg_idct_13x13+0x3e8>)
 8011ea4:	fb00 330e 	mla	r3, r0, lr, r3
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011ea8:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011eac:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 8011eae:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011eb2:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011eb4:	1808      	adds	r0, r1, r0
    z2 = (INT32) wsptr[3];
 8011eb6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011eba:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8011ebc:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011ec0:	18ce      	adds	r6, r1, r3
    tmp15 = z1 + z4;
 8011ec2:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011ec6:	4834      	ldr	r0, [pc, #208]	; (8011f98 <jpeg_idct_13x13+0x3ec>)
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011ec8:	fb0b fb06 	mul.w	fp, fp, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011ecc:	4e33      	ldr	r6, [pc, #204]	; (8011f9c <jpeg_idct_13x13+0x3f0>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011ece:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011ed2:	eb0b 0705 	add.w	r7, fp, r5
 8011ed6:	4457      	add	r7, sl
 8011ed8:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011edc:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011ee0:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011ee2:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8011ee6:	1818      	adds	r0, r3, r0
 8011ee8:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011eea:	f641 26cb 	movw	r6, #6859	; 0x1acb
 8011eee:	fb06 0603 	mla	r6, r6, r3, r0
 8011ef2:	44b3      	add	fp, r6
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011ef4:	4e2a      	ldr	r6, [pc, #168]	; (8011fa0 <jpeg_idct_13x13+0x3f4>)
 8011ef6:	fb06 0007 	mla	r0, r6, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011efa:	f606 5611 	addw	r6, r6, #3345	; 0xd11
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011efe:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011f02:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011f04:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8011f08:	195d      	adds	r5, r3, r5
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011f0a:	900c      	str	r0, [sp, #48]	; 0x30
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011f0c:	4375      	muls	r5, r6
    tmp11 += tmp14;
 8011f0e:	eb0b 0605 	add.w	r6, fp, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011f12:	f244 6b94 	movw	fp, #18068	; 0x4694
 8011f16:	fb0b 5507 	mla	r5, fp, r7, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011f1a:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 8011f1e:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011f22:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011f24:	eb07 0a00 	add.w	sl, r7, r0
 8011f28:	481f      	ldr	r0, [pc, #124]	; (8011fa8 <jpeg_idct_13x13+0x3fc>)
 8011f2a:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 += tmp14;
 8011f2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011f30:	4450      	add	r0, sl
    tmp13 += tmp14;
 8011f32:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011f34:	f640 25d5 	movw	r5, #2773	; 0xad5
 8011f38:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011f3c:	f640 2533 	movw	r5, #2611	; 0xa33
 8011f40:	fb05 9101 	mla	r1, r5, r1, r9
 8011f44:	4d19      	ldr	r5, [pc, #100]	; (8011fac <jpeg_idct_13x13+0x400>)
 8011f46:	fb05 1103 	mla	r1, r5, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011f4a:	1afb      	subs	r3, r7, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011f4c:	f854 5c04 	ldr.w	r5, [r4, #-4]
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011f50:	fb08 f803 	mul.w	r8, r8, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011f54:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8011f58:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011f5a:	fb03 8807 	mla	r8, r3, r7, r8
 8011f5e:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011f62:	9f82      	ldr	r7, [sp, #520]	; 0x208
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011f64:	fb03 8805 	mla	r8, r3, r5, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011f68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011f6a:	9b04      	ldr	r3, [sp, #16]
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011f6c:	44c1      	add	r9, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011f6e:	442b      	add	r3, r5
 8011f70:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			     & RANGE_MASK];
 8011f72:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011f76:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011f7a:	55eb      	strb	r3, [r5, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011f7c:	9b04      	ldr	r3, [sp, #16]
 8011f7e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011f80:	1b5f      	subs	r7, r3, r5
			     & RANGE_MASK];
 8011f82:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011f86:	f81c 3007 	ldrb.w	r3, [ip, r7]
 8011f8a:	e011      	b.n	8011fb0 <jpeg_idct_13x13+0x404>
 8011f8c:	ffffd7ee 	.word	0xffffd7ee
 8011f90:	fffffa8c 	.word	0xfffffa8c
 8011f94:	ffffe64b 	.word	0xffffe64b
 8011f98:	ffffbf5b 	.word	0xffffbf5b
 8011f9c:	fffff52b 	.word	0xfffff52b
 8011fa0:	ffffcdb1 	.word	0xffffcdb1
 8011fa4:	ffffdac2 	.word	0xffffdac2
 8011fa8:	ffffeaf8 	.word	0xffffeaf8
 8011fac:	fffff116 	.word	0xfffff116
 8011fb0:	7313      	strb	r3, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011fb2:	9b06      	ldr	r3, [sp, #24]
 8011fb4:	4433      	add	r3, r6
			     & RANGE_MASK];
 8011fb6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011fba:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011fbe:	7053      	strb	r3, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011fc0:	9b06      	ldr	r3, [sp, #24]
 8011fc2:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 8011fc4:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011fc8:	f81c 3006 	ldrb.w	r3, [ip, r6]
 8011fcc:	72d3      	strb	r3, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011fce:	9b05      	ldr	r3, [sp, #20]
 8011fd0:	4403      	add	r3, r0
			     & RANGE_MASK];
 8011fd2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011fd6:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011fda:	7093      	strb	r3, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011fdc:	9b05      	ldr	r3, [sp, #20]
 8011fde:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 8011fe0:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011fe4:	f81c 3000 	ldrb.w	r3, [ip, r0]
 8011fe8:	7293      	strb	r3, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011fea:	9b08      	ldr	r3, [sp, #32]
 8011fec:	4453      	add	r3, sl
			     & RANGE_MASK];
 8011fee:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011ff2:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011ff6:	70d3      	strb	r3, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011ff8:	9b08      	ldr	r3, [sp, #32]
 8011ffa:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8011ffe:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012002:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8012006:	7253      	strb	r3, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801200a:	440b      	add	r3, r1
			     & RANGE_MASK];
 801200c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012010:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012014:	7113      	strb	r3, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012018:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 801201a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801201e:	f81c 3001 	ldrb.w	r3, [ip, r1]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012022:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012026:	7213      	strb	r3, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012028:	9b07      	ldr	r3, [sp, #28]
 801202a:	444b      	add	r3, r9
			     & RANGE_MASK];
 801202c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012030:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012034:	7153      	strb	r3, [r2, #5]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012036:	9b07      	ldr	r3, [sp, #28]
 8012038:	eba3 0909 	sub.w	r9, r3, r9
			     & RANGE_MASK];
 801203c:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012040:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8012044:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012046:	9b01      	ldr	r3, [sp, #4]
 8012048:	eba3 030e 	sub.w	r3, r3, lr
 801204c:	434b      	muls	r3, r1
 801204e:	9902      	ldr	r1, [sp, #8]
 8012050:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 8012054:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8012058:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801205c:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 801205e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012060:	9a03      	ldr	r2, [sp, #12]
 8012062:	4293      	cmp	r3, r2
 8012064:	f47f aec9 	bne.w	8011dfa <jpeg_idct_13x13+0x24e>
  }
}
 8012068:	b079      	add	sp, #484	; 0x1e4
 801206a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206e:	bf00      	nop

08012070 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012074:	b0ff      	sub	sp, #508	; 0x1fc
 8012076:	f1a2 0a02 	sub.w	sl, r2, #2
 801207a:	930a      	str	r3, [sp, #40]	; 0x28
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801207c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012080:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8012082:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012086:	1f03      	subs	r3, r0, #4
 8012088:	9301      	str	r3, [sp, #4]
 801208a:	f102 030e 	add.w	r3, r2, #14
 801208e:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8012090:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012092:	9901      	ldr	r1, [sp, #4]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012094:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012098:	f93a 4f02 	ldrsh.w	r4, [sl, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801209c:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80120a0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80120a4:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80120a6:	9101      	str	r1, [sp, #4]
 80120a8:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80120aa:	9a01      	ldr	r2, [sp, #4]
 80120ac:	f9ba 1040 	ldrsh.w	r1, [sl, #64]	; 0x40
 80120b0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 80120b4:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80120b6:	9801      	ldr	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80120b8:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80120ba:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80120be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80120c2:	fb01 f602 	mul.w	r6, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80120c6:	f640 2112 	movw	r1, #2578	; 0xa12
 80120ca:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80120ce:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 80120d2:	19a7      	adds	r7, r4, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80120d4:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80120d6:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 80120d8:	eb04 050c 	add.w	r5, r4, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80120dc:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80120e0:	1ab6      	subs	r6, r6, r2
    tmp12 = z1 - z4;
 80120e2:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80120e4:	eba4 0246 	sub.w	r2, r4, r6, lsl #1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80120e8:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80120ec:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80120f0:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80120f2:	9a01      	ldr	r2, [sp, #4]
 80120f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80120f6:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80120f8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80120fc:	48d2      	ldr	r0, [pc, #840]	; (8012448 <jpeg_idct_14x14+0x3d8>)
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80120fe:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012100:	1916      	adds	r6, r2, r4
 8012102:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012106:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 801210a:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801210e:	fb00 6604 	mla	r6, r0, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012112:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8012116:	4344      	muls	r4, r0
    tmp20 = tmp10 + tmp13;
 8012118:	eb07 000c 	add.w	r0, r7, ip
 801211c:	9002      	str	r0, [sp, #8]
    tmp26 = tmp10 - tmp13;
 801211e:	eba7 000c 	sub.w	r0, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012122:	fb0e 4202 	mla	r2, lr, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012126:	f9ba 4010 	ldrsh.w	r4, [sl, #16]
    tmp26 = tmp10 - tmp13;
 801212a:	9003      	str	r0, [sp, #12]
    tmp21 = tmp11 + tmp14;
 801212c:	19a8      	adds	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801212e:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8012132:	9004      	str	r0, [sp, #16]
    tmp25 = tmp11 - tmp14;
 8012134:	1ba8      	subs	r0, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012136:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 801213a:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 801213c:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 801213e:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012140:	f9ba 1070 	ldrsh.w	r1, [sl, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 8012144:	9006      	str	r0, [sp, #24]
    tmp24 = tmp12 - tmp15;
 8012146:	9207      	str	r2, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012148:	9a01      	ldr	r2, [sp, #4]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801214a:	48c0      	ldr	r0, [pc, #768]	; (801244c <jpeg_idct_14x14+0x3dc>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801214c:	6a12      	ldr	r2, [r2, #32]
 801214e:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012150:	9a01      	ldr	r2, [sp, #4]
 8012152:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8012154:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012156:	9a01      	ldr	r2, [sp, #4]
 8012158:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801215c:	eb04 0907 	add.w	r9, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012160:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012162:	9a01      	ldr	r2, [sp, #4]
 8012164:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp14 = z1 + z3;
 8012168:	eb04 0c06 	add.w	ip, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801216c:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801216e:	f642 21b7 	movw	r1, #10935	; 0x2ab7
 8012172:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012176:	f242 6152 	movw	r1, #9810	; 0x2652
 801217a:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801217e:	49b4      	ldr	r1, [pc, #720]	; (8012450 <jpeg_idct_14x14+0x3e0>)
 8012180:	eb09 0e05 	add.w	lr, r9, r5
 8012184:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8012188:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801218c:	f641 0114 	movw	r1, #6164	; 0x1814
 8012190:	fb01 f10c 	mul.w	r1, r1, ip
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8012194:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012198:	9108      	str	r1, [sp, #32]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801219a:	fb00 1104 	mla	r1, r0, r4, r1
    z1    -= z2;
 801219e:	1be4      	subs	r4, r4, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80121a0:	48ac      	ldr	r0, [pc, #688]	; (8012454 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80121a2:	fb08 f804 	mul.w	r8, r8, r4
 80121a6:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 80121aa:	4441      	add	r1, r8
 80121ac:	9109      	str	r1, [sp, #36]	; 0x24
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80121ae:	19b9      	adds	r1, r7, r6
 80121b0:	fb0c f101 	mul.w	r1, ip, r1
 80121b4:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80121b8:	fb00 1c07 	mla	ip, r0, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80121bc:	48a6      	ldr	r0, [pc, #664]	; (8012458 <jpeg_idct_14x14+0x3e8>)
 80121be:	fb00 1106 	mla	r1, r0, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80121c2:	44e1      	add	r9, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80121c4:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80121c8:	48a4      	ldr	r0, [pc, #656]	; (801245c <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80121ca:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80121cc:	1bf5      	subs	r5, r6, r7
 80121ce:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80121d2:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 80121d6:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80121d8:	fb00 cc06 	mla	ip, r0, r6, ip
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 80121dc:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80121de:	9a02      	ldr	r2, [sp, #8]
    tmp13 = (z1 - z3) << PASS1_BITS;
 80121e0:	00b6      	lsls	r6, r6, #2
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80121e2:	9808      	ldr	r0, [sp, #32]
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80121e4:	4472      	add	r2, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80121e6:	4484      	add	ip, r0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80121e8:	f241 5099 	movw	r0, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80121ec:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80121ee:	fb00 5507 	mla	r5, r0, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80121f2:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80121f6:	9a02      	ldr	r2, [sp, #8]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80121f8:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80121fa:	eba2 0e0e 	sub.w	lr, r2, lr
 80121fe:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8012202:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012206:	9a04      	ldr	r2, [sp, #16]
 8012208:	444a      	add	r2, r9
 801220a:	12d2      	asrs	r2, r2, #11
 801220c:	61da      	str	r2, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801220e:	9a04      	ldr	r2, [sp, #16]
 8012210:	eba2 0909 	sub.w	r9, r2, r9
 8012214:	ea4f 22e9 	mov.w	r2, r9, asr #11
 8012218:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801221c:	9a06      	ldr	r2, [sp, #24]
 801221e:	440a      	add	r2, r1
 8012220:	12d2      	asrs	r2, r2, #11
 8012222:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012224:	9a06      	ldr	r2, [sp, #24]
 8012226:	1a51      	subs	r1, r2, r1
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8012228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801222a:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801222e:	12c9      	asrs	r1, r1, #11
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8012230:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012232:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012234:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012238:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801223c:	9a07      	ldr	r2, [sp, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801223e:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012240:	4462      	add	r2, ip
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012242:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012246:	12d2      	asrs	r2, r2, #11
 8012248:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801224a:	9a07      	ldr	r2, [sp, #28]
 801224c:	eba2 0c0c 	sub.w	ip, r2, ip
 8012250:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8012254:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012258:	9a05      	ldr	r2, [sp, #20]
 801225a:	442a      	add	r2, r5
 801225c:	12d2      	asrs	r2, r2, #11
 801225e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012262:	9a05      	ldr	r2, [sp, #20]
 8012264:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012266:	9a03      	ldr	r2, [sp, #12]
 8012268:	440a      	add	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801226a:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801226c:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801226e:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012272:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012276:	9a03      	ldr	r2, [sp, #12]
 8012278:	1a52      	subs	r2, r2, r1
 801227a:	12d2      	asrs	r2, r2, #11
 801227c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012282:	4552      	cmp	r2, sl
 8012284:	f47f af05 	bne.w	8012092 <jpeg_idct_14x14+0x22>
 8012288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801228a:	3b04      	subs	r3, #4
 801228c:	9302      	str	r3, [sp, #8]
 801228e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012290:	3334      	adds	r3, #52	; 0x34
 8012292:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8012294:	ab0e      	add	r3, sp, #56	; 0x38
 8012296:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012298:	9b02      	ldr	r3, [sp, #8]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801229a:	f640 2012 	movw	r0, #2578	; 0xa12
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801229e:	f641 4437 	movw	r4, #7223	; 0x1c37

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80122a2:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 80122a6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80122aa:	920c      	str	r2, [sp, #48]	; 0x30
 80122ac:	9302      	str	r3, [sp, #8]
 80122ae:	4613      	mov	r3, r2
 80122b0:	9a88      	ldr	r2, [sp, #544]	; 0x220
 80122b2:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80122b4:	9b01      	ldr	r3, [sp, #4]
    z4 = (INT32) wsptr[4];
 80122b6:	691e      	ldr	r6, [r3, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80122b8:	6819      	ldr	r1, [r3, #0]
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80122ba:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80122be:	fb00 f706 	mul.w	r7, r0, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80122c2:	4861      	ldr	r0, [pc, #388]	; (8012448 <jpeg_idct_14x14+0x3d8>)
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80122c4:	3110      	adds	r1, #16
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80122c6:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80122c8:	4366      	muls	r6, r4
    tmp10 = z1 + z2;
 80122ca:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80122ce:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 80122d0:	ebc6 3441 	rsb	r4, r6, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80122d4:	1b9b      	subs	r3, r3, r6
    tmp11 = z1 + z3;
 80122d6:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80122da:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80122de:	005b      	lsls	r3, r3, #1
 80122e0:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 80122e4:	9303      	str	r3, [sp, #12]
    z1 = (INT32) wsptr[2];
 80122e6:	9b01      	ldr	r3, [sp, #4]
 80122e8:	689e      	ldr	r6, [r3, #8]
    z2 = (INT32) wsptr[6];
 80122ea:	699b      	ldr	r3, [r3, #24]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80122ec:	18f1      	adds	r1, r6, r3
 80122ee:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80122f0:	f640 07bd 	movw	r7, #2237	; 0x8bd
 80122f4:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80122f8:	fb00 1103 	mla	r1, r0, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80122fc:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8012300:	4343      	muls	r3, r0

    tmp20 = tmp10 + tmp13;
    tmp26 = tmp10 - tmp13;
 8012302:	ebac 0007 	sub.w	r0, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012306:	fb0e 3306 	mla	r3, lr, r6, r3
    tmp20 = tmp10 + tmp13;
 801230a:	eb0c 0607 	add.w	r6, ip, r7
    tmp26 = tmp10 - tmp13;
 801230e:	9004      	str	r0, [sp, #16]
    tmp21 = tmp11 + tmp14;
 8012310:	1868      	adds	r0, r5, r1
    tmp25 = tmp11 - tmp14;
 8012312:	1a69      	subs	r1, r5, r1
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012314:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8012318:	9005      	str	r0, [sp, #20]
    tmp25 = tmp11 - tmp14;
 801231a:	9106      	str	r1, [sp, #24]
    tmp22 = tmp12 + tmp15;
 801231c:	18e1      	adds	r1, r4, r3
    tmp24 = tmp12 - tmp15;
 801231e:	1ae3      	subs	r3, r4, r3
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8012320:	484a      	ldr	r0, [pc, #296]	; (801244c <jpeg_idct_14x14+0x3dc>)
    tmp22 = tmp12 + tmp15;
 8012322:	9107      	str	r1, [sp, #28]
    tmp24 = tmp12 - tmp15;
 8012324:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[3];
 8012326:	9901      	ldr	r1, [sp, #4]
    z1 = (INT32) wsptr[1];
 8012328:	9b01      	ldr	r3, [sp, #4]
    z2 = (INT32) wsptr[3];
 801232a:	f8d1 800c 	ldr.w	r8, [r1, #12]
    z1 = (INT32) wsptr[1];
 801232e:	685b      	ldr	r3, [r3, #4]
    z3 = (INT32) wsptr[5];
 8012330:	f8d1 c014 	ldr.w	ip, [r1, #20]
    z4 = (INT32) wsptr[7];
 8012334:	f8d1 901c 	ldr.w	r9, [r1, #28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012338:	eb03 0a08 	add.w	sl, r3, r8
 801233c:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8012340:	eb03 050c 	add.w	r5, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012344:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012348:	f242 6152 	movw	r1, #9810	; 0x2652
 801234c:	fb01 f405 	mul.w	r4, r1, r5
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012350:	493f      	ldr	r1, [pc, #252]	; (8012450 <jpeg_idct_14x14+0x3e0>)
 8012352:	eb0a 0704 	add.w	r7, sl, r4
 8012356:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 801235a:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801235e:	f641 0114 	movw	r1, #6164	; 0x1814
 8012362:	4369      	muls	r1, r5
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012364:	f46f 65a2 	mvn.w	r5, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012368:	9109      	str	r1, [sp, #36]	; 0x24
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801236a:	fb00 1103 	mla	r1, r0, r3, r1
    z1    -= z2;
 801236e:	eba3 0308 	sub.w	r3, r3, r8
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012372:	4838      	ldr	r0, [pc, #224]	; (8012454 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012374:	fb0e fe03 	mul.w	lr, lr, r3
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012378:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801237c:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012380:	035b      	lsls	r3, r3, #13
    tmp16 += tmp15;
 8012382:	4471      	add	r1, lr
 8012384:	910a      	str	r1, [sp, #40]	; 0x28
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012386:	eb08 010c 	add.w	r1, r8, ip
 801238a:	4369      	muls	r1, r5
 801238c:	eba1 3149 	sub.w	r1, r1, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012390:	fb00 1508 	mla	r5, r0, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8012394:	4830      	ldr	r0, [pc, #192]	; (8012458 <jpeg_idct_14x14+0x3e8>)
 8012396:	fb00 110c 	mla	r1, r0, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801239a:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801239c:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80123a0:	482e      	ldr	r0, [pc, #184]	; (801245c <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80123a2:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80123a4:	ebac 0408 	sub.w	r4, ip, r8
 80123a8:	436c      	muls	r4, r5
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80123aa:	910b      	str	r1, [sp, #44]	; 0x2c
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80123ac:	f241 5199 	movw	r1, #5529	; 0x1599
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80123b0:	eb04 3549 	add.w	r5, r4, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80123b4:	eb03 3949 	add.w	r9, r3, r9, lsl #13

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80123b8:	19f3      	adds	r3, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80123ba:	fb00 550c 	mla	r5, r0, ip, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80123be:	1bf6      	subs	r6, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80123c0:	9809      	ldr	r0, [sp, #36]	; 0x24
			     & RANGE_MASK];
 80123c2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80123c6:	fb01 4408 	mla	r4, r1, r8, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80123ca:	f3c6 4689 	ubfx	r6, r6, #18, #10
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80123ce:	4405      	add	r5, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80123d0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80123d4:	9988      	ldr	r1, [sp, #544]	; 0x220
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80123d6:	4474      	add	r4, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80123d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80123da:	5443      	strb	r3, [r0, r1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80123dc:	f81b 3006 	ldrb.w	r3, [fp, r6]
 80123e0:	7353      	strb	r3, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80123e2:	9b05      	ldr	r3, [sp, #20]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80123e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80123e6:	4453      	add	r3, sl
			     & RANGE_MASK];
 80123e8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80123ec:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80123f0:	7053      	strb	r3, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80123f2:	9b05      	ldr	r3, [sp, #20]
 80123f4:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 80123f8:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80123fc:	f81b 300a 	ldrb.w	r3, [fp, sl]
 8012400:	7313      	strb	r3, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012402:	9b07      	ldr	r3, [sp, #28]
 8012404:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012406:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801240a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801240e:	7093      	strb	r3, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012410:	9b07      	ldr	r3, [sp, #28]
 8012412:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012414:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012418:	f81b 3001 	ldrb.w	r3, [fp, r1]
 801241c:	72d3      	strb	r3, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801241e:	9b03      	ldr	r3, [sp, #12]
 8012420:	444b      	add	r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012422:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012426:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801242a:	70d3      	strb	r3, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801242c:	9b03      	ldr	r3, [sp, #12]
 801242e:	eba3 0909 	sub.w	r9, r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012432:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012436:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801243a:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801243c:	9b08      	ldr	r3, [sp, #32]
 801243e:	442b      	add	r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012440:	f3c3 4389 	ubfx	r3, r3, #18, #10
 8012444:	e00c      	b.n	8012460 <jpeg_idct_14x14+0x3f0>
 8012446:	bf00      	nop
 8012448:	ffffc8fc 	.word	0xffffc8fc
 801244c:	ffffde0b 	.word	0xffffde0b
 8012450:	ffffdbf0 	.word	0xffffdbf0
 8012454:	fffff26e 	.word	0xfffff26e
 8012458:	ffffb409 	.word	0xffffb409
 801245c:	ffffc9e6 	.word	0xffffc9e6
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012460:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012464:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012466:	9b08      	ldr	r3, [sp, #32]
 8012468:	1b5d      	subs	r5, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801246a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801246e:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8012472:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012474:	9b06      	ldr	r3, [sp, #24]
 8012476:	4423      	add	r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012478:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801247c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012480:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012482:	9b06      	ldr	r3, [sp, #24]
 8012484:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012486:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801248a:	f81b 3004 	ldrb.w	r3, [fp, r4]
 801248e:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012490:	9b04      	ldr	r3, [sp, #16]
 8012492:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012494:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012496:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801249a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801249e:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80124a0:	9b04      	ldr	r3, [sp, #16]
 80124a2:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80124a4:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80124a8:	f81b 3001 	ldrb.w	r3, [fp, r1]
 80124ac:	71d3      	strb	r3, [r2, #7]

    wsptr += 8;		/* advance pointer to next row */
 80124ae:	9b01      	ldr	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 80124b0:	9a02      	ldr	r2, [sp, #8]
    wsptr += 8;		/* advance pointer to next row */
 80124b2:	3320      	adds	r3, #32
 80124b4:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 80124b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124b8:	4293      	cmp	r3, r2
 80124ba:	f47f aeed 	bne.w	8012298 <jpeg_idct_14x14+0x228>
  }
}
 80124be:	b07f      	add	sp, #508	; 0x1fc
 80124c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124c4 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80124c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c8:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80124cc:	f1a2 0b02 	sub.w	fp, r2, #2
 80124d0:	930b      	str	r3, [sp, #44]	; 0x2c
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80124d2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80124d6:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80124d8:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80124dc:	1f03      	subs	r3, r0, #4
 80124de:	9300      	str	r3, [sp, #0]
 80124e0:	f102 030e 	add.w	r3, r2, #14
 80124e4:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 80124e6:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80124e8:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 80124ea:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80124ee:	f93b 5f02 	ldrsh.w	r5, [fp, #2]!
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80124f2:	f241 0971 	movw	r9, #4209	; 0x1071
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80124f6:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80124fa:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80124fe:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012502:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012504:	9100      	str	r1, [sp, #0]
 8012506:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012508:	9a00      	ldr	r2, [sp, #0]
 801250a:	f9bb 1020 	ldrsh.w	r1, [fp, #32]
 801250e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8012510:	036d      	lsls	r5, r5, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012512:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012514:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012516:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012518:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801251c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012520:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012524:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012526:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801252a:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801252e:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8012530:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012534:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012538:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801253c:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 801253e:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8012542:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012544:	eba4 040c 	sub.w	r4, r4, ip
 8012548:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 801254c:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 801254e:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012550:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012554:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012556:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801255a:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 801255e:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012562:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012566:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8012568:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801256c:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801256e:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 8012572:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012574:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012576:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801257a:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 801257e:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012580:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 8012582:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012586:	443c      	add	r4, r7
 8012588:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 801258c:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8012590:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012594:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8012596:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012598:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801259a:	f641 114c 	movw	r1, #6476	; 0x194c
 801259e:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80125a0:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 80125a4:	4417      	add	r7, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80125a6:	4369      	muls	r1, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 80125a8:	1ab2      	subs	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80125aa:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 80125ae:	1878      	adds	r0, r7, r1
    tmp24 = tmp13 - tmp10 + tmp11;
 80125b0:	440a      	add	r2, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 80125b2:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 80125b4:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80125b6:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 80125ba:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80125bc:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp11 += tmp11;
 80125c0:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80125c2:	9908      	ldr	r1, [sp, #32]
 80125c4:	9a01      	ldr	r2, [sp, #4]
 80125c6:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80125c8:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80125cc:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80125ce:	9a00      	ldr	r2, [sp, #0]
 80125d0:	6a12      	ldr	r2, [r2, #32]
 80125d2:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80125d4:	9900      	ldr	r1, [sp, #0]
 80125d6:	6e09      	ldr	r1, [r1, #96]	; 0x60
 80125d8:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80125da:	9900      	ldr	r1, [sp, #0]
 80125dc:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80125e0:	9800      	ldr	r0, [sp, #0]
 80125e2:	f9bb e070 	ldrsh.w	lr, [fp, #112]	; 0x70
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80125e6:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80125e8:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80125ec:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80125f0:	48d2      	ldr	r0, [pc, #840]	; (801293c <jpeg_idct_15x15+0x478>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80125f2:	fb04 fe0e 	mul.w	lr, r4, lr
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80125f6:	434e      	muls	r6, r1
    tmp13 = z2 - z4;
 80125f8:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80125fc:	1917      	adds	r7, r2, r4
 80125fe:	fb0c f707 	mul.w	r7, ip, r7
    z2 = z1 - z4;
 8012602:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012606:	fb09 7902 	mla	r9, r9, r2, r7
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801260a:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801260e:	48cc      	ldr	r0, [pc, #816]	; (8012940 <jpeg_idct_15x15+0x47c>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012610:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012614:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012616:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801261a:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801261c:	48c9      	ldr	r0, [pc, #804]	; (8012944 <jpeg_idct_15x15+0x480>)
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801261e:	fb08 480e 	mla	r8, r8, lr, r4
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012622:	fb01 fc0c 	mul.w	ip, r1, ip
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012626:	eb02 010e 	add.w	r1, r2, lr
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801262a:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801262c:	f200 7071 	addw	r0, r0, #1905	; 0x771
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012630:	ebac 0c06 	sub.w	ip, ip, r6
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012634:	fb00 4402 	mla	r4, r0, r2, r4
 8012638:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801263a:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801263e:	4404      	add	r4, r0
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012640:	f241 2068 	movw	r0, #4712	; 0x1268
 8012644:	4341      	muls	r1, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012646:	f640 7039 	movw	r0, #3897	; 0xf39
 801264a:	fb00 1202 	mla	r2, r0, r2, r1
 801264e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012650:	1b92      	subs	r2, r2, r6
 8012652:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012654:	48bc      	ldr	r0, [pc, #752]	; (8012948 <jpeg_idct_15x15+0x484>)
 8012656:	fb00 110e 	mla	r1, r0, lr, r1
 801265a:	4431      	add	r1, r6
 801265c:	440d      	add	r5, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801265e:	9902      	ldr	r1, [sp, #8]
 8012660:	4441      	add	r1, r8
 8012662:	12c9      	asrs	r1, r1, #11
 8012664:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012668:	9902      	ldr	r1, [sp, #8]
 801266a:	eba1 0808 	sub.w	r8, r1, r8
 801266e:	ea4f 21e8 	mov.w	r1, r8, asr #11
 8012672:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012676:	9906      	ldr	r1, [sp, #24]
 8012678:	4449      	add	r1, r9
 801267a:	12c9      	asrs	r1, r1, #11
 801267c:	61d9      	str	r1, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801267e:	9906      	ldr	r1, [sp, #24]
 8012680:	eba1 0909 	sub.w	r9, r1, r9
 8012684:	ea4f 21e9 	mov.w	r1, r9, asr #11
 8012688:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801268c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801268e:	4461      	add	r1, ip
 8012690:	12c9      	asrs	r1, r1, #11
 8012692:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012696:	eba1 0c0c 	sub.w	ip, r1, ip
 801269a:	ea4f 21ec 	mov.w	r1, ip, asr #11
 801269e:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80126a2:	9903      	ldr	r1, [sp, #12]
 80126a4:	4411      	add	r1, r2
 80126a6:	12c9      	asrs	r1, r1, #11
 80126a8:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80126aa:	9903      	ldr	r1, [sp, #12]
 80126ac:	1a8a      	subs	r2, r1, r2
 80126ae:	12d2      	asrs	r2, r2, #11
 80126b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80126b4:	9a07      	ldr	r2, [sp, #28]
 80126b6:	443a      	add	r2, r7
 80126b8:	12d2      	asrs	r2, r2, #11
 80126ba:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80126bc:	9a07      	ldr	r2, [sp, #28]
 80126be:	1bd7      	subs	r7, r2, r7
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80126c0:	9a04      	ldr	r2, [sp, #16]
 80126c2:	442a      	add	r2, r5
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80126c4:	12ff      	asrs	r7, r7, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80126c6:	12d2      	asrs	r2, r2, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80126c8:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80126cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80126d0:	9a04      	ldr	r2, [sp, #16]
 80126d2:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80126d4:	9a05      	ldr	r2, [sp, #20]
 80126d6:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80126d8:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80126da:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80126dc:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80126e0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80126e4:	9a05      	ldr	r2, [sp, #20]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80126e6:	9908      	ldr	r1, [sp, #32]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80126e8:	1b14      	subs	r4, r2, r4
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80126ea:	9a01      	ldr	r2, [sp, #4]
 80126ec:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80126f0:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 80126f2:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80126f4:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 80126f8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80126fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80126fe:	455a      	cmp	r2, fp
 8012700:	f47f aef2 	bne.w	80124e8 <jpeg_idct_15x15+0x24>
 8012704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012706:	f1a3 0904 	sub.w	r9, r3, #4
 801270a:	3338      	adds	r3, #56	; 0x38
 801270c:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 801270e:	ab0e      	add	r3, sp, #56	; 0x38
 8012710:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012712:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012716:	f640 51fc 	movw	r1, #3580	; 0xdfc
    outptr = output_buf[ctr] + output_col;
 801271a:	9a90      	ldr	r2, [sp, #576]	; 0x240
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801271c:	f44f 74bb 	mov.w	r4, #374	; 0x176
    outptr = output_buf[ctr] + output_col;
 8012720:	930c      	str	r3, [sp, #48]	; 0x30
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012722:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 8012726:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012728:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801272a:	f241 0871 	movw	r8, #4209	; 0x1071
    z2 = (INT32) wsptr[2];
 801272e:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8012730:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012732:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 8012734:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012736:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012738:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801273c:	f242 419d 	movw	r1, #9373	; 0x249d
 8012740:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 8012742:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 8012746:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801274a:	eba2 020c 	sub.w	r2, r2, ip
 801274e:	0052      	lsls	r2, r2, #1
 8012750:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 8012754:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 8012756:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012758:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801275c:	9201      	str	r2, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801275e:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012762:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012766:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 8012768:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801276c:	1a8a      	subs	r2, r1, r2
 801276e:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 8012770:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8012774:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012778:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 801277a:	9402      	str	r4, [sp, #8]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801277c:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012780:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012782:	f241 1282 	movw	r2, #4482	; 0x1182
 8012786:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 8012788:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801278c:	440a      	add	r2, r1
 801278e:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8012792:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012796:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 8012798:	9404      	str	r4, [sp, #16]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801279a:	4c68      	ldr	r4, [pc, #416]	; (801293c <jpeg_idct_15x15+0x478>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801279c:	9205      	str	r2, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801279e:	f641 124c 	movw	r2, #6476	; 0x194c
 80127a2:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80127a4:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 80127a8:	4401      	add	r1, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80127aa:	4372      	muls	r2, r6
    tmp24 = tmp13 - tmp10 + tmp11;
 80127ac:	1a38      	subs	r0, r7, r0
    tmp21 = tmp12 + tmp10 + tmp11;
 80127ae:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 80127b0:	1882      	adds	r2, r0, r2
    tmp21 = tmp12 + tmp10 + tmp11;
 80127b2:	9106      	str	r1, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 80127b4:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80127b6:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
    z2 = (INT32) wsptr[3];
 80127ba:	9900      	ldr	r1, [sp, #0]
    tmp11 += tmp11;
 80127bc:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80127be:	f641 269a 	movw	r6, #6810	; 0x1a9a
    z2 = (INT32) wsptr[3];
 80127c2:	68cf      	ldr	r7, [r1, #12]
    tmp11 += tmp11;
 80127c4:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80127c6:	9808      	ldr	r0, [sp, #32]
 80127c8:	9a01      	ldr	r2, [sp, #4]
 80127ca:	eb02 0b00 	add.w	fp, r2, r0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80127ce:	6948      	ldr	r0, [r1, #20]
 80127d0:	f242 7131 	movw	r1, #10033	; 0x2731
    z1 = (INT32) wsptr[1];
 80127d4:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80127d6:	fb01 fc00 	mul.w	ip, r1, r0
    z4 = (INT32) wsptr[7];
 80127da:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 80127dc:	6852      	ldr	r2, [r2, #4]
    z4 = (INT32) wsptr[7];
 80127de:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 80127e2:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80127e6:	1950      	adds	r0, r2, r5
 80127e8:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80127ea:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80127ee:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80127f2:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 80127f6:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80127fa:	4c54      	ldr	r4, [pc, #336]	; (801294c <jpeg_idct_15x15+0x488>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80127fc:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80127fe:	4850      	ldr	r0, [pc, #320]	; (8012940 <jpeg_idct_15x15+0x47c>)
 8012800:	4378      	muls	r0, r7
 8012802:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012804:	484f      	ldr	r0, [pc, #316]	; (8012944 <jpeg_idct_15x15+0x480>)
 8012806:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012808:	f642 5002 	movw	r0, #11522	; 0x2d02
 801280c:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012810:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012812:	f640 7139 	movw	r1, #3897	; 0xf39
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012816:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801281a:	fb04 0002 	mla	r0, r4, r2, r0
 801281e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012820:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012822:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012826:	4420      	add	r0, r4
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012828:	f241 2468 	movw	r4, #4712	; 0x1268
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801282c:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801282e:	eb02 000e 	add.w	r0, r2, lr
 8012832:	4360      	muls	r0, r4
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012834:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012836:	fb01 0202 	mla	r2, r1, r2, r0
 801283a:	eba2 020c 	sub.w	r2, r2, ip
 801283e:	4422      	add	r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012840:	4c41      	ldr	r4, [pc, #260]	; (8012948 <jpeg_idct_15x15+0x484>)
 8012842:	fb04 000e 	mla	r0, r4, lr, r0
 8012846:	4460      	add	r0, ip
 8012848:	4407      	add	r7, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801284a:	9802      	ldr	r0, [sp, #8]
 801284c:	4430      	add	r0, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801284e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012852:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012856:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012858:	9990      	ldr	r1, [sp, #576]	; 0x240
 801285a:	5460      	strb	r0, [r4, r1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801285c:	9902      	ldr	r1, [sp, #8]
 801285e:	1b8e      	subs	r6, r1, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012860:	9906      	ldr	r1, [sp, #24]
			     & RANGE_MASK];
 8012862:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012866:	f81a 0006 	ldrb.w	r0, [sl, r6]
 801286a:	7398      	strb	r0, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801286c:	eb01 0008 	add.w	r0, r1, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012870:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 8012874:	f3c0 4089 	ubfx	r0, r0, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012878:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801287c:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012880:	7058      	strb	r0, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012882:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8012886:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012888:	eb0b 0105 	add.w	r1, fp, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801288c:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 8012890:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012894:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012898:	f81a 1001 	ldrb.w	r1, [sl, r1]
 801289c:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801289e:	f81a 100b 	ldrb.w	r1, [sl, fp]
 80128a2:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80128a4:	9903      	ldr	r1, [sp, #12]
 80128a6:	4411      	add	r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128a8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80128ac:	f81a 1001 	ldrb.w	r1, [sl, r1]
 80128b0:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80128b2:	9903      	ldr	r1, [sp, #12]
 80128b4:	1a8a      	subs	r2, r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80128b6:	9909      	ldr	r1, [sp, #36]	; 0x24
			     & RANGE_MASK];
 80128b8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80128bc:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80128c0:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80128c2:	9a07      	ldr	r2, [sp, #28]
 80128c4:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128c6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80128ca:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80128ce:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80128d0:	9a07      	ldr	r2, [sp, #28]
 80128d2:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128d4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80128d8:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80128dc:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80128de:	9a04      	ldr	r2, [sp, #16]
 80128e0:	443a      	add	r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128e2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80128e6:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80128ea:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80128ec:	9a04      	ldr	r2, [sp, #16]
 80128ee:	1bd7      	subs	r7, r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128f0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80128f4:	f81a 2007 	ldrb.w	r2, [sl, r7]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80128f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80128fa:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80128fc:	9a05      	ldr	r2, [sp, #20]
 80128fe:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012900:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012904:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012908:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801290a:	9a05      	ldr	r2, [sp, #20]
 801290c:	1a50      	subs	r0, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801290e:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012910:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012914:	f81a 2000 	ldrb.w	r2, [sl, r0]
 8012918:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801291a:	9a01      	ldr	r2, [sp, #4]
 801291c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012920:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8012924:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012928:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 801292a:	9b00      	ldr	r3, [sp, #0]
 801292c:	3320      	adds	r3, #32
 801292e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8012930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012932:	454b      	cmp	r3, r9
 8012934:	f47f aeed 	bne.w	8012712 <jpeg_idct_15x15+0x24e>
 8012938:	e00a      	b.n	8012950 <jpeg_idct_15x15+0x48c>
 801293a:	bf00      	nop
 801293c:	ffffba5c 	.word	0xffffba5c
 8012940:	ffffe566 	.word	0xffffe566
 8012944:	ffffd4f6 	.word	0xffffd4f6
 8012948:	ffffe42f 	.word	0xffffe42f
 801294c:	ffffdc67 	.word	0xffffdc67
  }
}
 8012950:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8012954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012958 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801295c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8012960:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012962:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012966:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801296a:	1e93      	subs	r3, r2, #2
 801296c:	9300      	str	r3, [sp, #0]
 801296e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8012970:	f1a3 0904 	sub.w	r9, r3, #4
 8012974:	f102 030e 	add.w	r3, r2, #14
 8012978:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 801297a:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801297c:	9900      	ldr	r1, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801297e:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012982:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012986:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801298a:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801298e:	3304      	adds	r3, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012990:	9100      	str	r1, [sp, #0]
 8012992:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8012996:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012998:	9900      	ldr	r1, [sp, #0]
 801299a:	f9b1 0040 	ldrsh.w	r0, [r1, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 801299e:	0352      	lsls	r2, r2, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80129a0:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 80129a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80129a8:	4341      	muls	r1, r0
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80129aa:	f642 10cf 	movw	r0, #10703	; 0x29cf
 80129ae:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80129b0:	4361      	muls	r1, r4
    tmp10 = tmp0 + tmp1;
 80129b2:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 80129b4:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 80129b6:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 80129b8:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80129bc:	9900      	ldr	r1, [sp, #0]
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80129be:	4ad6      	ldr	r2, [pc, #856]	; (8012d18 <jpeg_idct_16x16+0x3c0>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80129c0:	f9b1 4020 	ldrsh.w	r4, [r1, #32]
 80129c4:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 80129c8:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80129cc:	9900      	ldr	r1, [sp, #0]
 80129ce:	f9b1 4060 	ldrsh.w	r4, [r1, #96]	; 0x60
 80129d2:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 80129d6:	4361      	muls	r1, r4
    z3 = z1 - z2;
 80129d8:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80129dc:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80129e0:	f642 4563 	movw	r5, #11363	; 0x2c63
 80129e4:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80129e6:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80129ea:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80129ee:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80129f2:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80129f6:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80129fa:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 80129fe:	eb07 020c 	add.w	r2, r7, ip
 8012a02:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012a04:	eba7 020c 	sub.w	r2, r7, ip
 8012a08:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012a0a:	1972      	adds	r2, r6, r5
 8012a0c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012a0e:	1b72      	subs	r2, r6, r5
 8012a10:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012a12:	eb0b 0204 	add.w	r2, fp, r4
 8012a16:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012a18:	ebab 0204 	sub.w	r2, fp, r4
 8012a1c:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012a1e:	1842      	adds	r2, r0, r1
 8012a20:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012a22:	1a42      	subs	r2, r0, r1
 8012a24:	9208      	str	r2, [sp, #32]

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012a26:	9a00      	ldr	r2, [sp, #0]
 8012a28:	f9b2 1010 	ldrsh.w	r1, [r2, #16]
 8012a2c:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8012a30:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012a32:	9a00      	ldr	r2, [sp, #0]
 8012a34:	f9b2 0030 	ldrsh.w	r0, [r2, #48]	; 0x30
 8012a38:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 8012a3c:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012a3e:	9800      	ldr	r0, [sp, #0]
 8012a40:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a44:	188e      	adds	r6, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012a46:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012a4a:	eba1 0b02 	sub.w	fp, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012a4e:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a50:	9800      	ldr	r0, [sp, #0]
 8012a52:	f9b0 4070 	ldrsh.w	r4, [r0, #112]	; 0x70
    tmp11 = z1 + z3;
 8012a56:	194f      	adds	r7, r1, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a58:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0
 8012a5c:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a5e:	f642 344e 	movw	r4, #11086	; 0x2b4e
 8012a62:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012a64:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012a68:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012a6c:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012a70:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012a74:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012a78:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012a7c:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012a80:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012a84:	f241 5455 	movw	r4, #5461	; 0x1555
 8012a88:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012a8a:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012a8e:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012a90:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012a94:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012a96:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012a9a:	4ca0      	ldr	r4, [pc, #640]	; (8012d1c <jpeg_idct_16x16+0x3c4>)
 8012a9c:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012aa0:	4f9f      	ldr	r7, [pc, #636]	; (8012d20 <jpeg_idct_16x16+0x3c8>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012aa2:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012aa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012aa6:	4464      	add	r4, ip
 8012aa8:	445c      	add	r4, fp
 8012aaa:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012aae:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012ab0:	4f9c      	ldr	r7, [pc, #624]	; (8012d24 <jpeg_idct_16x16+0x3cc>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012ab2:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012ab4:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8012ab8:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012aba:	f240 214d 	movw	r1, #589	; 0x24d
 8012abe:	fb01 4102 	mla	r1, r1, r2, r4
 8012ac2:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012ac4:	4998      	ldr	r1, [pc, #608]	; (8012d28 <jpeg_idct_16x16+0x3d0>)
 8012ac6:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012aca:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012acc:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012ace:	f642 5a09 	movw	sl, #11529	; 0x2d09
 8012ad2:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012ad6:	fb07 1a05 	mla	sl, r7, r5, r1
 8012ada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012adc:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012ade:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012ae2:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8012ae6:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012ae8:	4990      	ldr	r1, [pc, #576]	; (8012d2c <jpeg_idct_16x16+0x3d4>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012aea:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012aec:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012af0:	4351      	muls	r1, r2
    tmp1  += z1;
 8012af2:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012af4:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012af8:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012afc:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012afe:	498c      	ldr	r1, [pc, #560]	; (8012d30 <jpeg_idct_16x16+0x3d8>)
 8012b00:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b02:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8012b06:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b08:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b0c:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b0e:	eb05 0b00 	add.w	fp, r5, r0
 8012b12:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012b14:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012b16:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b18:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012b1c:	f640 5123 	movw	r1, #3363	; 0xd23
 8012b20:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012b22:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 8012b24:	445c      	add	r4, fp
    tmp3  += z2;
 8012b26:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012b28:	4429      	add	r1, r5
    tmp10 += z2;
 8012b2a:	4484      	add	ip, r0
    tmp11 += z2;
 8012b2c:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012b2e:	12c9      	asrs	r1, r1, #11
 8012b30:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012b34:	9901      	ldr	r1, [sp, #4]
 8012b36:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012b38:	9903      	ldr	r1, [sp, #12]
 8012b3a:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012b3c:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012b3e:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012b40:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012b44:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012b46:	9903      	ldr	r1, [sp, #12]
 8012b48:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012b4a:	9905      	ldr	r1, [sp, #20]
 8012b4c:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012b4e:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012b50:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012b52:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012b56:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012b58:	9905      	ldr	r1, [sp, #20]
 8012b5a:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012b5c:	9907      	ldr	r1, [sp, #28]
 8012b5e:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012b60:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012b62:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012b64:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012b68:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8012b6a:	9907      	ldr	r1, [sp, #28]
 8012b6c:	eba1 0e0e 	sub.w	lr, r1, lr
 8012b70:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8012b74:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8012b78:	9908      	ldr	r1, [sp, #32]
 8012b7a:	4461      	add	r1, ip
 8012b7c:	12c9      	asrs	r1, r1, #11
 8012b7e:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8012b80:	9908      	ldr	r1, [sp, #32]
 8012b82:	eba1 0c0c 	sub.w	ip, r1, ip
 8012b86:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8012b8a:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8012b8e:	9906      	ldr	r1, [sp, #24]
 8012b90:	4401      	add	r1, r0
 8012b92:	12c9      	asrs	r1, r1, #11
 8012b94:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012b98:	9906      	ldr	r1, [sp, #24]
 8012b9a:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012b9c:	9904      	ldr	r1, [sp, #16]
 8012b9e:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012ba0:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012ba2:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012ba4:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012ba8:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8012bac:	9904      	ldr	r1, [sp, #16]
 8012bae:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8012bb2:	12d2      	asrs	r2, r2, #11
 8012bb4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012bb8:	9a02      	ldr	r2, [sp, #8]
 8012bba:	440a      	add	r2, r1
 8012bbc:	12d2      	asrs	r2, r2, #11
 8012bbe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012bc2:	9a02      	ldr	r2, [sp, #8]
 8012bc4:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012bc8:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012bca:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012bcc:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012bce:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012bd2:	f47f aed3 	bne.w	801297c <jpeg_idct_16x16+0x24>
 8012bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 8012bd8:	ad0e      	add	r5, sp, #56	; 0x38
 8012bda:	3b04      	subs	r3, #4
 8012bdc:	9300      	str	r3, [sp, #0]
 8012bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012be0:	333c      	adds	r3, #60	; 0x3c
 8012be2:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012be4:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012be6:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012bea:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 8012bee:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8012bf2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012bf6:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 8012bfa:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012bfe:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8012c02:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012c04:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8012c06:	9300      	str	r3, [sp, #0]
 8012c08:	4613      	mov	r3, r2
 8012c0a:	9a98      	ldr	r2, [sp, #608]	; 0x260
 8012c0c:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8012c0e:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012c12:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012c16:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012c18:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012c1a:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012c1c:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8012c20:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8012c24:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 8012c28:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 8012c2c:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012c30:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8012c32:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012c36:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012c38:	4a37      	ldr	r2, [pc, #220]	; (8012d18 <jpeg_idct_16x16+0x3c0>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012c3a:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012c3e:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012c42:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012c46:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012c4a:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012c4e:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8012c52:	eb0e 0207 	add.w	r2, lr, r7
 8012c56:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012c58:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 8012c5c:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8012c60:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012c62:	eb0c 0206 	add.w	r2, ip, r6
 8012c66:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012c68:	ebac 0206 	sub.w	r2, ip, r6
 8012c6c:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012c6e:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8012c72:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8012c76:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012c78:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012c7a:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 8012c7c:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8012c80:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012c82:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012c84:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8012c88:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 8012c8c:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 8012c8e:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8012c92:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012c96:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012c9a:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012c9e:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012ca0:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012ca4:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012ca6:	4e1d      	ldr	r6, [pc, #116]	; (8012d1c <jpeg_idct_16x16+0x3c4>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012ca8:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012caa:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8012cae:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012cb2:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012cb6:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012cba:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012cbe:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012cc2:	f241 5455 	movw	r4, #5461	; 0x1555
 8012cc6:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012cca:	f640 5423 	movw	r4, #3363	; 0xd23
 8012cce:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012cd2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012cd4:	4454      	add	r4, sl
 8012cd6:	4474      	add	r4, lr
 8012cd8:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012cdc:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012ce0:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012ce2:	eb0c 0409 	add.w	r4, ip, r9
 8012ce6:	445c      	add	r4, fp
 8012ce8:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012cec:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012cee:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012cf0:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012cf2:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8012cf6:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012cf8:	f240 224d 	movw	r2, #589	; 0x24d
 8012cfc:	fb02 4203 	mla	r2, r2, r3, r4
 8012d00:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012d02:	4a09      	ldr	r2, [pc, #36]	; (8012d28 <jpeg_idct_16x16+0x3d0>)
 8012d04:	fb02 4407 	mla	r4, r2, r7, r4
 8012d08:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012d0c:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012d10:	4c04      	ldr	r4, [pc, #16]	; (8012d24 <jpeg_idct_16x16+0x3cc>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012d12:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012d14:	1afa      	subs	r2, r7, r3
 8012d16:	e00d      	b.n	8012d34 <jpeg_idct_16x16+0x3dc>
 8012d18:	ffffecc2 	.word	0xffffecc2
 8012d1c:	ffffb6d6 	.word	0xffffb6d6
 8012d20:	ffffc542 	.word	0xffffc542
 8012d24:	ffffe77a 	.word	0xffffe77a
 8012d28:	ffffdbfa 	.word	0xffffdbfa
 8012d2c:	ffffeaab 	.word	0xffffeaab
 8012d30:	ffffd817 	.word	0xffffd817
 8012d34:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012d38:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 8012d3c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012d3e:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012d40:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012d44:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8012d48:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012d4a:	4a4f      	ldr	r2, [pc, #316]	; (8012e88 <jpeg_idct_16x16+0x530>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012d4c:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012d4e:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012d52:	435a      	muls	r2, r3
    tmp1  += z1;
 8012d54:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012d56:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012d5a:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012d5e:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012d60:	4a4a      	ldr	r2, [pc, #296]	; (8012e8c <jpeg_idct_16x16+0x534>)
 8012d62:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012d64:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8012d68:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012d6a:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012d6e:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012d70:	eb07 0b00 	add.w	fp, r7, r0
 8012d74:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012d76:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012d78:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012d7a:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012d7e:	f640 5223 	movw	r2, #3363	; 0xd23
 8012d82:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012d84:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 8012d86:	445c      	add	r4, fp
    tmp3  += z2;
 8012d88:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012d8a:	443a      	add	r2, r7
 8012d8c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8012d8e:	4484      	add	ip, r0
    tmp11 += z2;
 8012d90:	4448      	add	r0, r9
			     & RANGE_MASK];
 8012d92:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012d96:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012d9a:	9b98      	ldr	r3, [sp, #608]	; 0x260
 8012d9c:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012d9e:	9b01      	ldr	r3, [sp, #4]
 8012da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012da2:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012da4:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 8012da6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012daa:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012dae:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012db0:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012db2:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012db4:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8012db6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012dba:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012dbe:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012dc2:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012dc4:	f818 2006 	ldrb.w	r2, [r8, r6]
 8012dc8:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012dca:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012dcc:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012dce:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8012dd0:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012dd4:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012dd8:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012ddc:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012dde:	f818 2004 	ldrb.w	r2, [r8, r4]
 8012de2:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012de4:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012de8:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012dec:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8012dee:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012df2:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012df6:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012dfa:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012dfc:	f818 200e 	ldrb.w	r2, [r8, lr]
 8012e00:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012e02:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012e06:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012e0a:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012e0c:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012e10:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012e14:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012e18:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012e1a:	f818 200c 	ldrb.w	r2, [r8, ip]
 8012e1e:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012e20:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012e22:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012e24:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8012e26:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012e2a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012e2e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012e32:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012e34:	f818 2000 	ldrb.w	r2, [r8, r0]
 8012e38:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012e3a:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012e3e:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8012e42:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012e46:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012e4a:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012e4e:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012e50:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012e56:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012e58:	9b02      	ldr	r3, [sp, #8]
 8012e5a:	4413      	add	r3, r2
			     & RANGE_MASK];
 8012e5c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012e60:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012e64:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012e66:	9b02      	ldr	r3, [sp, #8]
 8012e68:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 8012e6c:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8012e6e:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012e72:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012e76:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 16; ctr++) {
 8012e78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	f47f aeb2 	bne.w	8012be4 <jpeg_idct_16x16+0x28c>
  }
}
 8012e80:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8012e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e88:	ffffeaab 	.word	0xffffeaab
 8012e8c:	ffffd817 	.word	0xffffd817

08012e90 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e94:	b0cf      	sub	sp, #316	; 0x13c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8012e96:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012e98:	3a02      	subs	r2, #2
{
 8012e9a:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 8012e9c:	a90e      	add	r1, sp, #56	; 0x38
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012e9e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012ea2:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012ea6:	f105 0320 	add.w	r3, r5, #32
 8012eaa:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8012eac:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8012eb0:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8012eb2:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8012eb6:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 8012eba:	f9b2 c042 	ldrsh.w	ip, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012ebe:	f9b2 7052 	ldrsh.w	r7, [r2, #82]	; 0x52
 8012ec2:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8012ec6:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ece:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8012ed2:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012ed4:	ea4a 030b 	orr.w	r3, sl, fp
 8012ed8:	ea4e 0303 	orr.w	r3, lr, r3
 8012edc:	ea4c 0303 	orr.w	r3, ip, r3
 8012ee0:	433b      	orrs	r3, r7
 8012ee2:	4333      	orrs	r3, r6
 8012ee4:	ea59 0303 	orrs.w	r3, r9, r3
 8012ee8:	f040 8159 	bne.w	801319e <jpeg_idct_16x8+0x30e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012eec:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 8012eee:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8012ef2:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8012ef4:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8012ef6:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8012ef8:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8012efa:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8012efe:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8012f02:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012f06:	9b04      	ldr	r3, [sp, #16]
 8012f08:	42ab      	cmp	r3, r5
 8012f0a:	d1cf      	bne.n	8012eac <jpeg_idct_16x8+0x1c>
 8012f0c:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 8012f0e:	ad0e      	add	r5, sp, #56	; 0x38
 8012f10:	3b04      	subs	r3, #4
 8012f12:	9300      	str	r3, [sp, #0]
 8012f14:	9b03      	ldr	r3, [sp, #12]
 8012f16:	331c      	adds	r3, #28
 8012f18:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012f1a:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012f1c:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012f20:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 8012f24:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8012f28:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012f2c:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 8012f30:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012f34:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8012f38:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012f3a:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8012f3c:	9300      	str	r3, [sp, #0]
 8012f3e:	4613      	mov	r3, r2
 8012f40:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012f42:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8012f44:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012f48:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012f4c:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012f4e:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012f50:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012f52:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8012f56:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8012f5a:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 8012f5e:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 8012f62:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012f66:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8012f68:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012f6c:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012f6e:	4acf      	ldr	r2, [pc, #828]	; (80132ac <jpeg_idct_16x8+0x41c>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012f70:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012f74:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012f78:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012f7c:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012f80:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012f84:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8012f88:	eb0e 0207 	add.w	r2, lr, r7
 8012f8c:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012f8e:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 8012f92:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8012f96:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012f98:	eb0c 0206 	add.w	r2, ip, r6
 8012f9c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012f9e:	ebac 0206 	sub.w	r2, ip, r6
 8012fa2:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012fa4:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8012fa8:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8012fac:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012fae:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012fb0:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 8012fb2:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8012fb6:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012fb8:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012fba:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8012fbe:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 8012fc2:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 8012fc4:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8012fc8:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012fcc:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012fd0:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012fd4:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012fd6:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012fda:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012fdc:	4eb4      	ldr	r6, [pc, #720]	; (80132b0 <jpeg_idct_16x8+0x420>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012fde:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012fe0:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8012fe4:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012fe8:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012fec:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012ff0:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012ff4:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012ff8:	f241 5455 	movw	r4, #5461	; 0x1555
 8012ffc:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013000:	f640 5423 	movw	r4, #3363	; 0xd23
 8013004:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013008:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801300a:	4454      	add	r4, sl
 801300c:	4474      	add	r4, lr
 801300e:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013012:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013016:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013018:	eb0c 0409 	add.w	r4, ip, r9
 801301c:	445c      	add	r4, fp
 801301e:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013022:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013024:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013026:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013028:	f44f 628e 	mov.w	r2, #1136	; 0x470
 801302c:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801302e:	f240 224d 	movw	r2, #589	; 0x24d
 8013032:	fb02 4203 	mla	r2, r2, r3, r4
 8013036:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013038:	4a9e      	ldr	r2, [pc, #632]	; (80132b4 <jpeg_idct_16x8+0x424>)
 801303a:	fb02 4407 	mla	r4, r2, r7, r4
 801303e:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013042:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013046:	4c9c      	ldr	r4, [pc, #624]	; (80132b8 <jpeg_idct_16x8+0x428>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013048:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801304a:	1afa      	subs	r2, r7, r3
 801304c:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013050:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 8013054:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013056:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013058:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 801305c:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8013060:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013062:	4a96      	ldr	r2, [pc, #600]	; (80132bc <jpeg_idct_16x8+0x42c>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013064:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013066:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801306a:	435a      	muls	r2, r3
    tmp1  += z1;
 801306c:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801306e:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013072:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013076:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013078:	4a91      	ldr	r2, [pc, #580]	; (80132c0 <jpeg_idct_16x8+0x430>)
 801307a:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801307c:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8013080:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013082:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013086:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013088:	eb07 0b00 	add.w	fp, r7, r0
 801308c:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801308e:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013090:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013092:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013096:	f640 5223 	movw	r2, #3363	; 0xd23
 801309a:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801309c:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 801309e:	445c      	add	r4, fp
    tmp3  += z2;
 80130a0:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80130a2:	443a      	add	r2, r7
 80130a4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 80130a6:	4484      	add	ip, r0
    tmp11 += z2;
 80130a8:	4448      	add	r0, r9
			     & RANGE_MASK];
 80130aa:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80130ae:	f818 2002 	ldrb.w	r2, [r8, r2]
 80130b2:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80130b4:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80130b6:	9b01      	ldr	r3, [sp, #4]
 80130b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130ba:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80130bc:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 80130be:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80130c2:	f818 2002 	ldrb.w	r2, [r8, r2]
 80130c6:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80130c8:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80130ca:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80130cc:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 80130ce:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80130d2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80130d6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80130da:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80130dc:	f818 2006 	ldrb.w	r2, [r8, r6]
 80130e0:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80130e2:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80130e4:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80130e6:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 80130e8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80130ec:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80130f0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80130f4:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80130f6:	f818 2004 	ldrb.w	r2, [r8, r4]
 80130fa:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80130fc:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013100:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013104:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8013106:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801310a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801310e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013112:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013114:	f818 200e 	ldrb.w	r2, [r8, lr]
 8013118:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801311a:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801311e:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013122:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8013124:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013128:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801312c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013130:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013132:	f818 200c 	ldrb.w	r2, [r8, ip]
 8013136:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013138:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801313a:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801313c:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 801313e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013142:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013146:	f818 2002 	ldrb.w	r2, [r8, r2]
 801314a:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801314c:	f818 2000 	ldrb.w	r2, [r8, r0]
 8013150:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013152:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013156:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 801315a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801315e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013162:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013166:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013168:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801316c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801316e:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013170:	9b02      	ldr	r3, [sp, #8]
 8013172:	4413      	add	r3, r2
			     & RANGE_MASK];
 8013174:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013178:	f818 3003 	ldrb.w	r3, [r8, r3]
 801317c:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801317e:	9b02      	ldr	r3, [sp, #8]
 8013180:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 8013184:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8013186:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801318a:	f818 300e 	ldrb.w	r3, [r8, lr]
 801318e:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 8; ctr++) {
 8013190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013192:	4293      	cmp	r3, r2
 8013194:	f47f aec1 	bne.w	8012f1a <jpeg_idct_16x8+0x8a>
  }
}
 8013198:	b04f      	add	sp, #316	; 0x13c
 801319a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801319e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80131a0:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80131a4:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 80131a8:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80131aa:	f241 1651 	movw	r6, #4433	; 0x1151
 80131ae:	eb0b 0300 	add.w	r3, fp, r0
 80131b2:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80131b4:	f641 067e 	movw	r6, #6270	; 0x187e
 80131b8:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80131bc:	4e41      	ldr	r6, [pc, #260]	; (80132c4 <jpeg_idct_16x8+0x434>)
 80131be:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 80131c2:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80131c4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80131c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80131ca:	fb00 f00c 	mul.w	r0, r0, ip
    tmp0 = z2 + z3;
 80131ce:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 80131d2:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 80131d6:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 80131da:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80131de:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 80131e0:	9000      	str	r0, [sp, #0]
    tmp11 = tmp1 + tmp3;
 80131e2:	18f0      	adds	r0, r6, r3
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80131e4:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 80131e8:	1b9b      	subs	r3, r3, r6
    tmp11 = tmp1 + tmp3;
 80131ea:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80131ec:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp12 = tmp1 - tmp3;
 80131f0:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80131f2:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80131f6:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80131fa:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 80131fe:	4347      	muls	r7, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013200:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8013202:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8013206:	eb07 040a 	add.w	r4, r7, sl
    z2 = tmp0 + tmp2;
 801320a:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801320e:	1930      	adds	r0, r6, r4
 8013210:	4358      	muls	r0, r3
    z2 += z1;
 8013212:	4b2d      	ldr	r3, [pc, #180]	; (80132c8 <jpeg_idct_16x8+0x438>)
 8013214:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8013218:	4b2c      	ldr	r3, [pc, #176]	; (80132cc <jpeg_idct_16x8+0x43c>)
 801321a:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801321e:	eb09 040a 	add.w	r4, r9, sl
 8013222:	4b2b      	ldr	r3, [pc, #172]	; (80132d0 <jpeg_idct_16x8+0x440>)
 8013224:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8013226:	f640 138e 	movw	r3, #2446	; 0x98e
 801322a:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 801322e:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8013230:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8013234:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013238:	4b26      	ldr	r3, [pc, #152]	; (80132d4 <jpeg_idct_16x8+0x444>)
    tmp3 += z1 + z3;
 801323a:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801323e:	eb07 0a0e 	add.w	sl, r7, lr
    tmp1 += z1 + z3;
 8013242:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013246:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801324a:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 801324c:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 801324e:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8013250:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013254:	fb0b 0007 	mla	r0, fp, r7, r0
    tmp2 += z1 + z2;
 8013258:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801325c:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013260:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013264:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013266:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013268:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801326c:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8013270:	eb03 040a 	add.w	r4, r3, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8013274:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013278:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801327a:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801327c:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8013280:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013282:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8013284:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8013286:	9b00      	ldr	r3, [sp, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013288:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801328a:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801328e:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8013290:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013292:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8013294:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8013296:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801329a:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801329c:	9b00      	ldr	r3, [sp, #0]
 801329e:	eba3 0909 	sub.w	r9, r3, r9
 80132a2:	ea4f 20e9 	mov.w	r0, r9, asr #11
 80132a6:	67c8      	str	r0, [r1, #124]	; 0x7c
    wsptr++;
 80132a8:	e62d      	b.n	8012f06 <jpeg_idct_16x8+0x76>
 80132aa:	bf00      	nop
 80132ac:	ffffecc2 	.word	0xffffecc2
 80132b0:	ffffb6d6 	.word	0xffffb6d6
 80132b4:	ffffdbfa 	.word	0xffffdbfa
 80132b8:	ffffe77a 	.word	0xffffe77a
 80132bc:	ffffeaab 	.word	0xffffeaab
 80132c0:	ffffd817 	.word	0xffffd817
 80132c4:	ffffc4df 	.word	0xffffc4df
 80132c8:	ffffc13b 	.word	0xffffc13b
 80132cc:	fffff384 	.word	0xfffff384
 80132d0:	ffffe333 	.word	0xffffe333
 80132d4:	ffffadfd 	.word	0xffffadfd

080132d8 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80132d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132dc:	b0c5      	sub	sp, #276	; 0x114
 80132de:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 80132e0:	f1a2 0c02 	sub.w	ip, r2, #2
 80132e4:	320e      	adds	r2, #14
 80132e6:	9302      	str	r3, [sp, #8]
 80132e8:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80132ea:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80132ee:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 80132f2:	9204      	str	r2, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80132f4:	3380      	adds	r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80132f6:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80132fa:	f641 4037 	movw	r0, #7223	; 0x1c37
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80132fe:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013302:	f642 0ac6 	movw	sl, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013306:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801330a:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801330e:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013310:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013314:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 8013318:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 801331a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801331e:	9200      	str	r2, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013320:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8013322:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013324:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8013328:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801332c:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 8013330:	434a      	muls	r2, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013332:	eba8 0102 	sub.w	r1, r8, r2
 8013336:	fb00 f901 	mul.w	r9, r0, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801333a:	eba5 0008 	sub.w	r0, r5, r8
 801333e:	f640 2112 	movw	r1, #2578	; 0xa12
 8013342:	fb01 f700 	mul.w	r7, r1, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8013346:	9900      	ldr	r1, [sp, #0]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013348:	18a8      	adds	r0, r5, r2
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801334a:	eb09 0407 	add.w	r4, r9, r7
 801334e:	440c      	add	r4, r1
 8013350:	49ba      	ldr	r1, [pc, #744]	; (801363c <jpeg_idct_14x7+0x364>)
 8013352:	fb01 4408 	mla	r4, r1, r8, r4
    tmp10 = z1 + z3;
 8013356:	18a9      	adds	r1, r5, r2
 8013358:	9103      	str	r1, [sp, #12]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801335a:	9900      	ldr	r1, [sp, #0]
 801335c:	fb0a 1000 	mla	r0, sl, r0, r1
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013360:	f46f 711f 	mvn.w	r1, #636	; 0x27c
 8013364:	fb01 0102 	mla	r1, r1, r2, r0
 8013368:	eb01 0209 	add.w	r2, r1, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801336c:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8013370:	f641 51ef 	movw	r1, #7663	; 0x1def
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013374:	9201      	str	r2, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013376:	4ab2      	ldr	r2, [pc, #712]	; (8013640 <jpeg_idct_14x7+0x368>)
 8013378:	fb02 0005 	mla	r0, r2, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801337c:	f9bc 5010 	ldrsh.w	r5, [ip, #16]
 8013380:	6a32      	ldr	r2, [r6, #32]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013382:	4438      	add	r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013384:	f9bc 7030 	ldrsh.w	r7, [ip, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013388:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801338a:	6e35      	ldr	r5, [r6, #96]	; 0x60
 801338c:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801338e:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8013392:	fb07 f709 	mul.w	r7, r7, r9
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8013396:	eb02 0905 	add.w	r9, r2, r5
 801339a:	fb01 fb09 	mul.w	fp, r1, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801339e:	eba2 0905 	sub.w	r9, r2, r5
 80133a2:	f240 5173 	movw	r1, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80133a6:	443a      	add	r2, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80133a8:	443d      	add	r5, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80133aa:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80133ae:	49a5      	ldr	r1, [pc, #660]	; (8013644 <jpeg_idct_14x7+0x36c>)
    tmp10 = tmp11 - tmp12;
 80133b0:	ebab 0a09 	sub.w	sl, fp, r9
    tmp11 += tmp12;
 80133b4:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80133b6:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80133ba:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80133bc:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80133c0:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 80133c4:	44a9      	add	r9, r5
    tmp10 += z2;
 80133c6:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80133c8:	fb0b 2707 	mla	r7, fp, r7, r2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80133cc:	9a01      	ldr	r2, [sp, #4]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80133ce:	443d      	add	r5, r7
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80133d0:	4452      	add	r2, sl
 80133d2:	12d2      	asrs	r2, r2, #11
 80133d4:	f84e 2c04 	str.w	r2, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80133d8:	9a01      	ldr	r2, [sp, #4]
 80133da:	eba2 0a0a 	sub.w	sl, r2, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80133de:	eb04 0209 	add.w	r2, r4, r9
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80133e2:	eba4 0409 	sub.w	r4, r4, r9
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80133e6:	12d2      	asrs	r2, r2, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80133e8:	ea4f 21ea 	mov.w	r1, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80133ec:	f8ce 201c 	str.w	r2, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80133f0:	1942      	adds	r2, r0, r5
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80133f2:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80133f6:	1b45      	subs	r5, r0, r5
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80133f8:	12d2      	asrs	r2, r2, #11
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80133fa:	9900      	ldr	r1, [sp, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80133fc:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80133fe:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013402:	12ed      	asrs	r5, r5, #11
    z2 -= tmp10;
 8013404:	9a03      	ldr	r2, [sp, #12]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013406:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    z2 -= tmp10;
 801340a:	eba8 0802 	sub.w	r8, r8, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801340e:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013412:	f8ce 507c 	str.w	r5, [lr, #124]	; 0x7c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013416:	fb02 1808 	mla	r8, r2, r8, r1
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 801341a:	ea4f 22e8 	mov.w	r2, r8, asr #11
 801341e:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013422:	9a04      	ldr	r2, [sp, #16]
 8013424:	4562      	cmp	r2, ip
 8013426:	f47f af66 	bne.w	80132f6 <jpeg_idct_14x7+0x1e>
 801342a:	9a02      	ldr	r2, [sp, #8]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 801342c:	ac0c      	add	r4, sp, #48	; 0x30
 801342e:	3a04      	subs	r2, #4
 8013430:	9200      	str	r2, [sp, #0]
 8013432:	9a02      	ldr	r2, [sp, #8]
 8013434:	3218      	adds	r2, #24
 8013436:	920b      	str	r2, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013438:	9a00      	ldr	r2, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801343a:	f640 2512 	movw	r5, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 801343e:	6927      	ldr	r7, [r4, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013440:	f241 38a3 	movw	r8, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8013444:	f852 1f04 	ldr.w	r1, [r2, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013448:	f641 0b14 	movw	fp, #6164	; 0x1814
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801344c:	6820      	ldr	r0, [r4, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801344e:	fb05 fe07 	mul.w	lr, r5, r7
    outptr = output_buf[ctr] + output_col;
 8013452:	910a      	str	r1, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013454:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 8013458:	9200      	str	r2, [sp, #0]
 801345a:	460a      	mov	r2, r1
 801345c:	994e      	ldr	r1, [sp, #312]	; 0x138
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801345e:	3010      	adds	r0, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013460:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8013462:	1851      	adds	r1, r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013464:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp11 = z1 + z3;
 8013468:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801346c:	437a      	muls	r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801346e:	436f      	muls	r7, r5
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013470:	4d75      	ldr	r5, [pc, #468]	; (8013648 <jpeg_idct_14x7+0x370>)
    tmp10 = z1 + z2;
 8013472:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013476:	4472      	add	r2, lr
    z1 = (INT32) wsptr[2];
 8013478:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 801347c:	ebc7 3940 	rsb	r9, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013480:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013482:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013486:	0052      	lsls	r2, r2, #1
 8013488:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 801348c:	9201      	str	r2, [sp, #4]
    z2 = (INT32) wsptr[6];
 801348e:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013492:	eb0e 0002 	add.w	r0, lr, r2
 8013496:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8013498:	f640 07bd 	movw	r7, #2237	; 0x8bd
 801349c:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80134a0:	fb05 0002 	mla	r0, r5, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80134a4:	f605 25e5 	addw	r5, r5, #2789	; 0xae5
 80134a8:	436a      	muls	r2, r5
    tmp20 = tmp10 + tmp13;
 80134aa:	eb0c 0507 	add.w	r5, ip, r7
 80134ae:	9502      	str	r5, [sp, #8]
    tmp26 = tmp10 - tmp13;
 80134b0:	ebac 0507 	sub.w	r5, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80134b4:	fb08 220e 	mla	r2, r8, lr, r2
    z2 = (INT32) wsptr[3];
 80134b8:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp26 = tmp10 - tmp13;
 80134bc:	9503      	str	r5, [sp, #12]
    tmp21 = tmp11 + tmp14;
 80134be:	1835      	adds	r5, r6, r0
    tmp25 = tmp11 - tmp14;
 80134c0:	1a30      	subs	r0, r6, r0
    z3 = (INT32) wsptr[5];
 80134c2:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp21 = tmp11 + tmp14;
 80134c6:	9504      	str	r5, [sp, #16]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80134c8:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 80134cc:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 80134ce:	eb09 0002 	add.w	r0, r9, r2
    tmp24 = tmp12 - tmp15;
 80134d2:	eba9 0202 	sub.w	r2, r9, r2
    z4 = (INT32) wsptr[7];
 80134d6:	f854 9c04 	ldr.w	r9, [r4, #-4]
    tmp22 = tmp12 + tmp15;
 80134da:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80134dc:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 80134e0:	9207      	str	r2, [sp, #28]
    z1 = (INT32) wsptr[1];
 80134e2:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80134e6:	eb02 0a08 	add.w	sl, r2, r8
    tmp14 = z1 + z3;
 80134ea:	eb02 060c 	add.w	r6, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80134ee:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80134f2:	f242 6052 	movw	r0, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80134f6:	fb0b fb06 	mul.w	fp, fp, r6
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80134fa:	fb00 f506 	mul.w	r5, r0, r6
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80134fe:	4853      	ldr	r0, [pc, #332]	; (801364c <jpeg_idct_14x7+0x374>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013500:	f46f 66a2 	mvn.w	r6, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013504:	eb0a 0705 	add.w	r7, sl, r5
 8013508:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 801350c:	fb00 7702 	mla	r7, r0, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013510:	f200 201b 	addw	r0, r0, #539	; 0x21b
 8013514:	fb00 b002 	mla	r0, r0, r2, fp
    z1    -= z2;
 8013518:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801351c:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013520:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013524:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013528:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 801352a:	4470      	add	r0, lr
 801352c:	9008      	str	r0, [sp, #32]
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801352e:	eb08 000c 	add.w	r0, r8, ip
 8013532:	4370      	muls	r0, r6
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013534:	f6a6 0681 	subw	r6, r6, #2177	; 0x881
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013538:	eba0 3049 	sub.w	r0, r0, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801353c:	fb06 0608 	mla	r6, r6, r8, r0
 8013540:	44b2      	add	sl, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013542:	4e43      	ldr	r6, [pc, #268]	; (8013650 <jpeg_idct_14x7+0x378>)
 8013544:	fb06 000c 	mla	r0, r6, ip, r0
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013548:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801354c:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801354e:	ebac 0508 	sub.w	r5, ip, r8
 8013552:	4375      	muls	r5, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013554:	9009      	str	r0, [sp, #36]	; 0x24
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013556:	eb05 3649 	add.w	r6, r5, r9, lsl #13
 801355a:	483e      	ldr	r0, [pc, #248]	; (8013654 <jpeg_idct_14x7+0x37c>)
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801355c:	eb02 3949 	add.w	r9, r2, r9, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013560:	9a02      	ldr	r2, [sp, #8]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013562:	fb00 660c 	mla	r6, r0, ip, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013566:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013568:	443a      	add	r2, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801356a:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801356c:	f241 5b99 	movw	fp, #5529	; 0x1599
			     & RANGE_MASK];
 8013570:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8013574:	fb0b 5508 	mla	r5, fp, r8, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013578:	5c9a      	ldrb	r2, [r3, r2]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801357a:	44ae      	add	lr, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801357c:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 801357e:	5542      	strb	r2, [r0, r5]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013580:	9a02      	ldr	r2, [sp, #8]
 8013582:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 8013584:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013588:	5dda      	ldrb	r2, [r3, r7]
 801358a:	734a      	strb	r2, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801358c:	9a04      	ldr	r2, [sp, #16]
 801358e:	4452      	add	r2, sl
			     & RANGE_MASK];
 8013590:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013594:	5c9a      	ldrb	r2, [r3, r2]
 8013596:	704a      	strb	r2, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013598:	9a04      	ldr	r2, [sp, #16]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801359a:	9809      	ldr	r0, [sp, #36]	; 0x24
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801359c:	eba2 0a0a 	sub.w	sl, r2, sl
			     & RANGE_MASK];
 80135a0:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80135a4:	f813 200a 	ldrb.w	r2, [r3, sl]
 80135a8:	730a      	strb	r2, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80135aa:	9a06      	ldr	r2, [sp, #24]
 80135ac:	4402      	add	r2, r0
			     & RANGE_MASK];
 80135ae:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80135b2:	5c9a      	ldrb	r2, [r3, r2]
 80135b4:	708a      	strb	r2, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80135b6:	9a06      	ldr	r2, [sp, #24]
 80135b8:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 80135ba:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80135be:	5c1a      	ldrb	r2, [r3, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80135c0:	9808      	ldr	r0, [sp, #32]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80135c2:	72ca      	strb	r2, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80135c4:	9a01      	ldr	r2, [sp, #4]
 80135c6:	444a      	add	r2, r9
			     & RANGE_MASK];
 80135c8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80135cc:	5c9a      	ldrb	r2, [r3, r2]
 80135ce:	70ca      	strb	r2, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80135d0:	9a01      	ldr	r2, [sp, #4]
 80135d2:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 80135d6:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80135da:	f813 2009 	ldrb.w	r2, [r3, r9]
 80135de:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80135e0:	9a07      	ldr	r2, [sp, #28]
 80135e2:	4432      	add	r2, r6
			     & RANGE_MASK];
 80135e4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80135e8:	5c9a      	ldrb	r2, [r3, r2]
 80135ea:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80135ec:	9a07      	ldr	r2, [sp, #28]
 80135ee:	1b96      	subs	r6, r2, r6
			     & RANGE_MASK];
 80135f0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80135f4:	5d9a      	ldrb	r2, [r3, r6]
 80135f6:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80135f8:	9a05      	ldr	r2, [sp, #20]
 80135fa:	4472      	add	r2, lr
			     & RANGE_MASK];
 80135fc:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013600:	5c9a      	ldrb	r2, [r3, r2]
 8013602:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013604:	9a05      	ldr	r2, [sp, #20]
 8013606:	eba2 050e 	sub.w	r5, r2, lr
			     & RANGE_MASK];
 801360a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801360e:	5d5a      	ldrb	r2, [r3, r5]
 8013610:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013612:	9a03      	ldr	r2, [sp, #12]
 8013614:	4402      	add	r2, r0
			     & RANGE_MASK];
 8013616:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801361a:	5c9a      	ldrb	r2, [r3, r2]
 801361c:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801361e:	9a03      	ldr	r2, [sp, #12]
 8013620:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8013622:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013626:	5c1a      	ldrb	r2, [r3, r0]
 8013628:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 801362a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801362c:	9900      	ldr	r1, [sp, #0]
 801362e:	428a      	cmp	r2, r1
 8013630:	f47f af02 	bne.w	8013438 <jpeg_idct_14x7+0x160>
  }
}
 8013634:	b045      	add	sp, #276	; 0x114
 8013636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801363a:	bf00      	nop
 801363c:	ffffc515 	.word	0xffffc515
 8013640:	ffffb0f1 	.word	0xffffb0f1
 8013644:	ffffd3e1 	.word	0xffffd3e1
 8013648:	ffffc8fc 	.word	0xffffc8fc
 801364c:	ffffdbf0 	.word	0xffffdbf0
 8013650:	ffffb409 	.word	0xffffb409
 8013654:	ffffc9e6 	.word	0xffffc9e6

08013658 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801365c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013660:	b0bb      	sub	sp, #236	; 0xec
 8013662:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013664:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013666:	3080      	adds	r0, #128	; 0x80
 8013668:	320e      	adds	r2, #14
 801366a:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801366c:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801366e:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013670:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013672:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8013676:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801367a:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801367e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013680:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013684:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013686:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801368a:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801368e:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 8013690:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013692:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013696:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 801369a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801369e:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80136a2:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 80136a4:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 80136a6:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80136aa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80136ac:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80136b0:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80136b4:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80136b6:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp20 = tmp11 + tmp10;
 80136b8:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80136bc:	fb00 f909 	mul.w	r9, r0, r9
    tmp22 = tmp11 - tmp10;
 80136c0:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80136c2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80136c6:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80136c8:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80136cc:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80136d0:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80136d4:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80136d8:	eb02 0c08 	add.w	ip, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80136dc:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 80136e0:	eba2 0909 	sub.w	r9, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80136e4:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 80136e8:	eba9 0808 	sub.w	r8, r9, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80136ec:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 80136f0:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80136f4:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80136f8:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80136fc:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013700:	12d2      	asrs	r2, r2, #11
 8013702:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013706:	ea4f 22ee 	mov.w	r2, lr, asr #11
 801370a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 801370e:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013712:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8013716:	61fa      	str	r2, [r7, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013718:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801371c:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013720:	67f9      	str	r1, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013722:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013724:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013728:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801372a:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801372c:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801372e:	42b2      	cmp	r2, r6
 8013730:	d19f      	bne.n	8013672 <jpeg_idct_12x6+0x1a>
 8013732:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 8013736:	aa0a      	add	r2, sp, #40	; 0x28
 8013738:	3314      	adds	r3, #20
 801373a:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801373c:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013740:	f640 0b5b 	movw	fp, #2139	; 0x85b
    outptr = output_buf[ctr] + output_col;
 8013744:	9944      	ldr	r1, [sp, #272]	; 0x110
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013746:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8013748:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 801374a:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 801374e:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013750:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8013754:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 8013758:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801375a:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 801375e:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013762:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 8013766:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 801376a:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801376e:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013770:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 8013774:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013778:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 801377a:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 801377e:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 8013780:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 8013784:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 8013788:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 801378c:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 8013790:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 8013794:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 8013796:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 801379a:	1b4d      	subs	r5, r1, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801379c:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 80137a0:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 80137a2:	eba7 000c 	sub.w	r0, r7, ip
    tmp22 = tmp11 + tmp12;
 80137a6:	1961      	adds	r1, r4, r5
    tmp10 = z1 + z3;
 80137a8:	eb08 0706 	add.w	r7, r8, r6
    tmp25 = tmp10 - tmp12;
 80137ac:	9005      	str	r0, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80137ae:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp22 = tmp11 + tmp12;
 80137b2:	9106      	str	r1, [sp, #24]
    tmp23 = tmp11 - tmp12;
 80137b4:	1b61      	subs	r1, r4, r5
    z4 = (INT32) wsptr[7];
 80137b6:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 80137ba:	9107      	str	r1, [sp, #28]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80137bc:	eb05 0c07 	add.w	ip, r5, r7
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80137c0:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80137c4:	eb06 0905 	add.w	r9, r6, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80137c8:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80137cc:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80137d0:	484f      	ldr	r0, [pc, #316]	; (8013910 <jpeg_idct_12x6+0x2b8>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80137d2:	fb0b cb07 	mla	fp, fp, r7, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80137d6:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80137da:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80137dc:	484d      	ldr	r0, [pc, #308]	; (8013914 <jpeg_idct_12x6+0x2bc>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80137de:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80137e2:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80137e6:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80137ea:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80137ee:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80137f2:	eb01 0709 	add.w	r7, r1, r9
 80137f6:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80137fa:	4847      	ldr	r0, [pc, #284]	; (8013918 <jpeg_idct_12x6+0x2c0>)
 80137fc:	fb00 1108 	mla	r1, r0, r8, r1
 8013800:	4846      	ldr	r0, [pc, #280]	; (801391c <jpeg_idct_12x6+0x2c4>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013802:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013804:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013808:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 801380c:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013810:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 8013814:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 8013818:	1b86      	subs	r6, r0, r6
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801381a:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801381e:	444c      	add	r4, r9
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013820:	eb01 090c 	add.w	r9, r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013824:	eb05 0c06 	add.w	ip, r5, r6
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013828:	483d      	ldr	r0, [pc, #244]	; (8013920 <jpeg_idct_12x6+0x2c8>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801382a:	9901      	ldr	r1, [sp, #4]
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801382c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013830:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013834:	fb00 c606 	mla	r6, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013838:	9804      	ldr	r0, [sp, #16]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801383a:	fb08 c505 	mla	r5, r8, r5, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801383e:	eb00 080e 	add.w	r8, r0, lr
 8013842:	9808      	ldr	r0, [sp, #32]
			     & RANGE_MASK];
 8013844:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013848:	f811 c008 	ldrb.w	ip, [r1, r8]
 801384c:	9944      	ldr	r1, [sp, #272]	; 0x110
 801384e:	f800 c001 	strb.w	ip, [r0, r1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013852:	9904      	ldr	r1, [sp, #16]
 8013854:	eba1 0e0e 	sub.w	lr, r1, lr
 8013858:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801385a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801385e:	f811 c00e 	ldrb.w	ip, [r1, lr]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013862:	9902      	ldr	r1, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013864:	f883 c00b 	strb.w	ip, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013868:	eb01 0c05 	add.w	ip, r1, r5
 801386c:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801386e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013872:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8013876:	f883 c001 	strb.w	ip, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801387a:	9902      	ldr	r1, [sp, #8]
 801387c:	eba1 0805 	sub.w	r8, r1, r5
 8013880:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013882:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013886:	f811 5008 	ldrb.w	r5, [r1, r8]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801388a:	9906      	ldr	r1, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801388c:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801388e:	19cd      	adds	r5, r1, r7
 8013890:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013892:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013896:	5d4d      	ldrb	r5, [r1, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013898:	9906      	ldr	r1, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801389a:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801389c:	1bcf      	subs	r7, r1, r7
 801389e:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80138a0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80138a4:	5dcd      	ldrb	r5, [r1, r7]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80138a6:	9907      	ldr	r1, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80138a8:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80138aa:	190d      	adds	r5, r1, r4
 80138ac:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80138ae:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80138b2:	5d4d      	ldrb	r5, [r1, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80138b4:	9907      	ldr	r1, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80138b6:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80138b8:	1b0c      	subs	r4, r1, r4
 80138ba:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80138bc:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80138c0:	5d0c      	ldrb	r4, [r1, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80138c2:	9903      	ldr	r1, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80138c4:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80138c6:	198c      	adds	r4, r1, r6
 80138c8:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80138ca:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80138ce:	5d0c      	ldrb	r4, [r1, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80138d0:	9903      	ldr	r1, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80138d2:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80138d4:	1b8e      	subs	r6, r1, r6
 80138d6:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80138d8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80138dc:	5d8c      	ldrb	r4, [r1, r6]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80138de:	9905      	ldr	r1, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80138e0:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80138e2:	eb01 0409 	add.w	r4, r1, r9
 80138e6:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80138e8:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80138ec:	5d0c      	ldrb	r4, [r1, r4]
 80138ee:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80138f0:	9905      	ldr	r1, [sp, #20]
 80138f2:	9801      	ldr	r0, [sp, #4]
 80138f4:	eba1 0109 	sub.w	r1, r1, r9
			     & RANGE_MASK];
 80138f8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80138fc:	5c41      	ldrb	r1, [r0, r1]
 80138fe:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8013900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013902:	4553      	cmp	r3, sl
 8013904:	f47f af1a 	bne.w	801373c <jpeg_idct_12x6+0xe4>
  }
}
 8013908:	b03b      	add	sp, #236	; 0xec
 801390a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801390e:	bf00      	nop
 8013910:	ffffeeaf 	.word	0xffffeeaf
 8013914:	ffffde8b 	.word	0xffffde8b
 8013918:	ffffea5c 	.word	0xffffea5c
 801391c:	ffffc08c 	.word	0xffffc08c
 8013920:	ffffc4df 	.word	0xffffc4df

08013924 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013928:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801392c:	b0af      	sub	sp, #188	; 0xbc
 801392e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013930:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013932:	3080      	adds	r0, #128	; 0x80
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013934:	320e      	adds	r2, #14
 8013936:	3d04      	subs	r5, #4
  wsptr = workspace;
 8013938:	af06      	add	r7, sp, #24
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801393a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801393e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
{
 8013942:	9300      	str	r3, [sp, #0]
 8013944:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013946:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801394a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801394c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013950:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013954:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013956:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013958:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801395c:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801395e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013962:	6a2b      	ldr	r3, [r5, #32]
    tmp12 <<= CONST_BITS;
 8013964:	0352      	lsls	r2, r2, #13
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013966:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801396a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801396e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013972:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013976:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801397a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801397e:	fb03 fa0a 	mul.w	sl, r3, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013982:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013984:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013988:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801398c:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = tmp12 + z2;
 8013990:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013992:	f641 239a 	movw	r3, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8013996:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801399a:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 801399e:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80139a2:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80139a6:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80139a8:	fb03 f808 	mul.w	r8, r3, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80139ac:	f241 0371 	movw	r3, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80139b0:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80139b2:	fb03 8a0a 	mla	sl, r3, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80139b6:	4b6c      	ldr	r3, [pc, #432]	; (8013b68 <jpeg_idct_10x5+0x244>)
 80139b8:	fb03 880b 	mla	r8, r3, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80139bc:	eb09 0b0a 	add.w	fp, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80139c0:	9b01      	ldr	r3, [sp, #4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80139c2:	eba9 0a0a 	sub.w	sl, r9, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80139c6:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80139ca:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80139ce:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80139d2:	42b3      	cmp	r3, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80139d4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80139d8:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80139dc:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80139e0:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80139e4:	f8c7 a07c 	str.w	sl, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80139e8:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80139ec:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80139ee:	d1aa      	bne.n	8013946 <jpeg_idct_10x5+0x22>
 80139f0:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 80139f2:	a906      	add	r1, sp, #24
 80139f4:	f1a3 0b04 	sub.w	fp, r3, #4
 80139f8:	3310      	adds	r3, #16
 80139fa:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80139fc:	f85b 3f04 	ldr.w	r3, [fp, #4]!
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013a00:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8013a02:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    z4 = (INT32) wsptr[4];
 8013a04:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8013a08:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013a0a:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 8013a0e:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013a10:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013a14:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013a18:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[6];
 8013a1c:	f851 cc08 	ldr.w	ip, [r1, #-8]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013a20:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013a22:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8013a24:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013a28:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8013a2a:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013a2e:	f641 279a 	movw	r7, #6810	; 0x1a9a
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013a32:	006d      	lsls	r5, r5, #1
 8013a34:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8013a38:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013a3c:	9300      	str	r3, [sp, #0]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013a3e:	eb05 030c 	add.w	r3, r5, ip
 8013a42:	437b      	muls	r3, r7
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8013a44:	f241 0771 	movw	r7, #4209	; 0x1071
 8013a48:	fb07 3505 	mla	r5, r7, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8013a4c:	4f46      	ldr	r7, [pc, #280]	; (8013b68 <jpeg_idct_10x5+0x244>)
 8013a4e:	fb07 330c 	mla	r3, r7, ip, r3
    tmp20 = tmp10 + tmp12;
 8013a52:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8013a56:	1b75      	subs	r5, r6, r5
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013a58:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp21 = tmp11 + tmp13;
 8013a5c:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8013a5e:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8013a60:	9501      	str	r5, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8013a62:	9302      	str	r3, [sp, #8]
    z2 = (INT32) wsptr[3];
 8013a64:	f851 5c14 	ldr.w	r5, [r1, #-20]
    z4 = (INT32) wsptr[7];
 8013a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 8013a6c:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8013a70:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 8013a74:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013a76:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013a7a:	fb06 f809 	mul.w	r8, r6, r9
    z4 = z3 + tmp12;
 8013a7e:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013a82:	435d      	muls	r5, r3
    z4 = z3 + tmp12;
 8013a84:	eb05 3a46 	add.w	sl, r5, r6, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013a88:	f642 46b3 	movw	r6, #11443	; 0x2cb3
 8013a8c:	fb06 8e02 	mla	lr, r6, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013a90:	f240 7614 	movw	r6, #1812	; 0x714
 8013a94:	4356      	muls	r6, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013a96:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013a98:	eba6 0608 	sub.w	r6, r6, r8
 8013a9c:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8013a9e:	f241 26cf 	movw	r6, #4815	; 0x12cf
 8013aa2:	fb06 f909 	mul.w	r9, r6, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013aa6:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 8013aaa:	ebc5 3546 	rsb	r5, r5, r6, lsl #13
 8013aae:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8013ab2:	1ad3      	subs	r3, r2, r3
 8013ab4:	035b      	lsls	r3, r3, #13
 8013ab6:	eba3 3846 	sub.w	r8, r3, r6, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013aba:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013abe:	f642 0353 	movw	r3, #10323	; 0x2853
 8013ac2:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013ac4:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ac6:	9e04      	ldr	r6, [sp, #16]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013ac8:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013acc:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ad0:	eb0c 020e 	add.w	r2, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013ad4:	1b5b      	subs	r3, r3, r5
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013ad6:	ebac 0c0e 	sub.w	ip, ip, lr
			    & RANGE_MASK];
 8013ada:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013ade:	444d      	add	r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013ae0:	9303      	str	r3, [sp, #12]
			    & RANGE_MASK];
 8013ae2:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ae6:	5c82      	ldrb	r2, [r0, r2]
 8013ae8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8013aea:	54f2      	strb	r2, [r6, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013aec:	9b03      	ldr	r3, [sp, #12]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013aee:	f810 200c 	ldrb.w	r2, [r0, ip]
 8013af2:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013af4:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013af6:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8013af8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8013afc:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013b00:	5c82      	ldrb	r2, [r0, r2]
 8013b02:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013b04:	5dc3      	ldrb	r3, [r0, r7]
 8013b06:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b08:	9b00      	ldr	r3, [sp, #0]
 8013b0a:	4443      	add	r3, r8
			    & RANGE_MASK];
 8013b0c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b10:	5cc3      	ldrb	r3, [r0, r3]
 8013b12:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013b14:	9b00      	ldr	r3, [sp, #0]
 8013b16:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 8013b1a:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013b1e:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013b22:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013b24:	9b02      	ldr	r3, [sp, #8]
 8013b26:	442b      	add	r3, r5
			    & RANGE_MASK];
 8013b28:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013b2c:	5cc3      	ldrb	r3, [r0, r3]
 8013b2e:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013b30:	9b02      	ldr	r3, [sp, #8]
 8013b32:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8013b34:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013b38:	5d43      	ldrb	r3, [r0, r5]
 8013b3a:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013b3c:	9b01      	ldr	r3, [sp, #4]
 8013b3e:	4453      	add	r3, sl
			    & RANGE_MASK];
 8013b40:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013b44:	5cc3      	ldrb	r3, [r0, r3]
 8013b46:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013b48:	9b01      	ldr	r3, [sp, #4]
 8013b4a:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 8013b4e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013b52:	f810 300a 	ldrb.w	r3, [r0, sl]
 8013b56:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8013b58:	9b05      	ldr	r3, [sp, #20]
 8013b5a:	455b      	cmp	r3, fp
 8013b5c:	f47f af4e 	bne.w	80139fc <jpeg_idct_10x5+0xd8>
  }
}
 8013b60:	b02f      	add	sp, #188	; 0xbc
 8013b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b66:	bf00      	nop
 8013b68:	ffffba5c 	.word	0xffffba5c

08013b6c <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013b70:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013b74:	b0a5      	sub	sp, #148	; 0x94
 8013b76:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013b78:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013b7a:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b7e:	f102 070e 	add.w	r7, r2, #14
 8013b82:	3d04      	subs	r5, #4
  wsptr = workspace;
 8013b84:	a804      	add	r0, sp, #16
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013b86:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013b8a:	f641 0e7e 	movw	lr, #6270	; 0x187e
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013b8e:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b92:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013b94:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013b98:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b9c:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013b9e:	fb02 f404 	mul.w	r4, r2, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013ba2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ba4:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013ba8:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013bac:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013bb0:	4966      	ldr	r1, [pc, #408]	; (8013d4c <jpeg_idct_8x4+0x1e0>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8013bb2:	eb04 0902 	add.w	r9, r4, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8013bb6:	eba4 0402 	sub.w	r4, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013bba:	6a2a      	ldr	r2, [r5, #32]
 8013bbc:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013bc0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8013bc2:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013bc6:	eb0a 020b 	add.w	r2, sl, fp
 8013bca:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013bd2:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013bd6:	fb01 220b 	mla	r2, r1, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013bda:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013bde:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8013be2:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013be6:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8013bea:	eb02 0984 	add.w	r9, r2, r4, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 8013bee:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013bf2:	ebc2 0284 	rsb	r2, r2, r4, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013bf6:	f8c0 a05c 	str.w	sl, [r0, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8013bfa:	f8c0 901c 	str.w	r9, [r0, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013bfe:	63c2      	str	r2, [r0, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013c00:	d1c5      	bne.n	8013b8e <jpeg_idct_8x4+0x22>
 8013c02:	f1a3 0804 	sub.w	r8, r3, #4

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8013c06:	a904      	add	r1, sp, #16
 8013c08:	330c      	adds	r3, #12
 8013c0a:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013c0c:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013c10:	f241 1051 	movw	r0, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8013c14:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8013c16:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8013c18:	9302      	str	r3, [sp, #8]
 8013c1a:	189c      	adds	r4, r3, r2
    z3 = (INT32) wsptr[6];
 8013c1c:	f851 3c08 	ldr.w	r3, [r1, #-8]
    z2 = (INT32) wsptr[2];
 8013c20:	f851 2c18 	ldr.w	r2, [r1, #-24]
    z3 = (INT32) wsptr[4];
 8013c24:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013c28:	eb02 0b03 	add.w	fp, r2, r3
    tmp1 = (INT32) wsptr[5];
 8013c2c:	f851 ec0c 	ldr.w	lr, [r1, #-12]
    tmp3 = (INT32) wsptr[1];
 8013c30:	f851 9c1c 	ldr.w	r9, [r1, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013c34:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013c38:	f641 007e 	movw	r0, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 8013c3c:	f851 7c04 	ldr.w	r7, [r1, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013c40:	fb00 b202 	mla	r2, r0, r2, fp
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013c44:	4841      	ldr	r0, [pc, #260]	; (8013d4c <jpeg_idct_8x4+0x1e0>)
 8013c46:	fb00 bb03 	mla	fp, r0, r3, fp
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013c4a:	f851 3c20 	ldr.w	r3, [r1, #-32]
 8013c4e:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8013c50:	1958      	adds	r0, r3, r5
    tmp1 = (z2 - z3) << CONST_BITS;
 8013c52:	1b5b      	subs	r3, r3, r5
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013c54:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 8013c58:	eb02 3640 	add.w	r6, r2, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8013c5c:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 8013c60:	9200      	str	r2, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8013c62:	eb0b 3243 	add.w	r2, fp, r3, lsl #13
    tmp12 = tmp1 - tmp3;
 8013c66:	ebcb 3b43 	rsb	fp, fp, r3, lsl #13
    z2 = tmp0 + tmp2;
 8013c6a:	f851 3c14 	ldr.w	r3, [r1, #-20]
    tmp11 = tmp1 + tmp3;
 8013c6e:	9201      	str	r2, [sp, #4]
    z3 = tmp1 + tmp3;
 8013c70:	eb0e 0209 	add.w	r2, lr, r9
    z2 = tmp0 + tmp2;
 8013c74:	18f8      	adds	r0, r7, r3
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013c76:	1883      	adds	r3, r0, r2
 8013c78:	436b      	muls	r3, r5
    z2 += z1;
 8013c7a:	4d35      	ldr	r5, [pc, #212]	; (8013d50 <jpeg_idct_8x4+0x1e4>)
 8013c7c:	fb05 3000 	mla	r0, r5, r0, r3
    z3 += z1;
 8013c80:	4d34      	ldr	r5, [pc, #208]	; (8013d54 <jpeg_idct_8x4+0x1e8>)
 8013c82:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013c86:	eb07 0209 	add.w	r2, r7, r9
 8013c8a:	4d33      	ldr	r5, [pc, #204]	; (8013d58 <jpeg_idct_8x4+0x1ec>)
 8013c8c:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 8013c8e:	f640 158e 	movw	r5, #2446	; 0x98e
 8013c92:	eb00 0a02 	add.w	sl, r0, r2
    tmp3 += z1 + z3;
 8013c96:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 8013c98:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013c9c:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp3 += z1 + z3;
 8013ca0:	f243 0a0b 	movw	sl, #12299	; 0x300b
 8013ca4:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013ca8:	eb0e 0905 	add.w	r9, lr, r5
 8013cac:	4d2b      	ldr	r5, [pc, #172]	; (8013d5c <jpeg_idct_8x4+0x1f0>)
    tmp1 += z1 + z3;
 8013cae:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013cb2:	fb05 f909 	mul.w	r9, r5, r9
    tmp2 += z1 + z2;
 8013cb6:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp1 += z1 + z3;
 8013cba:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 8013cbc:	4448      	add	r0, r9
 8013cbe:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013cc2:	fb0a 3a0e 	mla	sl, sl, lr, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013cc6:	eb06 0e02 	add.w	lr, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013cca:	1ab6      	subs	r6, r6, r2
    tmp2 += z1 + z2;
 8013ccc:	fb09 0005 	mla	r0, r9, r5, r0
			    & RANGE_MASK];
 8013cd0:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013cd4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013cd6:	9d02      	ldr	r5, [sp, #8]
			    & RANGE_MASK];
 8013cd8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013cdc:	f81c e00e 	ldrb.w	lr, [ip, lr]
 8013ce0:	f805 e003 	strb.w	lr, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013ce4:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013ce6:	f81c 2006 	ldrb.w	r2, [ip, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013cea:	eba3 0900 	sub.w	r9, r3, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013cee:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013cf0:	181a      	adds	r2, r3, r0
			    & RANGE_MASK];
 8013cf2:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013cf6:	ebab 030a 	sub.w	r3, fp, sl
			    & RANGE_MASK];
 8013cfa:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8013cfe:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013d02:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013d06:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013d08:	f81c 2009 	ldrb.w	r2, [ip, r9]
 8013d0c:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013d0e:	eb0b 020a 	add.w	r2, fp, sl
			    & RANGE_MASK];
 8013d12:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013d16:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013d1a:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013d1c:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8013d20:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013d22:	9b00      	ldr	r3, [sp, #0]
 8013d24:	443b      	add	r3, r7
			    & RANGE_MASK];
 8013d26:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013d2a:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8013d2e:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013d30:	9b00      	ldr	r3, [sp, #0]
 8013d32:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8013d34:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013d38:	f81c 3007 	ldrb.w	r3, [ip, r7]
 8013d3c:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 8013d3e:	9b03      	ldr	r3, [sp, #12]
 8013d40:	4543      	cmp	r3, r8
 8013d42:	f47f af63 	bne.w	8013c0c <jpeg_idct_8x4+0xa0>
  }
}
 8013d46:	b025      	add	sp, #148	; 0x94
 8013d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d4c:	ffffc4df 	.word	0xffffc4df
 8013d50:	ffffc13b 	.word	0xffffc13b
 8013d54:	fffff384 	.word	0xfffff384
 8013d58:	ffffe333 	.word	0xffffe333
 8013d5c:	ffffadfd 	.word	0xffffadfd

08013d60 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d64:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013d66:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8013d6a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8013d6c:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013d70:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013d72:	3080      	adds	r0, #128	; 0x80
 8013d74:	f102 040a 	add.w	r4, r2, #10
 8013d78:	f1a1 0c04 	sub.w	ip, r1, #4
 8013d7c:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013d7e:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013d82:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013d86:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013d88:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013d8c:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013d8e:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013d92:	f9be 7020 	ldrsh.w	r7, [lr, #32]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013d96:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013d98:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013d9c:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013da0:	f9be a010 	ldrsh.w	sl, [lr, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013da4:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 <<= CONST_BITS;
 8013da8:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013dac:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013db0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013db4:	fb09 f606 	mul.w	r6, r9, r6
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013db8:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp10 = tmp0 + tmp12;
 8013dbc:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8013dc0:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013dc4:	fb08 fa0a 	mul.w	sl, r8, sl

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013dc8:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013dcc:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013dd0:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013dd4:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013dd6:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013dda:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013dde:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013de2:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013de4:	d1d0      	bne.n	8013d88 <jpeg_idct_6x3+0x28>
 8013de6:	f1a3 0e04 	sub.w	lr, r3, #4
 8013dea:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013dee:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013df2:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8013df6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8013df8:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013dfa:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 8013dfe:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8013e00:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013e04:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013e08:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013e0c:	f852 4c10 	ldr.w	r4, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013e10:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8013e14:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013e18:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8013e1c:	eb01 3543 	add.w	r5, r1, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8013e20:	ebc1 3343 	rsb	r3, r1, r3, lsl #13
 8013e24:	eba3 0301 	sub.w	r3, r3, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013e28:	f242 7131 	movw	r1, #10033	; 0x2731
 8013e2c:	fb01 f104 	mul.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8013e30:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp10 = tmp1 + tmp0;
 8013e34:	eb05 0601 	add.w	r6, r5, r1
    tmp12 = tmp1 - tmp0;
 8013e38:	eba5 0101 	sub.w	r1, r5, r1
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013e3c:	eb04 0508 	add.w	r5, r4, r8
 8013e40:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013e44:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8013e48:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8013e4c:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013e50:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013e54:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013e56:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8013e5a:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013e5e:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013e62:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013e66:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8013e6a:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8013e6e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013e72:	5d04      	ldrb	r4, [r0, r4]
 8013e74:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013e76:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013e7a:	9801      	ldr	r0, [sp, #4]
 8013e7c:	5d84      	ldrb	r4, [r0, r6]
 8013e7e:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013e80:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013e84:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8013e88:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8013e8c:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013e90:	5d04      	ldrb	r4, [r0, r4]
 8013e92:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013e94:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013e98:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013e9a:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013e9e:	eba1 0505 	sub.w	r5, r1, r5
			    & RANGE_MASK];
 8013ea2:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013ea6:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013eaa:	5cc3      	ldrb	r3, [r0, r3]
 8013eac:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013eae:	5d43      	ldrb	r3, [r0, r5]
 8013eb0:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8013eb2:	d19c      	bne.n	8013dee <jpeg_idct_6x3+0x8e>
  }
}
 8013eb4:	b015      	add	sp, #84	; 0x54
 8013eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013ebc <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ec0:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013ec2:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8013ec6:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8013ec8:	1e96      	subs	r6, r2, #2
 8013eca:	f10d 0c08 	add.w	ip, sp, #8
 8013ece:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013ed0:	3c04      	subs	r4, #4
 8013ed2:	f102 0e06 	add.w	lr, r2, #6
 8013ed6:	4660      	mov	r0, ip
{
 8013ed8:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013eda:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 8013ede:	f854 1f04 	ldr.w	r1, [r4, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013ee2:	45b6      	cmp	lr, r6
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013ee4:	fb01 f202 	mul.w	r2, r1, r2

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ee8:	6a27      	ldr	r7, [r4, #32]
 8013eea:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8013eee:	fb07 f101 	mul.w	r1, r7, r1

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8013ef2:	eb02 0701 	add.w	r7, r2, r1
    wsptr[4*1] = tmp10 - tmp0;
 8013ef6:	eba2 0201 	sub.w	r2, r2, r1
    wsptr[4*0] = tmp10 + tmp0;
 8013efa:	f84c 7b04 	str.w	r7, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 8013efe:	f8cc 200c 	str.w	r2, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013f02:	d1ea      	bne.n	8013eda <jpeg_idct_4x2+0x1e>
 8013f04:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013f06:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013f0a:	f641 097e 	movw	r9, #6270	; 0x187e
 8013f0e:	f1a3 0c04 	sub.w	ip, r3, #4
    outptr = output_buf[ctr] + output_col;
 8013f12:	46e0      	mov	r8, ip
 8013f14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013f16:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8013f1a:	3010      	adds	r0, #16
    tmp0 = wsptr[0] + (ONE << 2);
 8013f1c:	f850 4c10 	ldr.w	r4, [r0, #-16]
    outptr = output_buf[ctr] + output_col;
 8013f20:	eb0e 0602 	add.w	r6, lr, r2
    z3 = wsptr[3];
 8013f24:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = wsptr[2];
 8013f28:	f850 2c08 	ldr.w	r2, [r0, #-8]
    tmp0 = wsptr[0] + (ONE << 2);
 8013f2c:	3404      	adds	r4, #4
    z2 = wsptr[1];
 8013f2e:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8013f32:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8013f36:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013f38:	19ca      	adds	r2, r1, r7
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013f3a:	4b13      	ldr	r3, [pc, #76]	; (8013f88 <jpeg_idct_4x2+0xcc>)
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013f3c:	fb0a f202 	mul.w	r2, sl, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013f40:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013f44:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013f48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013f4a:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013f4e:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8013f52:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 8013f56:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013f5a:	5def      	ldrb	r7, [r5, r7]
 8013f5c:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013f60:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8013f62:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013f64:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013f66:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013f6a:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 8013f6e:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8013f70:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8013f74:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013f78:	5c69      	ldrb	r1, [r5, r1]
 8013f7a:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013f7c:	5caa      	ldrb	r2, [r5, r2]
 8013f7e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8013f80:	d1c7      	bne.n	8013f12 <jpeg_idct_4x2+0x56>
  }
}
 8013f82:	b00b      	add	sp, #44	; 0x2c
 8013f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f88:	ffffc4df 	.word	0xffffc4df

08013f8c <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013f8c:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013f8e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013f92:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8013f94:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013f96:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013f98:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013f9c:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013f9e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8013fa2:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013fa4:	437b      	muls	r3, r7
{
 8013fa6:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 8013fa8:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013faa:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 8013fac:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013fae:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013fb0:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013fb2:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013fb6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013fba:	5c41      	ldrb	r1, [r0, r1]
 8013fbc:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013fbe:	5cc3      	ldrb	r3, [r0, r3]
 8013fc0:	7073      	strb	r3, [r6, #1]
}
 8013fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013fc4 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8013fcc:	f1a2 0802 	sub.w	r8, r2, #2
 8013fd0:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013fd2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013fd6:	3380      	adds	r3, #128	; 0x80
 8013fd8:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013fda:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8013fdc:	f1a3 0904 	sub.w	r9, r3, #4
 8013fe0:	f102 030e 	add.w	r3, r2, #14
 8013fe4:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8013fe6:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013fe8:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013fec:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013ff0:	f859 1f04 	ldr.w	r1, [r9, #4]!
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013ff4:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013ff8:	f9b8 0040 	ldrsh.w	r0, [r8, #64]	; 0x40
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013ffc:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014000:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014002:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014006:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014008:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 801400a:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801400c:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8014014:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8014016:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014018:	f9b8 4020 	ldrsh.w	r4, [r8, #32]
    tmp10 = tmp0 + tmp1;
 801401c:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 801401e:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8014020:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8014022:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014026:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801402a:	4ad3      	ldr	r2, [pc, #844]	; (8014378 <jpeg_idct_8x16+0x3b4>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801402c:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014030:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
 8014034:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8014038:	4361      	muls	r1, r4
    z3 = z1 - z2;
 801403a:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801403e:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8014042:	f642 4563 	movw	r5, #11363	; 0x2c63
 8014046:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014048:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801404c:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8014050:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8014054:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014058:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801405c:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 8014060:	eb07 020c 	add.w	r2, r7, ip
 8014064:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8014066:	eba7 020c 	sub.w	r2, r7, ip
 801406a:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 801406c:	1972      	adds	r2, r6, r5
 801406e:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8014070:	1b72      	subs	r2, r6, r5

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014072:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8014076:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8014078:	eb0b 0204 	add.w	r2, fp, r4
 801407c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 801407e:	ebab 0204 	sub.w	r2, fp, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014082:	f9b8 4070 	ldrsh.w	r4, [r8, #112]	; 0x70
    tmp25 = tmp13 - tmp2;
 8014086:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8014088:	1842      	adds	r2, r0, r1
 801408a:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 801408c:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801408e:	f9b8 1010 	ldrsh.w	r1, [r8, #16]
    tmp24 = tmp11 - tmp3;
 8014092:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014094:	f8d9 2020 	ldr.w	r2, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014098:	f9b8 0030 	ldrsh.w	r0, [r8, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801409c:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801409e:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 80140a2:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80140a4:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 80140a8:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80140aa:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80140ae:	188e      	adds	r6, r1, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80140b0:	eba1 0b02 	sub.w	fp, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80140b4:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80140b6:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 80140ba:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80140bc:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80140be:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80140c2:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80140c6:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80140ca:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80140ce:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80140d2:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80140d6:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80140da:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80140de:	f241 5455 	movw	r4, #5461	; 0x1555
 80140e2:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 80140e4:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80140e8:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80140ea:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 80140ee:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80140f0:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80140f4:	4ca1      	ldr	r4, [pc, #644]	; (801437c <jpeg_idct_8x16+0x3b8>)
 80140f6:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 80140fa:	4fa1      	ldr	r7, [pc, #644]	; (8014380 <jpeg_idct_8x16+0x3bc>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 80140fc:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80140fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014100:	4464      	add	r4, ip
 8014102:	445c      	add	r4, fp
 8014104:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8014108:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801410a:	4f9e      	ldr	r7, [pc, #632]	; (8014384 <jpeg_idct_8x16+0x3c0>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 801410c:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801410e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8014112:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8014114:	f240 214d 	movw	r1, #589	; 0x24d
 8014118:	fb01 4102 	mla	r1, r1, r2, r4
 801411c:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801411e:	499a      	ldr	r1, [pc, #616]	; (8014388 <jpeg_idct_8x16+0x3c4>)
 8014120:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014124:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8014126:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014128:	f642 5a09 	movw	sl, #11529	; 0x2d09
 801412c:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014130:	fb07 1a05 	mla	sl, r7, r5, r1
 8014134:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014136:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014138:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 801413c:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8014140:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8014142:	4992      	ldr	r1, [pc, #584]	; (801438c <jpeg_idct_8x16+0x3c8>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014144:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014146:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801414a:	4351      	muls	r1, r2
    tmp1  += z1;
 801414c:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801414e:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014152:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014156:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8014158:	498d      	ldr	r1, [pc, #564]	; (8014390 <jpeg_idct_8x16+0x3cc>)
 801415a:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801415c:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8014160:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014162:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014166:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014168:	eb05 0b00 	add.w	fp, r5, r0
 801416c:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801416e:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8014170:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014172:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8014176:	f640 5123 	movw	r1, #3363	; 0xd23
 801417a:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801417c:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 801417e:	445c      	add	r4, fp
    tmp3  += z2;
 8014180:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8014182:	4429      	add	r1, r5
    tmp10 += z2;
 8014184:	4484      	add	ip, r0
    tmp11 += z2;
 8014186:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8014188:	12c9      	asrs	r1, r1, #11
 801418a:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801418e:	9901      	ldr	r1, [sp, #4]
 8014190:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8014192:	9903      	ldr	r1, [sp, #12]
 8014194:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8014196:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8014198:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801419a:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801419e:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80141a0:	9903      	ldr	r1, [sp, #12]
 80141a2:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80141a4:	9905      	ldr	r1, [sp, #20]
 80141a6:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80141a8:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80141aa:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80141ac:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80141b0:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80141b2:	9905      	ldr	r1, [sp, #20]
 80141b4:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80141b6:	9907      	ldr	r1, [sp, #28]
 80141b8:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80141ba:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80141bc:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80141be:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80141c2:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 80141c4:	9907      	ldr	r1, [sp, #28]
 80141c6:	eba1 0e0e 	sub.w	lr, r1, lr
 80141ca:	ea4f 21ee 	mov.w	r1, lr, asr #11
 80141ce:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 80141d2:	9908      	ldr	r1, [sp, #32]
 80141d4:	4461      	add	r1, ip
 80141d6:	12c9      	asrs	r1, r1, #11
 80141d8:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 80141da:	9908      	ldr	r1, [sp, #32]
 80141dc:	eba1 0c0c 	sub.w	ip, r1, ip
 80141e0:	ea4f 21ec 	mov.w	r1, ip, asr #11
 80141e4:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 80141e8:	9906      	ldr	r1, [sp, #24]
 80141ea:	4401      	add	r1, r0
 80141ec:	12c9      	asrs	r1, r1, #11
 80141ee:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80141f2:	9906      	ldr	r1, [sp, #24]
 80141f4:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80141f6:	9904      	ldr	r1, [sp, #16]
 80141f8:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80141fa:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80141fc:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80141fe:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8014202:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8014206:	9904      	ldr	r1, [sp, #16]
 8014208:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801420a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801420c:	12d2      	asrs	r2, r2, #11
 801420e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8014212:	9a02      	ldr	r2, [sp, #8]
 8014214:	440a      	add	r2, r1
 8014216:	12d2      	asrs	r2, r2, #11
 8014218:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801421c:	9a02      	ldr	r2, [sp, #8]
 801421e:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014220:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8014222:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014224:	4542      	cmp	r2, r8
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8014226:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801422a:	f47f aedd 	bne.w	8013fe8 <jpeg_idct_8x16+0x24>
 801422e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8014230:	a80e      	add	r0, sp, #56	; 0x38
 8014232:	f1a3 0904 	sub.w	r9, r3, #4
 8014236:	333c      	adds	r3, #60	; 0x3c
 8014238:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801423a:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801423e:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8014242:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8014244:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8014246:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 801424a:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 801424c:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 8014250:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014252:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 8014254:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp1 = (INT32) wsptr[5];
 8014258:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801425c:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801425e:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp2 = (INT32) wsptr[3];
 8014262:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014266:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801426a:	4c4a      	ldr	r4, [pc, #296]	; (8014394 <jpeg_idct_8x16+0x3d0>)
    tmp3 = (INT32) wsptr[1];
 801426c:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014270:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014274:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp0 = (INT32) wsptr[7];
 8014278:	f850 cc04 	ldr.w	ip, [r0, #-4]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801427c:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 801427e:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8014280:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8014282:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8014286:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 801428a:	eb0c 040e 	add.w	r4, ip, lr
    tmp11 = tmp1 + tmp3;
 801428e:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8014292:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 8014294:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 8014298:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 801429c:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801429e:	f242 53a1 	movw	r3, #9633	; 0x25a1
 80142a2:	1862      	adds	r2, r4, r1
 80142a4:	435a      	muls	r2, r3
    z2 += z1;
 80142a6:	4b3c      	ldr	r3, [pc, #240]	; (8014398 <jpeg_idct_8x16+0x3d4>)
 80142a8:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 80142ac:	4b3b      	ldr	r3, [pc, #236]	; (801439c <jpeg_idct_8x16+0x3d8>)
 80142ae:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80142b2:	eb0c 010a 	add.w	r1, ip, sl
 80142b6:	4b3a      	ldr	r3, [pc, #232]	; (80143a0 <jpeg_idct_8x16+0x3dc>)
 80142b8:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 80142ba:	f640 138e 	movw	r3, #2446	; 0x98e
 80142be:	eb04 0b01 	add.w	fp, r4, r1
    tmp3 += z1 + z3;
 80142c2:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 80142c4:	fb03 bc0c 	mla	ip, r3, ip, fp
    tmp3 += z1 + z3;
 80142c8:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80142cc:	4b35      	ldr	r3, [pc, #212]	; (80143a4 <jpeg_idct_8x16+0x3e0>)
    tmp3 += z1 + z3;
 80142ce:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80142d2:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 80142d6:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80142da:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80142de:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 80142e0:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 80142e2:	4454      	add	r4, sl
 80142e4:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 80142e8:	fb0b 2b08 	mla	fp, fp, r8, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80142ec:	eb07 0801 	add.w	r8, r7, r1
    tmp2 += z1 + z2;
 80142f0:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80142f4:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
 80142f6:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80142fa:	1a7f      	subs	r7, r7, r1
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80142fc:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014300:	f813 e008 	ldrb.w	lr, [r3, r8]
			    & RANGE_MASK];
 8014304:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014308:	9b03      	ldr	r3, [sp, #12]
			    & RANGE_MASK];
 801430a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801430e:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014312:	9b00      	ldr	r3, [sp, #0]
 8014314:	5dd9      	ldrb	r1, [r3, r7]
 8014316:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014318:	1931      	adds	r1, r6, r4
			    & RANGE_MASK];
 801431a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801431e:	5c59      	ldrb	r1, [r3, r1]
 8014320:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014322:	f813 100a 	ldrb.w	r1, [r3, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014326:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014328:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801432a:	eb03 010b 	add.w	r1, r3, fp
 801432e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014330:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014334:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014336:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014338:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801433a:	eba3 020b 	sub.w	r2, r3, fp
 801433e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014340:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014344:	5c9b      	ldrb	r3, [r3, r2]
 8014346:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014348:	9b01      	ldr	r3, [sp, #4]
 801434a:	9a00      	ldr	r2, [sp, #0]
 801434c:	4463      	add	r3, ip
			    & RANGE_MASK];
 801434e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014352:	5cd3      	ldrb	r3, [r2, r3]
 8014354:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014356:	9b01      	ldr	r3, [sp, #4]
 8014358:	eba3 0c0c 	sub.w	ip, r3, ip
			    & RANGE_MASK];
 801435c:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014360:	f812 300c 	ldrb.w	r3, [r2, ip]
 8014364:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 8014366:	9b04      	ldr	r3, [sp, #16]
 8014368:	454b      	cmp	r3, r9
 801436a:	f47f af66 	bne.w	801423a <jpeg_idct_8x16+0x276>
  }
}
 801436e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8014372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014376:	bf00      	nop
 8014378:	ffffecc2 	.word	0xffffecc2
 801437c:	ffffb6d6 	.word	0xffffb6d6
 8014380:	ffffc542 	.word	0xffffc542
 8014384:	ffffe77a 	.word	0xffffe77a
 8014388:	ffffdbfa 	.word	0xffffdbfa
 801438c:	ffffeaab 	.word	0xffffeaab
 8014390:	ffffd817 	.word	0xffffd817
 8014394:	ffffc4df 	.word	0xffffc4df
 8014398:	ffffc13b 	.word	0xffffc13b
 801439c:	fffff384 	.word	0xfffff384
 80143a0:	ffffe333 	.word	0xffffe333
 80143a4:	ffffadfd 	.word	0xffffadfd

080143a8 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80143a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ac:	b0ef      	sub	sp, #444	; 0x1bc
 80143ae:	f1a2 0e02 	sub.w	lr, r2, #2
 80143b2:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80143b4:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80143b8:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80143ba:	3380      	adds	r3, #128	; 0x80
 80143bc:	3804      	subs	r0, #4
 80143be:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80143c0:	f102 030c 	add.w	r3, r2, #12
 80143c4:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 80143c6:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80143c8:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80143cc:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80143d0:	f850 1f04 	ldr.w	r1, [r0, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80143d4:	f641 0b14 	movw	fp, #6164	; 0x1814
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80143d8:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80143dc:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80143de:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80143e0:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80143e4:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80143e6:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 80143ea:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80143ec:	fb01 f604 	mul.w	r6, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80143f0:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80143f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80143f8:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80143fc:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8014400:	1997      	adds	r7, r2, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014402:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014404:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8014406:	eb02 050c 	add.w	r5, r2, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801440a:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801440e:	1b36      	subs	r6, r6, r4
    tmp12 = z1 - z4;
 8014410:	eba2 0904 	sub.w	r9, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014414:	f9be 4020 	ldrsh.w	r4, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014418:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801441c:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014420:	49b7      	ldr	r1, [pc, #732]	; (8014700 <jpeg_idct_7x14+0x358>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014422:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014424:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014426:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014428:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 801442c:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801442e:	1916      	adds	r6, r2, r4
 8014430:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8014434:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 8014438:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801443c:	fb01 6604 	mla	r6, r1, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8014440:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 8014444:	434c      	muls	r4, r1
    tmp20 = tmp10 + tmp13;
 8014446:	eb07 010c 	add.w	r1, r7, ip
 801444a:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 801444c:	eba7 010c 	sub.w	r1, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014450:	fb08 4202 	mla	r2, r8, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014454:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp26 = tmp10 - tmp13;
 8014458:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 801445a:	19a9      	adds	r1, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801445c:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8014460:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8014462:	1ba9      	subs	r1, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014464:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8014468:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 801446a:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 801446e:	eba9 0202 	sub.w	r2, r9, r2
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8014472:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 8014476:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 8014478:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801447a:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801447c:	f9be 1070 	ldrsh.w	r1, [lr, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014480:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014482:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8014484:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014486:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 801448a:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801448c:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8014490:	eb04 0a07 	add.w	sl, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014494:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8014496:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 801449a:	eb04 0c06 	add.w	ip, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801449e:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80144a2:	f242 6152 	movw	r1, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80144a6:	fb0b fb0c 	mul.w	fp, fp, ip
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80144aa:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80144ae:	4995      	ldr	r1, [pc, #596]	; (8014704 <jpeg_idct_7x14+0x35c>)
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80144b0:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80144b4:	eb0a 0805 	add.w	r8, sl, r5
 80144b8:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 80144bc:	fb01 8804 	mla	r8, r1, r4, r8
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80144c0:	f201 211b 	addw	r1, r1, #539	; 0x21b
 80144c4:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 80144c8:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80144ca:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 80144ce:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80144d0:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80144d4:	4c8c      	ldr	r4, [pc, #560]	; (8014708 <jpeg_idct_7x14+0x360>)
    tmp16 += tmp15;
 80144d6:	4449      	add	r1, r9
 80144d8:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80144da:	19b9      	adds	r1, r7, r6
 80144dc:	fb0c f101 	mul.w	r1, ip, r1
 80144e0:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80144e4:	fb04 1c07 	mla	ip, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80144e8:	4c88      	ldr	r4, [pc, #544]	; (801470c <jpeg_idct_7x14+0x364>)
 80144ea:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80144ee:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80144f0:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80144f4:	4c86      	ldr	r4, [pc, #536]	; (8014710 <jpeg_idct_7x14+0x368>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80144f6:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80144f8:	1bf5      	subs	r5, r6, r7
 80144fa:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80144fe:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8014502:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8014506:	9c07      	ldr	r4, [sp, #28]
 8014508:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801450a:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801450c:	f241 5b99 	movw	fp, #5529	; 0x1599

    tmp13 = (z1 - z3) << PASS1_BITS;
 8014510:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014512:	9a01      	ldr	r2, [sp, #4]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8014514:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014518:	4442      	add	r2, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 801451a:	00b6      	lsls	r6, r6, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801451c:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801451e:	12d2      	asrs	r2, r2, #11
 8014520:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014524:	9a01      	ldr	r2, [sp, #4]
 8014526:	eba2 0208 	sub.w	r2, r2, r8
 801452a:	12d2      	asrs	r2, r2, #11
 801452c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014530:	9a03      	ldr	r2, [sp, #12]
 8014532:	4452      	add	r2, sl
 8014534:	12d2      	asrs	r2, r2, #11
 8014536:	619a      	str	r2, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014538:	9a03      	ldr	r2, [sp, #12]
 801453a:	eba2 0a0a 	sub.w	sl, r2, sl
 801453e:	ea4f 22ea 	mov.w	r2, sl, asr #11
 8014542:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014546:	9a05      	ldr	r2, [sp, #20]
 8014548:	440a      	add	r2, r1
 801454a:	12d2      	asrs	r2, r2, #11
 801454c:	635a      	str	r2, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801454e:	9a05      	ldr	r2, [sp, #20]
 8014550:	1a51      	subs	r1, r2, r1
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8014552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014554:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014558:	12c9      	asrs	r1, r1, #11
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 801455a:	651a      	str	r2, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 801455c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801455e:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8014562:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014566:	9a06      	ldr	r2, [sp, #24]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014568:	9908      	ldr	r1, [sp, #32]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801456a:	4462      	add	r2, ip
    wsptr[7*10] = (int) (tmp23 - tmp13);
 801456c:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014570:	12d2      	asrs	r2, r2, #11
 8014572:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014574:	9a06      	ldr	r2, [sp, #24]
 8014576:	eba2 0c0c 	sub.w	ip, r2, ip
 801457a:	ea4f 22ec 	mov.w	r2, ip, asr #11
 801457e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014582:	9a04      	ldr	r2, [sp, #16]
 8014584:	442a      	add	r2, r5
 8014586:	12d2      	asrs	r2, r2, #11
 8014588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801458c:	9a04      	ldr	r2, [sp, #16]
 801458e:	1b55      	subs	r5, r2, r5
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014590:	9a02      	ldr	r2, [sp, #8]
 8014592:	440a      	add	r2, r1
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014594:	12ed      	asrs	r5, r5, #11
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014596:	12d2      	asrs	r2, r2, #11
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014598:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801459c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80145a0:	9a02      	ldr	r2, [sp, #8]
 80145a2:	1a52      	subs	r2, r2, r1
 80145a4:	12d2      	asrs	r2, r2, #11
 80145a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80145aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80145ac:	4572      	cmp	r2, lr
 80145ae:	f47f af0b 	bne.w	80143c8 <jpeg_idct_7x14+0x20>
 80145b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 80145b4:	ac0c      	add	r4, sp, #48	; 0x30
 80145b6:	f1a3 0904 	sub.w	r9, r3, #4
 80145ba:	3334      	adds	r3, #52	; 0x34
 80145bc:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80145be:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 80145c2:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 80145c4:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    z3 = (INT32) wsptr[6];
 80145c6:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 80145ca:	189e      	adds	r6, r3, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80145cc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 80145d0:	9303      	str	r3, [sp, #12]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80145d2:	1b51      	subs	r1, r2, r5
 80145d4:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 80145d8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80145dc:	fb02 fe01 	mul.w	lr, r2, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80145e0:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80145e4:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp10 = z1 + z3;
 80145e8:	eb03 0805 	add.w	r8, r3, r5
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80145ec:	eba3 0c02 	sub.w	ip, r3, r2
 80145f0:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80145f4:	3710      	adds	r7, #16
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80145f6:	4947      	ldr	r1, [pc, #284]	; (8014714 <jpeg_idct_7x14+0x36c>)
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80145f8:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80145fc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8014600:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014604:	eb0e 000c 	add.w	r0, lr, ip
 8014608:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 801460c:	fb01 0002 	mla	r0, r1, r2, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014610:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014614:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014618:	fb02 f208 	mul.w	r2, r2, r8
 801461c:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014620:	fb01 2105 	mla	r1, r1, r5, r2
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014624:	4d3c      	ldr	r5, [pc, #240]	; (8014718 <jpeg_idct_7x14+0x370>)
 8014626:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 801462a:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801462e:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 8014630:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014634:	4463      	add	r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014636:	eb02 050a 	add.w	r5, r2, sl
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801463a:	9101      	str	r1, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801463c:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801463e:	f641 53ef 	movw	r3, #7663	; 0x1def
 8014642:	fb03 fb05 	mul.w	fp, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014646:	eba2 050a 	sub.w	r5, r2, sl
 801464a:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801464e:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014650:	44f2      	add	sl, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014652:	435d      	muls	r5, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014654:	4b31      	ldr	r3, [pc, #196]	; (801471c <jpeg_idct_7x14+0x374>)
    tmp10 = tmp11 - tmp12;
 8014656:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 801465a:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801465c:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014660:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014664:	9b00      	ldr	r3, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014666:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801466a:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 801466e:	4455      	add	r5, sl
    tmp10 += z2;
 8014670:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014672:	fb0b 220e 	mla	r2, fp, lr, r2
 8014676:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014678:	eb01 020c 	add.w	r2, r1, ip
 801467c:	9978      	ldr	r1, [sp, #480]	; 0x1e0
			    & RANGE_MASK];
 801467e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014682:	5c9a      	ldrb	r2, [r3, r2]
 8014684:	9b03      	ldr	r3, [sp, #12]
 8014686:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014688:	9b01      	ldr	r3, [sp, #4]
 801468a:	eba3 0c0c 	sub.w	ip, r3, ip
 801468e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014690:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014694:	f813 200c 	ldrb.w	r2, [r3, ip]
 8014698:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801469a:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801469c:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 801469e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80146a2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80146a6:	5c9a      	ldrb	r2, [r3, r2]
 80146a8:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80146aa:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80146ac:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80146ae:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80146b0:	eb03 020a 	add.w	r2, r3, sl
 80146b4:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80146b6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80146ba:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80146bc:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80146be:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80146c0:	eba3 0a0a 	sub.w	sl, r3, sl
 80146c4:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80146c6:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80146ca:	f813 300a 	ldrb.w	r3, [r3, sl]
 80146ce:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 80146d0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80146d4:	eba3 0808 	sub.w	r8, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80146d8:	f642 5341 	movw	r3, #11585	; 0x2d41
 80146dc:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80146e0:	9b00      	ldr	r3, [sp, #0]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80146e2:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 80146e6:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80146ea:	f813 3008 	ldrb.w	r3, [r3, r8]
 80146ee:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 80146f0:	9b04      	ldr	r3, [sp, #16]
 80146f2:	454b      	cmp	r3, r9
 80146f4:	f47f af63 	bne.w	80145be <jpeg_idct_7x14+0x216>
  }
}
 80146f8:	b06f      	add	sp, #444	; 0x1bc
 80146fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146fe:	bf00      	nop
 8014700:	ffffc8fc 	.word	0xffffc8fc
 8014704:	ffffdbf0 	.word	0xffffdbf0
 8014708:	fffff26e 	.word	0xfffff26e
 801470c:	ffffb409 	.word	0xffffb409
 8014710:	ffffc9e6 	.word	0xffffc9e6
 8014714:	ffffc515 	.word	0xffffc515
 8014718:	ffffb0f1 	.word	0xffffb0f1
 801471c:	ffffd3e1 	.word	0xffffd3e1

08014720 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014724:	b0d3      	sub	sp, #332	; 0x14c
 8014726:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8014728:	f1a2 0a02 	sub.w	sl, r2, #2
 801472c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801472e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014732:	3380      	adds	r3, #128	; 0x80
 8014734:	9301      	str	r3, [sp, #4]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014736:	1f0b      	subs	r3, r1, #4
 8014738:	9300      	str	r3, [sp, #0]
 801473a:	f102 030a 	add.w	r3, r2, #10
 801473e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8014740:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014742:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014744:	f641 398d 	movw	r9, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014748:	f93a 7f02 	ldrsh.w	r7, [sl, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801474c:	f640 0b5b 	movw	fp, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014750:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014754:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014756:	f9ba 0040 	ldrsh.w	r0, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801475a:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801475c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014760:	f9ba 5020 	ldrsh.w	r5, [sl, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014764:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8014766:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801476a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801476c:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801476e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014770:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8014772:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014776:	f9ba c060 	ldrsh.w	ip, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801477a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801477c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014780:	f9ba e030 	ldrsh.w	lr, [sl, #48]	; 0x30
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8014784:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014788:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 801478a:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 801478c:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801478e:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 8014792:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8014796:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8014798:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 801479c:	eb07 010c 	add.w	r1, r7, ip
 80147a0:	9102      	str	r1, [sp, #8]
    tmp24 = z3 - tmp12;
 80147a2:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 80147a6:	eb00 0c04 	add.w	ip, r0, r4
    tmp12 = z4 - z1 - z2;
 80147aa:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 80147ae:	9103      	str	r1, [sp, #12]
    tmp12 = z4 - z1 - z2;
 80147b0:	1b04      	subs	r4, r0, r4
    tmp25 = tmp10 - tmp12;
 80147b2:	eba6 010c 	sub.w	r1, r6, ip
    tmp20 = tmp10 + tmp12;
 80147b6:	eb06 070c 	add.w	r7, r6, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80147ba:	f9ba c010 	ldrsh.w	ip, [sl, #16]
    tmp25 = tmp10 - tmp12;
 80147be:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 80147c0:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 80147c2:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80147c4:	f9ba 5050 	ldrsh.w	r5, [sl, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80147c8:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 80147cc:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80147ce:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 80147d0:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80147d2:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80147d6:	6a12      	ldr	r2, [r2, #32]
 80147d8:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80147dc:	9a00      	ldr	r2, [sp, #0]
 80147de:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80147e0:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80147e4:	9a00      	ldr	r2, [sp, #0]
 80147e6:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80147ea:	fb01 f40e 	mul.w	r4, r1, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80147ee:	4977      	ldr	r1, [pc, #476]	; (80149cc <jpeg_idct_6x12+0x2ac>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80147f0:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80147f2:	9a00      	ldr	r2, [sp, #0]
 80147f4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 80147f8:	eb0c 0605 	add.w	r6, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80147fc:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80147fe:	fb01 f00e 	mul.w	r0, r1, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014802:	4973      	ldr	r1, [pc, #460]	; (80149d0 <jpeg_idct_6x12+0x2b0>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014804:	eb02 0806 	add.w	r8, r2, r6
 8014808:	fb09 f808 	mul.w	r8, r9, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801480c:	fb0b 8b06 	mla	fp, fp, r6, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8014810:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8014814:	eb04 090b 	add.w	r9, r4, fp
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014818:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801481c:	fb06 990c 	mla	r9, r6, ip, r9
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014820:	18ae      	adds	r6, r5, r2
 8014822:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014824:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014826:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014828:	496a      	ldr	r1, [pc, #424]	; (80149d4 <jpeg_idct_6x12+0x2b4>)
 801482a:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801482e:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8014830:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014834:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014838:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801483a:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 801483e:	fb0b 4402 	mla	r4, fp, r2, r4
 8014842:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014844:	4964      	ldr	r1, [pc, #400]	; (80149d8 <jpeg_idct_6x12+0x2b8>)
 8014846:	fb01 000c 	mla	r0, r1, ip, r0
 801484a:	4964      	ldr	r1, [pc, #400]	; (80149dc <jpeg_idct_6x12+0x2bc>)
 801484c:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8014850:	ebac 0202 	sub.w	r2, ip, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014854:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014858:	f641 0c7e 	movw	ip, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801485c:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801485e:	eb02 0805 	add.w	r8, r2, r5
 8014862:	fb0e f808 	mul.w	r8, lr, r8
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014866:	fb01 8e05 	mla	lr, r1, r5, r8

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801486a:	eb07 0509 	add.w	r5, r7, r9
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801486e:	eba7 0709 	sub.w	r7, r7, r9
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014872:	fb0c 8202 	mla	r2, ip, r2, r8
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014876:	12ed      	asrs	r5, r5, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014878:	12ff      	asrs	r7, r7, #11
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801487a:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801487e:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014882:	9902      	ldr	r1, [sp, #8]
 8014884:	188d      	adds	r5, r1, r2
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014886:	1a8a      	subs	r2, r1, r2
 8014888:	12d2      	asrs	r2, r2, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801488a:	12ed      	asrs	r5, r5, #11
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801488c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014890:	9a05      	ldr	r2, [sp, #20]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014892:	615d      	str	r5, [r3, #20]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014894:	4432      	add	r2, r6
 8014896:	12d2      	asrs	r2, r2, #11
 8014898:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801489a:	9a05      	ldr	r2, [sp, #20]
 801489c:	1b96      	subs	r6, r2, r6
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801489e:	9a06      	ldr	r2, [sp, #24]
 80148a0:	4422      	add	r2, r4
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80148a2:	12f6      	asrs	r6, r6, #11
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80148a4:	12d2      	asrs	r2, r2, #11
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80148a6:	f8c3 60d4 	str.w	r6, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80148aa:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80148ac:	9a06      	ldr	r2, [sp, #24]
 80148ae:	1b14      	subs	r4, r2, r4
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80148b0:	9a03      	ldr	r2, [sp, #12]
 80148b2:	4472      	add	r2, lr
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80148b4:	12e4      	asrs	r4, r4, #11
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80148b6:	12d2      	asrs	r2, r2, #11
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80148b8:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80148bc:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80148be:	9a03      	ldr	r2, [sp, #12]
 80148c0:	eba2 050e 	sub.w	r5, r2, lr
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80148c4:	9a04      	ldr	r2, [sp, #16]
 80148c6:	4402      	add	r2, r0
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80148c8:	12ed      	asrs	r5, r5, #11
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80148ca:	12d2      	asrs	r2, r2, #11
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80148cc:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80148d0:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80148d2:	9a04      	ldr	r2, [sp, #16]
 80148d4:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80148d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80148d8:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80148da:	4552      	cmp	r2, sl
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80148dc:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80148e0:	f47f af2f 	bne.w	8014742 <jpeg_idct_6x12+0x22>
 80148e4:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 80148e6:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80148e8:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 80148ec:	f1a3 0c04 	sub.w	ip, r3, #4
 80148f0:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 80148f4:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80148f8:	f640 37b6 	movw	r7, #2998	; 0xbb6
    outptr = output_buf[ctr] + output_col;
 80148fc:	9b5c      	ldr	r3, [sp, #368]	; 0x170
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 80148fe:	3118      	adds	r1, #24
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014900:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 12; ctr++) {
 8014904:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 8014906:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801490a:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801490e:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8014912:	f851 0c10 	ldr.w	r0, [r1, #-16]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014916:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801491a:	f851 ec04 	ldr.w	lr, [r1, #-4]
    tmp11 = tmp10 + tmp20;
 801491e:	eb02 3443 	add.w	r4, r2, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 8014922:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 8014926:	eba3 0302 	sub.w	r3, r3, r2
 801492a:	9300      	str	r3, [sp, #0]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801492c:	f242 7331 	movw	r3, #10033	; 0x2731
 8014930:	fb03 f200 	mul.w	r2, r3, r0
    z1 = (INT32) wsptr[1];
 8014934:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014938:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp20 = tmp11 + tmp10;
 801493c:	eb04 0502 	add.w	r5, r4, r2
    tmp22 = tmp11 - tmp10;
 8014940:	eba4 0202 	sub.w	r2, r4, r2
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014944:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014948:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801494c:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8014950:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8014954:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8014956:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801495a:	9b01      	ldr	r3, [sp, #4]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801495c:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8014960:	eba0 0e0e 	sub.w	lr, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014964:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014968:	eb05 0007 	add.w	r0, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801496c:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8014970:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8014974:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014978:	5c18      	ldrb	r0, [r3, r0]
 801497a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801497c:	f809 0003 	strb.w	r0, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014980:	9b01      	ldr	r3, [sp, #4]
 8014982:	5d58      	ldrb	r0, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014984:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014986:	7170      	strb	r0, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014988:	eb03 304e 	add.w	r0, r3, lr, lsl #13
 801498c:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801498e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014992:	5c18      	ldrb	r0, [r3, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014994:	9b00      	ldr	r3, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014996:	7070      	strb	r0, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014998:	eba3 3e4e 	sub.w	lr, r3, lr, lsl #13
 801499c:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801499e:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 80149a0:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80149a4:	f813 300e 	ldrb.w	r3, [r3, lr]
 80149a8:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80149aa:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80149ae:	eba2 0404 	sub.w	r4, r2, r4
			    & RANGE_MASK];
 80149b2:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80149b6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80149ba:	5cc3      	ldrb	r3, [r0, r3]
 80149bc:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80149be:	5d03      	ldrb	r3, [r0, r4]
 80149c0:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 80149c2:	d197      	bne.n	80148f4 <jpeg_idct_6x12+0x1d4>
  }
}
 80149c4:	b053      	add	sp, #332	; 0x14c
 80149c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149ca:	bf00      	nop
 80149cc:	ffffeeaf 	.word	0xffffeeaf
 80149d0:	ffffde8b 	.word	0xffffde8b
 80149d4:	ffffd0b0 	.word	0xffffd0b0
 80149d8:	ffffea5c 	.word	0xffffea5c
 80149dc:	ffffc08c 	.word	0xffffc08c

080149e0 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80149e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e4:	b0b9      	sub	sp, #228	; 0xe4
 80149e6:	1e94      	subs	r4, r2, #2
 80149e8:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80149ea:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80149ee:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80149f0:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80149f2:	3380      	adds	r3, #128	; 0x80
 80149f4:	3804      	subs	r0, #4
 80149f6:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80149f8:	f102 0308 	add.w	r3, r2, #8
 80149fc:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80149fe:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014a02:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a04:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014a08:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a0c:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014a0e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8014a12:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014a14:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8014a18:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014a1a:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014a1e:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014a22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014a26:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014a28:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 8014a2c:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 8014a2e:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014a32:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014a34:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014a38:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a3c:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014a40:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014a44:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014a46:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8014a4a:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014a4c:	19f3      	adds	r3, r6, r7
 8014a4e:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8014a50:	f241 0271 	movw	r2, #4209	; 0x1071
 8014a54:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8014a58:	4a6d      	ldr	r2, [pc, #436]	; (8014c10 <jpeg_idct_5x10+0x230>)
 8014a5a:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 8014a5e:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 8014a60:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014a64:	f9b4 5030 	ldrsh.w	r5, [r4, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 8014a68:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 8014a6c:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 8014a70:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8014a72:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a74:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8014a78:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014a7a:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a7e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014a80:	6e03      	ldr	r3, [r0, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014a82:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014a86:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014a88:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 8014a8c:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014a90:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 8014a94:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014a96:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 8014a9a:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8014a9e:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014aa0:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014aa4:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014aa8:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014aac:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014aae:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014ab2:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 8014ab6:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014aba:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014abc:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014ac0:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014ac2:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014ac6:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014aca:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014acc:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014ace:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014ad2:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014ad6:	f642 0353 	movw	r3, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014ada:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014ade:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014ae2:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014ae4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014ae8:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014aea:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014aee:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014af2:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014af6:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014afa:	1b5b      	subs	r3, r3, r5
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014afc:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014afe:	444d      	add	r5, r9
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014b00:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014b04:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8014b08:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014b0c:	18fa      	adds	r2, r7, r3
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014b0e:	1aff      	subs	r7, r7, r3
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014b10:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014b12:	12d2      	asrs	r2, r2, #11
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014b14:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014b18:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014b1a:	610a      	str	r2, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014b1c:	624b      	str	r3, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8014b1e:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014b20:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8014b24:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8014b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8014b2c:	9b02      	ldr	r3, [sp, #8]
 8014b2e:	442b      	add	r3, r5
 8014b30:	12db      	asrs	r3, r3, #11
 8014b32:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014b34:	9b02      	ldr	r3, [sp, #8]
 8014b36:	1b5d      	subs	r5, r3, r5
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014b38:	9b01      	ldr	r3, [sp, #4]
 8014b3a:	4453      	add	r3, sl
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014b3c:	12ed      	asrs	r5, r5, #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014b3e:	12db      	asrs	r3, r3, #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014b40:	674d      	str	r5, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014b42:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014b44:	9b01      	ldr	r3, [sp, #4]
 8014b46:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014b4a:	9b05      	ldr	r3, [sp, #20]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014b4c:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014b50:	42a3      	cmp	r3, r4
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014b52:	660e      	str	r6, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014b54:	f47f af53 	bne.w	80149fe <jpeg_idct_5x10+0x1e>
 8014b58:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 8014b5a:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014b5c:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014b60:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8014b64:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014b68:	f641 289a 	movw	r8, #6810	; 0x1a9a
 8014b6c:	3324      	adds	r3, #36	; 0x24
 8014b6e:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8014b70:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8014b74:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 8014b76:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 8014b78:	f851 0c04 	ldr.w	r0, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8014b7c:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8014b80:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014b84:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014b88:	181a      	adds	r2, r3, r0
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014b8a:	1a1b      	subs	r3, r3, r0
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014b8c:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 8014b8e:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014b92:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 8014b96:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014b9a:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 8014b9e:	eb03 3047 	add.w	r0, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014ba2:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014ba4:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 8014ba8:	1814      	adds	r4, r2, r0
    tmp11 = z3 - z1;
 8014baa:	1a82      	subs	r2, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014bac:	eb05 000b 	add.w	r0, r5, fp
 8014bb0:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014bb4:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8014bb8:	4b15      	ldr	r3, [pc, #84]	; (8014c10 <jpeg_idct_5x10+0x230>)
 8014bba:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8014bbe:	eb04 0b05 	add.w	fp, r4, r5
 8014bc2:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014bc4:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 8014bc6:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8014bca:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8014bce:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8014bd2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8014bd4:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014bd8:	9b00      	ldr	r3, [sp, #0]
 8014bda:	5d1c      	ldrb	r4, [r3, r4]
 8014bdc:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8014bde:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014be0:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 8014be2:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8014be6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8014bea:	5d1c      	ldrb	r4, [r3, r4]
 8014bec:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014bee:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 8014bf0:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014bf2:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8014bf4:	009b      	lsls	r3, r3, #2
 8014bf6:	ebc3 3747 	rsb	r7, r3, r7, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014bfa:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014bfc:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014c00:	5ddb      	ldrb	r3, [r3, r7]
 8014c02:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8014c04:	9b02      	ldr	r3, [sp, #8]
 8014c06:	4563      	cmp	r3, ip
 8014c08:	d1b2      	bne.n	8014b70 <jpeg_idct_5x10+0x190>
  }
}
 8014c0a:	b039      	add	sp, #228	; 0xe4
 8014c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c10:	ffffba5c 	.word	0xffffba5c

08014c14 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c18:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014c1a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8014c1c:	3a02      	subs	r2, #2
{
 8014c1e:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8014c20:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014c22:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014c26:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  for (ctr = 4; ctr > 0; ctr--) {
 8014c2a:	f105 0310 	add.w	r3, r5, #16
 8014c2e:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014c30:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8014c34:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014c36:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8014c3a:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 8014c3e:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014c42:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 8014c46:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8014c4a:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c52:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8014c56:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014c58:	ea4a 030b 	orr.w	r3, sl, fp
 8014c5c:	ea4e 0303 	orr.w	r3, lr, r3
 8014c60:	433b      	orrs	r3, r7
 8014c62:	ea48 0303 	orr.w	r3, r8, r3
 8014c66:	4333      	orrs	r3, r6
 8014c68:	ea59 0303 	orrs.w	r3, r9, r3
 8014c6c:	d154      	bne.n	8014d18 <jpeg_idct_4x8+0x104>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014c6e:	00a4      	lsls	r4, r4, #2
      wsptr[4*0] = dcval;
 8014c70:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[4*1] = dcval;
 8014c74:	60cc      	str	r4, [r1, #12]
      wsptr[4*2] = dcval;
 8014c76:	61cc      	str	r4, [r1, #28]
      wsptr[4*3] = dcval;
 8014c78:	62cc      	str	r4, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 8014c7a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 8014c7c:	64cc      	str	r4, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 8014c7e:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8014c80:	66cc      	str	r4, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8014c82:	9b05      	ldr	r3, [sp, #20]
 8014c84:	42ab      	cmp	r3, r5
 8014c86:	d1d3      	bne.n	8014c30 <jpeg_idct_4x8+0x1c>
 8014c88:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 8014c8a:	ac06      	add	r4, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014c8c:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014c90:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8014c94:	1f1d      	subs	r5, r3, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014c96:	f8df b184 	ldr.w	fp, [pc, #388]	; 8014e1c <jpeg_idct_4x8+0x208>
 8014c9a:	331c      	adds	r3, #28
 8014c9c:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 8014c9e:	f855 7f04 	ldr.w	r7, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8014ca2:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8014ca4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014ca6:	f854 0c10 	ldr.w	r0, [r4, #-16]
    outptr = output_buf[ctr] + output_col;
 8014caa:	18be      	adds	r6, r7, r2
    z3 = (INT32) wsptr[3];
 8014cac:	f854 ac04 	ldr.w	sl, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8014cb0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014cb4:	3010      	adds	r0, #16
    z2 = (INT32) wsptr[1];
 8014cb6:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014cba:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014cbe:	1a80      	subs	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014cc0:	eb01 020a 	add.w	r2, r1, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014cc4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014cc6:	fb08 f202 	mul.w	r2, r8, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014cca:	fb0e 2101 	mla	r1, lr, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014cce:	fb0b 220a 	mla	r2, fp, sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014cd2:	eb01 3a49 	add.w	sl, r1, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014cd6:	ebc1 3149 	rsb	r1, r1, r9, lsl #13
			    & RANGE_MASK];
 8014cda:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8014cde:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014ce2:	f81c a00a 	ldrb.w	sl, [ip, sl]
 8014ce6:	f807 a003 	strb.w	sl, [r7, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014cea:	f81c 1001 	ldrb.w	r1, [ip, r1]
  for (ctr = 0; ctr < 8; ctr++) {
 8014cee:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014cf0:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014cf2:	eb02 3140 	add.w	r1, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014cf6:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
  for (ctr = 0; ctr < 8; ctr++) {
 8014cfa:	42ab      	cmp	r3, r5
			    & RANGE_MASK];
 8014cfc:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8014d00:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014d04:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8014d08:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014d0a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014d0e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 8014d10:	d1c5      	bne.n	8014c9e <jpeg_idct_4x8+0x8a>
  }
}
 8014d12:	b027      	add	sp, #156	; 0x9c
 8014d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014d18:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8014d1a:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014d1e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8014d22:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014d24:	f241 1651 	movw	r6, #4433	; 0x1151
 8014d28:	eb0b 0300 	add.w	r3, fp, r0
 8014d2c:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014d2e:	f641 067e 	movw	r6, #6270	; 0x187e
 8014d32:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014d36:	4e39      	ldr	r6, [pc, #228]	; (8014e1c <jpeg_idct_4x8+0x208>)
 8014d38:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8014d3c:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014d3e:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014d44:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 8014d46:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8014d4a:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp10 = tmp0 + tmp2;
 8014d4e:	eb0b 0004 	add.w	r0, fp, r4
    tmp11 = tmp1 + tmp3;
 8014d52:	18f7      	adds	r7, r6, r3
    tmp12 = tmp1 - tmp3;
 8014d54:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 8014d56:	9001      	str	r0, [sp, #4]
    tmp13 = tmp0 - tmp2;
 8014d58:	eba4 000b 	sub.w	r0, r4, fp
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014d5c:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 8014d5e:	9002      	str	r0, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014d60:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014d64:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8014d68:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014d6a:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014d6e:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014d72:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8014d76:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014d7a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8014d7c:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8014d80:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8014d84:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014d88:	1930      	adds	r0, r6, r4
 8014d8a:	4358      	muls	r0, r3
    z2 += z1;
 8014d8c:	4b24      	ldr	r3, [pc, #144]	; (8014e20 <jpeg_idct_4x8+0x20c>)
 8014d8e:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8014d92:	4b24      	ldr	r3, [pc, #144]	; (8014e24 <jpeg_idct_4x8+0x210>)
 8014d94:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014d98:	eb09 040a 	add.w	r4, r9, sl
 8014d9c:	4b22      	ldr	r3, [pc, #136]	; (8014e28 <jpeg_idct_4x8+0x214>)
 8014d9e:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8014da0:	f640 138e 	movw	r3, #2446	; 0x98e
 8014da4:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8014da8:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8014daa:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8014dae:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014db2:	4b1e      	ldr	r3, [pc, #120]	; (8014e2c <jpeg_idct_4x8+0x218>)
    tmp3 += z1 + z3;
 8014db4:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014db8:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8014dbc:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014dc0:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014dc4:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8014dc6:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8014dc8:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8014dca:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8014dce:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8014dd2:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014dd6:	191e      	adds	r6, r3, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014dd8:	1b1c      	subs	r4, r3, r4
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014dda:	9b03      	ldr	r3, [sp, #12]
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014ddc:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014dde:	12e4      	asrs	r4, r4, #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014de0:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014de4:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014de6:	eb07 040a 	add.w	r4, r7, sl
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014dea:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014dee:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014df0:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014df4:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014df6:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014df8:	1a18      	subs	r0, r3, r0
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014dfa:	9b02      	ldr	r3, [sp, #8]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014dfc:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014dfe:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014e00:	444b      	add	r3, r9
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014e02:	12c0      	asrs	r0, r0, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014e04:	61cc      	str	r4, [r1, #28]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014e06:	12db      	asrs	r3, r3, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014e08:	64c8      	str	r0, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014e0a:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8014e0c:	9b02      	ldr	r3, [sp, #8]
 8014e0e:	eba3 0909 	sub.w	r9, r3, r9
 8014e12:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8014e16:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 8014e18:	e733      	b.n	8014c82 <jpeg_idct_4x8+0x6e>
 8014e1a:	bf00      	nop
 8014e1c:	ffffc4df 	.word	0xffffc4df
 8014e20:	ffffc13b 	.word	0xffffc13b
 8014e24:	fffff384 	.word	0xfffff384
 8014e28:	ffffe333 	.word	0xffffe333
 8014e2c:	ffffadfd 	.word	0xffffadfd

08014e30 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014e34:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8014e38:	b095      	sub	sp, #84	; 0x54
 8014e3a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014e3c:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014e3e:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014e42:	3204      	adds	r2, #4
 8014e44:	3c04      	subs	r4, #4
  wsptr = workspace;
 8014e46:	ae02      	add	r6, sp, #8
{
 8014e48:	9300      	str	r3, [sp, #0]
 8014e4a:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014e4c:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014e50:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014e54:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014e58:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014e5a:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014e5e:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014e60:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014e64:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014e68:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 8014e6a:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014e6c:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014e70:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014e74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014e78:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014e7c:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 8014e7e:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8014e80:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014e84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014e86:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014e88:	f242 7731 	movw	r7, #10033	; 0x2731
 8014e8c:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014e8e:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
    tmp10 = tmp1 + tmp0;
 8014e92:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8014e96:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014e98:	6a22      	ldr	r2, [r4, #32]
 8014e9a:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014e9c:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8014e9e:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014ea2:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8014ea6:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014eaa:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014eae:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014eb2:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014eb6:	435f      	muls	r7, r3
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014eb8:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014eba:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014ebe:	42ab      	cmp	r3, r5
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014ec0:	eb07 3b4b 	add.w	fp, r7, fp, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014ec4:	eba2 0709 	sub.w	r7, r2, r9

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014ec8:	eb0c 020a 	add.w	r2, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014ecc:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014ed0:	eba7 0708 	sub.w	r7, r7, r8
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014ed4:	ea4f 22e2 	mov.w	r2, r2, asr #11
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014ed8:	ea4f 0887 	mov.w	r8, r7, lsl #2
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014edc:	f846 2c04 	str.w	r2, [r6, #-4]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014ee0:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8014ee4:	63b2      	str	r2, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014ee6:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014eea:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014eee:	60b2      	str	r2, [r6, #8]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014ef0:	eb00 020b 	add.w	r2, r0, fp
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014ef4:	eba0 0b0b 	sub.w	fp, r0, fp
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014ef8:	62f1      	str	r1, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014efa:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014efe:	ea4f 20eb 	mov.w	r0, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014f02:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014f04:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014f06:	d1a1      	bne.n	8014e4c <jpeg_idct_3x6+0x1c>
 8014f08:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 8014f0a:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014f0c:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014f10:	f242 7b31 	movw	fp, #10033	; 0x2731
 8014f14:	1f1d      	subs	r5, r3, #4
 8014f16:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8014f18:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8014f1c:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 8014f1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014f20:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 8014f24:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8014f26:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014f2a:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014f2e:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014f32:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014f36:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014f3a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014f3c:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8014f40:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8014f44:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014f48:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014f4c:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8014f50:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8014f54:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8014f58:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8014f5c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014f60:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8014f64:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014f68:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8014f6c:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8014f6e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014f72:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8014f74:	d1d0      	bne.n	8014f18 <jpeg_idct_3x6+0xe8>
  }
}
 8014f76:	b015      	add	sp, #84	; 0x54
 8014f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f7c <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f80:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 8014f84:	b08b      	sub	sp, #44	; 0x2c
 8014f86:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014f88:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f8a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014f8e:	ad02      	add	r5, sp, #8
 8014f90:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014f92:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014f96:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f9a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f9c:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8014fa0:	46b4      	mov	ip, r6
 8014fa2:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014fa6:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014fa8:	4f29      	ldr	r7, [pc, #164]	; (8015050 <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014faa:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014fac:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014fb0:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 8014fb4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014fb6:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014fba:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014fbe:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014fc2:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014fc6:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014fca:	6a21      	ldr	r1, [r4, #32]
 8014fcc:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014fd0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8014fd2:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014fd6:	eb0a 010b 	add.w	r1, sl, fp
 8014fda:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014fde:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014fe2:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 8014fe6:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8014fea:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 8014fee:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 8014ff2:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 8014ff6:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8014ffa:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 8014ffe:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 8015002:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8015004:	d1ca      	bne.n	8014f9c <jpeg_idct_2x4+0x20>
 8015006:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8015008:	a902      	add	r1, sp, #8
 801500a:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801500c:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8015010:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 8015012:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 8015014:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8015018:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 801501a:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 801501e:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015022:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8015024:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015028:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 801502c:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8015030:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 8015034:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015038:	5d3c      	ldrb	r4, [r7, r4]
 801503a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801503c:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 801503e:	9c01      	ldr	r4, [sp, #4]
 8015040:	5ca2      	ldrb	r2, [r4, r2]
 8015042:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8015046:	d1e1      	bne.n	801500c <jpeg_idct_2x4+0x90>
  }
}
 8015048:	b00b      	add	sp, #44	; 0x2c
 801504a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801504e:	bf00      	nop
 8015050:	ffffc4df 	.word	0xffffc4df

08015054 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015054:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8015056:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015058:	f9b2 1000 	ldrsh.w	r1, [r2]
 801505c:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801505e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8015062:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015064:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015066:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801506a:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 801506c:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801506e:	3080      	adds	r0, #128	; 0x80
{
 8015070:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8015072:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8015074:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8015076:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 801507a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 801507e:	5d06      	ldrb	r6, [r0, r4]
 8015080:	681c      	ldr	r4, [r3, #0]
 8015082:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8015084:	5c42      	ldrb	r2, [r0, r1]
 8015086:	685b      	ldr	r3, [r3, #4]
 8015088:	555a      	strb	r2, [r3, r5]
}
 801508a:	bd70      	pop	{r4, r5, r6, pc}

0801508c <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 801508c:	6803      	ldr	r3, [r0, #0]
 801508e:	2238      	movs	r2, #56	; 0x38
 8015090:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	4718      	bx	r3

08015098 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8015098:	688b      	ldr	r3, [r1, #8]
{
 801509a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 801509e:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 80150a2:	698b      	ldr	r3, [r1, #24]
{
 80150a4:	b085      	sub	sp, #20
 80150a6:	4681      	mov	r9, r0
 80150a8:	460c      	mov	r4, r1
 80150aa:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 80150ac:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80150b0:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80150b2:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80150b6:	6922      	ldr	r2, [r4, #16]
 80150b8:	42b2      	cmp	r2, r6
 80150ba:	dc02      	bgt.n	80150c2 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 80150bc:	b005      	add	sp, #20
 80150be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80150c2:	1b92      	subs	r2, r2, r6
 80150c4:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 80150c6:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80150c8:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80150ca:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 80150cc:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80150d0:	bfa8      	it	ge
 80150d2:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80150d4:	69e1      	ldr	r1, [r4, #28]
 80150d6:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80150d8:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80150da:	428a      	cmp	r2, r1
 80150dc:	bfa8      	it	ge
 80150de:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80150e0:	42aa      	cmp	r2, r5
 80150e2:	bfa8      	it	ge
 80150e4:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 80150e6:	2a00      	cmp	r2, #0
 80150e8:	dde8      	ble.n	80150bc <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 80150ea:	fb02 f308 	mul.w	r3, r2, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80150ee:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 80150f0:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80150f2:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 80150f6:	f1ba 0f00 	cmp.w	sl, #0
 80150fa:	d00a      	beq.n	8015112 <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80150fc:	9300      	str	r3, [sp, #0]
 80150fe:	4659      	mov	r1, fp
 8015100:	463b      	mov	r3, r7
 8015102:	4648      	mov	r0, r9
 8015104:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015106:	47a8      	blx	r5
    file_offset += byte_count;
 8015108:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801510a:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 801510c:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801510e:	4416      	add	r6, r2
 8015110:	e7d1      	b.n	80150b6 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015112:	9b03      	ldr	r3, [sp, #12]
 8015114:	4659      	mov	r1, fp
 8015116:	4648      	mov	r0, r9
 8015118:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801511a:	9300      	str	r3, [sp, #0]
 801511c:	463b      	mov	r3, r7
 801511e:	e7f2      	b.n	8015106 <do_barray_io+0x6e>

08015120 <alloc_small>:
{
 8015120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8015124:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8015128:	4606      	mov	r6, r0
 801512a:	460d      	mov	r5, r1
 801512c:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 801512e:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015130:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8015132:	d902      	bls.n	801513a <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8015134:	2101      	movs	r1, #1
 8015136:	f7ff ffa9 	bl	801508c <out_of_memory>
  if (odd_bytes > 0)
 801513a:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801513e:	bf1c      	itt	ne
 8015140:	3408      	addne	r4, #8
 8015142:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8015144:	2d01      	cmp	r5, #1
 8015146:	d906      	bls.n	8015156 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015148:	6833      	ldr	r3, [r6, #0]
 801514a:	220f      	movs	r2, #15
 801514c:	4630      	mov	r0, r6
 801514e:	e9c3 2505 	strd	r2, r5, [r3, #20]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 8015156:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 801515a:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 801515e:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 8015162:	b9e8      	cbnz	r0, 80151a0 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8015164:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8015168:	f1ba 0f00 	cmp.w	sl, #0
 801516c:	d11e      	bne.n	80151ac <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 801516e:	4b1d      	ldr	r3, [pc, #116]	; (80151e4 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8015170:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8015174:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 8015178:	429d      	cmp	r5, r3
 801517a:	bf28      	it	cs
 801517c:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 801517e:	eb05 0b09 	add.w	fp, r5, r9
 8015182:	4630      	mov	r0, r6
 8015184:	4659      	mov	r1, fp
 8015186:	f000 fbcf 	bl	8015928 <jpeg_get_small>
      if (hdr_ptr != NULL)
 801518a:	b988      	cbnz	r0, 80151b0 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 801518c:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 801518e:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8015192:	d803      	bhi.n	801519c <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8015194:	2102      	movs	r1, #2
 8015196:	4630      	mov	r0, r6
 8015198:	f7ff ff78 	bl	801508c <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 801519c:	465d      	mov	r5, fp
 801519e:	e7ee      	b.n	801517e <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 80151a0:	6883      	ldr	r3, [r0, #8]
 80151a2:	42a3      	cmp	r3, r4
 80151a4:	d211      	bcs.n	80151ca <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 80151a6:	4682      	mov	sl, r0
 80151a8:	6800      	ldr	r0, [r0, #0]
 80151aa:	e7da      	b.n	8015162 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 80151ac:	4b0e      	ldr	r3, [pc, #56]	; (80151e8 <alloc_small+0xc8>)
 80151ae:	e7df      	b.n	8015170 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 80151b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 80151b2:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 80151b4:	445b      	add	r3, fp
 80151b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 80151b8:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 80151ba:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 80151bc:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 80151c0:	f1ba 0f00 	cmp.w	sl, #0
 80151c4:	d10b      	bne.n	80151de <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 80151c6:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80151ca:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 80151cc:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80151ce:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 80151d0:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 80151d2:	6882      	ldr	r2, [r0, #8]
 80151d4:	1b12      	subs	r2, r2, r4
 80151d6:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80151d8:	4418      	add	r0, r3
}
 80151da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 80151de:	f8ca 0000 	str.w	r0, [sl]
 80151e2:	e7f2      	b.n	80151ca <alloc_small+0xaa>
 80151e4:	0802f8f4 	.word	0x0802f8f4
 80151e8:	0802f8ec 	.word	0x0802f8ec

080151ec <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 80151ec:	2901      	cmp	r1, #1
{
 80151ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151f2:	4604      	mov	r4, r0
 80151f4:	460d      	mov	r5, r1
 80151f6:	4616      	mov	r6, r2
 80151f8:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80151fa:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 80151fe:	d005      	beq.n	801520c <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015200:	6803      	ldr	r3, [r0, #0]
 8015202:	220f      	movs	r2, #15
 8015204:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 801520c:	223c      	movs	r2, #60	; 0x3c
 801520e:	4629      	mov	r1, r5
 8015210:	4620      	mov	r0, r4
 8015212:	f7ff ff85 	bl	8015120 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015216:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8015218:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 801521a:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 801521c:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 801521e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 8015222:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8015224:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 8015226:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 801522a:	9a07      	ldr	r2, [sp, #28]
 801522c:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 801522e:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 8015232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015236 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 8015236:	2901      	cmp	r1, #1
{
 8015238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801523c:	4604      	mov	r4, r0
 801523e:	460d      	mov	r5, r1
 8015240:	4616      	mov	r6, r2
 8015242:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015244:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8015248:	d005      	beq.n	8015256 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801524a:	6803      	ldr	r3, [r0, #0]
 801524c:	220f      	movs	r2, #15
 801524e:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8015256:	223c      	movs	r2, #60	; 0x3c
 8015258:	4629      	mov	r1, r5
 801525a:	4620      	mov	r0, r4
 801525c:	f7ff ff60 	bl	8015120 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015260:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8015262:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015264:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8015266:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8015268:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 801526c:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 801526e:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 8015270:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8015274:	9a07      	ldr	r2, [sp, #28]
 8015276:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8015278:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 801527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015280 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8015280:	2901      	cmp	r1, #1
{
 8015282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015286:	4606      	mov	r6, r0
 8015288:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801528a:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801528c:	d910      	bls.n	80152b0 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801528e:	6803      	ldr	r3, [r0, #0]
 8015290:	220f      	movs	r2, #15
 8015292:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 801529a:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 801529e:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 80152a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 80152a2:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 80152a4:	bb0b      	cbnz	r3, 80152ea <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 80152a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 80152a8:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 80152aa:	bb69      	cbnz	r1, 8015308 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 80152ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 80152b0:	d1f3      	bne.n	801529a <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80152b2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80152b4:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80152b6:	b924      	cbnz	r4, 80152c2 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80152b8:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 80152ba:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80152bc:	b95f      	cbnz	r7, 80152d6 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 80152be:	64af      	str	r7, [r5, #72]	; 0x48
 80152c0:	e7eb      	b.n	801529a <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 80152c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80152c4:	b12b      	cbz	r3, 80152d2 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 80152c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80152c8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80152cc:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80152ce:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 80152d0:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80152d2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80152d4:	e7ef      	b.n	80152b6 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 80152d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152d8:	b12b      	cbz	r3, 80152e6 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 80152da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152dc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80152e0:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80152e2:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 80152e4:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80152e6:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 80152e8:	e7e8      	b.n	80152bc <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 80152ea:	e9d3 8700 	ldrd	r8, r7, [r3]
 80152ee:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 80152f0:	4619      	mov	r1, r3
 80152f2:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 80152f4:	4417      	add	r7, r2
 80152f6:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 80152f8:	463a      	mov	r2, r7
 80152fa:	f000 fb1e 	bl	801593a <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 80152fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015300:	1bdb      	subs	r3, r3, r7
 8015302:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8015304:	4643      	mov	r3, r8
 8015306:	e7cd      	b.n	80152a4 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8015308:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 801530a:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 801530c:	e9d1 7400 	ldrd	r7, r4, [r1]
 8015310:	4414      	add	r4, r2
 8015312:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8015314:	4622      	mov	r2, r4
 8015316:	f000 fb0a 	bl	801592e <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 801531a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 801531c:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 801531e:	1b1b      	subs	r3, r3, r4
 8015320:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8015322:	e7c2      	b.n	80152aa <free_pool+0x2a>

08015324 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8015324:	b510      	push	{r4, lr}
 8015326:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8015328:	2101      	movs	r1, #1
 801532a:	f7ff ffa9 	bl	8015280 <free_pool>
 801532e:	2100      	movs	r1, #0
 8015330:	4620      	mov	r0, r4
 8015332:	f7ff ffa5 	bl	8015280 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8015336:	4620      	mov	r0, r4
 8015338:	6861      	ldr	r1, [r4, #4]
 801533a:	2254      	movs	r2, #84	; 0x54
 801533c:	f000 faf7 	bl	801592e <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8015340:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8015342:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8015344:	6063      	str	r3, [r4, #4]
}
 8015346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 801534a:	f000 bb02 	b.w	8015952 <jpeg_mem_term>

0801534e <access_virt_barray>:
{
 801534e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 8015352:	18d7      	adds	r7, r2, r3
{
 8015354:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8015356:	684a      	ldr	r2, [r1, #4]
{
 8015358:	460c      	mov	r4, r1
 801535a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801535e:	42ba      	cmp	r2, r7
 8015360:	d304      	bcc.n	801536c <access_virt_barray+0x1e>
 8015362:	68ca      	ldr	r2, [r1, #12]
 8015364:	429a      	cmp	r2, r3
 8015366:	d301      	bcc.n	801536c <access_virt_barray+0x1e>
 8015368:	680b      	ldr	r3, [r1, #0]
 801536a:	b933      	cbnz	r3, 801537a <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801536c:	6803      	ldr	r3, [r0, #0]
 801536e:	2217      	movs	r2, #23
 8015370:	9001      	str	r0, [sp, #4]
 8015372:	615a      	str	r2, [r3, #20]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	4798      	blx	r3
 8015378:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 801537a:	69a3      	ldr	r3, [r4, #24]
 801537c:	42ab      	cmp	r3, r5
 801537e:	d803      	bhi.n	8015388 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8015380:	6922      	ldr	r2, [r4, #16]
 8015382:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8015384:	42bb      	cmp	r3, r7
 8015386:	d221      	bcs.n	80153cc <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 8015388:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801538a:	b933      	cbnz	r3, 801539a <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 801538c:	6803      	ldr	r3, [r0, #0]
 801538e:	2247      	movs	r2, #71	; 0x47
 8015390:	9001      	str	r0, [sp, #4]
 8015392:	615a      	str	r2, [r3, #20]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	4798      	blx	r3
 8015398:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 801539a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801539c:	b13b      	cbz	r3, 80153ae <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 801539e:	2201      	movs	r2, #1
 80153a0:	4621      	mov	r1, r4
 80153a2:	9001      	str	r0, [sp, #4]
 80153a4:	f7ff fe78 	bl	8015098 <do_barray_io>
      ptr->dirty = FALSE;
 80153a8:	2300      	movs	r3, #0
 80153aa:	9801      	ldr	r0, [sp, #4]
 80153ac:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 80153ae:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 80153b0:	2200      	movs	r2, #0
 80153b2:	4621      	mov	r1, r4
 80153b4:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 80153b6:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80153b8:	bf29      	itett	cs
 80153ba:	6923      	ldrcs	r3, [r4, #16]
 80153bc:	462b      	movcc	r3, r5
 80153be:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 80153c0:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 80153c4:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 80153c6:	f7ff fe67 	bl	8015098 <do_barray_io>
 80153ca:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 80153cc:	69e6      	ldr	r6, [r4, #28]
 80153ce:	42be      	cmp	r6, r7
 80153d0:	d21c      	bcs.n	801540c <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 80153d2:	42ae      	cmp	r6, r5
 80153d4:	d20c      	bcs.n	80153f0 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 80153d6:	f1b8 0f00 	cmp.w	r8, #0
 80153da:	d01b      	beq.n	8015414 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80153dc:	6803      	ldr	r3, [r0, #0]
 80153de:	2217      	movs	r2, #23
 80153e0:	9001      	str	r0, [sp, #4]
 80153e2:	462e      	mov	r6, r5
 80153e4:	615a      	str	r2, [r3, #20]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	4798      	blx	r3
    if (writable)
 80153ea:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 80153ec:	61e7      	str	r7, [r4, #28]
 80153ee:	e002      	b.n	80153f6 <access_virt_barray+0xa8>
    if (writable)
 80153f0:	f1b8 0f00 	cmp.w	r8, #0
 80153f4:	d1fa      	bne.n	80153ec <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 80153f6:	6a22      	ldr	r2, [r4, #32]
 80153f8:	b1b2      	cbz	r2, 8015428 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 80153fa:	68a2      	ldr	r2, [r4, #8]
 80153fc:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015400:	69a2      	ldr	r2, [r4, #24]
 8015402:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8015404:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 8015406:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015408:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 801540a:	d305      	bcc.n	8015418 <access_virt_barray+0xca>
  if (writable)
 801540c:	f1b8 0f00 	cmp.w	r8, #0
 8015410:	d10d      	bne.n	801542e <access_virt_barray+0xe0>
 8015412:	e00e      	b.n	8015432 <access_virt_barray+0xe4>
 8015414:	462e      	mov	r6, r5
 8015416:	e7ee      	b.n	80153f6 <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015418:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801541c:	464a      	mov	r2, r9
 801541e:	2100      	movs	r1, #0
	undef_row++;
 8015420:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015422:	f015 f9a7 	bl	802a774 <memset>
	undef_row++;
 8015426:	e7ee      	b.n	8015406 <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 8015428:	f1b8 0f00 	cmp.w	r8, #0
 801542c:	d009      	beq.n	8015442 <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 801542e:	2301      	movs	r3, #1
 8015430:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8015432:	69a0      	ldr	r0, [r4, #24]
 8015434:	1a2d      	subs	r5, r5, r0
 8015436:	6820      	ldr	r0, [r4, #0]
}
 8015438:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 801543c:	b003      	add	sp, #12
 801543e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015442:	6803      	ldr	r3, [r0, #0]
 8015444:	2217      	movs	r2, #23
 8015446:	615a      	str	r2, [r3, #20]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	4798      	blx	r3
  if (writable)
 801544c:	e7f1      	b.n	8015432 <access_virt_barray+0xe4>

0801544e <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 801544e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8015452:	429a      	cmp	r2, r3
{
 8015454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015458:	4606      	mov	r6, r0
 801545a:	4688      	mov	r8, r1
 801545c:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801545e:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8015460:	d902      	bls.n	8015468 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8015462:	2103      	movs	r1, #3
 8015464:	f7ff fe12 	bl	801508c <out_of_memory>
  if (odd_bytes > 0)
 8015468:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801546c:	bf1c      	itt	ne
 801546e:	3408      	addne	r4, #8
 8015470:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8015472:	f1b8 0f01 	cmp.w	r8, #1
 8015476:	d906      	bls.n	8015486 <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015478:	6833      	ldr	r3, [r6, #0]
 801547a:	220f      	movs	r2, #15
 801547c:	4630      	mov	r0, r6
 801547e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 8015486:	f104 0110 	add.w	r1, r4, #16
 801548a:	4630      	mov	r0, r6
 801548c:	f000 fa52 	bl	8015934 <jpeg_get_large>
  if (hdr_ptr == NULL)
 8015490:	4605      	mov	r5, r0
 8015492:	b918      	cbnz	r0, 801549c <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 8015494:	2104      	movs	r1, #4
 8015496:	4630      	mov	r0, r6
 8015498:	f7ff fdf8 	bl	801508c <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 801549c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801549e:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 80154a2:	3310      	adds	r3, #16
 80154a4:	4423      	add	r3, r4
 80154a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 80154a8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80154ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 80154ae:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 80154b2:	2300      	movs	r3, #0
 80154b4:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 80154b6:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 80154b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154bc <alloc_barray>:
{
 80154bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 80154c0:	01d7      	lsls	r7, r2, #7
{
 80154c2:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80154c4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 80154c8:	4680      	mov	r8, r0
 80154ca:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80154cc:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 80154ce:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80154d0:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 80154d4:	d904      	bls.n	80154e0 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 80154d6:	6803      	ldr	r3, [r0, #0]
 80154d8:	2248      	movs	r2, #72	; 0x48
 80154da:	615a      	str	r2, [r3, #20]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	4798      	blx	r3
  if (ltemp < (long) numrows)
 80154e0:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 80154e2:	ea4f 0285 	mov.w	r2, r5, lsl #2
 80154e6:	4651      	mov	r1, sl
 80154e8:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 80154ea:	bfa8      	it	ge
 80154ec:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 80154ee:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 80154f0:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 80154f2:	f7ff fe15 	bl	8015120 <alloc_small>
 80154f6:	4681      	mov	r9, r0
  while (currow < numrows) {
 80154f8:	42ae      	cmp	r6, r5
 80154fa:	d302      	bcc.n	8015502 <alloc_barray+0x46>
}
 80154fc:	4648      	mov	r0, r9
 80154fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015502:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8015504:	4651      	mov	r1, sl
 8015506:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015508:	429c      	cmp	r4, r3
 801550a:	bf28      	it	cs
 801550c:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 801550e:	fb04 f207 	mul.w	r2, r4, r7
 8015512:	f7ff ff9c 	bl	801544e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8015516:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 801551a:	4426      	add	r6, r4
 801551c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8015520:	4293      	cmp	r3, r2
 8015522:	d0e9      	beq.n	80154f8 <alloc_barray+0x3c>
      result[currow++] = workspace;
 8015524:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8015528:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 801552a:	e7f9      	b.n	8015520 <alloc_barray+0x64>

0801552c <alloc_sarray>:
{
 801552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015530:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015532:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8015536:	4607      	mov	r7, r0
 8015538:	468a      	mov	sl, r1
  if (ltemp <= 0)
 801553a:	429a      	cmp	r2, r3
{
 801553c:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801553e:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015540:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 8015544:	d904      	bls.n	8015550 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8015546:	6803      	ldr	r3, [r0, #0]
 8015548:	2248      	movs	r2, #72	; 0x48
 801554a:	615a      	str	r2, [r3, #20]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8015550:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8015552:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8015556:	4651      	mov	r1, sl
 8015558:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 801555a:	bfa8      	it	ge
 801555c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 801555e:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8015560:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8015562:	f7ff fddd 	bl	8015120 <alloc_small>
 8015566:	4681      	mov	r9, r0
  while (currow < numrows) {
 8015568:	42ae      	cmp	r6, r5
 801556a:	d302      	bcc.n	8015572 <alloc_sarray+0x46>
}
 801556c:	4648      	mov	r0, r9
 801556e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015572:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8015574:	4651      	mov	r1, sl
 8015576:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015578:	429c      	cmp	r4, r3
 801557a:	bf28      	it	cs
 801557c:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 801557e:	fb04 f208 	mul.w	r2, r4, r8
 8015582:	f7ff ff64 	bl	801544e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8015586:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 801558a:	4426      	add	r6, r4
 801558c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8015590:	4293      	cmp	r3, r2
 8015592:	d0e9      	beq.n	8015568 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 8015594:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8015598:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 801559a:	e7f9      	b.n	8015590 <alloc_sarray+0x64>

0801559c <realize_virt_arrays>:
{
 801559c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80155a0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 80155a4:	2500      	movs	r5, #0
{
 80155a6:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80155a8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 80155ac:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80155ae:	bb03      	cbnz	r3, 80155f2 <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80155b0:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80155b4:	bb43      	cbnz	r3, 8015608 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 80155b6:	2e00      	cmp	r6, #0
 80155b8:	dd19      	ble.n	80155ee <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 80155ba:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80155be:	462a      	mov	r2, r5
 80155c0:	4631      	mov	r1, r6
 80155c2:	4638      	mov	r0, r7
 80155c4:	f000 f9bc 	bl	8015940 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 80155c8:	4285      	cmp	r5, r0
 80155ca:	dd2a      	ble.n	8015622 <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 80155cc:	fb90 f6f6 	sdiv	r6, r0, r6
 80155d0:	2e01      	cmp	r6, #1
 80155d2:	bfb8      	it	lt
 80155d4:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80155d6:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 80155da:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 80155de:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80155e0:	bb0c      	cbnz	r4, 8015626 <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80155e2:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 80155e6:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80155ea:	2d00      	cmp	r5, #0
 80155ec:	d141      	bne.n	8015672 <realize_virt_arrays+0xd6>
}
 80155ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 80155f2:	681a      	ldr	r2, [r3, #0]
 80155f4:	b932      	cbnz	r2, 8015604 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 80155f6:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 80155fa:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 80155fe:	6859      	ldr	r1, [r3, #4]
 8015600:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015606:	e7d2      	b.n	80155ae <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8015608:	681a      	ldr	r2, [r3, #0]
 801560a:	b942      	cbnz	r2, 801561e <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 801560c:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8015610:	4351      	muls	r1, r2
 8015612:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8015616:	6859      	ldr	r1, [r3, #4]
 8015618:	434a      	muls	r2, r1
 801561a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015620:	e7c8      	b.n	80155b4 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8015622:	4e27      	ldr	r6, [pc, #156]	; (80156c0 <realize_virt_arrays+0x124>)
 8015624:	e7d7      	b.n	80155d6 <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8015626:	6823      	ldr	r3, [r4, #0]
 8015628:	b9ab      	cbnz	r3, 8015656 <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 801562a:	6862      	ldr	r2, [r4, #4]
 801562c:	68e1      	ldr	r1, [r4, #12]
 801562e:	1e53      	subs	r3, r2, #1
 8015630:	fbb3 f3f1 	udiv	r3, r3, r1
 8015634:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8015636:	429e      	cmp	r6, r3
 8015638:	db0f      	blt.n	801565a <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 801563a:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801563c:	6923      	ldr	r3, [r4, #16]
 801563e:	2101      	movs	r1, #1
 8015640:	68a2      	ldr	r2, [r4, #8]
 8015642:	4638      	mov	r0, r7
 8015644:	f7ff ff72 	bl	801552c <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8015648:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801564c:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 801564e:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 8015650:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 8015652:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015656:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8015658:	e7c2      	b.n	80155e0 <realize_virt_arrays+0x44>
				(long) sptr->samplesperrow *
 801565a:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 801565c:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 801565e:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8015660:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8015662:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015666:	435a      	muls	r2, r3
 8015668:	f000 f96c 	bl	8015944 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 801566c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8015670:	e7e4      	b.n	801563c <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8015672:	682b      	ldr	r3, [r5, #0]
 8015674:	b9ab      	cbnz	r3, 80156a2 <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8015676:	6868      	ldr	r0, [r5, #4]
 8015678:	68e9      	ldr	r1, [r5, #12]
 801567a:	1e43      	subs	r3, r0, #1
 801567c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015680:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8015682:	429e      	cmp	r6, r3
 8015684:	db0f      	blt.n	80156a6 <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 8015686:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8015688:	692b      	ldr	r3, [r5, #16]
 801568a:	2101      	movs	r1, #1
 801568c:	68aa      	ldr	r2, [r5, #8]
 801568e:	4638      	mov	r0, r7
 8015690:	f7ff ff14 	bl	80154bc <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 8015694:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8015698:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 801569a:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 801569c:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 801569e:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80156a2:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 80156a4:	e7a1      	b.n	80155ea <realize_virt_arrays+0x4e>
				(long) bptr->blocksperrow *
 80156a6:	68aa      	ldr	r2, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 80156a8:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 80156aa:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 80156ac:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 80156ae:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 80156b0:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80156b4:	01d2      	lsls	r2, r2, #7
 80156b6:	f000 f945 	bl	8015944 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 80156ba:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80156be:	e7e3      	b.n	8015688 <realize_virt_arrays+0xec>
 80156c0:	3b9aca00 	.word	0x3b9aca00

080156c4 <access_virt_sarray>:
{
 80156c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 80156c8:	eb02 0803 	add.w	r8, r2, r3
{
 80156cc:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80156ce:	684a      	ldr	r2, [r1, #4]
{
 80156d0:	b087      	sub	sp, #28
 80156d2:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80156d4:	4542      	cmp	r2, r8
{
 80156d6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80156da:	d304      	bcc.n	80156e6 <access_virt_sarray+0x22>
 80156dc:	68ca      	ldr	r2, [r1, #12]
 80156de:	429a      	cmp	r2, r3
 80156e0:	d301      	bcc.n	80156e6 <access_virt_sarray+0x22>
 80156e2:	680b      	ldr	r3, [r1, #0]
 80156e4:	b933      	cbnz	r3, 80156f4 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80156e6:	6803      	ldr	r3, [r0, #0]
 80156e8:	2217      	movs	r2, #23
 80156ea:	9003      	str	r0, [sp, #12]
 80156ec:	615a      	str	r2, [r3, #20]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	4798      	blx	r3
 80156f2:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 80156f4:	69a3      	ldr	r3, [r4, #24]
 80156f6:	42ab      	cmp	r3, r5
 80156f8:	d80c      	bhi.n	8015714 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 80156fa:	6922      	ldr	r2, [r4, #16]
 80156fc:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 80156fe:	4543      	cmp	r3, r8
 8015700:	d308      	bcc.n	8015714 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8015702:	69e6      	ldr	r6, [r4, #28]
 8015704:	4546      	cmp	r6, r8
 8015706:	f0c0 8081 	bcc.w	801580c <access_virt_sarray+0x148>
  if (writable)
 801570a:	f1ba 0f00 	cmp.w	sl, #0
 801570e:	f040 80a8 	bne.w	8015862 <access_virt_sarray+0x19e>
 8015712:	e0a8      	b.n	8015866 <access_virt_sarray+0x1a2>
    if (! ptr->b_s_open)
 8015714:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015716:	b933      	cbnz	r3, 8015726 <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8015718:	6803      	ldr	r3, [r0, #0]
 801571a:	2247      	movs	r2, #71	; 0x47
 801571c:	9003      	str	r0, [sp, #12]
 801571e:	615a      	str	r2, [r3, #20]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	4798      	blx	r3
 8015724:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 8015726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015728:	b17b      	cbz	r3, 801574a <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 801572a:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801572e:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 8015732:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015734:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8015738:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801573c:	6922      	ldr	r2, [r4, #16]
 801573e:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015740:	e9d4 c706 	ldrd	ip, r7, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015744:	dc3c      	bgt.n	80157c0 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 8015746:	2300      	movs	r3, #0
 8015748:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 801574a:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801574c:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8015750:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015752:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 8015756:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015758:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801575c:	bf2a      	itet	cs
 801575e:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8015762:	462b      	movcc	r3, r5
 8015764:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8015768:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 801576a:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801576e:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015770:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015772:	454a      	cmp	r2, r9
 8015774:	ddc5      	ble.n	8015702 <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015776:	eba2 0209 	sub.w	r2, r2, r9
 801577a:	6967      	ldr	r7, [r4, #20]
 801577c:	42ba      	cmp	r2, r7
 801577e:	bfa8      	it	ge
 8015780:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 8015782:	69a7      	ldr	r7, [r4, #24]
 8015784:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015786:	1bf6      	subs	r6, r6, r7
 8015788:	42b2      	cmp	r2, r6
 801578a:	bfa8      	it	ge
 801578c:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801578e:	6866      	ldr	r6, [r4, #4]
 8015790:	1bf6      	subs	r6, r6, r7
 8015792:	42b2      	cmp	r2, r6
 8015794:	bfa8      	it	ge
 8015796:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 8015798:	2a00      	cmp	r2, #0
 801579a:	ddb2      	ble.n	8015702 <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 801579c:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80157a0:	6822      	ldr	r2, [r4, #0]
 80157a2:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80157a4:	9600      	str	r6, [sp, #0]
 80157a6:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 80157aa:	9305      	str	r3, [sp, #20]
 80157ac:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80157b0:	47b8      	blx	r7
    file_offset += byte_count;
 80157b2:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80157b4:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80157b6:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80157b8:	4491      	add	r9, r2
 80157ba:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 80157be:	e7d6      	b.n	801576e <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80157c0:	eba2 0209 	sub.w	r2, r2, r9
 80157c4:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 80157c6:	44cc      	add	ip, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80157c8:	42b2      	cmp	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80157ca:	eba7 070c 	sub.w	r7, r7, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80157ce:	bfa8      	it	ge
 80157d0:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80157d2:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80157d4:	42ba      	cmp	r2, r7
 80157d6:	bfa8      	it	ge
 80157d8:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80157da:	eba6 070c 	sub.w	r7, r6, ip
 80157de:	42ba      	cmp	r2, r7
 80157e0:	bfa8      	it	ge
 80157e2:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 80157e4:	2a00      	cmp	r2, #0
 80157e6:	ddae      	ble.n	8015746 <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 80157e8:	fb02 f70b 	mul.w	r7, r2, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80157ec:	6822      	ldr	r2, [r4, #0]
 80157ee:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80157f0:	9700      	str	r7, [sp, #0]
 80157f2:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 80157f6:	9305      	str	r3, [sp, #20]
 80157f8:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80157fc:	47b0      	blx	r6
    file_offset += byte_count;
 80157fe:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015800:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8015802:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015804:	4491      	add	r9, r2
 8015806:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801580a:	e797      	b.n	801573c <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 801580c:	42ae      	cmp	r6, r5
 801580e:	d20d      	bcs.n	801582c <access_virt_sarray+0x168>
      if (writable)		/* writer skipped over a section of array */
 8015810:	f1ba 0f00 	cmp.w	sl, #0
 8015814:	d020      	beq.n	8015858 <access_virt_sarray+0x194>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015816:	6803      	ldr	r3, [r0, #0]
 8015818:	2217      	movs	r2, #23
 801581a:	9003      	str	r0, [sp, #12]
 801581c:	462e      	mov	r6, r5
 801581e:	615a      	str	r2, [r3, #20]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	4798      	blx	r3
    if (writable)
 8015824:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 8015826:	f8c4 801c 	str.w	r8, [r4, #28]
 801582a:	e002      	b.n	8015832 <access_virt_sarray+0x16e>
    if (writable)
 801582c:	f1ba 0f00 	cmp.w	sl, #0
 8015830:	d1f9      	bne.n	8015826 <access_virt_sarray+0x162>
    if (ptr->pre_zero) {
 8015832:	6a22      	ldr	r2, [r4, #32]
 8015834:	b192      	cbz	r2, 801585c <access_virt_sarray+0x198>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015836:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015838:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801583a:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 801583c:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 8015840:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015842:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8015844:	f4bf af61 	bcs.w	801570a <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015848:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801584c:	463a      	mov	r2, r7
 801584e:	2100      	movs	r1, #0
	undef_row++;
 8015850:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015852:	f014 ff8f 	bl	802a774 <memset>
	undef_row++;
 8015856:	e7f3      	b.n	8015840 <access_virt_sarray+0x17c>
 8015858:	462e      	mov	r6, r5
 801585a:	e7ea      	b.n	8015832 <access_virt_sarray+0x16e>
      if (! writable)		/* reader looking at undefined data */
 801585c:	f1ba 0f00 	cmp.w	sl, #0
 8015860:	d009      	beq.n	8015876 <access_virt_sarray+0x1b2>
    ptr->dirty = TRUE;
 8015862:	2301      	movs	r3, #1
 8015864:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8015866:	69a0      	ldr	r0, [r4, #24]
 8015868:	1a2d      	subs	r5, r5, r0
 801586a:	6820      	ldr	r0, [r4, #0]
}
 801586c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8015870:	b007      	add	sp, #28
 8015872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015876:	6803      	ldr	r3, [r0, #0]
 8015878:	2217      	movs	r2, #23
 801587a:	615a      	str	r2, [r3, #20]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	4798      	blx	r3
  if (writable)
 8015880:	e7f1      	b.n	8015866 <access_virt_sarray+0x1a2>
	...

08015884 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8015884:	2300      	movs	r3, #0
{
 8015886:	b570      	push	{r4, r5, r6, lr}
 8015888:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 801588a:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 801588c:	f000 f85f 	bl	801594e <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8015890:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8015892:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8015894:	4628      	mov	r0, r5
 8015896:	f000 f847 	bl	8015928 <jpeg_get_small>

  if (mem == NULL) {
 801589a:	4604      	mov	r4, r0
 801589c:	b948      	cbnz	r0, 80158b2 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 801589e:	4628      	mov	r0, r5
 80158a0:	f000 f857 	bl	8015952 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 80158a4:	682b      	ldr	r3, [r5, #0]
 80158a6:	2238      	movs	r2, #56	; 0x38
 80158a8:	4628      	mov	r0, r5
 80158aa:	e9c3 2405 	strd	r2, r4, [r3, #20]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 80158b2:	4b12      	ldr	r3, [pc, #72]	; (80158fc <jinit_memory_mgr+0x78>)
 80158b4:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 80158b6:	4b12      	ldr	r3, [pc, #72]	; (8015900 <jinit_memory_mgr+0x7c>)
 80158b8:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 80158ba:	4b12      	ldr	r3, [pc, #72]	; (8015904 <jinit_memory_mgr+0x80>)
 80158bc:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 80158be:	4b12      	ldr	r3, [pc, #72]	; (8015908 <jinit_memory_mgr+0x84>)
 80158c0:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 80158c2:	4b12      	ldr	r3, [pc, #72]	; (801590c <jinit_memory_mgr+0x88>)
 80158c4:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 80158c6:	4b12      	ldr	r3, [pc, #72]	; (8015910 <jinit_memory_mgr+0x8c>)
 80158c8:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 80158ca:	4b12      	ldr	r3, [pc, #72]	; (8015914 <jinit_memory_mgr+0x90>)
 80158cc:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 80158ce:	4b12      	ldr	r3, [pc, #72]	; (8015918 <jinit_memory_mgr+0x94>)
 80158d0:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 80158d2:	4b12      	ldr	r3, [pc, #72]	; (801591c <jinit_memory_mgr+0x98>)
 80158d4:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 80158d6:	4b12      	ldr	r3, [pc, #72]	; (8015920 <jinit_memory_mgr+0x9c>)
 80158d8:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 80158da:	4b12      	ldr	r3, [pc, #72]	; (8015924 <jinit_memory_mgr+0xa0>)
 80158dc:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 80158de:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 80158e2:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 80158e6:	2300      	movs	r3, #0
 80158e8:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 80158ea:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 80158ec:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 80158ee:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 80158f0:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 80158f4:	2354      	movs	r3, #84	; 0x54
 80158f6:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 80158f8:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 80158fa:	bd70      	pop	{r4, r5, r6, pc}
 80158fc:	08015121 	.word	0x08015121
 8015900:	0801544f 	.word	0x0801544f
 8015904:	0801552d 	.word	0x0801552d
 8015908:	080154bd 	.word	0x080154bd
 801590c:	08015237 	.word	0x08015237
 8015910:	080151ed 	.word	0x080151ed
 8015914:	0801559d 	.word	0x0801559d
 8015918:	080156c5 	.word	0x080156c5
 801591c:	0801534f 	.word	0x0801534f
 8015920:	08015281 	.word	0x08015281
 8015924:	08015325 	.word	0x08015325

08015928 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 8015928:	4608      	mov	r0, r1
 801592a:	f7f2 b8a5 	b.w	8007a78 <pvPortMalloc>

0801592e <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 801592e:	4608      	mov	r0, r1
 8015930:	f7f2 b938 	b.w	8007ba4 <vPortFree>

08015934 <jpeg_get_large>:
 8015934:	4608      	mov	r0, r1
 8015936:	f7f2 b89f 	b.w	8007a78 <pvPortMalloc>

0801593a <jpeg_free_large>:
 801593a:	4608      	mov	r0, r1
 801593c:	f7f2 b932 	b.w	8007ba4 <vPortFree>

08015940 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 8015940:	4610      	mov	r0, r2
 8015942:	4770      	bx	lr

08015944 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8015944:	6803      	ldr	r3, [r0, #0]
 8015946:	2233      	movs	r2, #51	; 0x33
 8015948:	615a      	str	r2, [r3, #20]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	4718      	bx	r3

0801594e <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 801594e:	2000      	movs	r0, #0
 8015950:	4770      	bx	lr

08015952 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 8015952:	4770      	bx	lr

08015954 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 8015954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015958:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801595c:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801595e:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015962:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015964:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015966:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 801596a:	bf16      	itet	ne
 801596c:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 801596e:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 8015972:	461e      	movne	r6, r3
 8015974:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015976:	6843      	ldr	r3, [r0, #4]
 8015978:	f506 7280 	add.w	r2, r6, #256	; 0x100
 801597c:	689f      	ldr	r7, [r3, #8]
 801597e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015980:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8015982:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8015986:	f105 0e20 	add.w	lr, r5, #32

  for (i = 0; i < cinfo->out_color_components; i++) {
 801598a:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801598c:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801598e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8015990:	429a      	cmp	r2, r3
 8015992:	dc01      	bgt.n	8015998 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 8015994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015998:	f85e 1b04 	ldr.w	r1, [lr], #4
      cquantize->colorindex[i] += MAXJSAMPLE;
 801599c:	009f      	lsls	r7, r3, #2
 801599e:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 80159a0:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 80159a4:	b126      	cbz	r6, 80159b0 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 80159a6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80159aa:	32ff      	adds	r2, #255	; 0xff
 80159ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 80159b0:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80159b4:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 80159b8:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 80159ba:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80159bc:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 80159c0:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80159c2:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 80159c6:	428f      	cmp	r7, r1
 80159c8:	db0a      	blt.n	80159e0 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 80159ca:	fb10 fb0c 	smulbb	fp, r0, ip
 80159ce:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 80159d2:	3101      	adds	r1, #1
 80159d4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80159d8:	d1f5      	bne.n	80159c6 <create_colorindex+0x72>
    if (pad)
 80159da:	b93e      	cbnz	r6, 80159ec <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80159dc:	3301      	adds	r3, #1
 80159de:	e7d6      	b.n	801598e <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 80159e0:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80159e2:	fb08 a700 	mla	r7, r8, r0, sl
 80159e6:	fb97 f7f9 	sdiv	r7, r7, r9
 80159ea:	e7ec      	b.n	80159c6 <create_colorindex+0x72>
 80159ec:	4611      	mov	r1, r2
 80159ee:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 80159f2:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 80159f6:	f892 9000 	ldrb.w	r9, [r2]
 80159fa:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 80159fe:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8015a00:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 8015a04:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8015a08:	d1f5      	bne.n	80159f6 <create_colorindex+0xa2>
 8015a0a:	e7e7      	b.n	80159dc <create_colorindex+0x88>

08015a0c <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 8015a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 8015a10:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 8015a14:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 8015a16:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8015a1a:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 8015a1e:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 8015a22:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015a24:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 8015a26:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015a28:	4540      	cmp	r0, r8
 8015a2a:	db02      	blt.n	8015a32 <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8015a2c:	b003      	add	sp, #12
 8015a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 8015a32:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8015a36:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 8015a38:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8015a3c:	eb04 0a03 	add.w	sl, r4, r3
 8015a40:	4554      	cmp	r4, sl
 8015a42:	d10f      	bne.n	8015a64 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 8015a44:	3001      	adds	r0, #1
 8015a46:	e7ef      	b.n	8015a28 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015a48:	f815 b003 	ldrb.w	fp, [r5, r3]
 8015a4c:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 8015a50:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015a52:	f817 700b 	ldrb.w	r7, [r7, fp]
 8015a56:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8015a58:	4563      	cmp	r3, ip
 8015a5a:	dbf5      	blt.n	8015a48 <color_quantize+0x3c>
 8015a5c:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 8015a5e:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 8015a62:	e7ed      	b.n	8015a40 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8015a64:	2300      	movs	r3, #0
      pixcode = 0;
 8015a66:	461e      	mov	r6, r3
 8015a68:	e7f6      	b.n	8015a58 <color_quantize+0x4c>

08015a6a <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 8015a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015a6e:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8015a72:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015a76:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015a78:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8015a7a:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015a7e:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8015a82:	4298      	cmp	r0, r3
 8015a84:	db01      	blt.n	8015a8a <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8015a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 8015a8a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8015a8e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8015a92:	eb05 0a09 	add.w	sl, r5, r9
 8015a96:	4555      	cmp	r5, sl
 8015a98:	f104 0403 	add.w	r4, r4, #3
 8015a9c:	d101      	bne.n	8015aa2 <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 8015a9e:	3001      	adds	r0, #1
 8015aa0:	e7ef      	b.n	8015a82 <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8015aa2:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8015aa6:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8015aaa:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 8015aae:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8015ab2:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8015ab4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8015ab8:	f818 6006 	ldrb.w	r6, [r8, r6]
 8015abc:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 8015abe:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8015ac2:	e7e8      	b.n	8015a96 <color_quantize3+0x2c>

08015ac4 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8015ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac8:	469a      	mov	sl, r3
 8015aca:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015acc:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015ad0:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015ad4:	699a      	ldr	r2, [r3, #24]
 8015ad6:	6811      	ldr	r1, [r2, #0]
 8015ad8:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8015ada:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015adc:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8015ade:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015ae0:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015ae2:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8015ae4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8015ae6:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8015ae8:	4551      	cmp	r1, sl
 8015aea:	db02      	blt.n	8015af2 <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 8015aec:	b00b      	add	sp, #44	; 0x2c
 8015aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8015af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 8015af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015af6:	9c07      	ldr	r4, [sp, #28]
 8015af8:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 8015afc:	0190      	lsls	r0, r2, #6
 8015afe:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8015b02:	9002      	str	r0, [sp, #8]
 8015b04:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 8015b08:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 8015b0a:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 8015b0c:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 8015b10:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 8015b12:	9808      	ldr	r0, [sp, #32]
 8015b14:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8015b18:	4575      	cmp	r5, lr
 8015b1a:	f100 0003 	add.w	r0, r0, #3
 8015b1e:	d106      	bne.n	8015b2e <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 8015b20:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015b22:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8015b24:	3201      	adds	r2, #1
 8015b26:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 8015b2a:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 8015b2c:	e7dc      	b.n	8015ae8 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8015b2e:	9e02      	ldr	r6, [sp, #8]
 8015b30:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8015b34:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8015b38:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 8015b3a:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8015b3c:	f858 7006 	ldr.w	r7, [r8, r6]
 8015b40:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015b42:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 8015b44:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8015b48:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015b4c:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 8015b50:	f859 7006 	ldr.w	r7, [r9, r6]
 8015b54:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015b56:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015b58:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015b5c:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015b5e:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015b60:	9a06      	ldr	r2, [sp, #24]
 8015b62:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8015b66:	4417      	add	r7, r2
 8015b68:	5dbe      	ldrb	r6, [r7, r6]
 8015b6a:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 8015b6c:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 8015b70:	e7d2      	b.n	8015b18 <quantize3_ord_dither+0x54>

08015b72 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015b72:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8015b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015b76:	3202      	adds	r2, #2
 8015b78:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 8015b7c:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015b7e:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015b80:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015b82:	3644      	adds	r6, #68	; 0x44
 8015b84:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015b86:	42bb      	cmp	r3, r7
 8015b88:	dc00      	bgt.n	8015b8c <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 8015b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8015b8c:	6863      	ldr	r3, [r4, #4]
 8015b8e:	462a      	mov	r2, r5
 8015b90:	2101      	movs	r1, #1
 8015b92:	4620      	mov	r0, r4
 8015b94:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015b96:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8015b98:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 8015b9a:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015b9e:	e7f1      	b.n	8015b84 <alloc_fs_workspace+0x12>

08015ba0 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8015ba0:	4770      	bx	lr

08015ba2 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8015ba2:	6803      	ldr	r3, [r0, #0]
 8015ba4:	222f      	movs	r2, #47	; 0x2f
 8015ba6:	615a      	str	r2, [r3, #20]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	4718      	bx	r3

08015bac <start_pass_1_quant>:
{
 8015bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015bb0:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015bb4:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 8015bb6:	692b      	ldr	r3, [r5, #16]
 8015bb8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 8015bbc:	696b      	ldr	r3, [r5, #20]
 8015bbe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 8015bc2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8015bc6:	2b01      	cmp	r3, #1
 8015bc8:	d00b      	beq.n	8015be2 <start_pass_1_quant+0x36>
 8015bca:	2b02      	cmp	r3, #2
 8015bcc:	d05e      	beq.n	8015c8c <start_pass_1_quant+0xe0>
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d174      	bne.n	8015cbc <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 8015bd2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015bd4:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 8015bd6:	bf0c      	ite	eq
 8015bd8:	4b3c      	ldreq	r3, [pc, #240]	; (8015ccc <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 8015bda:	4b3d      	ldrne	r3, [pc, #244]	; (8015cd0 <start_pass_1_quant+0x124>)
 8015bdc:	606b      	str	r3, [r5, #4]
}
 8015bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 8015be2:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 8015be4:	4b3b      	ldr	r3, [pc, #236]	; (8015cd4 <start_pass_1_quant+0x128>)
 8015be6:	4a3c      	ldr	r2, [pc, #240]	; (8015cd8 <start_pass_1_quant+0x12c>)
 8015be8:	2903      	cmp	r1, #3
 8015bea:	bf18      	it	ne
 8015bec:	4613      	movne	r3, r2
 8015bee:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 8015bf4:	69eb      	ldr	r3, [r5, #28]
 8015bf6:	b90b      	cbnz	r3, 8015bfc <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 8015bf8:	f7ff feac 	bl	8015954 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 8015bfc:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8015bfe:	2d00      	cmp	r5, #0
 8015c00:	d1ed      	bne.n	8015bde <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015c02:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015c06:	f107 0820 	add.w	r8, r7, #32
 8015c0a:	4646      	mov	r6, r8
 8015c0c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015c0e:	429d      	cmp	r5, r3
 8015c10:	dae5      	bge.n	8015bde <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015c12:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 8015c16:	4642      	mov	r2, r8
 8015c18:	2300      	movs	r3, #0
 8015c1a:	429d      	cmp	r5, r3
 8015c1c:	d007      	beq.n	8015c2e <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 8015c1e:	f852 1b04 	ldr.w	r1, [r2], #4
 8015c22:	4589      	cmp	r9, r1
 8015c24:	d130      	bne.n	8015c88 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 8015c26:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015c2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 8015c2c:	bb48      	cbnz	r0, 8015c82 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015c2e:	6863      	ldr	r3, [r4, #4]
 8015c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015c34:	2101      	movs	r1, #1
 8015c36:	4620      	mov	r0, r4
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 8015c3c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8015c40:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8015c44:	f8df c098 	ldr.w	ip, [pc, #152]	; 8015ce0 <start_pass_1_quant+0x134>
 8015c48:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 8015c4a:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 8015c4e:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 8015c52:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8015c54:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015c58:	005b      	lsls	r3, r3, #1
 8015c5a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 8015c5e:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 8015c62:	bf45      	ittet	mi
 8015c64:	425b      	negmi	r3, r3
 8015c66:	fb93 f3f2 	sdivmi	r3, r3, r2
 8015c6a:	fb93 f3f2 	sdivpl	r3, r3, r2
 8015c6e:	425b      	negmi	r3, r3
 8015c70:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 8015c74:	458e      	cmp	lr, r1
 8015c76:	d1ed      	bne.n	8015c54 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8015c78:	3140      	adds	r1, #64	; 0x40
 8015c7a:	f10c 0c10 	add.w	ip, ip, #16
 8015c7e:	458a      	cmp	sl, r1
 8015c80:	d1e5      	bne.n	8015c4e <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015c82:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8015c84:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015c86:	e7c1      	b.n	8015c0c <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8015c88:	3301      	adds	r3, #1
 8015c8a:	e7c6      	b.n	8015c1a <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 8015c8c:	4b13      	ldr	r3, [pc, #76]	; (8015cdc <start_pass_1_quant+0x130>)
 8015c8e:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8015c90:	2300      	movs	r3, #0
 8015c92:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8015c94:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8015c96:	b90b      	cbnz	r3, 8015c9c <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8015c98:	f7ff ff6b 	bl	8015b72 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015c9c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015c9e:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 8015ca0:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015ca2:	3202      	adds	r2, #2
 8015ca4:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8015ca6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015ca8:	42bb      	cmp	r3, r7
 8015caa:	dd98      	ble.n	8015bde <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8015cac:	4632      	mov	r2, r6
 8015cae:	2100      	movs	r1, #0
 8015cb0:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 8015cb4:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8015cb6:	f014 fd5d 	bl	802a774 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 8015cba:	e7f4      	b.n	8015ca6 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015cbc:	6803      	ldr	r3, [r0, #0]
 8015cbe:	2231      	movs	r2, #49	; 0x31
}
 8015cc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015cc4:	615a      	str	r2, [r3, #20]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	4718      	bx	r3
 8015cca:	bf00      	nop
 8015ccc:	08015a6b 	.word	0x08015a6b
 8015cd0:	08015a0d 	.word	0x08015a0d
 8015cd4:	08015ac5 	.word	0x08015ac5
 8015cd8:	08015e1d 	.word	0x08015e1d
 8015cdc:	08015ce5 	.word	0x08015ce5
 8015ce0:	0802f908 	.word	0x0802f908

08015ce4 <quantize_fs_dither>:
{
 8015ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce8:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 8015cea:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8015cec:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 8015cf0:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015cf4:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 8015cf8:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8015cfc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015d00:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015d02:	1e6b      	subs	r3, r5, #1
 8015d04:	9304      	str	r3, [sp, #16]
 8015d06:	fb03 f309 	mul.w	r3, r3, r9
 8015d0a:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015d0c:	1c6b      	adds	r3, r5, #1
 8015d0e:	005b      	lsls	r3, r3, #1
 8015d10:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 8015d12:	2300      	movs	r3, #0
 8015d14:	9300      	str	r3, [sp, #0]
 8015d16:	9a00      	ldr	r2, [sp, #0]
 8015d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	db02      	blt.n	8015d24 <quantize_fs_dither+0x40>
}
 8015d1e:	b011      	add	sp, #68	; 0x44
 8015d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015d24:	2100      	movs	r1, #0
 8015d26:	462a      	mov	r2, r5
 8015d28:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 8015d2c:	f014 fd22 	bl	802a774 <memset>
    for (ci = 0; ci < nc; ci++) {
 8015d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d34:	2100      	movs	r1, #0
 8015d36:	9305      	str	r3, [sp, #20]
	dirnc = -nc;
 8015d38:	f1c9 0300 	rsb	r3, r9, #0
 8015d3c:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 8015d3e:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 8015d40:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 8015d42:	db06      	blt.n	8015d52 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015d44:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 8015d48:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015d4a:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 8015d4c:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015d4e:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8015d50:	e7e0      	b.n	8015d14 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 8015d52:	9800      	ldr	r0, [sp, #0]
 8015d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d56:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 8015d5a:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 8015d5e:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015d62:	9b05      	ldr	r3, [sp, #20]
 8015d64:	f853 cb04 	ldr.w	ip, [r3], #4
 8015d68:	9305      	str	r3, [sp, #20]
      if (cquantize->on_odd_row) {
 8015d6a:	b312      	cbz	r2, 8015db2 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015d6c:	9b08      	ldr	r3, [sp, #32]
 8015d6e:	449e      	add	lr, r3
	output_ptr += width-1;
 8015d70:	9b04      	ldr	r3, [sp, #16]
 8015d72:	4418      	add	r0, r3
	dirnc = -nc;
 8015d74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d76:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d7a:	449c      	add	ip, r3
	dir = -1;
 8015d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	dir = 1;
 8015d80:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8015d82:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8015d84:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 8015d86:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 8015d88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015d8c:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 8015d8e:	6923      	ldr	r3, [r4, #16]
 8015d90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015d94:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015d96:	9b02      	ldr	r3, [sp, #8]
 8015d98:	005b      	lsls	r3, r3, #1
 8015d9a:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 8015d9c:	2300      	movs	r3, #0
      cur = 0;
 8015d9e:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8015da0:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8015da2:	9a03      	ldr	r2, [sp, #12]
 8015da4:	b94a      	cbnz	r2, 8015dba <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8015da6:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 8015da8:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8015daa:	436a      	muls	r2, r5
 8015dac:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8015db0:	e7c5      	b.n	8015d3e <quantize_fs_dither+0x5a>
	dir = 1;
 8015db2:	2301      	movs	r3, #1
 8015db4:	f8cd 901c 	str.w	r9, [sp, #28]
 8015db8:	e7e2      	b.n	8015d80 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015dba:	9a01      	ldr	r2, [sp, #4]
 8015dbc:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8015dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015dc2:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8015dc4:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015dc8:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 8015dcc:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 8015dd2:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015dd6:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015dda:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015dde:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015de0:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015de2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 8015de4:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015de8:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015dec:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015dee:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015df2:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 8015df4:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 8015df6:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 8015dfa:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 8015dfc:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015dfe:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8015e00:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015e04:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015e06:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 8015e08:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 8015e0a:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8015e0c:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 8015e0e:	4443      	add	r3, r8
	belowerr = bnexterr;
 8015e10:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 8015e14:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015e18:	4417      	add	r7, r2
 8015e1a:	e7c2      	b.n	8015da2 <quantize_fs_dither+0xbe>

08015e1c <quantize_ord_dither>:
{
 8015e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e20:	b089      	sub	sp, #36	; 0x24
 8015e22:	4689      	mov	r9, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015e24:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 8015e28:	1f14      	subs	r4, r2, #4
{
 8015e2a:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8015e2c:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 8015e2e:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 8015e30:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8015e34:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015e36:	9b07      	ldr	r3, [sp, #28]
 8015e38:	429f      	cmp	r7, r3
 8015e3a:	db02      	blt.n	8015e42 <quantize_ord_dither+0x26>
}
 8015e3c:	b009      	add	sp, #36	; 0x24
 8015e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015e42:	4652      	mov	r2, sl
 8015e44:	2100      	movs	r1, #0
 8015e46:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8015e4a:	f014 fc93 	bl	802a774 <memset>
    row_index = cquantize->row_index;
 8015e4e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 8015e52:	f108 0c34 	add.w	ip, r8, #52	; 0x34
 8015e56:	2000      	movs	r0, #0
      dither = cquantize->odither[ci][row_index];
 8015e58:	019a      	lsls	r2, r3, #6
 8015e5a:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 8015e5c:	9a01      	ldr	r2, [sp, #4]
 8015e5e:	4290      	cmp	r0, r2
 8015e60:	db06      	blt.n	8015e70 <quantize_ord_dither+0x54>
    row_index = (row_index + 1) & ODITHER_MASK;
 8015e62:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8015e64:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8015e66:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 8015e6a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 8015e6e:	e7e2      	b.n	8015e36 <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 8015e70:	f8d8 2018 	ldr.w	r2, [r8, #24]
      col_index = 0;
 8015e74:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 8015e76:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 8015e7a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8015e7e:	6825      	ldr	r5, [r4, #0]
      input_ptr = input_buf[row] + ci;
 8015e80:	4401      	add	r1, r0
      colorindex_ci = cquantize->colorindex[ci];
 8015e82:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8015e84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015e88:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 8015e8a:	eb0a 0205 	add.w	r2, sl, r5
 8015e8e:	9206      	str	r2, [sp, #24]
 8015e90:	9a06      	ldr	r2, [sp, #24]
 8015e92:	4295      	cmp	r5, r2
 8015e94:	d101      	bne.n	8015e9a <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8015e96:	3001      	adds	r0, #1
 8015e98:	e7e0      	b.n	8015e5c <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015e9a:	782a      	ldrb	r2, [r5, #0]
 8015e9c:	f891 e000 	ldrb.w	lr, [r1]
 8015ea0:	9204      	str	r2, [sp, #16]
 8015ea2:	9a02      	ldr	r2, [sp, #8]
 8015ea4:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8015ea8:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015eaa:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015eac:	f85b b002 	ldr.w	fp, [fp, r2]
 8015eb0:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015eb2:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015eb6:	4496      	add	lr, r2
 8015eb8:	9a04      	ldr	r2, [sp, #16]
 8015eba:	f81e e00b 	ldrb.w	lr, [lr, fp]
 8015ebe:	4472      	add	r2, lr
 8015ec0:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 8015ec4:	9a01      	ldr	r2, [sp, #4]
 8015ec6:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 8015ec8:	e7e2      	b.n	8015e90 <quantize_ord_dither+0x74>
	...

08015ecc <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015ecc:	6843      	ldr	r3, [r0, #4]
 8015ece:	2258      	movs	r2, #88	; 0x58
 8015ed0:	2101      	movs	r1, #1
 8015ed2:	681b      	ldr	r3, [r3, #0]
{
 8015ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed8:	b085      	sub	sp, #20
 8015eda:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015edc:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 8015ede:	4b67      	ldr	r3, [pc, #412]	; (801607c <jinit_1pass_quantizer+0x1b0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8015ee0:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8015ee4:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8015ee6:	4b66      	ldr	r3, [pc, #408]	; (8016080 <jinit_1pass_quantizer+0x1b4>)
 8015ee8:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 8015eea:	4b66      	ldr	r3, [pc, #408]	; (8016084 <jinit_1pass_quantizer+0x1b8>)
 8015eec:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8015eee:	2300      	movs	r3, #0
 8015ef0:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8015ef2:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8015ef4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015ef6:	2b04      	cmp	r3, #4
 8015ef8:	dd07      	ble.n	8015f0a <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 8015efa:	6823      	ldr	r3, [r4, #0]
 8015efc:	2039      	movs	r0, #57	; 0x39
 8015efe:	2204      	movs	r2, #4
 8015f00:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	4620      	mov	r0, r4
 8015f08:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 8015f0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8015f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f10:	dd08      	ble.n	8015f24 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8015f12:	6823      	ldr	r3, [r4, #0]
 8015f14:	213b      	movs	r1, #59	; 0x3b
 8015f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015f1a:	4620      	mov	r0, r4
 8015f1c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015f24:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 8015f28:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 8015f2a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 8015f2e:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 8015f32:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 8015f36:	469a      	mov	sl, r3
 8015f38:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 8015f3a:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 8015f3c:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 8015f3e:	4588      	cmp	r8, r1
 8015f40:	dc47      	bgt.n	8015fd2 <jinit_1pass_quantizer+0x106>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8015f42:	4591      	cmp	r9, r2
 8015f44:	daf7      	bge.n	8015f36 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 8015f46:	f1ba 0f01 	cmp.w	sl, #1
 8015f4a:	d106      	bne.n	8015f5a <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 8015f4c:	6823      	ldr	r3, [r4, #0]
 8015f4e:	213a      	movs	r1, #58	; 0x3a
 8015f50:	4620      	mov	r0, r4
 8015f52:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	4798      	blx	r3
    for (i = 1; i < nc; i++)
 8015f5a:	463a      	mov	r2, r7
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	2501      	movs	r5, #1
 8015f60:	9701      	str	r7, [sp, #4]
  for (i = 0; i < nc; i++) {
 8015f62:	4598      	cmp	r8, r3
 8015f64:	dc38      	bgt.n	8015fd8 <jinit_1pass_quantizer+0x10c>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015f66:	f8df c120 	ldr.w	ip, [pc, #288]	; 8016088 <jinit_1pass_quantizer+0x1bc>
    changed = FALSE;
 8015f6a:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 8015f6c:	460b      	mov	r3, r1
 8015f6e:	4598      	cmp	r8, r3
 8015f70:	dc38      	bgt.n	8015fe4 <jinit_1pass_quantizer+0x118>
  } while (changed);
 8015f72:	2900      	cmp	r1, #0
 8015f74:	d1f9      	bne.n	8015f6a <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 8015f76:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015f78:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 8015f7a:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015f7c:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 8015f7e:	d148      	bne.n	8016012 <jinit_1pass_quantizer+0x146>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015f80:	619d      	str	r5, [r3, #24]
 8015f82:	6a31      	ldr	r1, [r6, #32]
 8015f84:	61d9      	str	r1, [r3, #28]
 8015f86:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8015f88:	6219      	str	r1, [r3, #32]
 8015f8a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8015f8c:	6259      	str	r1, [r3, #36]	; 0x24
 8015f8e:	2160      	movs	r1, #96	; 0x60
 8015f90:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015f92:	2101      	movs	r1, #1
 8015f94:	4620      	mov	r0, r4
 8015f96:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8015f98:	6863      	ldr	r3, [r4, #4]
 8015f9a:	462a      	mov	r2, r5
 8015f9c:	2101      	movs	r1, #1
 8015f9e:	689f      	ldr	r7, [r3, #8]
 8015fa0:	4620      	mov	r0, r4
 8015fa2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015fa4:	47b8      	blx	r7
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015fa6:	46ae      	mov	lr, r5
 8015fa8:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 8015faa:	9002      	str	r0, [sp, #8]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015fac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	db33      	blt.n	801601a <jinit_1pass_quantizer+0x14e>
  cquantize->sv_colormap = colormap;
 8015fb2:	9b02      	ldr	r3, [sp, #8]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8015fb4:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 8015fb6:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 8015fba:	f7ff fccb 	bl	8015954 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 8015fbe:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8015fc2:	2b02      	cmp	r3, #2
 8015fc4:	d156      	bne.n	8016074 <jinit_1pass_quantizer+0x1a8>
    alloc_fs_workspace(cinfo);
 8015fc6:	4620      	mov	r0, r4
}
 8015fc8:	b005      	add	sp, #20
 8015fca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 8015fce:	f7ff bdd0 	b.w	8015b72 <alloc_fs_workspace>
      temp *= iroot;
 8015fd2:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 8015fd4:	3101      	adds	r1, #1
 8015fd6:	e7b2      	b.n	8015f3e <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 8015fd8:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 8015fdc:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 8015fde:	f842 ab04 	str.w	sl, [r2], #4
  for (i = 0; i < nc; i++) {
 8015fe2:	e7be      	b.n	8015f62 <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015fe4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8015fe8:	2a02      	cmp	r2, #2
 8015fea:	bf0c      	ite	eq
 8015fec:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 8015ff0:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 8015ff2:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
 8015ff6:	fb95 f2fa 	sdiv	r2, r5, sl
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 8015ffa:	fb0a 2202 	mla	r2, sl, r2, r2
 8015ffe:	f10a 0e01 	add.w	lr, sl, #1
      if (temp > (long) max_colors)
 8016002:	4591      	cmp	r9, r2
 8016004:	dbb5      	blt.n	8015f72 <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 8016006:	3301      	adds	r3, #1
 8016008:	4615      	mov	r5, r2
      changed = TRUE;
 801600a:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 801600c:	f847 e020 	str.w	lr, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8016010:	e7ad      	b.n	8015f6e <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8016012:	2161      	movs	r1, #97	; 0x61
 8016014:	e9c3 1505 	strd	r1, r5, [r3, #20]
 8016018:	e7bb      	b.n	8015f92 <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801601a:	9b01      	ldr	r3, [sp, #4]
 801601c:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 8016020:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8016024:	9301      	str	r3, [sp, #4]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8016026:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 801602a:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801602e:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8016030:	2300      	movs	r3, #0
 8016032:	469a      	mov	sl, r3
 8016034:	4599      	cmp	r9, r3
 8016036:	dc02      	bgt.n	801603e <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016038:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 801603a:	46c6      	mov	lr, r8
 801603c:	e7b6      	b.n	8015fac <jinit_1pass_quantizer+0xe0>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801603e:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8016042:	9f03      	ldr	r7, [sp, #12]
 8016044:	4439      	add	r1, r7
 8016046:	fb91 f1fb 	sdiv	r1, r1, fp
 801604a:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801604c:	4651      	mov	r1, sl
 801604e:	42a9      	cmp	r1, r5
 8016050:	db0d      	blt.n	801606e <jinit_1pass_quantizer+0x1a2>
    for (j = 0; j < nci; j++) {
 8016052:	3301      	adds	r3, #1
 8016054:	44c2      	add	sl, r8
 8016056:	e7ed      	b.n	8016034 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8016058:	9f02      	ldr	r7, [sp, #8]
 801605a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801605e:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 8016060:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8016064:	5478      	strb	r0, [r7, r1]
	for (k = 0; k < blksize; k++)
 8016066:	45e0      	cmp	r8, ip
 8016068:	dcf6      	bgt.n	8016058 <jinit_1pass_quantizer+0x18c>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801606a:	4471      	add	r1, lr
 801606c:	e7ef      	b.n	801604e <jinit_1pass_quantizer+0x182>
	for (k = 0; k < blksize; k++)
 801606e:	f04f 0c00 	mov.w	ip, #0
 8016072:	e7f8      	b.n	8016066 <jinit_1pass_quantizer+0x19a>
}
 8016074:	b005      	add	sp, #20
 8016076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801607a:	bf00      	nop
 801607c:	08015bad 	.word	0x08015bad
 8016080:	08015ba1 	.word	0x08015ba1
 8016084:	08015ba3 	.word	0x08015ba3
 8016088:	0802f8fc 	.word	0x0802f8fc

0801608c <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 801608c:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
{
 8016090:	b5f0      	push	{r4, r5, r6, r7, lr}
  register hist3d histogram = cquantize->histogram;
 8016092:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8016096:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 8016098:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  for (row = 0; row < num_rows; row++) {
 801609c:	429c      	cmp	r4, r3
 801609e:	db00      	blt.n	80160a2 <prescan_quantize+0x16>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 80160a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (col = width; col > 0; col--) {
 80160a2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 80160a6:	4677      	mov	r7, lr
 80160a8:	3203      	adds	r2, #3
 80160aa:	b90f      	cbnz	r7, 80160b0 <prescan_quantize+0x24>
  for (row = 0; row < num_rows; row++) {
 80160ac:	3401      	adds	r4, #1
 80160ae:	e7f5      	b.n	801609c <prescan_quantize+0x10>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80160b0:	f812 6c03 	ldrb.w	r6, [r2, #-3]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80160b4:	f812 5c02 	ldrb.w	r5, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80160b8:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80160ba:	08a8      	lsrs	r0, r5, #2
 80160bc:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 80160c0:	f812 6c01 	ldrb.w	r6, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80160c4:	eb05 1580 	add.w	r5, r5, r0, lsl #6
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 80160c8:	08f6      	lsrs	r6, r6, #3
      if (++(*histp) <= 0)
 80160ca:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
 80160ce:	3001      	adds	r0, #1
 80160d0:	b280      	uxth	r0, r0
 80160d2:	b108      	cbz	r0, 80160d8 <prescan_quantize+0x4c>
 80160d4:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 80160d8:	3f01      	subs	r7, #1
 80160da:	3203      	adds	r2, #3
 80160dc:	e7e5      	b.n	80160aa <prescan_quantize+0x1e>

080160de <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 80160de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e2:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  minmaxdist = 0x7FFFFFFFL;
 80160e6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 80160ea:	2500      	movs	r5, #0
{
 80160ec:	930a      	str	r3, [sp, #40]	; 0x28
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 80160ee:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 80160f2:	9000      	str	r0, [sp, #0]
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 80160f4:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 80160f6:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 80160f8:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 80160fa:	9305      	str	r3, [sp, #20]
  c2 >>= BOX_C2_LOG;
 80160fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 80160fe:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8016102:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 8016104:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 8016106:	9b00      	ldr	r3, [sp, #0]
  centerc1 = (minc1 + maxc1) >> 1;
 8016108:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 801610c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8016110:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 8016112:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 8016116:	9301      	str	r3, [sp, #4]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8016118:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 801611c:	341c      	adds	r4, #28
{
 801611e:	e9cd 1208 	strd	r1, r2, [sp, #32]
  c0 >>= BOX_C0_LOG;
 8016122:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8016124:	0149      	lsls	r1, r1, #5
 8016126:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 801612a:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 801612c:	eb09 0301 	add.w	r3, r9, r1
 8016130:	105b      	asrs	r3, r3, #1
 8016132:	9302      	str	r3, [sp, #8]
  centerc2 = (minc2 + maxc2) >> 1;
 8016134:	eb08 0304 	add.w	r3, r8, r4
 8016138:	105b      	asrs	r3, r3, #1
 801613a:	9303      	str	r3, [sp, #12]
  for (i = 0; i < numcolors; i++) {
 801613c:	9b01      	ldr	r3, [sp, #4]
 801613e:	42ab      	cmp	r3, r5
 8016140:	dc43      	bgt.n	80161ca <fill_inverse_cmap+0xec>
  ncolors = 0;
 8016142:	2200      	movs	r2, #0
 8016144:	a970      	add	r1, sp, #448	; 0x1c0
      colorlist[ncolors++] = (JSAMPLE) i;
 8016146:	a830      	add	r0, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8016148:	4613      	mov	r3, r2
 801614a:	9c01      	ldr	r4, [sp, #4]
 801614c:	429c      	cmp	r4, r3
 801614e:	f300 809c 	bgt.w	801628a <fill_inverse_cmap+0x1ac>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016152:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 8016154:	a970      	add	r1, sp, #448	; 0x1c0
    *bptr++ = 0x7FFFFFFFL;
 8016156:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 801615a:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 801615c:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016160:	d1fb      	bne.n	801615a <fill_inverse_cmap+0x7c>
 8016162:	a930      	add	r1, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8016164:	469b      	mov	fp, r3
 8016166:	9107      	str	r1, [sp, #28]
 8016168:	4593      	cmp	fp, r2
 801616a:	f040 8096 	bne.w	801629a <fill_inverse_cmap+0x1bc>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 801616e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  cptr = bestcolor;
 8016170:	aa10      	add	r2, sp, #64	; 0x40
  c2 <<= BOX_C2_LOG;
 8016172:	f023 0003 	bic.w	r0, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8016176:	9b08      	ldr	r3, [sp, #32]
 8016178:	f023 0103 	bic.w	r1, r3, #3
 801617c:	9b05      	ldr	r3, [sp, #20]
 801617e:	eb03 0581 	add.w	r5, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 8016182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016184:	f023 0307 	bic.w	r3, r3, #7
 8016188:	4629      	mov	r1, r5
 801618a:	019b      	lsls	r3, r3, #6
 801618c:	3110      	adds	r1, #16
 801618e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8016192:	f855 4b04 	ldr.w	r4, [r5], #4
 8016196:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8016198:	f102 0720 	add.w	r7, r2, #32
 801619c:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 801619e:	4626      	mov	r6, r4
 80161a0:	4602      	mov	r2, r0
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80161a2:	f100 0c04 	add.w	ip, r0, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80161a6:	f812 0b01 	ldrb.w	r0, [r2], #1
 80161aa:	3001      	adds	r0, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80161ac:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80161ae:	f826 0b02 	strh.w	r0, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80161b2:	d1f8      	bne.n	80161a6 <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80161b4:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80161b6:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80161b8:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80161bc:	d1ef      	bne.n	801619e <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 80161be:	428d      	cmp	r5, r1
 80161c0:	d1e7      	bne.n	8016192 <fill_inverse_cmap+0xb4>
      }
    }
  }
}
 80161c2:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 80161c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 80161ca:	9b00      	ldr	r3, [sp, #0]
 80161cc:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 80161d4:	4591      	cmp	r9, r2
 80161d6:	dd2a      	ble.n	801622e <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 80161d8:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 80161dc:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 80161de:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 80161e2:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 80161e8:	459a      	cmp	sl, r3
 80161ea:	dd33      	ble.n	8016254 <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 80161ec:	eba3 0e0a 	sub.w	lr, r3, sl
 80161f0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 80161f4:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 80161f8:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 80161fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 80161fe:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 8016206:	4598      	cmp	r8, r3
 8016208:	dd32      	ble.n	8016270 <fill_inverse_cmap+0x192>
      tdist = (x - minc2) * C2_SCALE;
 801620a:	eba3 0708 	sub.w	r7, r3, r8
 801620e:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8016210:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8016214:	1b1b      	subs	r3, r3, r4
	tdist = (x - minc2) * C2_SCALE;
 8016216:	005b      	lsls	r3, r3, #1
	max_dist += tdist*tdist;
 8016218:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 801621c:	aa70      	add	r2, sp, #448	; 0x1c0
 801621e:	429e      	cmp	r6, r3
 8016220:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8016224:	f105 0501 	add.w	r5, r5, #1
 8016228:	bfa8      	it	ge
 801622a:	461e      	movge	r6, r3
 801622c:	e786      	b.n	801613c <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 801622e:	4291      	cmp	r1, r2
 8016230:	da06      	bge.n	8016240 <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 8016232:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8016236:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 801623a:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 801623e:	e7d0      	b.n	80161e2 <fill_inverse_cmap+0x104>
      if (x <= centerc0) {
 8016240:	9b02      	ldr	r3, [sp, #8]
      min_dist = 0;
 8016242:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8016246:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8016248:	bfac      	ite	ge
 801624a:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 801624c:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8016250:	4352      	muls	r2, r2
 8016252:	e7c7      	b.n	80161e4 <fill_inverse_cmap+0x106>
    } else if (x > maxc1) {
 8016254:	4298      	cmp	r0, r3
 8016256:	da08      	bge.n	801626a <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 8016258:	eba3 0e00 	sub.w	lr, r3, r0
 801625c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8016260:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8016264:	eba3 030a 	sub.w	r3, r3, sl
 8016268:	e7c7      	b.n	80161fa <fill_inverse_cmap+0x11c>
      if (x <= centerc1) {
 801626a:	459b      	cmp	fp, r3
 801626c:	dbfa      	blt.n	8016264 <fill_inverse_cmap+0x186>
 801626e:	e7c3      	b.n	80161f8 <fill_inverse_cmap+0x11a>
    } else if (x > maxc2) {
 8016270:	429c      	cmp	r4, r3
 8016272:	da06      	bge.n	8016282 <fill_inverse_cmap+0x1a4>
      tdist = (x - maxc2) * C2_SCALE;
 8016274:	1b1f      	subs	r7, r3, r4
 8016276:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8016278:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 801627c:	eba3 0308 	sub.w	r3, r3, r8
 8016280:	e7c9      	b.n	8016216 <fill_inverse_cmap+0x138>
      if (x <= centerc2) {
 8016282:	9f03      	ldr	r7, [sp, #12]
 8016284:	429f      	cmp	r7, r3
 8016286:	dbf9      	blt.n	801627c <fill_inverse_cmap+0x19e>
 8016288:	e7c4      	b.n	8016214 <fill_inverse_cmap+0x136>
    if (mindist[i] <= minmaxdist)
 801628a:	f851 4b04 	ldr.w	r4, [r1], #4
 801628e:	42a6      	cmp	r6, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 8016290:	bfa4      	itt	ge
 8016292:	5483      	strbge	r3, [r0, r2]
 8016294:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8016296:	3301      	adds	r3, #1
 8016298:	e757      	b.n	801614a <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 801629a:	9b07      	ldr	r3, [sp, #28]
 801629c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80162a0:	9307      	str	r3, [sp, #28]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80162a2:	9b00      	ldr	r3, [sp, #0]
 80162a4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80162a8:	680b      	ldr	r3, [r1, #0]
 80162aa:	5d98      	ldrb	r0, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80162ac:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80162ae:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80162b0:	eba9 0000 	sub.w	r0, r9, r0
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80162b4:	5d9b      	ldrb	r3, [r3, r6]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80162b6:	5d89      	ldrb	r1, [r1, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80162b8:	ebaa 0303 	sub.w	r3, sl, r3
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80162bc:	eba8 0101 	sub.w	r1, r8, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80162c0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80162c4:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 80162c6:	4364      	muls	r4, r4
 80162c8:	fb00 4400 	mla	r4, r0, r0, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 80162cc:	3004      	adds	r0, #4
 80162ce:	0100      	lsls	r0, r0, #4
    dist0 += inc2*inc2;
 80162d0:	fb01 4401 	mla	r4, r1, r1, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80162d4:	3108      	adds	r1, #8
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 80162d6:	900b      	str	r0, [sp, #44]	; 0x2c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80162d8:	2048      	movs	r0, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80162da:	0149      	lsls	r1, r1, #5
    dist0 += inc2*inc2;
 80162dc:	9402      	str	r4, [sp, #8]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80162de:	4343      	muls	r3, r0
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80162e0:	9106      	str	r1, [sp, #24]
 80162e2:	2100      	movs	r1, #0
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80162e4:	f103 0090 	add.w	r0, r3, #144	; 0x90
 80162e8:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 80162ec:	930e      	str	r3, [sp, #56]	; 0x38
 80162ee:	9b06      	ldr	r3, [sp, #24]
 80162f0:	900c      	str	r0, [sp, #48]	; 0x30
    cptr = bestcolor;
 80162f2:	a810      	add	r0, sp, #64	; 0x40
 80162f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162f8:	9003      	str	r0, [sp, #12]
 80162fa:	930d      	str	r3, [sp, #52]	; 0x34
 80162fc:	ab70      	add	r3, sp, #448	; 0x1c0
      xx1 = inc1;
 80162fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016300:	eb03 0c01 	add.w	ip, r3, r1
 8016304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016306:	440b      	add	r3, r1
 8016308:	930f      	str	r3, [sp, #60]	; 0x3c
	xx2 = inc2;
 801630a:	9b03      	ldr	r3, [sp, #12]
 801630c:	9304      	str	r3, [sp, #16]
      xx1 = inc1;
 801630e:	9b02      	ldr	r3, [sp, #8]
 8016310:	9301      	str	r3, [sp, #4]
 8016312:	e01c      	b.n	801634e <fill_inverse_cmap+0x270>
	  if (dist2 < *bptr) {
 8016314:	f853 7f04 	ldr.w	r7, [r3, #4]!
	  cptr++;
 8016318:	f10e 0e01 	add.w	lr, lr, #1
	  if (dist2 < *bptr) {
 801631c:	42a7      	cmp	r7, r4
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 801631e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	    *bptr = dist2;
 8016320:	bfc8      	it	gt
 8016322:	601c      	strgt	r4, [r3, #0]
	  dist2 += xx2;
 8016324:	442c      	add	r4, r5
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8016326:	f505 7500 	add.w	r5, r5, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 801632a:	bfc8      	it	gt
 801632c:	f80e 6c01 	strbgt.w	r6, [lr, #-1]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8016330:	42af      	cmp	r7, r5
 8016332:	d1ef      	bne.n	8016314 <fill_inverse_cmap+0x236>
	  cptr++;
 8016334:	9b04      	ldr	r3, [sp, #16]
	  bptr++;
 8016336:	f10c 0c10 	add.w	ip, ip, #16
	  cptr++;
 801633a:	3304      	adds	r3, #4
 801633c:	9304      	str	r3, [sp, #16]
	dist1 += xx1;
 801633e:	9b01      	ldr	r3, [sp, #4]
 8016340:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8016342:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 8016346:	9301      	str	r3, [sp, #4]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8016348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801634a:	4298      	cmp	r0, r3
 801634c:	d006      	beq.n	801635c <fill_inverse_cmap+0x27e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 801634e:	f1ac 0304 	sub.w	r3, ip, #4
	xx2 = inc2;
 8016352:	9d06      	ldr	r5, [sp, #24]
 8016354:	f8dd e010 	ldr.w	lr, [sp, #16]
 8016358:	9c01      	ldr	r4, [sp, #4]
 801635a:	e7db      	b.n	8016314 <fill_inverse_cmap+0x236>
	  cptr++;
 801635c:	9b03      	ldr	r3, [sp, #12]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 801635e:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 8016360:	980f      	ldr	r0, [sp, #60]	; 0x3c
	  cptr++;
 8016362:	3320      	adds	r3, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8016364:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	  cptr++;
 8016368:	9303      	str	r3, [sp, #12]
      dist0 += xx0;
 801636a:	9b02      	ldr	r3, [sp, #8]
 801636c:	4403      	add	r3, r0
 801636e:	9302      	str	r3, [sp, #8]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8016370:	d1c4      	bne.n	80162fc <fill_inverse_cmap+0x21e>
  for (i = 0; i < numcolors; i++) {
 8016372:	f10b 0b01 	add.w	fp, fp, #1
 8016376:	e6f7      	b.n	8016168 <fill_inverse_cmap+0x8a>

08016378 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8016378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801637c:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 801637e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8016382:	b085      	sub	sp, #20
 8016384:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 8016386:	699b      	ldr	r3, [r3, #24]
{
 8016388:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 801638a:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 801638c:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 801638e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8016390:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8016392:	4555      	cmp	r5, sl
 8016394:	db02      	blt.n	801639c <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 8016396:	b005      	add	sp, #20
 8016398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 801639c:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 80163a0:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 80163a4:	9b01      	ldr	r3, [sp, #4]
 80163a6:	3403      	adds	r4, #3
 80163a8:	eb06 0b03 	add.w	fp, r6, r3
 80163ac:	455e      	cmp	r6, fp
 80163ae:	d101      	bne.n	80163b4 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 80163b0:	3501      	adds	r5, #1
 80163b2:	e7ee      	b.n	8016392 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80163b4:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80163b8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80163bc:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 80163c0:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80163c2:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80163c6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 80163ca:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80163ce:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 80163d0:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 80163d4:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 80163d8:	f1bc 0f00 	cmp.w	ip, #0
 80163dc:	d106      	bne.n	80163ec <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 80163de:	4672      	mov	r2, lr
 80163e0:	9303      	str	r3, [sp, #12]
 80163e2:	9002      	str	r0, [sp, #8]
 80163e4:	f7ff fe7b 	bl	80160de <fill_inverse_cmap>
 80163e8:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 80163ec:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80163f0:	3403      	adds	r4, #3
 80163f2:	3b01      	subs	r3, #1
 80163f4:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 80163f8:	e7d8      	b.n	80163ac <pass2_no_dither+0x34>

080163fa <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 80163fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80163fe:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
{
 8016402:	b09f      	sub	sp, #124	; 0x7c
 8016404:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 8016406:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801640a:	9315      	str	r3, [sp, #84]	; 0x54
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801640c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801640e:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8016410:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8016414:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 8016416:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 801641a:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 801641c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8016420:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 8016424:	681a      	ldr	r2, [r3, #0]
 8016426:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 8016428:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 801642a:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 801642c:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 801642e:	9318      	str	r3, [sp, #96]	; 0x60
  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016430:	9b05      	ldr	r3, [sp, #20]
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016432:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016434:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016438:	3b03      	subs	r3, #3
 801643a:	9310      	str	r3, [sp, #64]	; 0x40
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801643c:	2306      	movs	r3, #6
 801643e:	fb02 3303 	mla	r3, r2, r3, r3
 8016442:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 8016444:	2300      	movs	r3, #0
 8016446:	9304      	str	r3, [sp, #16]
 8016448:	9b04      	ldr	r3, [sp, #16]
 801644a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801644c:	4293      	cmp	r3, r2
 801644e:	db02      	blt.n	8016456 <pass2_fs_dither+0x5c>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 8016450:	b01f      	add	sp, #124	; 0x7c
 8016452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8016456:	9a04      	ldr	r2, [sp, #16]
 8016458:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801645a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801645e:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 8016460:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016466:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016468:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801646c:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 801646e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8016472:	2b00      	cmp	r3, #0
 8016474:	d036      	beq.n	80164e4 <pass2_fs_dither+0xea>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016476:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016478:	9a01      	ldr	r2, [sp, #4]
 801647a:	441a      	add	r2, r3
      outptr += width-1;
 801647c:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 801647e:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 8016480:	3b01      	subs	r3, #1
 8016482:	9a03      	ldr	r2, [sp, #12]
 8016484:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016486:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 8016488:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801648a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801648c:	4413      	add	r3, r2
      dir3 = -3;
 801648e:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016492:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8016494:	2300      	movs	r3, #0
      dir3 = -3;
 8016496:	9208      	str	r2, [sp, #32]
      dir = -1;
 8016498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801649c:	920f      	str	r2, [sp, #60]	; 0x3c
 801649e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80164a2:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80164a4:	9b08      	ldr	r3, [sp, #32]
 80164a6:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 80164a8:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80164aa:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 80164ac:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 80164ae:	940c      	str	r4, [sp, #48]	; 0x30
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80164b0:	1cab      	adds	r3, r5, #2
 80164b2:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 80164b4:	1d2b      	adds	r3, r5, #4
 80164b6:	9314      	str	r3, [sp, #80]	; 0x50
    for (col = width; col > 0; col--) {
 80164b8:	9b05      	ldr	r3, [sp, #20]
 80164ba:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 80164bc:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80164be:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 80164c2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 80164c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80164c8:	b98f      	cbnz	r7, 80164ee <pass2_fs_dither+0xf4>
 80164ca:	9b05      	ldr	r3, [sp, #20]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 80164cc:	9a02      	ldr	r2, [sp, #8]
 80164ce:	435d      	muls	r5, r3
 80164d0:	9906      	ldr	r1, [sp, #24]
 80164d2:	9b02      	ldr	r3, [sp, #8]
 80164d4:	5351      	strh	r1, [r2, r5]
 80164d6:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 80164d8:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 80164da:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 80164dc:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 80164de:	9b04      	ldr	r3, [sp, #16]
 80164e0:	3301      	adds	r3, #1
 80164e2:	e7b0      	b.n	8016446 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 80164e4:	2301      	movs	r3, #1
      dir3 = 3;
 80164e6:	2203      	movs	r2, #3
      dir = 1;
 80164e8:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 80164ea:	9208      	str	r2, [sp, #32]
 80164ec:	e7d7      	b.n	801649e <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80164ee:	f936 c005 	ldrsh.w	ip, [r6, r5]
 80164f2:	1977      	adds	r7, r6, r5
 80164f4:	4463      	add	r3, ip
 80164f6:	9711      	str	r7, [sp, #68]	; 0x44
      cur0 = error_limit[cur0];
 80164f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80164fa:	f103 0c08 	add.w	ip, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80164fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016500:	5ef3      	ldrsh	r3, [r6, r3]
 8016502:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016504:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016506:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016508:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801650a:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 801650c:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801650e:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016512:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8016514:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8016518:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801651c:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 801651e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 8016522:	9f01      	ldr	r7, [sp, #4]
 8016524:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8016528:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801652a:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 801652c:	443a      	add	r2, r7
      cur2 = GETJSAMPLE(range_limit[cur2]);
 801652e:	443b      	add	r3, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8016530:	f811 b00c 	ldrb.w	fp, [r1, ip]
      cur1 += GETJSAMPLE(inptr[1]);
 8016534:	9901      	ldr	r1, [sp, #4]
 8016536:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8016538:	f812 a001 	ldrb.w	sl, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 801653c:	ea4f 01eb 	mov.w	r1, fp, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 8016540:	9a01      	ldr	r2, [sp, #4]
 8016542:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8016544:	f813 9002 	ldrb.w	r9, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8016548:	ea4f 02aa 	mov.w	r2, sl, asr #2
 801654c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801654e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016552:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8016556:	461f      	mov	r7, r3
 8016558:	ea4f 03e9 	mov.w	r3, r9, asr #3
      if (*cachep == 0)
 801655c:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8016560:	f1bc 0f00 	cmp.w	ip, #0
 8016564:	d105      	bne.n	8016572 <pass2_fs_dither+0x178>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 8016566:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 801656a:	f7ff fdb8 	bl	80160de <fill_inverse_cmap>
 801656e:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 8016572:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 8016576:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 8016578:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 801657a:	9907      	ldr	r1, [sp, #28]
      inptr += dir3;		/* Advance pixel pointers to next column */
 801657c:	9f01      	ldr	r7, [sp, #4]
	*outptr = (JSAMPLE) pixcode;
 801657e:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8016580:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016582:	5cd2      	ldrb	r2, [r2, r3]
 8016584:	ebab 0b02 	sub.w	fp, fp, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8016588:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801658a:	5cd2      	ldrb	r2, [r2, r3]
 801658c:	ebaa 0a02 	sub.w	sl, sl, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8016590:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016592:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8016594:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8016596:	eba9 0903 	sub.w	r9, r9, r3
	cur0 += delta;		/* form error * 3 */
 801659a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 801659e:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 80165a0:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80165a4:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 80165a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 80165a8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 80165ac:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 80165ae:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	bpreverr0 = belowerr0 + cur0;
 80165b2:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 80165b4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80165b8:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 80165ba:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80165be:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 80165c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80165c2:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 80165c4:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	bpreverr1 = belowerr1 + cur1;
 80165c8:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 80165ca:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 80165ce:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 80165d0:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 80165d4:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 80165d6:	9e08      	ldr	r6, [sp, #32]
	bpreverr2 = belowerr2 + cur2;
 80165d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 80165da:	4437      	add	r7, r6
      outptr += dir;
 80165dc:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 80165de:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 80165e0:	eb01 0149 	add.w	r1, r1, r9, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 80165e4:	9701      	str	r7, [sp, #4]
      outptr += dir;
 80165e6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80165e8:	443e      	add	r6, r7
 80165ea:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 80165ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80165ee:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 80165f0:	e9cd a90d 	strd	sl, r9, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 80165f4:	9609      	str	r6, [sp, #36]	; 0x24
 80165f6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80165f8:	e765      	b.n	80164c6 <pass2_fs_dither+0xcc>

080165fa <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 80165fa:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 80165fc:	6843      	ldr	r3, [r0, #4]
 80165fe:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8016602:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016604:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 801660c:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 8016610:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 8016614:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 8016618:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 801661a:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 801661c:	425c      	negs	r4, r3
 801661e:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016622:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 8016624:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016628:	2b10      	cmp	r3, #16
 801662a:	d1f7      	bne.n	801661c <init_error_limit+0x22>
 801662c:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 8016630:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8016634:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 8016638:	425d      	negs	r5, r3
 801663a:	f844 3f04 	str.w	r3, [r4, #4]!
 801663e:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8016642:	f002 0501 	and.w	r5, r2, #1
 8016646:	3a01      	subs	r2, #1
 8016648:	442b      	add	r3, r5
 801664a:	f112 0f32 	cmn.w	r2, #50	; 0x32
 801664e:	d1f3      	bne.n	8016638 <init_error_limit+0x3e>
 8016650:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 8016654:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 8016658:	425c      	negs	r4, r3
 801665a:	f841 3f04 	str.w	r3, [r1, #4]!
 801665e:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 8016662:	4282      	cmp	r2, r0
 8016664:	d1f9      	bne.n	801665a <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 8016666:	bd38      	pop	{r3, r4, r5, pc}

08016668 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 8016668:	4770      	bx	lr

0801666a <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 801666a:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 801666e:	2201      	movs	r2, #1
 8016670:	61da      	str	r2, [r3, #28]
}
 8016672:	4770      	bx	lr

08016674 <start_pass_2_quant>:
{
 8016674:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016676:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 801667a:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 801667c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 8016680:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 8016682:	2b00      	cmp	r3, #0
 8016684:	d050      	beq.n	8016728 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 8016686:	2302      	movs	r3, #2
 8016688:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 801668c:	b189      	cbz	r1, 80166b2 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 801668e:	4b28      	ldr	r3, [pc, #160]	; (8016730 <start_pass_2_quant+0xbc>)
 8016690:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8016692:	4b28      	ldr	r3, [pc, #160]	; (8016734 <start_pass_2_quant+0xc0>)
 8016694:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 8016696:	1f34      	subs	r4, r6, #4
 8016698:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 801669a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801669e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80166a2:	2100      	movs	r1, #0
 80166a4:	f014 f866 	bl	802a774 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 80166a8:	42a6      	cmp	r6, r4
 80166aa:	d1f6      	bne.n	801669a <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 80166ac:	2300      	movs	r3, #0
 80166ae:	61eb      	str	r3, [r5, #28]
}
 80166b0:	e02f      	b.n	8016712 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 80166b2:	4b21      	ldr	r3, [pc, #132]	; (8016738 <start_pass_2_quant+0xc4>)
 80166b4:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 80166b6:	4b21      	ldr	r3, [pc, #132]	; (801673c <start_pass_2_quant+0xc8>)
 80166b8:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 80166ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 80166be:	2b00      	cmp	r3, #0
 80166c0:	dc29      	bgt.n	8016716 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 80166c2:	223a      	movs	r2, #58	; 0x3a
 80166c4:	6823      	ldr	r3, [r4, #0]
 80166c6:	615a      	str	r2, [r3, #20]
 80166c8:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80166ca:	619a      	str	r2, [r3, #24]
 80166cc:	4620      	mov	r0, r4
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 80166d2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80166d6:	2b02      	cmp	r3, #2
 80166d8:	d118      	bne.n	801670c <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 80166da:	2306      	movs	r3, #6
 80166dc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80166de:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 80166e0:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 80166e2:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 80166e4:	b93b      	cbnz	r3, 80166f6 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80166e6:	6863      	ldr	r3, [r4, #4]
 80166e8:	2101      	movs	r1, #1
 80166ea:	4620      	mov	r0, r4
 80166ec:	9201      	str	r2, [sp, #4]
 80166ee:	685b      	ldr	r3, [r3, #4]
 80166f0:	4798      	blx	r3
 80166f2:	9a01      	ldr	r2, [sp, #4]
 80166f4:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 80166f6:	2100      	movs	r1, #0
 80166f8:	6a28      	ldr	r0, [r5, #32]
 80166fa:	f014 f83b 	bl	802a774 <memset>
      if (cquantize->error_limiter == NULL)
 80166fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016700:	b913      	cbnz	r3, 8016708 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8016702:	4620      	mov	r0, r4
 8016704:	f7ff ff79 	bl	80165fa <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8016708:	2300      	movs	r3, #0
 801670a:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 801670c:	69eb      	ldr	r3, [r5, #28]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d1c1      	bne.n	8016696 <start_pass_2_quant+0x22>
}
 8016712:	b002      	add	sp, #8
 8016714:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 8016716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801671a:	ddda      	ble.n	80166d2 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801671c:	223b      	movs	r2, #59	; 0x3b
 801671e:	6823      	ldr	r3, [r4, #0]
 8016720:	615a      	str	r2, [r3, #20]
 8016722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016726:	e7d0      	b.n	80166ca <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 8016728:	2900      	cmp	r1, #0
 801672a:	d1b0      	bne.n	801668e <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 801672c:	4b04      	ldr	r3, [pc, #16]	; (8016740 <start_pass_2_quant+0xcc>)
 801672e:	e7c1      	b.n	80166b4 <start_pass_2_quant+0x40>
 8016730:	0801608d 	.word	0x0801608d
 8016734:	08016983 	.word	0x08016983
 8016738:	080163fb 	.word	0x080163fb
 801673c:	08016669 	.word	0x08016669
 8016740:	08016379 	.word	0x08016379

08016744 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 8016744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8016748:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 801674c:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 801674e:	b085      	sub	sp, #20
  if (c0max > c0min)
 8016750:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 8016752:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016754:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016756:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801675a:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 801675e:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8016762:	db24      	blt.n	80167ae <update_box.isra.0+0x6a>
  if (c1max > c1min)
 8016764:	4584      	cmp	ip, r0
 8016766:	4662      	mov	r2, ip
 8016768:	db5d      	blt.n	8016826 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 801676a:	42a5      	cmp	r5, r4
 801676c:	f280 80eb 	bge.w	8016946 <update_box.isra.0+0x202>
	histp = & histogram[c0][c1min][c2];
 8016770:	0196      	lsls	r6, r2, #6
 8016772:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 8016776:	46ac      	mov	ip, r5
 8016778:	9602      	str	r6, [sp, #8]
 801677a:	fb07 f602 	mul.w	r6, r7, r2
 801677e:	9603      	str	r6, [sp, #12]
 8016780:	9e02      	ldr	r6, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016782:	469e      	mov	lr, r3
 8016784:	eb06 094c 	add.w	r9, r6, ip, lsl #1
 8016788:	9e03      	ldr	r6, [sp, #12]
 801678a:	44b1      	add	r9, r6
 801678c:	e083      	b.n	8016896 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 801678e:	9a01      	ldr	r2, [sp, #4]
 8016790:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8016794:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016798:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801679a:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 801679c:	454c      	cmp	r4, r9
 801679e:	da08      	bge.n	80167b2 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80167a0:	f108 0801 	add.w	r8, r8, #1
 80167a4:	4540      	cmp	r0, r8
 80167a6:	daf2      	bge.n	801678e <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 80167a8:	3301      	adds	r3, #1
 80167aa:	459b      	cmp	fp, r3
 80167ac:	db0f      	blt.n	80167ce <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80167ae:	46e0      	mov	r8, ip
 80167b0:	e7f8      	b.n	80167a4 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 80167b2:	f832 ab02 	ldrh.w	sl, [r2], #2
 80167b6:	f1ba 0f00 	cmp.w	sl, #0
 80167ba:	d005      	beq.n	80167c8 <update_box.isra.0+0x84>
  if (c0max > c0min)
 80167bc:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 80167be:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 80167c0:	ddd0      	ble.n	8016764 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80167c2:	465f      	mov	r7, fp
 80167c4:	46e0      	mov	r8, ip
 80167c6:	e00f      	b.n	80167e8 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 80167c8:	f109 0901 	add.w	r9, r9, #1
 80167cc:	e7e6      	b.n	801679c <update_box.isra.0+0x58>
 have_c0min:
 80167ce:	463b      	mov	r3, r7
 80167d0:	e7f7      	b.n	80167c2 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 80167d2:	9a01      	ldr	r2, [sp, #4]
 80167d4:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 80167d8:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80167dc:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80167de:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 80167e0:	454c      	cmp	r4, r9
 80167e2:	da07      	bge.n	80167f4 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80167e4:	f108 0801 	add.w	r8, r8, #1
 80167e8:	4540      	cmp	r0, r8
 80167ea:	daf2      	bge.n	80167d2 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 80167ec:	3f01      	subs	r7, #1
 80167ee:	429f      	cmp	r7, r3
 80167f0:	dbb8      	blt.n	8016764 <update_box.isra.0+0x20>
 80167f2:	e7e7      	b.n	80167c4 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 80167f4:	f832 ab02 	ldrh.w	sl, [r2], #2
 80167f8:	f1ba 0f00 	cmp.w	sl, #0
 80167fc:	d002      	beq.n	8016804 <update_box.isra.0+0xc0>
	    goto have_c0max;
 80167fe:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 8016800:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 8016802:	e7af      	b.n	8016764 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016804:	f109 0901 	add.w	r9, r9, #1
 8016808:	e7ea      	b.n	80167e0 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 801680a:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801680c:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 801680e:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8016812:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8016814:	454c      	cmp	r4, r9
 8016816:	da0a      	bge.n	801682e <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016818:	f108 0801 	add.w	r8, r8, #1
 801681c:	45d8      	cmp	r8, fp
 801681e:	ddf4      	ble.n	801680a <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 8016820:	3201      	adds	r2, #1
 8016822:	4290      	cmp	r0, r2
 8016824:	db11      	blt.n	801684a <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016826:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 8016828:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 801682c:	e7f6      	b.n	801681c <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 801682e:	f837 6b02 	ldrh.w	r6, [r7], #2
 8016832:	b13e      	cbz	r6, 8016844 <update_box.isra.0+0x100>
  if (c1max > c1min)
 8016834:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 8016836:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 8016838:	dd97      	ble.n	801676a <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801683a:	4684      	mov	ip, r0
 801683c:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 801683e:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 8016842:	e00d      	b.n	8016860 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016844:	f109 0901 	add.w	r9, r9, #1
 8016848:	e7e4      	b.n	8016814 <update_box.isra.0+0xd0>
 have_c1min:
 801684a:	4662      	mov	r2, ip
 801684c:	e7f5      	b.n	801683a <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 801684e:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016850:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 8016852:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8016856:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8016858:	454c      	cmp	r4, r9
 801685a:	da09      	bge.n	8016870 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801685c:	f108 0801 	add.w	r8, r8, #1
 8016860:	45c3      	cmp	fp, r8
 8016862:	daf4      	bge.n	801684e <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 8016864:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8016868:	4594      	cmp	ip, r2
 801686a:	f6ff af7e 	blt.w	801676a <update_box.isra.0+0x26>
 801686e:	e7e5      	b.n	801683c <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 8016870:	f837 6b02 	ldrh.w	r6, [r7], #2
 8016874:	b11e      	cbz	r6, 801687e <update_box.isra.0+0x13a>
	    goto have_c1max;
 8016876:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 8016878:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 801687c:	e775      	b.n	801676a <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 801687e:	f109 0901 	add.w	r9, r9, #1
 8016882:	e7e9      	b.n	8016858 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016884:	9e01      	ldr	r6, [sp, #4]
 8016886:	4690      	mov	r8, r2
 8016888:	f856 702e 	ldr.w	r7, [r6, lr, lsl #2]
 801688c:	444f      	add	r7, r9
 801688e:	4580      	cmp	r8, r0
 8016890:	dd11      	ble.n	80168b6 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016892:	f10e 0e01 	add.w	lr, lr, #1
 8016896:	45f3      	cmp	fp, lr
 8016898:	daf4      	bge.n	8016884 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 801689a:	f10c 0c01 	add.w	ip, ip, #1
 801689e:	4564      	cmp	r4, ip
 80168a0:	f6bf af6e 	bge.w	8016780 <update_box.isra.0+0x3c>
 have_c2min:
 80168a4:	46ac      	mov	ip, r5
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80168a6:	4627      	mov	r7, r4
 80168a8:	9d02      	ldr	r5, [sp, #8]
 80168aa:	469e      	mov	lr, r3
 80168ac:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 80168b0:	9d03      	ldr	r5, [sp, #12]
 80168b2:	44a9      	add	r9, r5
 80168b4:	e034      	b.n	8016920 <update_box.isra.0+0x1dc>
	  if (*histp != 0) {
 80168b6:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80168ba:	f837 a00a 	ldrh.w	sl, [r7, sl]
 80168be:	f1ba 0f00 	cmp.w	sl, #0
 80168c2:	d021      	beq.n	8016908 <update_box.isra.0+0x1c4>
  if (c2max > c2min)
 80168c4:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 80168c6:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 80168ca:	dcec      	bgt.n	80168a6 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80168cc:	1a85      	subs	r5, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80168ce:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 80168d2:	eba4 070c 	sub.w	r7, r4, ip
 80168d6:	ea4f 094c 	mov.w	r9, ip, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80168da:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80168de:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80168e2:	eb08 0885 	add.w	r8, r8, r5, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 80168e6:	013d      	lsls	r5, r7, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 80168e8:	fb08 f808 	mul.w	r8, r8, r8
 80168ec:	fb0e 880e 	mla	r8, lr, lr, r8
  ccount = 0;
 80168f0:	f04f 0e00 	mov.w	lr, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 80168f4:	fb05 8505 	mla	r5, r5, r5, r8
 80168f8:	618d      	str	r5, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 80168fa:	459b      	cmp	fp, r3
 80168fc:	da3f      	bge.n	801697e <update_box.isra.0+0x23a>
  boxp->colorcount = ccount;
 80168fe:	f8c1 e01c 	str.w	lr, [r1, #28]
}
 8016902:	b005      	add	sp, #20
 8016904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016908:	f108 0801 	add.w	r8, r8, #1
 801690c:	e7bf      	b.n	801688e <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801690e:	9d01      	ldr	r5, [sp, #4]
 8016910:	4690      	mov	r8, r2
 8016912:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
 8016916:	444d      	add	r5, r9
 8016918:	4540      	cmp	r0, r8
 801691a:	da07      	bge.n	801692c <update_box.isra.0+0x1e8>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801691c:	f10e 0e01 	add.w	lr, lr, #1
 8016920:	45f3      	cmp	fp, lr
 8016922:	daf4      	bge.n	801690e <update_box.isra.0+0x1ca>
    for (c2 = c2max; c2 >= c2min; c2--)
 8016924:	3f01      	subs	r7, #1
 8016926:	4567      	cmp	r7, ip
 8016928:	dbd0      	blt.n	80168cc <update_box.isra.0+0x188>
 801692a:	e7bd      	b.n	80168a8 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 801692c:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8016930:	f835 a00a 	ldrh.w	sl, [r5, sl]
 8016934:	f1ba 0f00 	cmp.w	sl, #0
 8016938:	d002      	beq.n	8016940 <update_box.isra.0+0x1fc>
	    goto have_c2max;
 801693a:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 801693c:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 801693e:	e7c5      	b.n	80168cc <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016940:	f108 0801 	add.w	r8, r8, #1
 8016944:	e7e8      	b.n	8016918 <update_box.isra.0+0x1d4>
 have_c2min:
 8016946:	46ac      	mov	ip, r5
 8016948:	e7c0      	b.n	80168cc <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 801694a:	eb09 1587 	add.w	r5, r9, r7, lsl #6
 801694e:	f1a5 0802 	sub.w	r8, r5, #2
 8016952:	9d01      	ldr	r5, [sp, #4]
 8016954:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8016958:	4445      	add	r5, r8
 801695a:	46e0      	mov	r8, ip
 801695c:	4544      	cmp	r4, r8
 801695e:	da04      	bge.n	801696a <update_box.isra.0+0x226>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016960:	3701      	adds	r7, #1
 8016962:	42b8      	cmp	r0, r7
 8016964:	daf1      	bge.n	801694a <update_box.isra.0+0x206>
  for (c0 = c0min; c0 <= c0max; c0++)
 8016966:	3301      	adds	r3, #1
 8016968:	e7c7      	b.n	80168fa <update_box.isra.0+0x1b6>
	if (*histp != 0) {
 801696a:	f835 af02 	ldrh.w	sl, [r5, #2]!
 801696e:	f1ba 0f00 	cmp.w	sl, #0
 8016972:	d001      	beq.n	8016978 <update_box.isra.0+0x234>
	  ccount++;
 8016974:	f10e 0e01 	add.w	lr, lr, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8016978:	f108 0801 	add.w	r8, r8, #1
 801697c:	e7ee      	b.n	801695c <update_box.isra.0+0x218>
 801697e:	4617      	mov	r7, r2
 8016980:	e7ef      	b.n	8016962 <update_box.isra.0+0x21e>

08016982 <finish_pass1>:
{
 8016982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016986:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 801698a:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 801698c:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 801698e:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016992:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 8016994:	691b      	ldr	r3, [r3, #16]
{
 8016996:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 8016998:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 801699c:	9b02      	ldr	r3, [sp, #8]
 801699e:	695b      	ldr	r3, [r3, #20]
 80169a0:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 80169a2:	9a01      	ldr	r2, [sp, #4]
 80169a4:	6843      	ldr	r3, [r0, #4]
 80169a6:	0152      	lsls	r2, r2, #5
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 80169ac:	2300      	movs	r3, #0
 80169ae:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 80169b0:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 80169b2:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 80169b4:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 80169b6:	6142      	str	r2, [r0, #20]
 80169b8:	46a8      	mov	r8, r5
  boxlist[0].c2min = 0;
 80169ba:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 80169be:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 80169c2:	9b00      	ldr	r3, [sp, #0]
 80169c4:	4601      	mov	r1, r0
 80169c6:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 80169ca:	f7ff febb 	bl	8016744 <update_box.isra.0>
  while (numboxes < desired_colors) {
 80169ce:	9b01      	ldr	r3, [sp, #4]
 80169d0:	455b      	cmp	r3, fp
 80169d2:	dc24      	bgt.n	8016a1e <finish_pass1+0x9c>
 80169d4:	2300      	movs	r3, #0
  hist3d histogram = cquantize->histogram;
 80169d6:	9a00      	ldr	r2, [sp, #0]
 80169d8:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 80169dc:	6992      	ldr	r2, [r2, #24]
 80169de:	9203      	str	r2, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80169e0:	e9d8 7200 	ldrd	r7, r2, [r8]
 80169e4:	9204      	str	r2, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80169e6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80169ea:	9205      	str	r2, [sp, #20]
 80169ec:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80169f0:	9206      	str	r2, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80169f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80169f6:	9201      	str	r2, [sp, #4]
 80169f8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80169fc:	9207      	str	r2, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 80169fe:	9a01      	ldr	r2, [sp, #4]
 8016a00:	0052      	lsls	r2, r2, #1
 8016a02:	9209      	str	r2, [sp, #36]	; 0x24
  long c2total = 0;
 8016a04:	2200      	movs	r2, #0
  long c1total = 0;
 8016a06:	4692      	mov	sl, r2
  long c0total = 0;
 8016a08:	4691      	mov	r9, r2
  long total = 0;
 8016a0a:	4611      	mov	r1, r2
  for (c0 = c0min; c0 <= c0max; c0++)
 8016a0c:	9804      	ldr	r0, [sp, #16]
 8016a0e:	42b8      	cmp	r0, r7
 8016a10:	f2c0 8098 	blt.w	8016b44 <finish_pass1+0x1c2>
 8016a14:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016a16:	9e05      	ldr	r6, [sp, #20]
 8016a18:	3004      	adds	r0, #4
 8016a1a:	9008      	str	r0, [sp, #32]
 8016a1c:	e07c      	b.n	8016b18 <finish_pass1+0x196>
    if (numboxes*2 <= desired_colors) {
 8016a1e:	9b01      	ldr	r3, [sp, #4]
 8016a20:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 8016a24:	db4f      	blt.n	8016ac6 <finish_pass1+0x144>
  boxptr which = NULL;
 8016a26:	2300      	movs	r3, #0
 8016a28:	4628      	mov	r0, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016a2a:	461e      	mov	r6, r3
  register long maxc = 0;
 8016a2c:	461f      	mov	r7, r3
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 8016a2e:	69c2      	ldr	r2, [r0, #28]
 8016a30:	42ba      	cmp	r2, r7
 8016a32:	dd04      	ble.n	8016a3e <finish_pass1+0xbc>
 8016a34:	6984      	ldr	r4, [r0, #24]
 8016a36:	2c00      	cmp	r4, #0
 8016a38:	bfc4      	itt	gt
 8016a3a:	4603      	movgt	r3, r0
 8016a3c:	4617      	movgt	r7, r2
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016a3e:	3601      	adds	r6, #1
 8016a40:	3020      	adds	r0, #32
 8016a42:	45b3      	cmp	fp, r6
 8016a44:	d1f3      	bne.n	8016a2e <finish_pass1+0xac>
    if (b1 == NULL)		/* no splittable boxes left! */
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d0c5      	beq.n	80169d6 <finish_pass1+0x54>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 8016a4a:	685a      	ldr	r2, [r3, #4]
 8016a4c:	f101 0920 	add.w	r9, r1, #32
 8016a50:	624a      	str	r2, [r1, #36]	; 0x24
 8016a52:	68d8      	ldr	r0, [r3, #12]
 8016a54:	62c8      	str	r0, [r1, #44]	; 0x2c
 8016a56:	6958      	ldr	r0, [r3, #20]
 8016a58:	6348      	str	r0, [r1, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8016a5a:	6818      	ldr	r0, [r3, #0]
 8016a5c:	6208      	str	r0, [r1, #32]
 8016a5e:	6898      	ldr	r0, [r3, #8]
 8016a60:	6288      	str	r0, [r1, #40]	; 0x28
 8016a62:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8016a66:	f8c1 c030 	str.w	ip, [r1, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8016a6a:	6818      	ldr	r0, [r3, #0]
 8016a6c:	9003      	str	r0, [sp, #12]
 8016a6e:	1a10      	subs	r0, r2, r0
 8016a70:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8016a74:	e9d3 0602 	ldrd	r0, r6, [r3, #8]
 8016a78:	9004      	str	r0, [sp, #16]
 8016a7a:	1a30      	subs	r0, r6, r0
 8016a7c:	00c7      	lsls	r7, r0, #3
 8016a7e:	eb07 0780 	add.w	r7, r7, r0, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8016a82:	6958      	ldr	r0, [r3, #20]
 8016a84:	eba0 0a0c 	sub.w	sl, r0, ip
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016a88:	ebb7 1f0a 	cmp.w	r7, sl, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8016a8c:	ea4f 140a 	mov.w	r4, sl, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016a90:	f2c0 808c 	blt.w	8016bac <finish_pass1+0x22a>
    if (c0 > cmax) { n = 0; }
 8016a94:	45be      	cmp	lr, r7
 8016a96:	dd25      	ble.n	8016ae4 <finish_pass1+0x162>
      lb = (b1->c0max + b1->c0min) / 2;
 8016a98:	9803      	ldr	r0, [sp, #12]
 8016a9a:	4402      	add	r2, r0
 8016a9c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8016aa0:	1052      	asrs	r2, r2, #1
      b1->c0max = lb;
 8016aa2:	605a      	str	r2, [r3, #4]
      b2->c0min = lb+1;
 8016aa4:	3201      	adds	r2, #1
 8016aa6:	620a      	str	r2, [r1, #32]
    update_box(cinfo, b1);
 8016aa8:	4619      	mov	r1, r3
 8016aaa:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 8016aac:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 8016ab0:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8016ab4:	f7ff fe46 	bl	8016744 <update_box.isra.0>
    update_box(cinfo, b2);
 8016ab8:	9b00      	ldr	r3, [sp, #0]
 8016aba:	4649      	mov	r1, r9
 8016abc:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8016ac0:	f7ff fe40 	bl	8016744 <update_box.isra.0>
    numboxes++;
 8016ac4:	e783      	b.n	80169ce <finish_pass1+0x4c>
  boxptr which = NULL;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016aca:	4618      	mov	r0, r3
  register INT32 maxv = 0;
 8016acc:	461e      	mov	r6, r3
    if (boxp->volume > maxv) {
 8016ace:	6997      	ldr	r7, [r2, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016ad0:	3001      	adds	r0, #1
    if (boxp->volume > maxv) {
 8016ad2:	42b7      	cmp	r7, r6
 8016ad4:	bfc4      	itt	gt
 8016ad6:	4613      	movgt	r3, r2
 8016ad8:	463e      	movgt	r6, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016ada:	4583      	cmp	fp, r0
 8016adc:	f102 0220 	add.w	r2, r2, #32
 8016ae0:	d1f5      	bne.n	8016ace <finish_pass1+0x14c>
 8016ae2:	e7b0      	b.n	8016a46 <finish_pass1+0xc4>
      lb = (b1->c1max + b1->c1min) / 2;
 8016ae4:	9a04      	ldr	r2, [sp, #16]
 8016ae6:	4416      	add	r6, r2
 8016ae8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8016aec:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 8016aee:	60de      	str	r6, [r3, #12]
      b2->c1min = lb+1;
 8016af0:	3601      	adds	r6, #1
 8016af2:	628e      	str	r6, [r1, #40]	; 0x28
      break;
 8016af4:	e7d8      	b.n	8016aa8 <finish_pass1+0x126>
      histp = & histogram[c0][c1][c2min];
 8016af6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016af8:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8016afc:	9c03      	ldr	r4, [sp, #12]
 8016afe:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8016b02:	f10e 0e02 	add.w	lr, lr, #2
 8016b06:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016b0a:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 8016b0e:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016b10:	9c07      	ldr	r4, [sp, #28]
 8016b12:	4564      	cmp	r4, ip
 8016b14:	da05      	bge.n	8016b22 <finish_pass1+0x1a0>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016b16:	3601      	adds	r6, #1
 8016b18:	9806      	ldr	r0, [sp, #24]
 8016b1a:	42b0      	cmp	r0, r6
 8016b1c:	daeb      	bge.n	8016af6 <finish_pass1+0x174>
  for (c0 = c0min; c0 <= c0max; c0++)
 8016b1e:	3701      	adds	r7, #1
 8016b20:	e774      	b.n	8016a0c <finish_pass1+0x8a>
	if ((count = *histp++) != 0) {
 8016b22:	f830 5b02 	ldrh.w	r5, [r0], #2
 8016b26:	b155      	cbz	r5, 8016b3e <finish_pass1+0x1bc>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016b28:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 8016b2a:	4429      	add	r1, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 8016b2c:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016b30:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8016b34:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8016b38:	3404      	adds	r4, #4
 8016b3a:	fb05 2204 	mla	r2, r5, r4, r2
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016b3e:	f10c 0c01 	add.w	ip, ip, #1
 8016b42:	e7e5      	b.n	8016b10 <finish_pass1+0x18e>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016b44:	eb09 0961 	add.w	r9, r9, r1, asr #1
 8016b48:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8016b4a:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
  for (i = 0; i < numboxes; i++)
 8016b4e:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016b52:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016b56:	eb02 0261 	add.w	r2, r2, r1, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016b5a:	fb99 f9f1 	sdiv	r9, r9, r1
 8016b5e:	6800      	ldr	r0, [r0, #0]
 8016b60:	f800 9003 	strb.w	r9, [r0, r3]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8016b64:	9800      	ldr	r0, [sp, #0]
 8016b66:	fb9a faf1 	sdiv	sl, sl, r1
 8016b6a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8016b6e:	6840      	ldr	r0, [r0, #4]
 8016b70:	f800 a003 	strb.w	sl, [r0, r3]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016b74:	9800      	ldr	r0, [sp, #0]
 8016b76:	fb92 f1f1 	sdiv	r1, r2, r1
 8016b7a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8016b7e:	6880      	ldr	r0, [r0, #8]
 8016b80:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < numboxes; i++)
 8016b82:	3301      	adds	r3, #1
 8016b84:	455b      	cmp	r3, fp
 8016b86:	f47f af26 	bne.w	80169d6 <finish_pass1+0x54>
  cinfo->actual_number_of_colors = numboxes;
 8016b8a:	9a00      	ldr	r2, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8016b8c:	2162      	movs	r1, #98	; 0x62
 8016b8e:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 8016b90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8016b94:	6812      	ldr	r2, [r2, #0]
 8016b96:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8016b9a:	6853      	ldr	r3, [r2, #4]
 8016b9c:	2101      	movs	r1, #1
 8016b9e:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 8016ba0:	2301      	movs	r3, #1
 8016ba2:	9a02      	ldr	r2, [sp, #8]
 8016ba4:	61d3      	str	r3, [r2, #28]
}
 8016ba6:	b00b      	add	sp, #44	; 0x2c
 8016ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 8016bac:	45a6      	cmp	lr, r4
 8016bae:	f73f af73 	bgt.w	8016a98 <finish_pass1+0x116>
      lb = (b1->c2max + b1->c2min) / 2;
 8016bb2:	4460      	add	r0, ip
 8016bb4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8016bb8:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 8016bba:	6158      	str	r0, [r3, #20]
      b2->c2min = lb+1;
 8016bbc:	3001      	adds	r0, #1
 8016bbe:	6308      	str	r0, [r1, #48]	; 0x30
      break;
 8016bc0:	e772      	b.n	8016aa8 <finish_pass1+0x126>
	...

08016bc4 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8016bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016bc6:	6843      	ldr	r3, [r0, #4]
 8016bc8:	222c      	movs	r2, #44	; 0x2c
 8016bca:	2101      	movs	r1, #1
{
 8016bcc:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 8016bd2:	4b30      	ldr	r3, [pc, #192]	; (8016c94 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8016bd4:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016bd8:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 8016bda:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 8016bdc:	4b2e      	ldr	r3, [pc, #184]	; (8016c98 <jinit_2pass_quantizer+0xd4>)
 8016bde:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8016be0:	2300      	movs	r3, #0
 8016be2:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 8016be4:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8016be6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016be8:	2b03      	cmp	r3, #3
 8016bea:	d005      	beq.n	8016bf8 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 8016bec:	6823      	ldr	r3, [r4, #0]
 8016bee:	2230      	movs	r2, #48	; 0x30
 8016bf0:	4620      	mov	r0, r4
 8016bf2:	615a      	str	r2, [r3, #20]
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8016bf8:	6863      	ldr	r3, [r4, #4]
 8016bfa:	2600      	movs	r6, #0
 8016bfc:	2280      	movs	r2, #128	; 0x80
 8016bfe:	2101      	movs	r1, #1
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	4620      	mov	r0, r4
 8016c04:	4798      	blx	r3
 8016c06:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8016c08:	6863      	ldr	r3, [r4, #4]
 8016c0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016c0e:	69af      	ldr	r7, [r5, #24]
 8016c10:	2101      	movs	r1, #1
 8016c12:	685b      	ldr	r3, [r3, #4]
 8016c14:	4620      	mov	r0, r4
 8016c16:	4798      	blx	r3
 8016c18:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 8016c1a:	3604      	adds	r6, #4
 8016c1c:	2e80      	cmp	r6, #128	; 0x80
 8016c1e:	d1f3      	bne.n	8016c08 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8016c20:	2301      	movs	r3, #1
 8016c22:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8016c24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d031      	beq.n	8016c8e <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 8016c2a:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 8016c2c:	2e07      	cmp	r6, #7
 8016c2e:	dc25      	bgt.n	8016c7c <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8016c30:	223a      	movs	r2, #58	; 0x3a
 8016c32:	6823      	ldr	r3, [r4, #0]
 8016c34:	615a      	str	r2, [r3, #20]
 8016c36:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016c38:	619a      	str	r2, [r3, #24]
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8016c40:	6863      	ldr	r3, [r4, #4]
 8016c42:	4632      	mov	r2, r6
 8016c44:	2101      	movs	r1, #1
 8016c46:	4620      	mov	r0, r4
 8016c48:	689f      	ldr	r7, [r3, #8]
 8016c4a:	2303      	movs	r3, #3
 8016c4c:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 8016c4e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8016c52:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016c56:	b1e3      	cbz	r3, 8016c92 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8016c58:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016c5a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8016c60:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016c64:	2306      	movs	r3, #6
 8016c66:	435a      	muls	r2, r3
 8016c68:	6863      	ldr	r3, [r4, #4]
 8016c6a:	320c      	adds	r2, #12
 8016c6c:	685b      	ldr	r3, [r3, #4]
 8016c6e:	4798      	blx	r3
 8016c70:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8016c72:	4620      	mov	r0, r4
  }
}
 8016c74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8016c78:	f7ff bcbf 	b.w	80165fa <init_error_limit>
    if (desired > MAXNUMCOLORS)
 8016c7c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8016c80:	ddde      	ble.n	8016c40 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016c82:	223b      	movs	r2, #59	; 0x3b
 8016c84:	6823      	ldr	r3, [r4, #0]
 8016c86:	615a      	str	r2, [r3, #20]
 8016c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016c8c:	e7d4      	b.n	8016c38 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 8016c8e:	612b      	str	r3, [r5, #16]
 8016c90:	e7df      	b.n	8016c52 <jinit_2pass_quantizer+0x8e>
}
 8016c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c94:	08016675 	.word	0x08016675
 8016c98:	0801666b 	.word	0x0801666b

08016c9c <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 8016c9c:	4408      	add	r0, r1
 8016c9e:	3801      	subs	r0, #1
}
 8016ca0:	fb90 f0f1 	sdiv	r0, r0, r1
 8016ca4:	4770      	bx	lr

08016ca6 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 8016ca6:	1e4b      	subs	r3, r1, #1
 8016ca8:	4418      	add	r0, r3
  return a - (a % b);
 8016caa:	fb90 f3f1 	sdiv	r3, r0, r1
 8016cae:	fb01 0113 	mls	r1, r1, r3, r0
}
 8016cb2:	1a40      	subs	r0, r0, r1
 8016cb4:	4770      	bx	lr

08016cb6 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8016cb6:	b570      	push	{r4, r5, r6, lr}
 8016cb8:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 8016cba:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 8016cbe:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 8016cc2:	2e00      	cmp	r6, #0
 8016cc4:	dc00      	bgt.n	8016cc8 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8016cc6:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8016cc8:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 8016cca:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 8016ccc:	f854 1b04 	ldr.w	r1, [r4], #4
 8016cd0:	f855 0b04 	ldr.w	r0, [r5], #4
 8016cd4:	f013 fd40 	bl	802a758 <memcpy>
  for (row = num_rows; row > 0; row--) {
 8016cd8:	e7f3      	b.n	8016cc2 <jcopy_sample_rows+0xc>

08016cda <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 8016cda:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 8016cdc:	01d2      	lsls	r2, r2, #7
 8016cde:	4601      	mov	r1, r0
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	f013 bd39 	b.w	802a758 <memcpy>

08016ce6 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016ce6:	8880      	ldrh	r0, [r0, #4]
 8016ce8:	4770      	bx	lr

08016cea <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016cea:	2300      	movs	r3, #0
 8016cec:	8083      	strh	r3, [r0, #4]
 8016cee:	4770      	bx	lr

08016cf0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cf2:	6803      	ldr	r3, [r0, #0]
 8016cf4:	460e      	mov	r6, r1
 8016cf6:	2100      	movs	r1, #0
 8016cf8:	4605      	mov	r5, r0
 8016cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cfc:	4798      	blx	r3
 8016cfe:	4604      	mov	r4, r0
 8016d00:	682b      	ldr	r3, [r5, #0]
 8016d02:	4628      	mov	r0, r5
 8016d04:	1b34      	subs	r4, r6, r4
 8016d06:	6a1b      	ldr	r3, [r3, #32]
 8016d08:	b2a4      	uxth	r4, r4
 8016d0a:	4798      	blx	r3
 8016d0c:	88ab      	ldrh	r3, [r5, #4]
 8016d0e:	fbb4 f4f0 	udiv	r4, r4, r0
 8016d12:	42a3      	cmp	r3, r4
 8016d14:	d805      	bhi.n	8016d22 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8016d16:	4b0e      	ldr	r3, [pc, #56]	; (8016d50 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8016d18:	211d      	movs	r1, #29
 8016d1a:	4a0e      	ldr	r2, [pc, #56]	; (8016d54 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016d1c:	480e      	ldr	r0, [pc, #56]	; (8016d58 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8016d1e:	f013 fc99 	bl	802a654 <__assert_func>
 8016d22:	682b      	ldr	r3, [r5, #0]
 8016d24:	2100      	movs	r1, #0
 8016d26:	4628      	mov	r0, r5
 8016d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d2a:	4798      	blx	r3
 8016d2c:	682b      	ldr	r3, [r5, #0]
 8016d2e:	4607      	mov	r7, r0
 8016d30:	4628      	mov	r0, r5
 8016d32:	6a1b      	ldr	r3, [r3, #32]
 8016d34:	4798      	blx	r3
 8016d36:	1bf3      	subs	r3, r6, r7
 8016d38:	b29b      	uxth	r3, r3
 8016d3a:	fbb3 f2f0 	udiv	r2, r3, r0
 8016d3e:	fb02 3010 	mls	r0, r2, r0, r3
 8016d42:	b118      	cbz	r0, 8016d4c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8016d44:	4b05      	ldr	r3, [pc, #20]	; (8016d5c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8016d46:	211e      	movs	r1, #30
 8016d48:	4a02      	ldr	r2, [pc, #8]	; (8016d54 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016d4a:	e7e7      	b.n	8016d1c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d50:	0802fef4 	.word	0x0802fef4
 8016d54:	08030062 	.word	0x08030062
 8016d58:	0802ff09 	.word	0x0802ff09
 8016d5c:	0802ff37 	.word	0x0802ff37

08016d60 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016d60:	b538      	push	{r3, r4, r5, lr}
 8016d62:	6803      	ldr	r3, [r0, #0]
 8016d64:	460d      	mov	r5, r1
 8016d66:	4604      	mov	r4, r0
 8016d68:	6a1b      	ldr	r3, [r3, #32]
 8016d6a:	4798      	blx	r3
 8016d6c:	4285      	cmp	r5, r0
 8016d6e:	d905      	bls.n	8016d7c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016d70:	4b0c      	ldr	r3, [pc, #48]	; (8016da4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016d72:	212f      	movs	r1, #47	; 0x2f
 8016d74:	4a0c      	ldr	r2, [pc, #48]	; (8016da8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016d76:	480d      	ldr	r0, [pc, #52]	; (8016dac <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016d78:	f013 fc6c 	bl	802a654 <__assert_func>
 8016d7c:	6823      	ldr	r3, [r4, #0]
 8016d7e:	4620      	mov	r0, r4
 8016d80:	88a5      	ldrh	r5, [r4, #4]
 8016d82:	69db      	ldr	r3, [r3, #28]
 8016d84:	4798      	blx	r3
 8016d86:	4285      	cmp	r5, r0
 8016d88:	d303      	bcc.n	8016d92 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8016d8a:	4b09      	ldr	r3, [pc, #36]	; (8016db0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8016d8c:	2130      	movs	r1, #48	; 0x30
 8016d8e:	4a06      	ldr	r2, [pc, #24]	; (8016da8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016d90:	e7f1      	b.n	8016d76 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016d92:	6823      	ldr	r3, [r4, #0]
 8016d94:	4620      	mov	r0, r4
 8016d96:	88a1      	ldrh	r1, [r4, #4]
 8016d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d9a:	4798      	blx	r3
 8016d9c:	88a3      	ldrh	r3, [r4, #4]
 8016d9e:	3301      	adds	r3, #1
 8016da0:	80a3      	strh	r3, [r4, #4]
 8016da2:	bd38      	pop	{r3, r4, r5, pc}
 8016da4:	0802ffb1 	.word	0x0802ffb1
 8016da8:	080300a5 	.word	0x080300a5
 8016dac:	0802ff09 	.word	0x0802ff09
 8016db0:	0802ffc8 	.word	0x0802ffc8

08016db4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016db4:	b570      	push	{r4, r5, r6, lr}
 8016db6:	6803      	ldr	r3, [r0, #0]
 8016db8:	4616      	mov	r6, r2
 8016dba:	4604      	mov	r4, r0
 8016dbc:	460d      	mov	r5, r1
 8016dbe:	6a1b      	ldr	r3, [r3, #32]
 8016dc0:	4798      	blx	r3
 8016dc2:	4286      	cmp	r6, r0
 8016dc4:	d905      	bls.n	8016dd2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8016dc6:	4b06      	ldr	r3, [pc, #24]	; (8016de0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016dc8:	2139      	movs	r1, #57	; 0x39
 8016dca:	4a06      	ldr	r2, [pc, #24]	; (8016de4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8016dcc:	4806      	ldr	r0, [pc, #24]	; (8016de8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8016dce:	f013 fc41 	bl	802a654 <__assert_func>
 8016dd2:	6823      	ldr	r3, [r4, #0]
 8016dd4:	4629      	mov	r1, r5
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dde:	4718      	bx	r3
 8016de0:	0802ffb1 	.word	0x0802ffb1
 8016de4:	08030018 	.word	0x08030018
 8016de8:	0802ff09 	.word	0x0802ff09

08016dec <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016dec:	4770      	bx	lr
	...

08016df0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016df0:	4a02      	ldr	r2, [pc, #8]	; (8016dfc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016df2:	6002      	str	r2, [r0, #0]
 8016df4:	2200      	movs	r2, #0
 8016df6:	8082      	strh	r2, [r0, #4]
 8016df8:	4770      	bx	lr
 8016dfa:	bf00      	nop
 8016dfc:	0802ffec 	.word	0x0802ffec

08016e00 <_ZN8touchgfx9Container13getFirstChildEv>:
 8016e00:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016e02:	4770      	bx	lr

08016e04 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016e04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016e06:	2000      	movs	r0, #0
 8016e08:	b12b      	cbz	r3, 8016e16 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016e0a:	b920      	cbnz	r0, 8016e16 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016e0c:	1a5a      	subs	r2, r3, r1
 8016e0e:	699b      	ldr	r3, [r3, #24]
 8016e10:	4250      	negs	r0, r2
 8016e12:	4150      	adcs	r0, r2
 8016e14:	e7f8      	b.n	8016e08 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8016e16:	4770      	bx	lr

08016e18 <_ZN8touchgfx9Container9removeAllEv>:
 8016e18:	2200      	movs	r2, #0
 8016e1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016e1c:	b123      	cbz	r3, 8016e28 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016e1e:	6999      	ldr	r1, [r3, #24]
 8016e20:	6281      	str	r1, [r0, #40]	; 0x28
 8016e22:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016e26:	e7f8      	b.n	8016e1a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016e28:	4770      	bx	lr

08016e2a <_ZN8touchgfx9Container6unlinkEv>:
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	6283      	str	r3, [r0, #40]	; 0x28
 8016e2e:	4770      	bx	lr

08016e30 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016e30:	2200      	movs	r2, #0
 8016e32:	8002      	strh	r2, [r0, #0]
 8016e34:	8042      	strh	r2, [r0, #2]
 8016e36:	8082      	strh	r2, [r0, #4]
 8016e38:	80c2      	strh	r2, [r0, #6]
 8016e3a:	4770      	bx	lr

08016e3c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016e3c:	b570      	push	{r4, r5, r6, lr}
 8016e3e:	460d      	mov	r5, r1
 8016e40:	4616      	mov	r6, r2
 8016e42:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016e44:	b13c      	cbz	r4, 8016e56 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016e46:	6823      	ldr	r3, [r4, #0]
 8016e48:	4620      	mov	r0, r4
 8016e4a:	4632      	mov	r2, r6
 8016e4c:	4629      	mov	r1, r5
 8016e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016e50:	4798      	blx	r3
 8016e52:	69a4      	ldr	r4, [r4, #24]
 8016e54:	e7f6      	b.n	8016e44 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016e56:	bd70      	pop	{r4, r5, r6, pc}

08016e58 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016e58:	b538      	push	{r3, r4, r5, lr}
 8016e5a:	460d      	mov	r5, r1
 8016e5c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016e5e:	b134      	cbz	r4, 8016e6e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016e60:	682b      	ldr	r3, [r5, #0]
 8016e62:	4621      	mov	r1, r4
 8016e64:	4628      	mov	r0, r5
 8016e66:	689b      	ldr	r3, [r3, #8]
 8016e68:	4798      	blx	r3
 8016e6a:	69a4      	ldr	r4, [r4, #24]
 8016e6c:	e7f7      	b.n	8016e5e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016e6e:	bd38      	pop	{r3, r4, r5, pc}

08016e70 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8016e70:	b510      	push	{r4, lr}
 8016e72:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016e74:	b12c      	cbz	r4, 8016e82 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8016e76:	6823      	ldr	r3, [r4, #0]
 8016e78:	4620      	mov	r0, r4
 8016e7a:	699b      	ldr	r3, [r3, #24]
 8016e7c:	4798      	blx	r3
 8016e7e:	69a4      	ldr	r4, [r4, #24]
 8016e80:	e7f8      	b.n	8016e74 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8016e82:	bd10      	pop	{r4, pc}

08016e84 <_ZN8touchgfx9ContainerD1Ev>:
 8016e84:	4770      	bx	lr

08016e86 <_ZN8touchgfx9ContainerD0Ev>:
 8016e86:	b510      	push	{r4, lr}
 8016e88:	4604      	mov	r4, r0
 8016e8a:	212c      	movs	r1, #44	; 0x2c
 8016e8c:	f013 fbb3 	bl	802a5f6 <_ZdlPvj>
 8016e90:	4620      	mov	r0, r4
 8016e92:	bd10      	pop	{r4, pc}

08016e94 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016e94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016e96:	b19b      	cbz	r3, 8016ec0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016e98:	428b      	cmp	r3, r1
 8016e9a:	d109      	bne.n	8016eb0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016e9c:	699a      	ldr	r2, [r3, #24]
 8016e9e:	2100      	movs	r1, #0
 8016ea0:	6159      	str	r1, [r3, #20]
 8016ea2:	6282      	str	r2, [r0, #40]	; 0x28
 8016ea4:	b902      	cbnz	r2, 8016ea8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016ea6:	4770      	bx	lr
 8016ea8:	6199      	str	r1, [r3, #24]
 8016eaa:	4770      	bx	lr
 8016eac:	4613      	mov	r3, r2
 8016eae:	b13a      	cbz	r2, 8016ec0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016eb0:	699a      	ldr	r2, [r3, #24]
 8016eb2:	428a      	cmp	r2, r1
 8016eb4:	d1fa      	bne.n	8016eac <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016eb6:	698a      	ldr	r2, [r1, #24]
 8016eb8:	619a      	str	r2, [r3, #24]
 8016eba:	2300      	movs	r3, #0
 8016ebc:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016ec0:	4770      	bx	lr

08016ec2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016ec2:	b410      	push	{r4}
 8016ec4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016ec6:	4604      	mov	r4, r0
 8016ec8:	b92b      	cbnz	r3, 8016ed6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8016eca:	6803      	ldr	r3, [r0, #0]
 8016ecc:	4611      	mov	r1, r2
 8016ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ed4:	4718      	bx	r3
 8016ed6:	b941      	cbnz	r1, 8016eea <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8016ed8:	6193      	str	r3, [r2, #24]
 8016eda:	6282      	str	r2, [r0, #40]	; 0x28
 8016edc:	6154      	str	r4, [r2, #20]
 8016ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ee2:	4770      	bx	lr
 8016ee4:	4603      	mov	r3, r0
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d0f9      	beq.n	8016ede <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8016eea:	4299      	cmp	r1, r3
 8016eec:	6998      	ldr	r0, [r3, #24]
 8016eee:	d1f9      	bne.n	8016ee4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016ef0:	6190      	str	r0, [r2, #24]
 8016ef2:	618a      	str	r2, [r1, #24]
 8016ef4:	e7f2      	b.n	8016edc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8016ef8:	4288      	cmp	r0, r1
 8016efa:	b508      	push	{r3, lr}
 8016efc:	d105      	bne.n	8016f0a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8016efe:	4b11      	ldr	r3, [pc, #68]	; (8016f44 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8016f00:	2120      	movs	r1, #32
 8016f02:	4a11      	ldr	r2, [pc, #68]	; (8016f48 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016f04:	4811      	ldr	r0, [pc, #68]	; (8016f4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8016f06:	f013 fba5 	bl	802a654 <__assert_func>
 8016f0a:	694b      	ldr	r3, [r1, #20]
 8016f0c:	b11b      	cbz	r3, 8016f16 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8016f0e:	4b10      	ldr	r3, [pc, #64]	; (8016f50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8016f10:	2121      	movs	r1, #33	; 0x21
 8016f12:	4a0d      	ldr	r2, [pc, #52]	; (8016f48 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016f14:	e7f6      	b.n	8016f04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016f16:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8016f1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016f1c:	b913      	cbnz	r3, 8016f24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8016f1e:	6281      	str	r1, [r0, #40]	; 0x28
 8016f20:	bd08      	pop	{r3, pc}
 8016f22:	4613      	mov	r3, r2
 8016f24:	699a      	ldr	r2, [r3, #24]
 8016f26:	b12a      	cbz	r2, 8016f34 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8016f28:	428b      	cmp	r3, r1
 8016f2a:	d1fa      	bne.n	8016f22 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8016f2c:	4b09      	ldr	r3, [pc, #36]	; (8016f54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8016f2e:	2132      	movs	r1, #50	; 0x32
 8016f30:	4a05      	ldr	r2, [pc, #20]	; (8016f48 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016f32:	e7e7      	b.n	8016f04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016f34:	428b      	cmp	r3, r1
 8016f36:	d103      	bne.n	8016f40 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8016f38:	4b06      	ldr	r3, [pc, #24]	; (8016f54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8016f3a:	2135      	movs	r1, #53	; 0x35
 8016f3c:	4a02      	ldr	r2, [pc, #8]	; (8016f48 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016f3e:	e7e1      	b.n	8016f04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016f40:	6199      	str	r1, [r3, #24]
 8016f42:	e7ed      	b.n	8016f20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8016f44:	080300e3 	.word	0x080300e3
 8016f48:	0803023c 	.word	0x0803023c
 8016f4c:	0803010f 	.word	0x0803010f
 8016f50:	08030142 	.word	0x08030142
 8016f54:	08030178 	.word	0x08030178

08016f58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f5c:	461f      	mov	r7, r3
 8016f5e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8016f62:	460d      	mov	r5, r1
 8016f64:	4616      	mov	r6, r2
 8016f66:	b103      	cbz	r3, 8016f6a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8016f68:	6038      	str	r0, [r7, #0]
 8016f6a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016f6c:	b314      	cbz	r4, 8016fb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8016f6e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016f72:	b1eb      	cbz	r3, 8016fb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016f74:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016f78:	428d      	cmp	r5, r1
 8016f7a:	db19      	blt.n	8016fb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016f7c:	b289      	uxth	r1, r1
 8016f7e:	8923      	ldrh	r3, [r4, #8]
 8016f80:	440b      	add	r3, r1
 8016f82:	b21b      	sxth	r3, r3
 8016f84:	429d      	cmp	r5, r3
 8016f86:	da13      	bge.n	8016fb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016f88:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016f8c:	4296      	cmp	r6, r2
 8016f8e:	db0f      	blt.n	8016fb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016f90:	b292      	uxth	r2, r2
 8016f92:	8963      	ldrh	r3, [r4, #10]
 8016f94:	4413      	add	r3, r2
 8016f96:	b21b      	sxth	r3, r3
 8016f98:	429e      	cmp	r6, r3
 8016f9a:	da09      	bge.n	8016fb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016f9c:	6823      	ldr	r3, [r4, #0]
 8016f9e:	1ab2      	subs	r2, r6, r2
 8016fa0:	1a69      	subs	r1, r5, r1
 8016fa2:	4620      	mov	r0, r4
 8016fa4:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8016fa8:	b212      	sxth	r2, r2
 8016faa:	463b      	mov	r3, r7
 8016fac:	b209      	sxth	r1, r1
 8016fae:	47c0      	blx	r8
 8016fb0:	69a4      	ldr	r4, [r4, #24]
 8016fb2:	e7db      	b.n	8016f6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016fb8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8016fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fbc:	4c6d      	ldr	r4, [pc, #436]	; (8017174 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8016fbe:	b0a1      	sub	sp, #132	; 0x84
 8016fc0:	4606      	mov	r6, r0
 8016fc2:	6824      	ldr	r4, [r4, #0]
 8016fc4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8016fc6:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016fca:	2400      	movs	r4, #0
 8016fcc:	9303      	str	r3, [sp, #12]
 8016fce:	802c      	strh	r4, [r5, #0]
 8016fd0:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8016fd2:	802c      	strh	r4, [r5, #0]
 8016fd4:	601c      	str	r4, [r3, #0]
 8016fd6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016fda:	f7ff ffbd 	bl	8016f58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016fde:	f1b9 0f03 	cmp.w	r9, #3
 8016fe2:	f340 80c1 	ble.w	8017168 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8016fe6:	4631      	mov	r1, r6
 8016fe8:	a80c      	add	r0, sp, #48	; 0x30
 8016fea:	f005 fc25 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016fee:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016ff2:	9306      	str	r3, [sp, #24]
 8016ff4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016ff8:	9307      	str	r3, [sp, #28]
 8016ffa:	9b03      	ldr	r3, [sp, #12]
 8016ffc:	f8d3 a000 	ldr.w	sl, [r3]
 8017000:	f1ba 0f00 	cmp.w	sl, #0
 8017004:	f000 80b3 	beq.w	801716e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017008:	4651      	mov	r1, sl
 801700a:	a810      	add	r0, sp, #64	; 0x40
 801700c:	f005 fc14 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017010:	2002      	movs	r0, #2
 8017012:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8017016:	9b01      	ldr	r3, [sp, #4]
 8017018:	9a06      	ldr	r2, [sp, #24]
 801701a:	fb91 f1f0 	sdiv	r1, r1, r0
 801701e:	189d      	adds	r5, r3, r2
 8017020:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8017024:	9a07      	ldr	r2, [sp, #28]
 8017026:	4419      	add	r1, r3
 8017028:	9b02      	ldr	r3, [sp, #8]
 801702a:	4413      	add	r3, r2
 801702c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8017030:	1a6d      	subs	r5, r5, r1
 8017032:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017036:	fb92 f2f0 	sdiv	r2, r2, r0
 801703a:	440a      	add	r2, r1
 801703c:	1a9b      	subs	r3, r3, r2
 801703e:	435b      	muls	r3, r3
 8017040:	fb05 3505 	mla	r5, r5, r5, r3
 8017044:	4f4c      	ldr	r7, [pc, #304]	; (8017178 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8017046:	ac10      	add	r4, sp, #64	; 0x40
 8017048:	f1b9 0f0c 	cmp.w	r9, #12
 801704c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801704e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017050:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017054:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017058:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801705c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017060:	f04f 0303 	mov.w	r3, #3
 8017064:	bfd8      	it	le
 8017066:	f109 32ff 	addle.w	r2, r9, #4294967295	; 0xffffffff
 801706a:	f04f 0400 	mov.w	r4, #0
 801706e:	f8cd 9000 	str.w	r9, [sp]
 8017072:	bfcc      	ite	gt
 8017074:	4698      	movgt	r8, r3
 8017076:	fb92 f8f3 	sdivle	r8, r2, r3
 801707a:	1c63      	adds	r3, r4, #1
 801707c:	aa10      	add	r2, sp, #64	; 0x40
 801707e:	f004 0401 	and.w	r4, r4, #1
 8017082:	f04f 0b00 	mov.w	fp, #0
 8017086:	9308      	str	r3, [sp, #32]
 8017088:	9b00      	ldr	r3, [sp, #0]
 801708a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801708e:	fb93 f3f8 	sdiv	r3, r3, r8
 8017092:	3404      	adds	r4, #4
 8017094:	b29b      	uxth	r3, r3
 8017096:	9304      	str	r3, [sp, #16]
 8017098:	9a04      	ldr	r2, [sp, #16]
 801709a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801709e:	fb13 f302 	smulbb	r3, r3, r2
 80170a2:	9a01      	ldr	r2, [sp, #4]
 80170a4:	b29b      	uxth	r3, r3
 80170a6:	1899      	adds	r1, r3, r2
 80170a8:	9305      	str	r3, [sp, #20]
 80170aa:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80170ae:	b209      	sxth	r1, r1
 80170b0:	4299      	cmp	r1, r3
 80170b2:	db4d      	blt.n	8017150 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170b4:	8932      	ldrh	r2, [r6, #8]
 80170b6:	4413      	add	r3, r2
 80170b8:	b21b      	sxth	r3, r3
 80170ba:	4299      	cmp	r1, r3
 80170bc:	da48      	bge.n	8017150 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170be:	9b04      	ldr	r3, [sp, #16]
 80170c0:	6827      	ldr	r7, [r4, #0]
 80170c2:	fb17 f703 	smulbb	r7, r7, r3
 80170c6:	9b02      	ldr	r3, [sp, #8]
 80170c8:	b2bf      	uxth	r7, r7
 80170ca:	18fa      	adds	r2, r7, r3
 80170cc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80170d0:	b212      	sxth	r2, r2
 80170d2:	429a      	cmp	r2, r3
 80170d4:	db3c      	blt.n	8017150 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170d6:	8970      	ldrh	r0, [r6, #10]
 80170d8:	4403      	add	r3, r0
 80170da:	b21b      	sxth	r3, r3
 80170dc:	429a      	cmp	r2, r3
 80170de:	da37      	bge.n	8017150 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170e0:	2300      	movs	r3, #0
 80170e2:	4630      	mov	r0, r6
 80170e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80170e6:	ab0b      	add	r3, sp, #44	; 0x2c
 80170e8:	f7ff ff36 	bl	8016f58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80170ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80170ee:	b37a      	cbz	r2, 8017150 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170f0:	4552      	cmp	r2, sl
 80170f2:	d02d      	beq.n	8017150 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170f4:	4611      	mov	r1, r2
 80170f6:	a80e      	add	r0, sp, #56	; 0x38
 80170f8:	9209      	str	r2, [sp, #36]	; 0x24
 80170fa:	f005 fb9d 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80170fe:	f04f 0e02 	mov.w	lr, #2
 8017102:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8017106:	9a06      	ldr	r2, [sp, #24]
 8017108:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801710c:	9b01      	ldr	r3, [sp, #4]
 801710e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8017112:	4413      	add	r3, r2
 8017114:	9a07      	ldr	r2, [sp, #28]
 8017116:	fb91 f1fe 	sdiv	r1, r1, lr
 801711a:	fb9c fcfe 	sdiv	ip, ip, lr
 801711e:	4401      	add	r1, r0
 8017120:	1a58      	subs	r0, r3, r1
 8017122:	9b02      	ldr	r3, [sp, #8]
 8017124:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8017128:	4413      	add	r3, r2
 801712a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801712c:	448c      	add	ip, r1
 801712e:	eba3 030c 	sub.w	r3, r3, ip
 8017132:	435b      	muls	r3, r3
 8017134:	fb00 3300 	mla	r3, r0, r0, r3
 8017138:	42ab      	cmp	r3, r5
 801713a:	d208      	bcs.n	801714e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 801713c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801713e:	461d      	mov	r5, r3
 8017140:	9803      	ldr	r0, [sp, #12]
 8017142:	6001      	str	r1, [r0, #0]
 8017144:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8017146:	9805      	ldr	r0, [sp, #20]
 8017148:	8008      	strh	r0, [r1, #0]
 801714a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801714c:	800f      	strh	r7, [r1, #0]
 801714e:	4692      	mov	sl, r2
 8017150:	f10b 0b01 	add.w	fp, fp, #1
 8017154:	3408      	adds	r4, #8
 8017156:	f1bb 0f04 	cmp.w	fp, #4
 801715a:	d19d      	bne.n	8017098 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 801715c:	9b00      	ldr	r3, [sp, #0]
 801715e:	9c08      	ldr	r4, [sp, #32]
 8017160:	444b      	add	r3, r9
 8017162:	4544      	cmp	r4, r8
 8017164:	9300      	str	r3, [sp, #0]
 8017166:	d188      	bne.n	801707a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017168:	b021      	add	sp, #132	; 0x84
 801716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801716e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017172:	e767      	b.n	8017044 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8017174:	200153a0 	.word	0x200153a0
 8017178:	0802bb90 	.word	0x0802bb90

0801717c <_ZN8touchgfx4RectaNERKS0_>:
 801717c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017180:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017184:	888c      	ldrh	r4, [r1, #4]
 8017186:	f9b0 9000 	ldrsh.w	r9, [r0]
 801718a:	443c      	add	r4, r7
 801718c:	b2a4      	uxth	r4, r4
 801718e:	fa0f f884 	sxth.w	r8, r4
 8017192:	45c1      	cmp	r9, r8
 8017194:	da2f      	bge.n	80171f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017196:	8882      	ldrh	r2, [r0, #4]
 8017198:	444a      	add	r2, r9
 801719a:	b292      	uxth	r2, r2
 801719c:	fa0f fe82 	sxth.w	lr, r2
 80171a0:	4577      	cmp	r7, lr
 80171a2:	da28      	bge.n	80171f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80171a4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80171a8:	88cb      	ldrh	r3, [r1, #6]
 80171aa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80171ae:	442b      	add	r3, r5
 80171b0:	b21b      	sxth	r3, r3
 80171b2:	429e      	cmp	r6, r3
 80171b4:	da1f      	bge.n	80171f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80171b6:	88c3      	ldrh	r3, [r0, #6]
 80171b8:	4433      	add	r3, r6
 80171ba:	b29b      	uxth	r3, r3
 80171bc:	fa0f fc83 	sxth.w	ip, r3
 80171c0:	4565      	cmp	r5, ip
 80171c2:	da18      	bge.n	80171f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80171c4:	454f      	cmp	r7, r9
 80171c6:	bfb8      	it	lt
 80171c8:	464f      	movlt	r7, r9
 80171ca:	42b5      	cmp	r5, r6
 80171cc:	bfb8      	it	lt
 80171ce:	4635      	movlt	r5, r6
 80171d0:	45f0      	cmp	r8, lr
 80171d2:	bfd8      	it	le
 80171d4:	4622      	movle	r2, r4
 80171d6:	1bd2      	subs	r2, r2, r7
 80171d8:	8082      	strh	r2, [r0, #4]
 80171da:	884a      	ldrh	r2, [r1, #2]
 80171dc:	88c9      	ldrh	r1, [r1, #6]
 80171de:	8007      	strh	r7, [r0, #0]
 80171e0:	440a      	add	r2, r1
 80171e2:	8045      	strh	r5, [r0, #2]
 80171e4:	b292      	uxth	r2, r2
 80171e6:	b211      	sxth	r1, r2
 80171e8:	458c      	cmp	ip, r1
 80171ea:	bfa8      	it	ge
 80171ec:	4613      	movge	r3, r2
 80171ee:	1b5b      	subs	r3, r3, r5
 80171f0:	80c3      	strh	r3, [r0, #6]
 80171f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171f6:	2300      	movs	r3, #0
 80171f8:	8003      	strh	r3, [r0, #0]
 80171fa:	8043      	strh	r3, [r0, #2]
 80171fc:	8083      	strh	r3, [r0, #4]
 80171fe:	80c3      	strh	r3, [r0, #6]
 8017200:	e7f7      	b.n	80171f2 <_ZN8touchgfx4RectaNERKS0_+0x76>

08017202 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017202:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017206:	2b00      	cmp	r3, #0
 8017208:	dd06      	ble.n	8017218 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801720a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801720e:	2800      	cmp	r0, #0
 8017210:	bfcc      	ite	gt
 8017212:	2000      	movgt	r0, #0
 8017214:	2001      	movle	r0, #1
 8017216:	4770      	bx	lr
 8017218:	2001      	movs	r0, #1
 801721a:	4770      	bx	lr

0801721c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801721c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017220:	2300      	movs	r3, #0
 8017222:	4604      	mov	r4, r0
 8017224:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017226:	8003      	strh	r3, [r0, #0]
 8017228:	8043      	strh	r3, [r0, #2]
 801722a:	8083      	strh	r3, [r0, #4]
 801722c:	80c3      	strh	r3, [r0, #6]
 801722e:	2d00      	cmp	r5, #0
 8017230:	d040      	beq.n	80172b4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017232:	1d28      	adds	r0, r5, #4
 8017234:	f7ff ffe5 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017238:	b988      	cbnz	r0, 801725e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801723a:	4620      	mov	r0, r4
 801723c:	f7ff ffe1 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017240:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017244:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017248:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801724c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017250:	b138      	cbz	r0, 8017262 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017252:	8022      	strh	r2, [r4, #0]
 8017254:	8063      	strh	r3, [r4, #2]
 8017256:	f8a4 e004 	strh.w	lr, [r4, #4]
 801725a:	f8a4 c006 	strh.w	ip, [r4, #6]
 801725e:	69ad      	ldr	r5, [r5, #24]
 8017260:	e7e5      	b.n	801722e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017262:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017266:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801726a:	4290      	cmp	r0, r2
 801726c:	4607      	mov	r7, r0
 801726e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017272:	460e      	mov	r6, r1
 8017274:	bfa8      	it	ge
 8017276:	4617      	movge	r7, r2
 8017278:	4299      	cmp	r1, r3
 801727a:	4472      	add	r2, lr
 801727c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017280:	bfa8      	it	ge
 8017282:	461e      	movge	r6, r3
 8017284:	4440      	add	r0, r8
 8017286:	4471      	add	r1, lr
 8017288:	4463      	add	r3, ip
 801728a:	b200      	sxth	r0, r0
 801728c:	8027      	strh	r7, [r4, #0]
 801728e:	b212      	sxth	r2, r2
 8017290:	8066      	strh	r6, [r4, #2]
 8017292:	b209      	sxth	r1, r1
 8017294:	b21b      	sxth	r3, r3
 8017296:	4290      	cmp	r0, r2
 8017298:	bfac      	ite	ge
 801729a:	ebc7 0200 	rsbge	r2, r7, r0
 801729e:	ebc7 0202 	rsblt	r2, r7, r2
 80172a2:	4299      	cmp	r1, r3
 80172a4:	bfac      	ite	ge
 80172a6:	ebc6 0301 	rsbge	r3, r6, r1
 80172aa:	ebc6 0303 	rsblt	r3, r6, r3
 80172ae:	80a2      	strh	r2, [r4, #4]
 80172b0:	80e3      	strh	r3, [r4, #6]
 80172b2:	e7d4      	b.n	801725e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80172b4:	4620      	mov	r0, r4
 80172b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080172ba <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80172ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80172be:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80172c2:	b383      	cbz	r3, 8017326 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80172c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80172c6:	b374      	cbz	r4, 8017326 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80172c8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80172cc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80172d0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80172d4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80172d8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80172dc:	b303      	cbz	r3, 8017320 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80172de:	4668      	mov	r0, sp
 80172e0:	1d21      	adds	r1, r4, #4
 80172e2:	f8ad 5000 	strh.w	r5, [sp]
 80172e6:	f8ad 6002 	strh.w	r6, [sp, #2]
 80172ea:	f8ad 7004 	strh.w	r7, [sp, #4]
 80172ee:	f8ad 8006 	strh.w	r8, [sp, #6]
 80172f2:	f7ff ff43 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 80172f6:	4668      	mov	r0, sp
 80172f8:	f7ff ff83 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 80172fc:	b980      	cbnz	r0, 8017320 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80172fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8017302:	4669      	mov	r1, sp
 8017304:	88a2      	ldrh	r2, [r4, #4]
 8017306:	4620      	mov	r0, r4
 8017308:	1a9b      	subs	r3, r3, r2
 801730a:	88e2      	ldrh	r2, [r4, #6]
 801730c:	f8ad 3000 	strh.w	r3, [sp]
 8017310:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017314:	1a9b      	subs	r3, r3, r2
 8017316:	f8ad 3002 	strh.w	r3, [sp, #2]
 801731a:	6823      	ldr	r3, [r4, #0]
 801731c:	689b      	ldr	r3, [r3, #8]
 801731e:	4798      	blx	r3
 8017320:	69a4      	ldr	r4, [r4, #24]
 8017322:	2c00      	cmp	r4, #0
 8017324:	d1d8      	bne.n	80172d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017326:	b002      	add	sp, #8
 8017328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801732c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801732c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801732e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017332:	460d      	mov	r5, r1
 8017334:	4616      	mov	r6, r2
 8017336:	b323      	cbz	r3, 8017382 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017338:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801733a:	b314      	cbz	r4, 8017382 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801733c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017340:	b1eb      	cbz	r3, 801737e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017342:	6828      	ldr	r0, [r5, #0]
 8017344:	466b      	mov	r3, sp
 8017346:	6869      	ldr	r1, [r5, #4]
 8017348:	c303      	stmia	r3!, {r0, r1}
 801734a:	4668      	mov	r0, sp
 801734c:	1d21      	adds	r1, r4, #4
 801734e:	f7ff ff15 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 8017352:	4668      	mov	r0, sp
 8017354:	f7ff ff55 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017358:	b988      	cbnz	r0, 801737e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801735a:	f8bd 3000 	ldrh.w	r3, [sp]
 801735e:	4669      	mov	r1, sp
 8017360:	88a2      	ldrh	r2, [r4, #4]
 8017362:	4620      	mov	r0, r4
 8017364:	1a9b      	subs	r3, r3, r2
 8017366:	88e2      	ldrh	r2, [r4, #6]
 8017368:	f8ad 3000 	strh.w	r3, [sp]
 801736c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017370:	1a9b      	subs	r3, r3, r2
 8017372:	4632      	mov	r2, r6
 8017374:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017378:	6823      	ldr	r3, [r4, #0]
 801737a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801737c:	4798      	blx	r3
 801737e:	69a4      	ldr	r4, [r4, #24]
 8017380:	e7db      	b.n	801733a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017382:	b002      	add	sp, #8
 8017384:	bd70      	pop	{r4, r5, r6, pc}

08017386 <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>:
 8017386:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8017388:	4770      	bx	lr

0801738a <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>:
 801738a:	4770      	bx	lr

0801738c <_ZN8touchgfx14SwipeContainer13PageIndicatorD0Ev>:
 801738c:	b510      	push	{r4, lr}
 801738e:	4604      	mov	r4, r0
 8017390:	218c      	movs	r1, #140	; 0x8c
 8017392:	f013 f930 	bl	802a5f6 <_ZdlPvj>
 8017396:	4620      	mov	r0, r4
 8017398:	bd10      	pop	{r4, pc}
	...

0801739c <_ZN8touchgfx14SwipeContainerD1Ev>:
 801739c:	4b05      	ldr	r3, [pc, #20]	; (80173b4 <_ZN8touchgfx14SwipeContainerD1Ev+0x18>)
 801739e:	b510      	push	{r4, lr}
 80173a0:	4604      	mov	r4, r0
 80173a2:	6003      	str	r3, [r0, #0]
 80173a4:	f004 f9d6 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
 80173a8:	4621      	mov	r1, r4
 80173aa:	f004 fa0b 	bl	801b7c4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 80173ae:	4620      	mov	r0, r4
 80173b0:	bd10      	pop	{r4, pc}
 80173b2:	bf00      	nop
 80173b4:	080303dc 	.word	0x080303dc

080173b8 <_ZN8touchgfx14SwipeContainerD0Ev>:
 80173b8:	b510      	push	{r4, lr}
 80173ba:	4604      	mov	r4, r0
 80173bc:	f7ff ffee 	bl	801739c <_ZN8touchgfx14SwipeContainerD1Ev>
 80173c0:	21f4      	movs	r1, #244	; 0xf4
 80173c2:	4620      	mov	r0, r4
 80173c4:	f013 f917 	bl	802a5f6 <_ZdlPvj>
 80173c8:	4620      	mov	r0, r4
 80173ca:	bd10      	pop	{r4, pc}

080173cc <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE>:
 80173cc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80173d0:	2b04      	cmp	r3, #4
 80173d2:	d117      	bne.n	8017404 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x38>
 80173d4:	790b      	ldrb	r3, [r1, #4]
 80173d6:	2b01      	cmp	r3, #1
 80173d8:	d114      	bne.n	8017404 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x38>
 80173da:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 80173de:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	8643      	strh	r3, [r0, #50]	; 0x32
 80173e4:	8682      	strh	r2, [r0, #52]	; 0x34
 80173e6:	f890 10f1 	ldrb.w	r1, [r0, #241]	; 0xf1
 80173ea:	da0e      	bge.n	801740a <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3e>
 80173ec:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 80173f0:	3a01      	subs	r2, #1
 80173f2:	4291      	cmp	r1, r2
 80173f4:	d007      	beq.n	8017406 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 80173f6:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 80173f8:	4252      	negs	r2, r2
 80173fa:	4293      	cmp	r3, r2
 80173fc:	dc03      	bgt.n	8017406 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 80173fe:	2302      	movs	r3, #2
 8017400:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8017404:	4770      	bx	lr
 8017406:	2300      	movs	r3, #0
 8017408:	e7fa      	b.n	8017400 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x34>
 801740a:	d0fb      	beq.n	8017404 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x38>
 801740c:	b111      	cbz	r1, 8017414 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x48>
 801740e:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 8017410:	4293      	cmp	r3, r2
 8017412:	da01      	bge.n	8017418 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4c>
 8017414:	2301      	movs	r3, #1
 8017416:	e7f3      	b.n	8017400 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x34>
 8017418:	2303      	movs	r3, #3
 801741a:	e7f1      	b.n	8017400 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x34>

0801741c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE>:
 801741c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017420:	2b04      	cmp	r3, #4
 8017422:	d113      	bne.n	801744c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x30>
 8017424:	790b      	ldrb	r3, [r1, #4]
 8017426:	b98b      	cbnz	r3, 801744c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x30>
 8017428:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801742a:	f890 20f1 	ldrb.w	r2, [r0, #241]	; 0xf1
 801742e:	8643      	strh	r3, [r0, #50]	; 0x32
 8017430:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8017432:	8683      	strh	r3, [r0, #52]	; 0x34
 8017434:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017438:	2b00      	cmp	r3, #0
 801743a:	da08      	bge.n	801744e <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 801743c:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
 8017440:	3b01      	subs	r3, #1
 8017442:	429a      	cmp	r2, r3
 8017444:	da02      	bge.n	801744c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x30>
 8017446:	2302      	movs	r3, #2
 8017448:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801744c:	4770      	bx	lr
 801744e:	d0fd      	beq.n	801744c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x30>
 8017450:	2a00      	cmp	r2, #0
 8017452:	d0fb      	beq.n	801744c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x30>
 8017454:	2303      	movs	r3, #3
 8017456:	e7f7      	b.n	8017448 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x2c>

08017458 <_ZN8touchgfx8DrawableC1Ev>:
 8017458:	4a0a      	ldr	r2, [pc, #40]	; (8017484 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 801745a:	6002      	str	r2, [r0, #0]
 801745c:	2200      	movs	r2, #0
 801745e:	8082      	strh	r2, [r0, #4]
 8017460:	80c2      	strh	r2, [r0, #6]
 8017462:	8102      	strh	r2, [r0, #8]
 8017464:	8142      	strh	r2, [r0, #10]
 8017466:	8182      	strh	r2, [r0, #12]
 8017468:	81c2      	strh	r2, [r0, #14]
 801746a:	8202      	strh	r2, [r0, #16]
 801746c:	8242      	strh	r2, [r0, #18]
 801746e:	61c2      	str	r2, [r0, #28]
 8017470:	8402      	strh	r2, [r0, #32]
 8017472:	8442      	strh	r2, [r0, #34]	; 0x22
 8017474:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017478:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801747c:	2201      	movs	r2, #1
 801747e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8017482:	4770      	bx	lr
 8017484:	080314b8 	.word	0x080314b8

08017488 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8017488:	b570      	push	{r4, r5, r6, lr}
 801748a:	6803      	ldr	r3, [r0, #0]
 801748c:	4604      	mov	r4, r0
 801748e:	4615      	mov	r5, r2
 8017490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017492:	4798      	blx	r3
 8017494:	6823      	ldr	r3, [r4, #0]
 8017496:	4629      	mov	r1, r5
 8017498:	4620      	mov	r0, r4
 801749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801749c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174a0:	4718      	bx	r3

080174a2 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>:
 80174a2:	86c1      	strh	r1, [r0, #54]	; 0x36
 80174a4:	4770      	bx	lr

080174a6 <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>:
 80174a6:	b508      	push	{r3, lr}
 80174a8:	3068      	adds	r0, #104	; 0x68
 80174aa:	f7ec fa06 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 80174ae:	bd08      	pop	{r3, pc}

080174b0 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>:
 80174b0:	b508      	push	{r3, lr}
 80174b2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80174b4:	3038      	adds	r0, #56	; 0x38
 80174b6:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
 80174ba:	f930 3c30 	ldrsh.w	r3, [r0, #-48]
 80174be:	fb03 2111 	mls	r1, r3, r1, r2
 80174c2:	2200      	movs	r2, #0
 80174c4:	b209      	sxth	r1, r1
 80174c6:	f7ec f99e 	bl	8003806 <_ZN8touchgfx8Drawable6moveToEss>
 80174ca:	bd08      	pop	{r3, pc}

080174cc <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE>:
 80174cc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80174d0:	2b04      	cmp	r3, #4
 80174d2:	d119      	bne.n	8017508 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x3c>
 80174d4:	88ca      	ldrh	r2, [r1, #6]
 80174d6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80174d8:	1a9b      	subs	r3, r3, r2
 80174da:	894a      	ldrh	r2, [r1, #10]
 80174dc:	f890 10f1 	ldrb.w	r1, [r0, #241]	; 0xf1
 80174e0:	4413      	add	r3, r2
 80174e2:	b21b      	sxth	r3, r3
 80174e4:	8603      	strh	r3, [r0, #48]	; 0x30
 80174e6:	b921      	cbnz	r1, 80174f2 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 80174e8:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 80174ea:	4293      	cmp	r3, r2
 80174ec:	dd01      	ble.n	80174f2 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 80174ee:	8602      	strh	r2, [r0, #48]	; 0x30
 80174f0:	e008      	b.n	8017504 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 80174f2:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 80174f6:	3a01      	subs	r2, #1
 80174f8:	4291      	cmp	r1, r2
 80174fa:	d103      	bne.n	8017504 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 80174fc:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 80174fe:	4252      	negs	r2, r2
 8017500:	4293      	cmp	r3, r2
 8017502:	dbf4      	blt.n	80174ee <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x22>
 8017504:	f7ff bfd4 	b.w	80174b0 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8017508:	4770      	bx	lr

0801750a <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>:
 801750a:	b538      	push	{r3, r4, r5, lr}
 801750c:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8017510:	4604      	mov	r4, r0
 8017512:	2d0e      	cmp	r5, #14
 8017514:	d813      	bhi.n	801753e <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x34>
 8017516:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8017518:	230e      	movs	r3, #14
 801751a:	2100      	movs	r1, #0
 801751c:	4628      	mov	r0, r5
 801751e:	4252      	negs	r2, r2
 8017520:	b212      	sxth	r2, r2
 8017522:	f005 fd41 	bl	801cfa8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 8017526:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8017528:	4418      	add	r0, r3
 801752a:	8620      	strh	r0, [r4, #48]	; 0x30
 801752c:	4620      	mov	r0, r4
 801752e:	f7ff ffbf 	bl	80174b0 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8017532:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017536:	3301      	adds	r3, #1
 8017538:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801753c:	bd38      	pop	{r3, r4, r5, pc}
 801753e:	2304      	movs	r3, #4
 8017540:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8017544:	2300      	movs	r3, #0
 8017546:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
 801754a:	8603      	strh	r3, [r0, #48]	; 0x30
 801754c:	e7ef      	b.n	801752e <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x24>

0801754e <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>:
 801754e:	b538      	push	{r3, r4, r5, lr}
 8017550:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8017554:	4604      	mov	r4, r0
 8017556:	2d0e      	cmp	r5, #14
 8017558:	d812      	bhi.n	8017580 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x32>
 801755a:	230e      	movs	r3, #14
 801755c:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 8017560:	2100      	movs	r1, #0
 8017562:	4628      	mov	r0, r5
 8017564:	f005 fd20 	bl	801cfa8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 8017568:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801756a:	1a18      	subs	r0, r3, r0
 801756c:	8620      	strh	r0, [r4, #48]	; 0x30
 801756e:	4620      	mov	r0, r4
 8017570:	f7ff ff9e 	bl	80174b0 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8017574:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017578:	3301      	adds	r3, #1
 801757a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801757e:	bd38      	pop	{r3, r4, r5, pc}
 8017580:	2304      	movs	r3, #4
 8017582:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8017586:	2300      	movs	r3, #0
 8017588:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
 801758c:	8603      	strh	r3, [r0, #48]	; 0x30
 801758e:	e7ef      	b.n	8017570 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x22>

08017590 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>:
 8017590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017594:	4604      	mov	r4, r0
 8017596:	2500      	movs	r5, #0
 8017598:	f7ff ff5e 	bl	8017458 <_ZN8touchgfx8DrawableC1Ev>
 801759c:	af02      	add	r7, sp, #8
 801759e:	4626      	mov	r6, r4
 80175a0:	4b18      	ldr	r3, [pc, #96]	; (8017604 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x74>)
 80175a2:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80175a6:	62a5      	str	r5, [r4, #40]	; 0x28
 80175a8:	f846 3b2c 	str.w	r3, [r6], #44
 80175ac:	4630      	mov	r0, r6
 80175ae:	f827 9d04 	strh.w	r9, [r7, #-4]!
 80175b2:	4639      	mov	r1, r7
 80175b4:	f7ec f9fc 	bl	80039b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80175b8:	f104 085c 	add.w	r8, r4, #92	; 0x5c
 80175bc:	4b12      	ldr	r3, [pc, #72]	; (8017608 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x78>)
 80175be:	4639      	mov	r1, r7
 80175c0:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80175c4:	4640      	mov	r0, r8
 80175c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80175c8:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
 80175cc:	f8ad 9004 	strh.w	r9, [sp, #4]
 80175d0:	f7ec f9ee 	bl	80039b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80175d4:	462a      	mov	r2, r5
 80175d6:	4629      	mov	r1, r5
 80175d8:	4630      	mov	r0, r6
 80175da:	f8a4 5088 	strh.w	r5, [r4, #136]	; 0x88
 80175de:	f7ec f96c 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 80175e2:	462a      	mov	r2, r5
 80175e4:	4629      	mov	r1, r5
 80175e6:	4640      	mov	r0, r8
 80175e8:	f7ec f967 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 80175ec:	4631      	mov	r1, r6
 80175ee:	4620      	mov	r0, r4
 80175f0:	f7ff fc82 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80175f4:	4620      	mov	r0, r4
 80175f6:	4641      	mov	r1, r8
 80175f8:	f7ff fc7e 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80175fc:	4620      	mov	r0, r4
 80175fe:	b003      	add	sp, #12
 8017600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017604:	08030280 	.word	0x08030280
 8017608:	08030ff0 	.word	0x08030ff0

0801760c <_ZN8touchgfx14SwipeContainerC1Ev>:
 801760c:	b570      	push	{r4, r5, r6, lr}
 801760e:	4604      	mov	r4, r0
 8017610:	f7ff ff22 	bl	8017458 <_ZN8touchgfx8DrawableC1Ev>
 8017614:	4b19      	ldr	r3, [pc, #100]	; (801767c <_ZN8touchgfx14SwipeContainerC1Ev+0x70>)
 8017616:	2500      	movs	r5, #0
 8017618:	f104 0638 	add.w	r6, r4, #56	; 0x38
 801761c:	6023      	str	r3, [r4, #0]
 801761e:	2304      	movs	r3, #4
 8017620:	62a5      	str	r5, [r4, #40]	; 0x28
 8017622:	4630      	mov	r0, r6
 8017624:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8017628:	2350      	movs	r3, #80	; 0x50
 801762a:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
 801762e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8017630:	231e      	movs	r3, #30
 8017632:	8625      	strh	r5, [r4, #48]	; 0x30
 8017634:	8665      	strh	r5, [r4, #50]	; 0x32
 8017636:	86a5      	strh	r5, [r4, #52]	; 0x34
 8017638:	86e3      	strh	r3, [r4, #54]	; 0x36
 801763a:	f7ff ff0d 	bl	8017458 <_ZN8touchgfx8DrawableC1Ev>
 801763e:	4b10      	ldr	r3, [pc, #64]	; (8017680 <_ZN8touchgfx14SwipeContainerC1Ev+0x74>)
 8017640:	6625      	str	r5, [r4, #96]	; 0x60
 8017642:	63a3      	str	r3, [r4, #56]	; 0x38
 8017644:	2302      	movs	r3, #2
 8017646:	f8a4 5066 	strh.w	r5, [r4, #102]	; 0x66
 801764a:	f104 0568 	add.w	r5, r4, #104	; 0x68
 801764e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8017652:	4628      	mov	r0, r5
 8017654:	f7ff ff9c 	bl	8017590 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>
 8017658:	f004 f87c 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
 801765c:	4621      	mov	r1, r4
 801765e:	f004 f87f 	bl	801b760 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8017662:	2301      	movs	r3, #1
 8017664:	4631      	mov	r1, r6
 8017666:	4620      	mov	r0, r4
 8017668:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 801766c:	f7ff fc44 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017670:	4620      	mov	r0, r4
 8017672:	4629      	mov	r1, r5
 8017674:	f7ff fc40 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017678:	4620      	mov	r0, r4
 801767a:	bd70      	pop	{r4, r5, r6, pc}
 801767c:	080303dc 	.word	0x080303dc
 8017680:	08030590 	.word	0x08030590

08017684 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>:
 8017684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017686:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801768a:	4604      	mov	r4, r0
 801768c:	460d      	mov	r5, r1
 801768e:	428b      	cmp	r3, r1
 8017690:	d915      	bls.n	80176be <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 8017692:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
 8017696:	428b      	cmp	r3, r1
 8017698:	d011      	beq.n	80176be <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 801769a:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
 801769e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80176a2:	a802      	add	r0, sp, #8
 80176a4:	f820 3d04 	strh.w	r3, [r0, #-4]!
 80176a8:	f006 fda0 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 80176ac:	fb15 f100 	smulbb	r1, r5, r0
 80176b0:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 80176b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80176b8:	b209      	sxth	r1, r1
 80176ba:	f7ec f8a4 	bl	8003806 <_ZN8touchgfx8Drawable6moveToEss>
 80176be:	b003      	add	sp, #12
 80176c0:	bd30      	pop	{r4, r5, pc}
	...

080176c4 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>:
 80176c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176c6:	4604      	mov	r4, r0
 80176c8:	460d      	mov	r5, r1
 80176ca:	f884 1088 	strb.w	r1, [r4, #136]	; 0x88
 80176ce:	b931      	cbnz	r1, 80176de <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x1a>
 80176d0:	4b18      	ldr	r3, [pc, #96]	; (8017734 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x70>)
 80176d2:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80176d6:	4a18      	ldr	r2, [pc, #96]	; (8017738 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x74>)
 80176d8:	4818      	ldr	r0, [pc, #96]	; (801773c <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x78>)
 80176da:	f012 ffbb 	bl	802a654 <__assert_func>
 80176de:	4b18      	ldr	r3, [pc, #96]	; (8017740 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x7c>)
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	b923      	cbnz	r3, 80176ee <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x2a>
 80176e4:	4b17      	ldr	r3, [pc, #92]	; (8017744 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x80>)
 80176e6:	2187      	movs	r1, #135	; 0x87
 80176e8:	4a17      	ldr	r2, [pc, #92]	; (8017748 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x84>)
 80176ea:	4818      	ldr	r0, [pc, #96]	; (801774c <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x88>)
 80176ec:	e7f5      	b.n	80176da <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x16>
 80176ee:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80176f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80176f6:	4293      	cmp	r3, r2
 80176f8:	d019      	beq.n	801772e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x6a>
 80176fa:	a802      	add	r0, sp, #8
 80176fc:	f820 3d04 	strh.w	r3, [r0, #-4]!
 8017700:	f006 fd74 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017704:	fb15 f100 	smulbb	r1, r5, r0
 8017708:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 801770c:	4620      	mov	r0, r4
 801770e:	b209      	sxth	r1, r1
 8017710:	86a1      	strh	r1, [r4, #52]	; 0x34
 8017712:	f7ff feb9 	bl	8017488 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017716:	f894 1089 	ldrb.w	r1, [r4, #137]	; 0x89
 801771a:	4620      	mov	r0, r4
 801771c:	42a9      	cmp	r1, r5
 801771e:	bf28      	it	cs
 8017720:	4629      	movcs	r1, r5
 8017722:	f7ff ffaf 	bl	8017684 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 8017726:	6823      	ldr	r3, [r4, #0]
 8017728:	4620      	mov	r0, r4
 801772a:	699b      	ldr	r3, [r3, #24]
 801772c:	4798      	blx	r3
 801772e:	b003      	add	sp, #12
 8017730:	bd30      	pop	{r4, r5, pc}
 8017732:	bf00      	nop
 8017734:	08030308 	.word	0x08030308
 8017738:	08030468 	.word	0x08030468
 801773c:	0803033a 	.word	0x0803033a
 8017740:	20015428 	.word	0x20015428
 8017744:	08030372 	.word	0x08030372
 8017748:	080304b0 	.word	0x080304b0
 801774c:	080303ae 	.word	0x080303ae

08017750 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_>:
 8017750:	b538      	push	{r3, r4, r5, lr}
 8017752:	4604      	mov	r4, r0
 8017754:	460d      	mov	r5, r1
 8017756:	305c      	adds	r0, #92	; 0x5c
 8017758:	4611      	mov	r1, r2
 801775a:	f002 fa88 	bl	8019c6e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801775e:	4629      	mov	r1, r5
 8017760:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8017764:	f001 ffda 	bl	801971c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8017768:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
 801776c:	b121      	cbz	r1, 8017778 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_+0x28>
 801776e:	4620      	mov	r0, r4
 8017770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017774:	f7ff bfa6 	b.w	80176c4 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 8017778:	bd38      	pop	{r3, r4, r5, pc}

0801777a <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>:
 801777a:	3068      	adds	r0, #104	; 0x68
 801777c:	f7ff bfe8 	b.w	8017750 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_>

08017780 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>:
 8017780:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
 8017784:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
 8017788:	3101      	adds	r1, #1
 801778a:	fb91 f3f2 	sdiv	r3, r1, r2
 801778e:	fb02 1113 	mls	r1, r2, r3, r1
 8017792:	b2c9      	uxtb	r1, r1
 8017794:	f7ff bf76 	b.w	8017684 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

08017798 <_ZN8touchgfx14SwipeContainer11animateLeftEv>:
 8017798:	b510      	push	{r4, lr}
 801779a:	4604      	mov	r4, r0
 801779c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 80177a0:	280a      	cmp	r0, #10
 80177a2:	d813      	bhi.n	80177cc <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x34>
 80177a4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80177a6:	2100      	movs	r1, #0
 80177a8:	8922      	ldrh	r2, [r4, #8]
 80177aa:	441a      	add	r2, r3
 80177ac:	230a      	movs	r3, #10
 80177ae:	b212      	sxth	r2, r2
 80177b0:	f005 fc38 	bl	801d024 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80177b4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80177b6:	1a18      	subs	r0, r3, r0
 80177b8:	8620      	strh	r0, [r4, #48]	; 0x30
 80177ba:	4620      	mov	r0, r4
 80177bc:	f7ff fe78 	bl	80174b0 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80177c0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80177c4:	3301      	adds	r3, #1
 80177c6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80177ca:	bd10      	pop	{r4, pc}
 80177cc:	2304      	movs	r3, #4
 80177ce:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80177d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80177d6:	2300      	movs	r3, #0
 80177d8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80177dc:	8623      	strh	r3, [r4, #48]	; 0x30
 80177de:	f7ff ffcf 	bl	8017780 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 80177e2:	e7ea      	b.n	80177ba <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x22>

080177e4 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>:
 80177e4:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
 80177e8:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
 80177ec:	4411      	add	r1, r2
 80177ee:	3901      	subs	r1, #1
 80177f0:	fb91 f3f2 	sdiv	r3, r1, r2
 80177f4:	fb02 1113 	mls	r1, r2, r3, r1
 80177f8:	b2c9      	uxtb	r1, r1
 80177fa:	f7ff bf43 	b.w	8017684 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

080177fe <_ZN8touchgfx14SwipeContainer12animateRightEv>:
 80177fe:	b510      	push	{r4, lr}
 8017800:	4604      	mov	r4, r0
 8017802:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8017806:	280a      	cmp	r0, #10
 8017808:	d813      	bhi.n	8017832 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x34>
 801780a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801780c:	2100      	movs	r1, #0
 801780e:	8922      	ldrh	r2, [r4, #8]
 8017810:	1ad2      	subs	r2, r2, r3
 8017812:	230a      	movs	r3, #10
 8017814:	b212      	sxth	r2, r2
 8017816:	f005 fc05 	bl	801d024 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801781a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801781c:	4418      	add	r0, r3
 801781e:	8620      	strh	r0, [r4, #48]	; 0x30
 8017820:	4620      	mov	r0, r4
 8017822:	f7ff fe45 	bl	80174b0 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8017826:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801782a:	3301      	adds	r3, #1
 801782c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017830:	bd10      	pop	{r4, pc}
 8017832:	2304      	movs	r3, #4
 8017834:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017838:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801783c:	2300      	movs	r3, #0
 801783e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017842:	8623      	strh	r3, [r4, #48]	; 0x30
 8017844:	f7ff ffce 	bl	80177e4 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 8017848:	e7ea      	b.n	8017820 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x22>

0801784a <_ZN8touchgfx14SwipeContainer15handleTickEventEv>:
 801784a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801784e:	b90b      	cbnz	r3, 8017854 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0xa>
 8017850:	f7ff be5b 	b.w	801750a <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>
 8017854:	2b01      	cmp	r3, #1
 8017856:	d101      	bne.n	801785c <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x12>
 8017858:	f7ff be79 	b.w	801754e <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>
 801785c:	2b02      	cmp	r3, #2
 801785e:	d101      	bne.n	8017864 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x1a>
 8017860:	f7ff bf9a 	b.w	8017798 <_ZN8touchgfx14SwipeContainer11animateLeftEv>
 8017864:	2b03      	cmp	r3, #3
 8017866:	d101      	bne.n	801786c <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x22>
 8017868:	f7ff bfc9 	b.w	80177fe <_ZN8touchgfx14SwipeContainer12animateRightEv>
 801786c:	4770      	bx	lr

0801786e <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>:
 801786e:	b510      	push	{r4, lr}
 8017870:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
 8017874:	4604      	mov	r4, r0
 8017876:	428b      	cmp	r3, r1
 8017878:	d907      	bls.n	801788a <_ZN8touchgfx14SwipeContainer15setSelectedPageEh+0x1c>
 801787a:	3068      	adds	r0, #104	; 0x68
 801787c:	f7ff ff02 	bl	8017684 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 8017880:	4620      	mov	r0, r4
 8017882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017886:	f7ff be13 	b.w	80174b0 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801788a:	bd10      	pop	{r4, pc}

0801788c <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>:
 801788c:	b538      	push	{r3, r4, r5, lr}
 801788e:	4604      	mov	r4, r0
 8017890:	3038      	adds	r0, #56	; 0x38
 8017892:	460d      	mov	r5, r1
 8017894:	f000 f974 	bl	8017b80 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
 8017898:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
 801789c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80178a0:	3101      	adds	r1, #1
 80178a2:	b2c9      	uxtb	r1, r1
 80178a4:	f7ff ff0e 	bl	80176c4 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 80178a8:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
 80178ac:	4620      	mov	r0, r4
 80178ae:	f7ff ffde 	bl	801786e <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 80178b2:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 80178b6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80178ba:	4620      	mov	r0, r4
 80178bc:	f7ff fde4 	bl	8017488 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80178c0:	bd38      	pop	{r3, r4, r5, pc}

080178c2 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE>:
 80178c2:	b570      	push	{r4, r5, r6, lr}
 80178c4:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
 80178c8:	4604      	mov	r4, r0
 80178ca:	b1cb      	cbz	r3, 8017900 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x3e>
 80178cc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80178ce:	b1bb      	cbz	r3, 8017900 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x3e>
 80178d0:	428b      	cmp	r3, r1
 80178d2:	d128      	bne.n	8017926 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x64>
 80178d4:	4619      	mov	r1, r3
 80178d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80178da:	f000 f9d1 	bl	8017c80 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>
 80178de:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
 80178e2:	f104 0668 	add.w	r6, r4, #104	; 0x68
 80178e6:	3901      	subs	r1, #1
 80178e8:	4630      	mov	r0, r6
 80178ea:	b2c9      	uxtb	r1, r1
 80178ec:	f7ff feea 	bl	80176c4 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 80178f0:	f894 50f0 	ldrb.w	r5, [r4, #240]	; 0xf0
 80178f4:	b92d      	cbnz	r5, 8017902 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x40>
 80178f6:	462a      	mov	r2, r5
 80178f8:	4629      	mov	r1, r5
 80178fa:	4620      	mov	r0, r4
 80178fc:	f7ff fdc4 	bl	8017488 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017900:	bd70      	pop	{r4, r5, r6, pc}
 8017902:	4630      	mov	r0, r6
 8017904:	3d01      	subs	r5, #1
 8017906:	f7ff fab3 	bl	8016e70 <_ZNK8touchgfx9Container17invalidateContentEv>
 801790a:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
 801790e:	4620      	mov	r0, r4
 8017910:	42a9      	cmp	r1, r5
 8017912:	bfa8      	it	ge
 8017914:	4629      	movge	r1, r5
 8017916:	b2c9      	uxtb	r1, r1
 8017918:	f7ff ffa9 	bl	801786e <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 801791c:	4630      	mov	r0, r6
 801791e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017922:	f7ff baa5 	b.w	8016e70 <_ZNK8touchgfx9Container17invalidateContentEv>
 8017926:	699b      	ldr	r3, [r3, #24]
 8017928:	e7d1      	b.n	80178ce <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0xc>

0801792a <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 801792a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801792e:	4770      	bx	lr

08017930 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 8017930:	b538      	push	{r3, r4, r5, lr}
 8017932:	7882      	ldrb	r2, [r0, #2]
 8017934:	4604      	mov	r4, r0
 8017936:	460d      	mov	r5, r1
 8017938:	6843      	ldr	r3, [r0, #4]
 801793a:	b98a      	cbnz	r2, 8017960 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 801793c:	4299      	cmp	r1, r3
 801793e:	d101      	bne.n	8017944 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8017940:	2301      	movs	r3, #1
 8017942:	7083      	strb	r3, [r0, #2]
 8017944:	6863      	ldr	r3, [r4, #4]
 8017946:	42ab      	cmp	r3, r5
 8017948:	d009      	beq.n	801795e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 801794a:	7a23      	ldrb	r3, [r4, #8]
 801794c:	2b01      	cmp	r3, #1
 801794e:	d11b      	bne.n	8017988 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 8017950:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8017954:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017958:	429a      	cmp	r2, r3
 801795a:	bfb8      	it	lt
 801795c:	8023      	strhlt	r3, [r4, #0]
 801795e:	bd38      	pop	{r3, r4, r5, pc}
 8017960:	7a02      	ldrb	r2, [r0, #8]
 8017962:	2a01      	cmp	r2, #1
 8017964:	d108      	bne.n	8017978 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 8017966:	895b      	ldrh	r3, [r3, #10]
 8017968:	88c9      	ldrh	r1, [r1, #6]
 801796a:	1ac9      	subs	r1, r1, r3
 801796c:	682b      	ldr	r3, [r5, #0]
 801796e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017970:	b209      	sxth	r1, r1
 8017972:	4628      	mov	r0, r5
 8017974:	4798      	blx	r3
 8017976:	e7e5      	b.n	8017944 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8017978:	2a02      	cmp	r2, #2
 801797a:	d1e3      	bne.n	8017944 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801797c:	891b      	ldrh	r3, [r3, #8]
 801797e:	8889      	ldrh	r1, [r1, #4]
 8017980:	1ac9      	subs	r1, r1, r3
 8017982:	682b      	ldr	r3, [r5, #0]
 8017984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017986:	e7f3      	b.n	8017970 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 8017988:	2b02      	cmp	r3, #2
 801798a:	d1e8      	bne.n	801795e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 801798c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8017990:	e7e0      	b.n	8017954 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

08017992 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 8017992:	4770      	bx	lr

08017994 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 8017994:	4770      	bx	lr

08017996 <_ZN8touchgfx10ListLayoutD1Ev>:
 8017996:	4770      	bx	lr

08017998 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 8017998:	b430      	push	{r4, r5}
 801799a:	68c5      	ldr	r5, [r0, #12]
 801799c:	4603      	mov	r3, r0
 801799e:	6844      	ldr	r4, [r0, #4]
 80179a0:	106a      	asrs	r2, r5, #1
 80179a2:	07ed      	lsls	r5, r5, #31
 80179a4:	689b      	ldr	r3, [r3, #8]
 80179a6:	eb04 0002 	add.w	r0, r4, r2
 80179aa:	bf48      	it	mi
 80179ac:	58a2      	ldrmi	r2, [r4, r2]
 80179ae:	bc30      	pop	{r4, r5}
 80179b0:	bf48      	it	mi
 80179b2:	58d3      	ldrmi	r3, [r2, r3]
 80179b4:	4718      	bx	r3

080179b6 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 80179b6:	6843      	ldr	r3, [r0, #4]
 80179b8:	b12b      	cbz	r3, 80179c6 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 80179ba:	6883      	ldr	r3, [r0, #8]
 80179bc:	b92b      	cbnz	r3, 80179ca <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 80179be:	68c0      	ldr	r0, [r0, #12]
 80179c0:	f000 0001 	and.w	r0, r0, #1
 80179c4:	4770      	bx	lr
 80179c6:	4618      	mov	r0, r3
 80179c8:	4770      	bx	lr
 80179ca:	2001      	movs	r0, #1
 80179cc:	4770      	bx	lr

080179ce <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 80179ce:	b430      	push	{r4, r5}
 80179d0:	68c5      	ldr	r5, [r0, #12]
 80179d2:	4603      	mov	r3, r0
 80179d4:	6844      	ldr	r4, [r0, #4]
 80179d6:	106a      	asrs	r2, r5, #1
 80179d8:	07ed      	lsls	r5, r5, #31
 80179da:	689b      	ldr	r3, [r3, #8]
 80179dc:	eb04 0002 	add.w	r0, r4, r2
 80179e0:	bf48      	it	mi
 80179e2:	58a2      	ldrmi	r2, [r4, r2]
 80179e4:	bc30      	pop	{r4, r5}
 80179e6:	bf48      	it	mi
 80179e8:	58d3      	ldrmi	r3, [r2, r3]
 80179ea:	4718      	bx	r3

080179ec <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 80179ec:	6843      	ldr	r3, [r0, #4]
 80179ee:	b12b      	cbz	r3, 80179fc <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 80179f0:	6883      	ldr	r3, [r0, #8]
 80179f2:	b92b      	cbnz	r3, 8017a00 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 80179f4:	68c0      	ldr	r0, [r0, #12]
 80179f6:	f000 0001 	and.w	r0, r0, #1
 80179fa:	4770      	bx	lr
 80179fc:	4618      	mov	r0, r3
 80179fe:	4770      	bx	lr
 8017a00:	2001      	movs	r0, #1
 8017a02:	4770      	bx	lr

08017a04 <_ZN8touchgfx10ListLayoutD0Ev>:
 8017a04:	b510      	push	{r4, lr}
 8017a06:	4604      	mov	r4, r0
 8017a08:	2130      	movs	r1, #48	; 0x30
 8017a0a:	f012 fdf4 	bl	802a5f6 <_ZdlPvj>
 8017a0e:	4620      	mov	r0, r4
 8017a10:	bd10      	pop	{r4, pc}

08017a12 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 8017a12:	b510      	push	{r4, lr}
 8017a14:	4604      	mov	r4, r0
 8017a16:	2110      	movs	r1, #16
 8017a18:	f012 fded 	bl	802a5f6 <_ZdlPvj>
 8017a1c:	4620      	mov	r0, r4
 8017a1e:	bd10      	pop	{r4, pc}

08017a20 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 8017a20:	b510      	push	{r4, lr}
 8017a22:	4604      	mov	r4, r0
 8017a24:	2110      	movs	r1, #16
 8017a26:	f012 fde6 	bl	802a5f6 <_ZdlPvj>
 8017a2a:	4620      	mov	r0, r4
 8017a2c:	bd10      	pop	{r4, pc}

08017a2e <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 8017a2e:	4603      	mov	r3, r0
 8017a30:	4608      	mov	r0, r1
 8017a32:	789a      	ldrb	r2, [r3, #2]
 8017a34:	b992      	cbnz	r2, 8017a5c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 8017a36:	685a      	ldr	r2, [r3, #4]
 8017a38:	428a      	cmp	r2, r1
 8017a3a:	d102      	bne.n	8017a42 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 8017a3c:	2201      	movs	r2, #1
 8017a3e:	709a      	strb	r2, [r3, #2]
 8017a40:	4770      	bx	lr
 8017a42:	7a1a      	ldrb	r2, [r3, #8]
 8017a44:	2a01      	cmp	r2, #1
 8017a46:	d104      	bne.n	8017a52 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 8017a48:	88ca      	ldrh	r2, [r1, #6]
 8017a4a:	8949      	ldrh	r1, [r1, #10]
 8017a4c:	440a      	add	r2, r1
 8017a4e:	801a      	strh	r2, [r3, #0]
 8017a50:	4770      	bx	lr
 8017a52:	2a02      	cmp	r2, #2
 8017a54:	d116      	bne.n	8017a84 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8017a56:	888a      	ldrh	r2, [r1, #4]
 8017a58:	8909      	ldrh	r1, [r1, #8]
 8017a5a:	e7f7      	b.n	8017a4c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 8017a5c:	7a1a      	ldrb	r2, [r3, #8]
 8017a5e:	2a01      	cmp	r2, #1
 8017a60:	d107      	bne.n	8017a72 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 8017a62:	685b      	ldr	r3, [r3, #4]
 8017a64:	8959      	ldrh	r1, [r3, #10]
 8017a66:	88c3      	ldrh	r3, [r0, #6]
 8017a68:	4419      	add	r1, r3
 8017a6a:	6803      	ldr	r3, [r0, #0]
 8017a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a6e:	b209      	sxth	r1, r1
 8017a70:	4718      	bx	r3
 8017a72:	2a02      	cmp	r2, #2
 8017a74:	d106      	bne.n	8017a84 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8017a76:	685b      	ldr	r3, [r3, #4]
 8017a78:	8919      	ldrh	r1, [r3, #8]
 8017a7a:	8883      	ldrh	r3, [r0, #4]
 8017a7c:	4419      	add	r1, r3
 8017a7e:	6803      	ldr	r3, [r0, #0]
 8017a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a82:	e7f4      	b.n	8017a6e <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 8017a84:	4770      	bx	lr

08017a86 <_ZN8touchgfx10ListLayout9removeAllEv>:
 8017a86:	2200      	movs	r2, #0
 8017a88:	b510      	push	{r4, lr}
 8017a8a:	4604      	mov	r4, r0
 8017a8c:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8017a8e:	4611      	mov	r1, r2
 8017a90:	f7ff fcfa 	bl	8017488 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017a94:	4620      	mov	r0, r4
 8017a96:	f7ff f9bf 	bl	8016e18 <_ZN8touchgfx9Container9removeAllEv>
 8017a9a:	6960      	ldr	r0, [r4, #20]
 8017a9c:	b120      	cbz	r0, 8017aa8 <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 8017a9e:	6803      	ldr	r3, [r0, #0]
 8017aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017aa6:	4718      	bx	r3
 8017aa8:	bd10      	pop	{r4, pc}
	...

08017aac <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 8017aac:	1e4b      	subs	r3, r1, #1
 8017aae:	2b01      	cmp	r3, #1
 8017ab0:	b530      	push	{r4, r5, lr}
 8017ab2:	4604      	mov	r4, r0
 8017ab4:	b085      	sub	sp, #20
 8017ab6:	d905      	bls.n	8017ac4 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x18>
 8017ab8:	4b11      	ldr	r3, [pc, #68]	; (8017b00 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x54>)
 8017aba:	21b0      	movs	r1, #176	; 0xb0
 8017abc:	4a11      	ldr	r2, [pc, #68]	; (8017b04 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x58>)
 8017abe:	4812      	ldr	r0, [pc, #72]	; (8017b08 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x5c>)
 8017ac0:	f012 fdc8 	bl	802a654 <__assert_func>
 8017ac4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017ac8:	428b      	cmp	r3, r1
 8017aca:	d017      	beq.n	8017afc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x50>
 8017acc:	2500      	movs	r5, #0
 8017ace:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8017ad2:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8017ad4:	462a      	mov	r2, r5
 8017ad6:	4629      	mov	r1, r5
 8017ad8:	f7ff fcd6 	bl	8017488 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017adc:	4b0b      	ldr	r3, [pc, #44]	; (8017b0c <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x60>)
 8017ade:	4620      	mov	r0, r4
 8017ae0:	4669      	mov	r1, sp
 8017ae2:	e9cd 3400 	strd	r3, r4, [sp]
 8017ae6:	4b0a      	ldr	r3, [pc, #40]	; (8017b10 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x64>)
 8017ae8:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8017aec:	6823      	ldr	r3, [r4, #0]
 8017aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017af0:	4798      	blx	r3
 8017af2:	6960      	ldr	r0, [r4, #20]
 8017af4:	b110      	cbz	r0, 8017afc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x50>
 8017af6:	6803      	ldr	r3, [r0, #0]
 8017af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017afa:	4798      	blx	r3
 8017afc:	b005      	add	sp, #20
 8017afe:	bd30      	pop	{r4, r5, pc}
 8017b00:	08030514 	.word	0x08030514
 8017b04:	08030620 	.word	0x08030620
 8017b08:	08030552 	.word	0x08030552
 8017b0c:	080304ec 	.word	0x080304ec
 8017b10:	08017b79 	.word	0x08017b79

08017b14 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 8017b14:	b538      	push	{r3, r4, r5, lr}
 8017b16:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017b1a:	460d      	mov	r5, r1
 8017b1c:	4604      	mov	r4, r0
 8017b1e:	4611      	mov	r1, r2
 8017b20:	2b01      	cmp	r3, #1
 8017b22:	d002      	beq.n	8017b2a <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 8017b24:	2b02      	cmp	r3, #2
 8017b26:	d015      	beq.n	8017b54 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 8017b28:	bd38      	pop	{r3, r4, r5, pc}
 8017b2a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8017b2e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017b32:	429a      	cmp	r2, r3
 8017b34:	bfb8      	it	lt
 8017b36:	8103      	strhlt	r3, [r0, #8]
 8017b38:	8943      	ldrh	r3, [r0, #10]
 8017b3a:	896a      	ldrh	r2, [r5, #10]
 8017b3c:	4413      	add	r3, r2
 8017b3e:	460a      	mov	r2, r1
 8017b40:	2100      	movs	r1, #0
 8017b42:	8143      	strh	r3, [r0, #10]
 8017b44:	4628      	mov	r0, r5
 8017b46:	f7eb feb8 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 8017b4a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8017b4c:	896a      	ldrh	r2, [r5, #10]
 8017b4e:	4413      	add	r3, r2
 8017b50:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8017b52:	e7e9      	b.n	8017b28 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 8017b54:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8017b58:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	bfb8      	it	lt
 8017b60:	8143      	strhlt	r3, [r0, #10]
 8017b62:	8903      	ldrh	r3, [r0, #8]
 8017b64:	892a      	ldrh	r2, [r5, #8]
 8017b66:	4413      	add	r3, r2
 8017b68:	2200      	movs	r2, #0
 8017b6a:	8103      	strh	r3, [r0, #8]
 8017b6c:	4628      	mov	r0, r5
 8017b6e:	f7eb fea4 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 8017b72:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8017b74:	892a      	ldrh	r2, [r5, #8]
 8017b76:	e7ea      	b.n	8017b4e <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

08017b78 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 8017b78:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 8017b7c:	f7ff bfca 	b.w	8017b14 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

08017b80 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 8017b80:	b570      	push	{r4, r5, r6, lr}
 8017b82:	4604      	mov	r4, r0
 8017b84:	460d      	mov	r5, r1
 8017b86:	f7ff fff7 	bl	8017b78 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 8017b8a:	4620      	mov	r0, r4
 8017b8c:	4629      	mov	r1, r5
 8017b8e:	f7ff f9b3 	bl	8016ef8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017b92:	6960      	ldr	r0, [r4, #20]
 8017b94:	b120      	cbz	r0, 8017ba0 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 8017b96:	6803      	ldr	r3, [r0, #0]
 8017b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b9e:	4718      	bx	r3
 8017ba0:	bd70      	pop	{r4, r5, r6, pc}
	...

08017ba4 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 8017ba4:	b530      	push	{r4, r5, lr}
 8017ba6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017ba8:	b089      	sub	sp, #36	; 0x24
 8017baa:	4604      	mov	r4, r0
 8017bac:	4615      	mov	r5, r2
 8017bae:	b92b      	cbnz	r3, 8017bbc <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 8017bb0:	6803      	ldr	r3, [r0, #0]
 8017bb2:	4611      	mov	r1, r2
 8017bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017bb6:	4798      	blx	r3
 8017bb8:	b009      	add	sp, #36	; 0x24
 8017bba:	bd30      	pop	{r4, r5, pc}
 8017bbc:	f7ff f981 	bl	8016ec2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 8017bc0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	a904      	add	r1, sp, #16
 8017bc8:	f88d 200c 	strb.w	r2, [sp, #12]
 8017bcc:	4620      	mov	r0, r4
 8017bce:	4a0e      	ldr	r2, [pc, #56]	; (8017c08 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8017bd0:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017bd4:	9204      	str	r2, [sp, #16]
 8017bd6:	aa01      	add	r2, sp, #4
 8017bd8:	f88d 3006 	strb.w	r3, [sp, #6]
 8017bdc:	9205      	str	r2, [sp, #20]
 8017bde:	4a0b      	ldr	r2, [pc, #44]	; (8017c0c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8017be0:	9502      	str	r5, [sp, #8]
 8017be2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017be6:	6823      	ldr	r3, [r4, #0]
 8017be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017bea:	4798      	blx	r3
 8017bec:	4620      	mov	r0, r4
 8017bee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8017bf2:	4629      	mov	r1, r5
 8017bf4:	f7ff ff8e 	bl	8017b14 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 8017bf8:	6960      	ldr	r0, [r4, #20]
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	d0dc      	beq.n	8017bb8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8017bfe:	6803      	ldr	r3, [r0, #0]
 8017c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c02:	4798      	blx	r3
 8017c04:	e7d8      	b.n	8017bb8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8017c06:	bf00      	nop
 8017c08:	08030504 	.word	0x08030504
 8017c0c:	08017a2f 	.word	0x08017a2f

08017c10 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 8017c10:	b538      	push	{r3, r4, r5, lr}
 8017c12:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017c16:	4604      	mov	r4, r0
 8017c18:	460d      	mov	r5, r1
 8017c1a:	2b01      	cmp	r3, #1
 8017c1c:	d002      	beq.n	8017c24 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 8017c1e:	2b02      	cmp	r3, #2
 8017c20:	d018      	beq.n	8017c54 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 8017c22:	bd38      	pop	{r3, r4, r5, pc}
 8017c24:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017c28:	4293      	cmp	r3, r2
 8017c2a:	8943      	ldrh	r3, [r0, #10]
 8017c2c:	bfc8      	it	gt
 8017c2e:	8102      	strhgt	r2, [r0, #8]
 8017c30:	894a      	ldrh	r2, [r1, #10]
 8017c32:	1a9b      	subs	r3, r3, r2
 8017c34:	8143      	strh	r3, [r0, #10]
 8017c36:	4628      	mov	r0, r5
 8017c38:	680b      	ldr	r3, [r1, #0]
 8017c3a:	2100      	movs	r1, #0
 8017c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c3e:	4798      	blx	r3
 8017c40:	682b      	ldr	r3, [r5, #0]
 8017c42:	2100      	movs	r1, #0
 8017c44:	4628      	mov	r0, r5
 8017c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c48:	4798      	blx	r3
 8017c4a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8017c4c:	896a      	ldrh	r2, [r5, #10]
 8017c4e:	1a9b      	subs	r3, r3, r2
 8017c50:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8017c52:	e7e6      	b.n	8017c22 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 8017c54:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017c58:	4293      	cmp	r3, r2
 8017c5a:	8903      	ldrh	r3, [r0, #8]
 8017c5c:	bfc8      	it	gt
 8017c5e:	8142      	strhgt	r2, [r0, #10]
 8017c60:	890a      	ldrh	r2, [r1, #8]
 8017c62:	1a9b      	subs	r3, r3, r2
 8017c64:	8103      	strh	r3, [r0, #8]
 8017c66:	4628      	mov	r0, r5
 8017c68:	680b      	ldr	r3, [r1, #0]
 8017c6a:	2100      	movs	r1, #0
 8017c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c6e:	4798      	blx	r3
 8017c70:	682b      	ldr	r3, [r5, #0]
 8017c72:	2100      	movs	r1, #0
 8017c74:	4628      	mov	r0, r5
 8017c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c78:	4798      	blx	r3
 8017c7a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8017c7c:	892a      	ldrh	r2, [r5, #8]
 8017c7e:	e7e6      	b.n	8017c4e <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08017c80 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8017c80:	b530      	push	{r4, r5, lr}
 8017c82:	b089      	sub	sp, #36	; 0x24
 8017c84:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8017c88:	2300      	movs	r3, #0
 8017c8a:	460d      	mov	r5, r1
 8017c8c:	f88d 200c 	strb.w	r2, [sp, #12]
 8017c90:	4604      	mov	r4, r0
 8017c92:	4a12      	ldr	r2, [pc, #72]	; (8017cdc <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8017c94:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017c98:	9204      	str	r2, [sp, #16]
 8017c9a:	aa01      	add	r2, sp, #4
 8017c9c:	f88d 3006 	strb.w	r3, [sp, #6]
 8017ca0:	9205      	str	r2, [sp, #20]
 8017ca2:	4a0f      	ldr	r2, [pc, #60]	; (8017ce0 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 8017ca4:	9102      	str	r1, [sp, #8]
 8017ca6:	a904      	add	r1, sp, #16
 8017ca8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017cac:	6803      	ldr	r3, [r0, #0]
 8017cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017cb0:	4798      	blx	r3
 8017cb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017cb6:	b14b      	cbz	r3, 8017ccc <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 8017cb8:	4629      	mov	r1, r5
 8017cba:	4620      	mov	r0, r4
 8017cbc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8017cc0:	f7ff ffa6 	bl	8017c10 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8017cc4:	4629      	mov	r1, r5
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	f7ff f8e4 	bl	8016e94 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8017ccc:	6960      	ldr	r0, [r4, #20]
 8017cce:	b110      	cbz	r0, 8017cd6 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8017cd0:	6803      	ldr	r3, [r0, #0]
 8017cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cd4:	4798      	blx	r3
 8017cd6:	b009      	add	sp, #36	; 0x24
 8017cd8:	bd30      	pop	{r4, r5, pc}
 8017cda:	bf00      	nop
 8017cdc:	08030504 	.word	0x08030504
 8017ce0:	08017931 	.word	0x08017931

08017ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8017ce4:	6803      	ldr	r3, [r0, #0]
 8017ce6:	b513      	push	{r0, r1, r4, lr}
 8017ce8:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8017cec:	2300      	movs	r3, #0
 8017cee:	e9cd 3300 	strd	r3, r3, [sp]
 8017cf2:	466b      	mov	r3, sp
 8017cf4:	47a0      	blx	r4
 8017cf6:	b002      	add	sp, #8
 8017cf8:	bd10      	pop	{r4, pc}

08017cfa <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017cfa:	2301      	movs	r3, #1
 8017cfc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017d00:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017d04:	4770      	bx	lr

08017d06 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8017d06:	2301      	movs	r3, #1
 8017d08:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017d0c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017d10:	4770      	bx	lr

08017d12 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017d12:	6843      	ldr	r3, [r0, #4]
 8017d14:	2201      	movs	r2, #1
 8017d16:	725a      	strb	r2, [r3, #9]
 8017d18:	6840      	ldr	r0, [r0, #4]
 8017d1a:	6803      	ldr	r3, [r0, #0]
 8017d1c:	691b      	ldr	r3, [r3, #16]
 8017d1e:	4718      	bx	r3

08017d20 <_ZN8touchgfx3HAL8flushDMAEv>:
 8017d20:	6840      	ldr	r0, [r0, #4]
 8017d22:	6803      	ldr	r3, [r0, #0]
 8017d24:	689b      	ldr	r3, [r3, #8]
 8017d26:	4718      	bx	r3

08017d28 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8017d28:	b530      	push	{r4, r5, lr}
 8017d2a:	b08b      	sub	sp, #44	; 0x2c
 8017d2c:	6804      	ldr	r4, [r0, #0]
 8017d2e:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8017d32:	9509      	str	r5, [sp, #36]	; 0x24
 8017d34:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8017d38:	9508      	str	r5, [sp, #32]
 8017d3a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8017d3e:	9507      	str	r5, [sp, #28]
 8017d40:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8017d44:	9506      	str	r5, [sp, #24]
 8017d46:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8017d4a:	9505      	str	r5, [sp, #20]
 8017d4c:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8017d50:	9504      	str	r5, [sp, #16]
 8017d52:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8017d56:	9503      	str	r5, [sp, #12]
 8017d58:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017d5c:	9502      	str	r5, [sp, #8]
 8017d5e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017d62:	e9cd 3500 	strd	r3, r5, [sp]
 8017d66:	4613      	mov	r3, r2
 8017d68:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8017d6a:	2200      	movs	r2, #0
 8017d6c:	47a0      	blx	r4
 8017d6e:	b00b      	add	sp, #44	; 0x2c
 8017d70:	bd30      	pop	{r4, r5, pc}
	...

08017d74 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017d74:	4b04      	ldr	r3, [pc, #16]	; (8017d88 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017d76:	781b      	ldrb	r3, [r3, #0]
 8017d78:	b123      	cbz	r3, 8017d84 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017d7a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8017d7e:	f080 0001 	eor.w	r0, r0, #1
 8017d82:	4770      	bx	lr
 8017d84:	2001      	movs	r0, #1
 8017d86:	4770      	bx	lr
 8017d88:	2001539e 	.word	0x2001539e

08017d8c <_ZN8touchgfx3HAL8endFrameEv>:
 8017d8c:	b510      	push	{r4, lr}
 8017d8e:	4604      	mov	r4, r0
 8017d90:	6840      	ldr	r0, [r0, #4]
 8017d92:	6803      	ldr	r3, [r0, #0]
 8017d94:	689b      	ldr	r3, [r3, #8]
 8017d96:	4798      	blx	r3
 8017d98:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8017d9c:	b113      	cbz	r3, 8017da4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8017d9e:	2301      	movs	r3, #1
 8017da0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017da4:	bd10      	pop	{r4, pc}

08017da6 <_ZN8touchgfx3HAL10initializeEv>:
 8017da6:	b510      	push	{r4, lr}
 8017da8:	4604      	mov	r4, r0
 8017daa:	f7ea f833 	bl	8001e14 <_ZN8touchgfx10OSWrappers10initializeEv>
 8017dae:	6860      	ldr	r0, [r4, #4]
 8017db0:	6803      	ldr	r3, [r0, #0]
 8017db2:	68db      	ldr	r3, [r3, #12]
 8017db4:	4798      	blx	r3
 8017db6:	68e0      	ldr	r0, [r4, #12]
 8017db8:	6803      	ldr	r3, [r0, #0]
 8017dba:	689b      	ldr	r3, [r3, #8]
 8017dbc:	4798      	blx	r3
 8017dbe:	6823      	ldr	r3, [r4, #0]
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017dc8:	4718      	bx	r3

08017dca <_ZN8touchgfx3HAL9taskEntryEv>:
 8017dca:	b508      	push	{r3, lr}
 8017dcc:	6803      	ldr	r3, [r0, #0]
 8017dce:	4604      	mov	r4, r0
 8017dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017dd4:	4798      	blx	r3
 8017dd6:	6823      	ldr	r3, [r4, #0]
 8017dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017dda:	4620      	mov	r0, r4
 8017ddc:	4798      	blx	r3
 8017dde:	f7ea f865 	bl	8001eac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8017de2:	6823      	ldr	r3, [r4, #0]
 8017de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017de6:	e7f8      	b.n	8017dda <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08017de8 <_ZN8touchgfx3HAL4tickEv>:
 8017de8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017dea:	6803      	ldr	r3, [r0, #0]
 8017dec:	4604      	mov	r4, r0
 8017dee:	4d5b      	ldr	r5, [pc, #364]	; (8017f5c <_ZN8touchgfx3HAL4tickEv+0x174>)
 8017df0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017df4:	4798      	blx	r3
 8017df6:	2800      	cmp	r0, #0
 8017df8:	f000 8095 	beq.w	8017f26 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8017dfc:	2001      	movs	r0, #1
 8017dfe:	2600      	movs	r6, #0
 8017e00:	f7e9 fe92 	bl	8001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017e04:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017e08:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017e0c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017e10:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8017e14:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017e18:	b133      	cbz	r3, 8017e28 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017e1a:	6823      	ldr	r3, [r4, #0]
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8017e22:	4798      	blx	r3
 8017e24:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017e28:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017e2c:	2601      	movs	r6, #1
 8017e2e:	6862      	ldr	r2, [r4, #4]
 8017e30:	f083 0301 	eor.w	r3, r3, #1
 8017e34:	702e      	strb	r6, [r5, #0]
 8017e36:	7253      	strb	r3, [r2, #9]
 8017e38:	f003 fc8c 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
 8017e3c:	6803      	ldr	r3, [r0, #0]
 8017e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e40:	4798      	blx	r3
 8017e42:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017e46:	b90b      	cbnz	r3, 8017e4c <_ZN8touchgfx3HAL4tickEv+0x64>
 8017e48:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017e4c:	f003 fc82 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
 8017e50:	6803      	ldr	r3, [r0, #0]
 8017e52:	695b      	ldr	r3, [r3, #20]
 8017e54:	4798      	blx	r3
 8017e56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e58:	6803      	ldr	r3, [r0, #0]
 8017e5a:	691b      	ldr	r3, [r3, #16]
 8017e5c:	4798      	blx	r3
 8017e5e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017e62:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017e66:	3b01      	subs	r3, #1
 8017e68:	b2db      	uxtb	r3, r3
 8017e6a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017e6e:	b10a      	cbz	r2, 8017e74 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d1eb      	bne.n	8017e4c <_ZN8touchgfx3HAL4tickEv+0x64>
 8017e74:	4a3a      	ldr	r2, [pc, #232]	; (8017f60 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8017e76:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017e7a:	7813      	ldrb	r3, [r2, #0]
 8017e7c:	3301      	adds	r3, #1
 8017e7e:	b25b      	sxtb	r3, r3
 8017e80:	4299      	cmp	r1, r3
 8017e82:	7013      	strb	r3, [r2, #0]
 8017e84:	dc10      	bgt.n	8017ea8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017e86:	2300      	movs	r3, #0
 8017e88:	68e0      	ldr	r0, [r4, #12]
 8017e8a:	a902      	add	r1, sp, #8
 8017e8c:	7013      	strb	r3, [r2, #0]
 8017e8e:	aa03      	add	r2, sp, #12
 8017e90:	6803      	ldr	r3, [r0, #0]
 8017e92:	68db      	ldr	r3, [r3, #12]
 8017e94:	4798      	blx	r3
 8017e96:	6823      	ldr	r3, [r4, #0]
 8017e98:	2800      	cmp	r0, #0
 8017e9a:	d050      	beq.n	8017f3e <_ZN8touchgfx3HAL4tickEv+0x156>
 8017e9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017ea6:	4798      	blx	r3
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	6960      	ldr	r0, [r4, #20]
 8017eac:	f88d 3007 	strb.w	r3, [sp, #7]
 8017eb0:	b158      	cbz	r0, 8017eca <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017eb2:	6803      	ldr	r3, [r0, #0]
 8017eb4:	f10d 0107 	add.w	r1, sp, #7
 8017eb8:	68db      	ldr	r3, [r3, #12]
 8017eba:	4798      	blx	r3
 8017ebc:	b128      	cbz	r0, 8017eca <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017ebe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ec0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017ec4:	6803      	ldr	r3, [r0, #0]
 8017ec6:	68db      	ldr	r3, [r3, #12]
 8017ec8:	4798      	blx	r3
 8017eca:	f104 001c 	add.w	r0, r4, #28
 8017ece:	f012 f9fd 	bl	802a2cc <_ZN8touchgfx8Gestures4tickEv>
 8017ed2:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8017ed6:	b30b      	cbz	r3, 8017f1c <_ZN8touchgfx3HAL4tickEv+0x134>
 8017ed8:	6920      	ldr	r0, [r4, #16]
 8017eda:	6803      	ldr	r3, [r0, #0]
 8017edc:	691b      	ldr	r3, [r3, #16]
 8017ede:	4798      	blx	r3
 8017ee0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017ee2:	4606      	mov	r6, r0
 8017ee4:	b903      	cbnz	r3, 8017ee8 <_ZN8touchgfx3HAL4tickEv+0x100>
 8017ee6:	6720      	str	r0, [r4, #112]	; 0x70
 8017ee8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017eea:	4a1e      	ldr	r2, [pc, #120]	; (8017f64 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017eec:	1af3      	subs	r3, r6, r3
 8017eee:	4293      	cmp	r3, r2
 8017ef0:	d914      	bls.n	8017f1c <_ZN8touchgfx3HAL4tickEv+0x134>
 8017ef2:	6920      	ldr	r0, [r4, #16]
 8017ef4:	6803      	ldr	r3, [r0, #0]
 8017ef6:	699b      	ldr	r3, [r3, #24]
 8017ef8:	4798      	blx	r3
 8017efa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017efc:	2264      	movs	r2, #100	; 0x64
 8017efe:	1af3      	subs	r3, r6, r3
 8017f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8017f04:	fbb0 f0f3 	udiv	r0, r0, r3
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	dc1d      	bgt.n	8017f48 <_ZN8touchgfx3HAL4tickEv+0x160>
 8017f0c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8017f10:	6920      	ldr	r0, [r4, #16]
 8017f12:	2100      	movs	r1, #0
 8017f14:	6803      	ldr	r3, [r0, #0]
 8017f16:	69db      	ldr	r3, [r3, #28]
 8017f18:	4798      	blx	r3
 8017f1a:	6726      	str	r6, [r4, #112]	; 0x70
 8017f1c:	f003 fc1a 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
 8017f20:	6803      	ldr	r3, [r0, #0]
 8017f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f24:	4798      	blx	r3
 8017f26:	6823      	ldr	r3, [r4, #0]
 8017f28:	4620      	mov	r0, r4
 8017f2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017f2e:	4798      	blx	r3
 8017f30:	2001      	movs	r0, #1
 8017f32:	f7e9 fe21 	bl	8001b78 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017f36:	2300      	movs	r3, #0
 8017f38:	702b      	strb	r3, [r5, #0]
 8017f3a:	b004      	add	sp, #16
 8017f3c:	bd70      	pop	{r4, r5, r6, pc}
 8017f3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017f42:	4620      	mov	r0, r4
 8017f44:	4798      	blx	r3
 8017f46:	e7af      	b.n	8017ea8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017f48:	2863      	cmp	r0, #99	; 0x63
 8017f4a:	bfcb      	itete	gt
 8017f4c:	2300      	movgt	r3, #0
 8017f4e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017f52:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017f56:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8017f5a:	e7d9      	b.n	8017f10 <_ZN8touchgfx3HAL4tickEv+0x128>
 8017f5c:	200153a4 	.word	0x200153a4
 8017f60:	200153a5 	.word	0x200153a5
 8017f64:	05f5e100 	.word	0x05f5e100

08017f68 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017f68:	f7e9 bf84 	b.w	8001e74 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017f6c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017f6c:	6581      	str	r1, [r0, #88]	; 0x58
 8017f6e:	301c      	adds	r0, #28
 8017f70:	f012 b9aa 	b.w	802a2c8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017f74 <_ZN8touchgfx3HAL5touchEll>:
 8017f74:	b530      	push	{r4, r5, lr}
 8017f76:	b087      	sub	sp, #28
 8017f78:	4604      	mov	r4, r0
 8017f7a:	a804      	add	r0, sp, #16
 8017f7c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017f80:	f003 f946 	bl	801b210 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017f84:	9b04      	ldr	r3, [sp, #16]
 8017f86:	a906      	add	r1, sp, #24
 8017f88:	a803      	add	r0, sp, #12
 8017f8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017f8e:	9b05      	ldr	r3, [sp, #20]
 8017f90:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017f94:	f003 f98e 	bl	801b2b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017f98:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8017f9c:	f104 001c 	add.w	r0, r4, #28
 8017fa0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017fa4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017fa8:	b189      	cbz	r1, 8017fce <_ZN8touchgfx3HAL5touchEll+0x5a>
 8017faa:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8017fae:	9300      	str	r3, [sp, #0]
 8017fb0:	4613      	mov	r3, r2
 8017fb2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017fb6:	462a      	mov	r2, r5
 8017fb8:	f012 f996 	bl	802a2e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017fbc:	b128      	cbz	r0, 8017fca <_ZN8touchgfx3HAL5touchEll+0x56>
 8017fbe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017fc2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017fc4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017fc8:	6623      	str	r3, [r4, #96]	; 0x60
 8017fca:	b007      	add	sp, #28
 8017fcc:	bd30      	pop	{r4, r5, pc}
 8017fce:	f012 f9cb 	bl	802a368 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017fd2:	2301      	movs	r3, #1
 8017fd4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017fd8:	e7f1      	b.n	8017fbe <_ZN8touchgfx3HAL5touchEll+0x4a>

08017fda <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017fda:	b510      	push	{r4, lr}
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d046      	beq.n	801806e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017fe0:	ea81 0002 	eor.w	r0, r1, r2
 8017fe4:	07c4      	lsls	r4, r0, #31
 8017fe6:	d508      	bpl.n	8017ffa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017fe8:	440b      	add	r3, r1
 8017fea:	3a01      	subs	r2, #1
 8017fec:	428b      	cmp	r3, r1
 8017fee:	d93e      	bls.n	801806e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017ff0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017ff4:	f801 0b01 	strb.w	r0, [r1], #1
 8017ff8:	e7f8      	b.n	8017fec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017ffa:	07d0      	lsls	r0, r2, #31
 8017ffc:	bf42      	ittt	mi
 8017ffe:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8018002:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8018006:	f801 0b01 	strbmi.w	r0, [r1], #1
 801800a:	2b01      	cmp	r3, #1
 801800c:	d911      	bls.n	8018032 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801800e:	ea81 0402 	eor.w	r4, r1, r2
 8018012:	4610      	mov	r0, r2
 8018014:	07a4      	lsls	r4, r4, #30
 8018016:	d022      	beq.n	801805e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018018:	f023 0401 	bic.w	r4, r3, #1
 801801c:	440c      	add	r4, r1
 801801e:	428c      	cmp	r4, r1
 8018020:	4602      	mov	r2, r0
 8018022:	d904      	bls.n	801802e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8018024:	8812      	ldrh	r2, [r2, #0]
 8018026:	3002      	adds	r0, #2
 8018028:	f821 2b02 	strh.w	r2, [r1], #2
 801802c:	e7f7      	b.n	801801e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801802e:	f003 0301 	and.w	r3, r3, #1
 8018032:	f023 0003 	bic.w	r0, r3, #3
 8018036:	4408      	add	r0, r1
 8018038:	4288      	cmp	r0, r1
 801803a:	4614      	mov	r4, r2
 801803c:	d904      	bls.n	8018048 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801803e:	6824      	ldr	r4, [r4, #0]
 8018040:	3204      	adds	r2, #4
 8018042:	f841 4b04 	str.w	r4, [r1], #4
 8018046:	e7f7      	b.n	8018038 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8018048:	f003 0303 	and.w	r3, r3, #3
 801804c:	3a01      	subs	r2, #1
 801804e:	440b      	add	r3, r1
 8018050:	428b      	cmp	r3, r1
 8018052:	d90c      	bls.n	801806e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018054:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018058:	f801 0b01 	strb.w	r0, [r1], #1
 801805c:	e7f8      	b.n	8018050 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801805e:	0790      	lsls	r0, r2, #30
 8018060:	d0e7      	beq.n	8018032 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018062:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018066:	3b02      	subs	r3, #2
 8018068:	f821 0b02 	strh.w	r0, [r1], #2
 801806c:	e7e1      	b.n	8018032 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801806e:	2001      	movs	r0, #1
 8018070:	bd10      	pop	{r4, pc}

08018072 <_ZN8touchgfx3HAL7noTouchEv>:
 8018072:	b510      	push	{r4, lr}
 8018074:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8018078:	4604      	mov	r4, r0
 801807a:	b153      	cbz	r3, 8018092 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801807c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018080:	2101      	movs	r1, #1
 8018082:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018086:	301c      	adds	r0, #28
 8018088:	f012 f96e 	bl	802a368 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801808c:	2300      	movs	r3, #0
 801808e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018092:	bd10      	pop	{r4, pc}

08018094 <_ZN8touchgfx3HAL3lcdEv>:
 8018094:	4b04      	ldr	r3, [pc, #16]	; (80180a8 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801809c:	b10a      	cbz	r2, 80180a2 <_ZN8touchgfx3HAL3lcdEv+0xe>
 801809e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80180a0:	b900      	cbnz	r0, 80180a4 <_ZN8touchgfx3HAL3lcdEv+0x10>
 80180a2:	6898      	ldr	r0, [r3, #8]
 80180a4:	4770      	bx	lr
 80180a6:	bf00      	nop
 80180a8:	200153a0 	.word	0x200153a0

080180ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80180ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180b0:	4604      	mov	r4, r0
 80180b2:	6980      	ldr	r0, [r0, #24]
 80180b4:	b085      	sub	sp, #20
 80180b6:	460f      	mov	r7, r1
 80180b8:	4690      	mov	r8, r2
 80180ba:	4699      	mov	r9, r3
 80180bc:	b930      	cbnz	r0, 80180cc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80180be:	4b1c      	ldr	r3, [pc, #112]	; (8018130 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 80180c0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80180c4:	4a1b      	ldr	r2, [pc, #108]	; (8018134 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80180c6:	481c      	ldr	r0, [pc, #112]	; (8018138 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 80180c8:	f012 fac4 	bl	802a654 <__assert_func>
 80180cc:	ad04      	add	r5, sp, #16
 80180ce:	2600      	movs	r6, #0
 80180d0:	f845 6d04 	str.w	r6, [r5, #-4]!
 80180d4:	6806      	ldr	r6, [r0, #0]
 80180d6:	9501      	str	r5, [sp, #4]
 80180d8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80180dc:	9500      	str	r5, [sp, #0]
 80180de:	6835      	ldr	r5, [r6, #0]
 80180e0:	47a8      	blx	r5
 80180e2:	4d16      	ldr	r5, [pc, #88]	; (801813c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80180e4:	4606      	mov	r6, r0
 80180e6:	f8a5 9000 	strh.w	r9, [r5]
 80180ea:	f7ff ffd3 	bl	8018094 <_ZN8touchgfx3HAL3lcdEv>
 80180ee:	6803      	ldr	r3, [r0, #0]
 80180f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180f2:	4798      	blx	r3
 80180f4:	2801      	cmp	r0, #1
 80180f6:	d012      	beq.n	801811e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 80180f8:	d306      	bcc.n	8018108 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 80180fa:	280d      	cmp	r0, #13
 80180fc:	d80b      	bhi.n	8018116 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80180fe:	4b10      	ldr	r3, [pc, #64]	; (8018140 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018100:	f240 115b 	movw	r1, #347	; 0x15b
 8018104:	4a0b      	ldr	r2, [pc, #44]	; (8018134 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8018106:	e7de      	b.n	80180c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8018108:	882b      	ldrh	r3, [r5, #0]
 801810a:	fb08 7203 	mla	r2, r8, r3, r7
 801810e:	9b03      	ldr	r3, [sp, #12]
 8018110:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018114:	63e3      	str	r3, [r4, #60]	; 0x3c
 8018116:	4630      	mov	r0, r6
 8018118:	b005      	add	sp, #20
 801811a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801811e:	882a      	ldrh	r2, [r5, #0]
 8018120:	9b03      	ldr	r3, [sp, #12]
 8018122:	fb08 7202 	mla	r2, r8, r2, r7
 8018126:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801812a:	1a9a      	subs	r2, r3, r2
 801812c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801812e:	e7f2      	b.n	8018116 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018130:	080307cb 	.word	0x080307cb
 8018134:	08030a89 	.word	0x08030a89
 8018138:	08030810 	.word	0x08030810
 801813c:	2001539a 	.word	0x2001539a
 8018140:	08030836 	.word	0x08030836

08018144 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018146:	b08b      	sub	sp, #44	; 0x2c
 8018148:	4617      	mov	r7, r2
 801814a:	4604      	mov	r4, r0
 801814c:	460e      	mov	r6, r1
 801814e:	461d      	mov	r5, r3
 8018150:	f7ff ffa0 	bl	8018094 <_ZN8touchgfx3HAL3lcdEv>
 8018154:	6803      	ldr	r3, [r0, #0]
 8018156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018158:	4798      	blx	r3
 801815a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801815e:	9007      	str	r0, [sp, #28]
 8018160:	4631      	mov	r1, r6
 8018162:	6822      	ldr	r2, [r4, #0]
 8018164:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018168:	4b0c      	ldr	r3, [pc, #48]	; (801819c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801816a:	4620      	mov	r0, r4
 801816c:	881b      	ldrh	r3, [r3, #0]
 801816e:	9306      	str	r3, [sp, #24]
 8018170:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018174:	9305      	str	r3, [sp, #20]
 8018176:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801817a:	9304      	str	r3, [sp, #16]
 801817c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018180:	9303      	str	r3, [sp, #12]
 8018182:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018186:	9302      	str	r3, [sp, #8]
 8018188:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801818c:	e9cd 5300 	strd	r5, r3, [sp]
 8018190:	463b      	mov	r3, r7
 8018192:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8018194:	2200      	movs	r2, #0
 8018196:	47a8      	blx	r5
 8018198:	b00b      	add	sp, #44	; 0x2c
 801819a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801819c:	2001539a 	.word	0x2001539a

080181a0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80181a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181a4:	4698      	mov	r8, r3
 80181a6:	6803      	ldr	r3, [r0, #0]
 80181a8:	b08b      	sub	sp, #44	; 0x2c
 80181aa:	4617      	mov	r7, r2
 80181ac:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80181ae:	460e      	mov	r6, r1
 80181b0:	4b13      	ldr	r3, [pc, #76]	; (8018200 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80181b2:	4604      	mov	r4, r0
 80181b4:	f8b3 9000 	ldrh.w	r9, [r3]
 80181b8:	f7ff ff6c 	bl	8018094 <_ZN8touchgfx3HAL3lcdEv>
 80181bc:	6803      	ldr	r3, [r0, #0]
 80181be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181c0:	4798      	blx	r3
 80181c2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80181c6:	2200      	movs	r2, #0
 80181c8:	4631      	mov	r1, r6
 80181ca:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80181ce:	2302      	movs	r3, #2
 80181d0:	4620      	mov	r0, r4
 80181d2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80181d6:	2301      	movs	r3, #1
 80181d8:	9305      	str	r3, [sp, #20]
 80181da:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80181de:	9304      	str	r3, [sp, #16]
 80181e0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80181e4:	9303      	str	r3, [sp, #12]
 80181e6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80181ea:	9302      	str	r3, [sp, #8]
 80181ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80181f0:	e9cd 8300 	strd	r8, r3, [sp]
 80181f4:	463b      	mov	r3, r7
 80181f6:	47a8      	blx	r5
 80181f8:	b00b      	add	sp, #44	; 0x2c
 80181fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181fe:	bf00      	nop
 8018200:	2001539a 	.word	0x2001539a

08018204 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018208:	4698      	mov	r8, r3
 801820a:	6803      	ldr	r3, [r0, #0]
 801820c:	b087      	sub	sp, #28
 801820e:	460e      	mov	r6, r1
 8018210:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8018212:	4617      	mov	r7, r2
 8018214:	4b0f      	ldr	r3, [pc, #60]	; (8018254 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8018216:	4604      	mov	r4, r0
 8018218:	f8b3 9000 	ldrh.w	r9, [r3]
 801821c:	f7ff ff3a 	bl	8018094 <_ZN8touchgfx3HAL3lcdEv>
 8018220:	6803      	ldr	r3, [r0, #0]
 8018222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018224:	4798      	blx	r3
 8018226:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801822a:	463a      	mov	r2, r7
 801822c:	4631      	mov	r1, r6
 801822e:	f8cd 900c 	str.w	r9, [sp, #12]
 8018232:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018236:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801823a:	4620      	mov	r0, r4
 801823c:	9302      	str	r3, [sp, #8]
 801823e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018242:	9301      	str	r3, [sp, #4]
 8018244:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018248:	9300      	str	r3, [sp, #0]
 801824a:	4643      	mov	r3, r8
 801824c:	47a8      	blx	r5
 801824e:	b007      	add	sp, #28
 8018250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018254:	2001539a 	.word	0x2001539a

08018258 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801825c:	4604      	mov	r4, r0
 801825e:	b08f      	sub	sp, #60	; 0x3c
 8018260:	4610      	mov	r0, r2
 8018262:	460d      	mov	r5, r1
 8018264:	4691      	mov	r9, r2
 8018266:	461e      	mov	r6, r3
 8018268:	f005 ff10 	bl	801e08c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801826c:	2800      	cmp	r0, #0
 801826e:	f000 809c 	beq.w	80183aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8018272:	6823      	ldr	r3, [r4, #0]
 8018274:	4620      	mov	r0, r4
 8018276:	f8df b194 	ldr.w	fp, [pc, #404]	; 801840c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 801827a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801827e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018280:	4798      	blx	r3
 8018282:	6823      	ldr	r3, [r4, #0]
 8018284:	4620      	mov	r0, r4
 8018286:	f8df a188 	ldr.w	sl, [pc, #392]	; 8018410 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801828c:	4798      	blx	r3
 801828e:	f8bb 3000 	ldrh.w	r3, [fp]
 8018292:	4f5b      	ldr	r7, [pc, #364]	; (8018400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018294:	9301      	str	r3, [sp, #4]
 8018296:	f8ba 3000 	ldrh.w	r3, [sl]
 801829a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801829e:	4640      	mov	r0, r8
 80182a0:	9302      	str	r3, [sp, #8]
 80182a2:	883b      	ldrh	r3, [r7, #0]
 80182a4:	9303      	str	r3, [sp, #12]
 80182a6:	4b57      	ldr	r3, [pc, #348]	; (8018404 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80182a8:	881a      	ldrh	r2, [r3, #0]
 80182aa:	9305      	str	r3, [sp, #20]
 80182ac:	9204      	str	r2, [sp, #16]
 80182ae:	f005 ff9d 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 80182b2:	8038      	strh	r0, [r7, #0]
 80182b4:	4640      	mov	r0, r8
 80182b6:	f005 ffdd 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80182ba:	9b05      	ldr	r3, [sp, #20]
 80182bc:	8018      	strh	r0, [r3, #0]
 80182be:	4b52      	ldr	r3, [pc, #328]	; (8018408 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80182c0:	781b      	ldrb	r3, [r3, #0]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d174      	bne.n	80183b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80182c6:	883b      	ldrh	r3, [r7, #0]
 80182c8:	f8aa 0000 	strh.w	r0, [sl]
 80182cc:	f8ab 3000 	strh.w	r3, [fp]
 80182d0:	4648      	mov	r0, r9
 80182d2:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80182d6:	f005 fed9 	bl	801e08c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80182da:	2200      	movs	r2, #0
 80182dc:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80182e0:	4611      	mov	r1, r2
 80182e2:	4628      	mov	r0, r5
 80182e4:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80182e8:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80182ec:	f7eb fae5 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 80182f0:	2301      	movs	r3, #1
 80182f2:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80182f6:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80182fa:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	dd5c      	ble.n	80183bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018302:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018306:	2b00      	cmp	r3, #0
 8018308:	dd58      	ble.n	80183bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 801830a:	462a      	mov	r2, r5
 801830c:	ab0a      	add	r3, sp, #40	; 0x28
 801830e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018312:	6851      	ldr	r1, [r2, #4]
 8018314:	c303      	stmia	r3!, {r0, r1}
 8018316:	4631      	mov	r1, r6
 8018318:	a80a      	add	r0, sp, #40	; 0x28
 801831a:	f7fe ff2f 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 801831e:	4b38      	ldr	r3, [pc, #224]	; (8018400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018320:	2100      	movs	r1, #0
 8018322:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018326:	4b37      	ldr	r3, [pc, #220]	; (8018404 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018328:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801832c:	aa0a      	add	r2, sp, #40	; 0x28
 801832e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018332:	910c      	str	r1, [sp, #48]	; 0x30
 8018334:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018338:	ab08      	add	r3, sp, #32
 801833a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801833e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018342:	4618      	mov	r0, r3
 8018344:	a90c      	add	r1, sp, #48	; 0x30
 8018346:	f7fe ff19 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 801834a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801834c:	2b00      	cmp	r3, #0
 801834e:	d13c      	bne.n	80183ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8018350:	2000      	movs	r0, #0
 8018352:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8018356:	2600      	movs	r6, #0
 8018358:	696b      	ldr	r3, [r5, #20]
 801835a:	a908      	add	r1, sp, #32
 801835c:	682a      	ldr	r2, [r5, #0]
 801835e:	4628      	mov	r0, r5
 8018360:	9305      	str	r3, [sp, #20]
 8018362:	616e      	str	r6, [r5, #20]
 8018364:	6892      	ldr	r2, [r2, #8]
 8018366:	4790      	blx	r2
 8018368:	9b05      	ldr	r3, [sp, #20]
 801836a:	4652      	mov	r2, sl
 801836c:	4649      	mov	r1, r9
 801836e:	616b      	str	r3, [r5, #20]
 8018370:	4628      	mov	r0, r5
 8018372:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8018376:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801837a:	f7eb fa9e 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 801837e:	9a01      	ldr	r2, [sp, #4]
 8018380:	4b22      	ldr	r3, [pc, #136]	; (801840c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018382:	4620      	mov	r0, r4
 8018384:	801a      	strh	r2, [r3, #0]
 8018386:	9a02      	ldr	r2, [sp, #8]
 8018388:	4b21      	ldr	r3, [pc, #132]	; (8018410 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801838a:	801a      	strh	r2, [r3, #0]
 801838c:	9a03      	ldr	r2, [sp, #12]
 801838e:	4b1c      	ldr	r3, [pc, #112]	; (8018400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018390:	801a      	strh	r2, [r3, #0]
 8018392:	4b1c      	ldr	r3, [pc, #112]	; (8018404 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018394:	9a04      	ldr	r2, [sp, #16]
 8018396:	801a      	strh	r2, [r3, #0]
 8018398:	6823      	ldr	r3, [r4, #0]
 801839a:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183a0:	4798      	blx	r3
 80183a2:	6823      	ldr	r3, [r4, #0]
 80183a4:	4620      	mov	r0, r4
 80183a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183a8:	4798      	blx	r3
 80183aa:	b00f      	add	sp, #60	; 0x3c
 80183ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183b0:	883b      	ldrh	r3, [r7, #0]
 80183b2:	f8ab 0000 	strh.w	r0, [fp]
 80183b6:	f8aa 3000 	strh.w	r3, [sl]
 80183ba:	e789      	b.n	80182d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 80183bc:	462a      	mov	r2, r5
 80183be:	ab0a      	add	r3, sp, #40	; 0x28
 80183c0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80183c4:	6851      	ldr	r1, [r2, #4]
 80183c6:	c303      	stmia	r3!, {r0, r1}
 80183c8:	e7a9      	b.n	801831e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 80183ca:	a807      	add	r0, sp, #28
 80183cc:	f006 f8b4 	bl	801e538 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80183d0:	4606      	mov	r6, r0
 80183d2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80183d4:	6803      	ldr	r3, [r0, #0]
 80183d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183d8:	4798      	blx	r3
 80183da:	4286      	cmp	r6, r0
 80183dc:	d1b8      	bne.n	8018350 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 80183de:	f7ff fe59 	bl	8018094 <_ZN8touchgfx3HAL3lcdEv>
 80183e2:	6803      	ldr	r3, [r0, #0]
 80183e4:	4606      	mov	r6, r0
 80183e6:	a807      	add	r0, sp, #28
 80183e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183ea:	9305      	str	r3, [sp, #20]
 80183ec:	f006 f8a4 	bl	801e538 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80183f0:	9b05      	ldr	r3, [sp, #20]
 80183f2:	4601      	mov	r1, r0
 80183f4:	4630      	mov	r0, r6
 80183f6:	4798      	blx	r3
 80183f8:	f080 0001 	eor.w	r0, r0, #1
 80183fc:	b2c0      	uxtb	r0, r0
 80183fe:	e7a8      	b.n	8018352 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018400:	20015394 	.word	0x20015394
 8018404:	20015396 	.word	0x20015396
 8018408:	20015398 	.word	0x20015398
 801840c:	2001539a 	.word	0x2001539a
 8018410:	2001539c 	.word	0x2001539c

08018414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018414:	4b07      	ldr	r3, [pc, #28]	; (8018434 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018416:	b510      	push	{r4, lr}
 8018418:	781b      	ldrb	r3, [r3, #0]
 801841a:	4604      	mov	r4, r0
 801841c:	b13b      	cbz	r3, 801842e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801841e:	6803      	ldr	r3, [r0, #0]
 8018420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018422:	4798      	blx	r3
 8018424:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018426:	4283      	cmp	r3, r0
 8018428:	d101      	bne.n	801842e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801842a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801842c:	bd10      	pop	{r4, pc}
 801842e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018430:	e7fc      	b.n	801842c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018432:	bf00      	nop
 8018434:	2001539e 	.word	0x2001539e

08018438 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801843c:	b08a      	sub	sp, #40	; 0x28
 801843e:	4692      	mov	sl, r2
 8018440:	461d      	mov	r5, r3
 8018442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018446:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 801844a:	2400      	movs	r4, #0
 801844c:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8018450:	4606      	mov	r6, r0
 8018452:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018456:	fb09 a505 	mla	r5, r9, r5, sl
 801845a:	9404      	str	r4, [sp, #16]
 801845c:	f8ad 8018 	strh.w	r8, [sp, #24]
 8018460:	f8ad 701a 	strh.w	r7, [sp, #26]
 8018464:	f88d 4020 	strb.w	r4, [sp, #32]
 8018468:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801846c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018470:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018474:	f7ff ffce 	bl	8018414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018478:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801847c:	f8ad 901e 	strh.w	r9, [sp, #30]
 8018480:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018484:	9505      	str	r5, [sp, #20]
 8018486:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801848a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801848e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8018492:	f1b8 0f00 	cmp.w	r8, #0
 8018496:	d000      	beq.n	801849a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 8018498:	b937      	cbnz	r7, 80184a8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x70>
 801849a:	4b0d      	ldr	r3, [pc, #52]	; (80184d0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 801849c:	f240 2102 	movw	r1, #514	; 0x202
 80184a0:	4a0c      	ldr	r2, [pc, #48]	; (80184d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 80184a2:	480d      	ldr	r0, [pc, #52]	; (80184d8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 80184a4:	f012 f8d6 	bl	802a654 <__assert_func>
 80184a8:	6833      	ldr	r3, [r6, #0]
 80184aa:	4630      	mov	r0, r6
 80184ac:	9c01      	ldr	r4, [sp, #4]
 80184ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184b0:	4798      	blx	r3
 80184b2:	4220      	tst	r0, r4
 80184b4:	d104      	bne.n	80184c0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x88>
 80184b6:	4b09      	ldr	r3, [pc, #36]	; (80184dc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa4>)
 80184b8:	f240 2103 	movw	r1, #515	; 0x203
 80184bc:	4a05      	ldr	r2, [pc, #20]	; (80184d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 80184be:	e7f0      	b.n	80184a2 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6a>
 80184c0:	6870      	ldr	r0, [r6, #4]
 80184c2:	a901      	add	r1, sp, #4
 80184c4:	6803      	ldr	r3, [r0, #0]
 80184c6:	685b      	ldr	r3, [r3, #4]
 80184c8:	4798      	blx	r3
 80184ca:	b00a      	add	sp, #40	; 0x28
 80184cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184d0:	08030665 	.word	0x08030665
 80184d4:	080308be 	.word	0x080308be
 80184d8:	08030810 	.word	0x08030810
 80184dc:	0803069d 	.word	0x0803069d

080184e0 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80184e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e4:	b08b      	sub	sp, #44	; 0x2c
 80184e6:	4693      	mov	fp, r2
 80184e8:	461d      	mov	r5, r3
 80184ea:	2400      	movs	r4, #0
 80184ec:	f8bd 9058 	ldrh.w	r9, [sp, #88]	; 0x58
 80184f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80184f4:	468a      	mov	sl, r1
 80184f6:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
 80184fa:	fb09 b505 	mla	r5, r9, r5, fp
 80184fe:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 8018502:	4606      	mov	r6, r0
 8018504:	9404      	str	r4, [sp, #16]
 8018506:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801850a:	f7ff ff83 	bl	8018414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801850e:	f8ad 8018 	strh.w	r8, [sp, #24]
 8018512:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018516:	f8ad 701a 	strh.w	r7, [sp, #26]
 801851a:	f8ad 401c 	strh.w	r4, [sp, #28]
 801851e:	9505      	str	r5, [sp, #20]
 8018520:	f8ad 901e 	strh.w	r9, [sp, #30]
 8018524:	f8cd a010 	str.w	sl, [sp, #16]
 8018528:	f8ad 4020 	strh.w	r4, [sp, #32]
 801852c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018530:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8018534:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8018538:	f1b8 0f00 	cmp.w	r8, #0
 801853c:	d000      	beq.n	8018540 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 801853e:	b937      	cbnz	r7, 801854e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6e>
 8018540:	4b0d      	ldr	r3, [pc, #52]	; (8018578 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018542:	f240 2119 	movw	r1, #537	; 0x219
 8018546:	4a0d      	ldr	r2, [pc, #52]	; (801857c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8018548:	480d      	ldr	r0, [pc, #52]	; (8018580 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 801854a:	f012 f883 	bl	802a654 <__assert_func>
 801854e:	6833      	ldr	r3, [r6, #0]
 8018550:	4630      	mov	r0, r6
 8018552:	9c01      	ldr	r4, [sp, #4]
 8018554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018556:	4798      	blx	r3
 8018558:	4220      	tst	r0, r4
 801855a:	d104      	bne.n	8018566 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x86>
 801855c:	4b09      	ldr	r3, [pc, #36]	; (8018584 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa4>)
 801855e:	f240 211a 	movw	r1, #538	; 0x21a
 8018562:	4a06      	ldr	r2, [pc, #24]	; (801857c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8018564:	e7f0      	b.n	8018548 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x68>
 8018566:	6870      	ldr	r0, [r6, #4]
 8018568:	a901      	add	r1, sp, #4
 801856a:	6803      	ldr	r3, [r0, #0]
 801856c:	685b      	ldr	r3, [r3, #4]
 801856e:	4798      	blx	r3
 8018570:	b00b      	add	sp, #44	; 0x2c
 8018572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018576:	bf00      	nop
 8018578:	080306e2 	.word	0x080306e2
 801857c:	08030934 	.word	0x08030934
 8018580:	08030810 	.word	0x08030810
 8018584:	0803071a 	.word	0x0803071a

08018588 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8018588:	b508      	push	{r3, lr}
 801858a:	290d      	cmp	r1, #13
 801858c:	d817      	bhi.n	80185be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801858e:	e8df f001 	tbb	[pc, r1]
 8018592:	090b      	.short	0x090b
 8018594:	0d0d0d07 	.word	0x0d0d0d07
 8018598:	1414140d 	.word	0x1414140d
 801859c:	0d0d1414 	.word	0x0d0d1414
 80185a0:	2020      	movs	r0, #32
 80185a2:	bd08      	pop	{r3, pc}
 80185a4:	2018      	movs	r0, #24
 80185a6:	e7fc      	b.n	80185a2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80185a8:	2010      	movs	r0, #16
 80185aa:	e7fa      	b.n	80185a2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80185ac:	4b05      	ldr	r3, [pc, #20]	; (80185c4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80185ae:	f240 2183 	movw	r1, #643	; 0x283
 80185b2:	4a05      	ldr	r2, [pc, #20]	; (80185c8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80185b4:	4805      	ldr	r0, [pc, #20]	; (80185cc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80185b6:	f012 f84d 	bl	802a654 <__assert_func>
 80185ba:	2008      	movs	r0, #8
 80185bc:	e7f1      	b.n	80185a2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80185be:	2000      	movs	r0, #0
 80185c0:	e7ef      	b.n	80185a2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80185c2:	bf00      	nop
 80185c4:	0803088c 	.word	0x0803088c
 80185c8:	08030c5f 	.word	0x08030c5f
 80185cc:	08030810 	.word	0x08030810

080185d0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80185d0:	b570      	push	{r4, r5, r6, lr}
 80185d2:	460d      	mov	r5, r1
 80185d4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80185d8:	4616      	mov	r6, r2
 80185da:	461c      	mov	r4, r3
 80185dc:	f7ff ffd4 	bl	8018588 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80185e0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80185e4:	10c0      	asrs	r0, r0, #3
 80185e6:	fb06 5101 	mla	r1, r6, r1, r5
 80185ea:	fb00 4001 	mla	r0, r0, r1, r4
 80185ee:	bd70      	pop	{r4, r5, r6, pc}

080185f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80185f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185f4:	b08c      	sub	sp, #48	; 0x30
 80185f6:	f04f 0c00 	mov.w	ip, #0
 80185fa:	4604      	mov	r4, r0
 80185fc:	469a      	mov	sl, r3
 80185fe:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 8018602:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 8018606:	2d0b      	cmp	r5, #11
 8018608:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 801860c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8018610:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8018614:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
 8018618:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801861c:	f8cd c018 	str.w	ip, [sp, #24]
 8018620:	d130      	bne.n	8018684 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x94>
 8018622:	2080      	movs	r0, #128	; 0x80
 8018624:	9205      	str	r2, [sp, #20]
 8018626:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801862a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801862e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8018632:	f8ad 7020 	strh.w	r7, [sp, #32]
 8018636:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 801863a:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801863e:	4620      	mov	r0, r4
 8018640:	f7ff fee8 	bl	8018414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018644:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8018648:	4603      	mov	r3, r0
 801864a:	4651      	mov	r1, sl
 801864c:	4620      	mov	r0, r4
 801864e:	e9cd 9800 	strd	r9, r8, [sp]
 8018652:	f7ff ffbd 	bl	80185d0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018656:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 801865a:	9007      	str	r0, [sp, #28]
 801865c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8018660:	2300      	movs	r3, #0
 8018662:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 8018666:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801866a:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 801866e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8018672:	b107      	cbz	r7, 8018676 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x86>
 8018674:	b9d6      	cbnz	r6, 80186ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbc>
 8018676:	4b17      	ldr	r3, [pc, #92]	; (80186d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018678:	f240 11c9 	movw	r1, #457	; 0x1c9
 801867c:	4a16      	ldr	r2, [pc, #88]	; (80186d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 801867e:	4817      	ldr	r0, [pc, #92]	; (80186dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8018680:	f011 ffe8 	bl	802a654 <__assert_func>
 8018684:	2d02      	cmp	r5, #2
 8018686:	d108      	bne.n	801869a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8018688:	2bff      	cmp	r3, #255	; 0xff
 801868a:	d104      	bne.n	8018696 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa6>
 801868c:	2800      	cmp	r0, #0
 801868e:	bf14      	ite	ne
 8018690:	2040      	movne	r0, #64	; 0x40
 8018692:	2020      	moveq	r0, #32
 8018694:	e7c6      	b.n	8018624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018696:	2040      	movs	r0, #64	; 0x40
 8018698:	e7c4      	b.n	8018624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801869a:	2bff      	cmp	r3, #255	; 0xff
 801869c:	d104      	bne.n	80186a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb8>
 801869e:	2800      	cmp	r0, #0
 80186a0:	bf14      	ite	ne
 80186a2:	2004      	movne	r0, #4
 80186a4:	2001      	moveq	r0, #1
 80186a6:	e7bd      	b.n	8018624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80186a8:	2004      	movs	r0, #4
 80186aa:	e7bb      	b.n	8018624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80186ac:	6823      	ldr	r3, [r4, #0]
 80186ae:	4620      	mov	r0, r4
 80186b0:	9d03      	ldr	r5, [sp, #12]
 80186b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186b4:	4798      	blx	r3
 80186b6:	4228      	tst	r0, r5
 80186b8:	d104      	bne.n	80186c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xd4>
 80186ba:	4b09      	ldr	r3, [pc, #36]	; (80186e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xf0>)
 80186bc:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 80186c0:	4a05      	ldr	r2, [pc, #20]	; (80186d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 80186c2:	e7dc      	b.n	801867e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 80186c4:	6860      	ldr	r0, [r4, #4]
 80186c6:	a903      	add	r1, sp, #12
 80186c8:	6803      	ldr	r3, [r0, #0]
 80186ca:	685b      	ldr	r3, [r3, #4]
 80186cc:	4798      	blx	r3
 80186ce:	b00c      	add	sp, #48	; 0x30
 80186d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186d4:	08030665 	.word	0x08030665
 80186d8:	08030aed 	.word	0x08030aed
 80186dc:	08030810 	.word	0x08030810
 80186e0:	0803069d 	.word	0x0803069d

080186e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80186e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186e8:	b08d      	sub	sp, #52	; 0x34
 80186ea:	469b      	mov	fp, r3
 80186ec:	2500      	movs	r5, #0
 80186ee:	4604      	mov	r4, r0
 80186f0:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
 80186f4:	4692      	mov	sl, r2
 80186f6:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 80186fa:	4689      	mov	r9, r1
 80186fc:	2fff      	cmp	r7, #255	; 0xff
 80186fe:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8018702:	9506      	str	r5, [sp, #24]
 8018704:	bf14      	ite	ne
 8018706:	2308      	movne	r3, #8
 8018708:	2302      	moveq	r3, #2
 801870a:	e9cd 3503 	strd	r3, r5, [sp, #12]
 801870e:	f7ff fe81 	bl	8018414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018712:	465a      	mov	r2, fp
 8018714:	4603      	mov	r3, r0
 8018716:	4651      	mov	r1, sl
 8018718:	4620      	mov	r0, r4
 801871a:	e9cd 8600 	strd	r8, r6, [sp]
 801871e:	f7ff ff57 	bl	80185d0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018722:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8018726:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 801872a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801872e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8018732:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8018736:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801873a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801873e:	9d03      	ldr	r5, [sp, #12]
 8018740:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8018744:	6823      	ldr	r3, [r4, #0]
 8018746:	9007      	str	r0, [sp, #28]
 8018748:	4620      	mov	r0, r4
 801874a:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 801874e:	f8cd 9018 	str.w	r9, [sp, #24]
 8018752:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8018756:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 801875a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018760:	4798      	blx	r3
 8018762:	4228      	tst	r0, r5
 8018764:	d106      	bne.n	8018774 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x90>
 8018766:	4b07      	ldr	r3, [pc, #28]	; (8018784 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8018768:	f44f 710c 	mov.w	r1, #560	; 0x230
 801876c:	4a06      	ldr	r2, [pc, #24]	; (8018788 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 801876e:	4807      	ldr	r0, [pc, #28]	; (801878c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa8>)
 8018770:	f011 ff70 	bl	802a654 <__assert_func>
 8018774:	6860      	ldr	r0, [r4, #4]
 8018776:	a903      	add	r1, sp, #12
 8018778:	6803      	ldr	r3, [r0, #0]
 801877a:	685b      	ldr	r3, [r3, #4]
 801877c:	4798      	blx	r3
 801877e:	b00d      	add	sp, #52	; 0x34
 8018780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018784:	0803069d 	.word	0x0803069d
 8018788:	08030bc4 	.word	0x08030bc4
 801878c:	08030810 	.word	0x08030810

08018790 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018790:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018794:	461f      	mov	r7, r3
 8018796:	4b0b      	ldr	r3, [pc, #44]	; (80187c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018798:	460d      	mov	r5, r1
 801879a:	4616      	mov	r6, r2
 801879c:	f8b3 8000 	ldrh.w	r8, [r3]
 80187a0:	4604      	mov	r4, r0
 80187a2:	f7ff fc77 	bl	8018094 <_ZN8touchgfx3HAL3lcdEv>
 80187a6:	6803      	ldr	r3, [r0, #0]
 80187a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187aa:	4798      	blx	r3
 80187ac:	463b      	mov	r3, r7
 80187ae:	4632      	mov	r2, r6
 80187b0:	4629      	mov	r1, r5
 80187b2:	e9cd 8000 	strd	r8, r0, [sp]
 80187b6:	4620      	mov	r0, r4
 80187b8:	f7ff ff0a 	bl	80185d0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80187bc:	b002      	add	sp, #8
 80187be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187c2:	bf00      	nop
 80187c4:	2001539a 	.word	0x2001539a

080187c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80187c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187cc:	b08b      	sub	sp, #44	; 0x2c
 80187ce:	4699      	mov	r9, r3
 80187d0:	4690      	mov	r8, r2
 80187d2:	4604      	mov	r4, r0
 80187d4:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 80187d8:	2500      	movs	r5, #0
 80187da:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 80187de:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80187e2:	9504      	str	r5, [sp, #16]
 80187e4:	f8ad 7018 	strh.w	r7, [sp, #24]
 80187e8:	f8ad 601a 	strh.w	r6, [sp, #26]
 80187ec:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80187f0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80187f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80187f8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80187fc:	f88d 3020 	strb.w	r3, [sp, #32]
 8018800:	f7ff fe08 	bl	8018414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018804:	464a      	mov	r2, r9
 8018806:	4603      	mov	r3, r0
 8018808:	4641      	mov	r1, r8
 801880a:	4620      	mov	r0, r4
 801880c:	f7ff ffc0 	bl	8018790 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018810:	4b19      	ldr	r3, [pc, #100]	; (8018878 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8018812:	9005      	str	r0, [sp, #20]
 8018814:	881b      	ldrh	r3, [r3, #0]
 8018816:	f8ad 301e 	strh.w	r3, [sp, #30]
 801881a:	f7ff fc3b 	bl	8018094 <_ZN8touchgfx3HAL3lcdEv>
 801881e:	6803      	ldr	r3, [r0, #0]
 8018820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018822:	4798      	blx	r3
 8018824:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8018828:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801882c:	b107      	cbz	r7, 8018830 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 801882e:	b936      	cbnz	r6, 801883e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8018830:	4b12      	ldr	r3, [pc, #72]	; (801887c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018832:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8018836:	4a12      	ldr	r2, [pc, #72]	; (8018880 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8018838:	4812      	ldr	r0, [pc, #72]	; (8018884 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 801883a:	f011 ff0b 	bl	802a654 <__assert_func>
 801883e:	6823      	ldr	r3, [r4, #0]
 8018840:	4620      	mov	r0, r4
 8018842:	9e01      	ldr	r6, [sp, #4]
 8018844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018846:	4798      	blx	r3
 8018848:	4230      	tst	r0, r6
 801884a:	d104      	bne.n	8018856 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 801884c:	4b0e      	ldr	r3, [pc, #56]	; (8018888 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xc0>)
 801884e:	f240 11e7 	movw	r1, #487	; 0x1e7
 8018852:	4a0b      	ldr	r2, [pc, #44]	; (8018880 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8018854:	e7f0      	b.n	8018838 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8018856:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018858:	a901      	add	r1, sp, #4
 801885a:	6860      	ldr	r0, [r4, #4]
 801885c:	9304      	str	r3, [sp, #16]
 801885e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8018862:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8018866:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801886a:	6803      	ldr	r3, [r0, #0]
 801886c:	685b      	ldr	r3, [r3, #4]
 801886e:	4798      	blx	r3
 8018870:	b00b      	add	sp, #44	; 0x2c
 8018872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018876:	bf00      	nop
 8018878:	2001539a 	.word	0x2001539a
 801887c:	08030665 	.word	0x08030665
 8018880:	08030999 	.word	0x08030999
 8018884:	08030810 	.word	0x08030810
 8018888:	0803069d 	.word	0x0803069d

0801888c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801888c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801888e:	b08d      	sub	sp, #52	; 0x34
 8018890:	4604      	mov	r4, r0
 8018892:	466b      	mov	r3, sp
 8018894:	e883 0006 	stmia.w	r3, {r1, r2}
 8018898:	4b21      	ldr	r3, [pc, #132]	; (8018920 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801889a:	781b      	ldrb	r3, [r3, #0]
 801889c:	b933      	cbnz	r3, 80188ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801889e:	4b21      	ldr	r3, [pc, #132]	; (8018924 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80188a0:	f240 2141 	movw	r1, #577	; 0x241
 80188a4:	4a20      	ldr	r2, [pc, #128]	; (8018928 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80188a6:	4821      	ldr	r0, [pc, #132]	; (801892c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 80188a8:	f011 fed4 	bl	802a654 <__assert_func>
 80188ac:	2300      	movs	r3, #0
 80188ae:	2501      	movs	r5, #1
 80188b0:	f8bd 6000 	ldrh.w	r6, [sp]
 80188b4:	9306      	str	r3, [sp, #24]
 80188b6:	6803      	ldr	r3, [r0, #0]
 80188b8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80188bc:	9503      	str	r5, [sp, #12]
 80188be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188c0:	4798      	blx	r3
 80188c2:	463a      	mov	r2, r7
 80188c4:	4631      	mov	r1, r6
 80188c6:	4603      	mov	r3, r0
 80188c8:	4620      	mov	r0, r4
 80188ca:	f7ff ff61 	bl	8018790 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80188ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80188d0:	9004      	str	r0, [sp, #16]
 80188d2:	9307      	str	r3, [sp, #28]
 80188d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80188d8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80188dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80188e0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80188e4:	4b12      	ldr	r3, [pc, #72]	; (8018930 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa4>)
 80188e6:	881b      	ldrh	r3, [r3, #0]
 80188e8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80188ec:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80188f0:	f7ff fbd0 	bl	8018094 <_ZN8touchgfx3HAL3lcdEv>
 80188f4:	6803      	ldr	r3, [r0, #0]
 80188f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188f8:	4798      	blx	r3
 80188fa:	23ff      	movs	r3, #255	; 0xff
 80188fc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8018900:	a903      	add	r1, sp, #12
 8018902:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8018906:	6860      	ldr	r0, [r4, #4]
 8018908:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801890c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8018910:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8018914:	6803      	ldr	r3, [r0, #0]
 8018916:	685b      	ldr	r3, [r3, #4]
 8018918:	4798      	blx	r3
 801891a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801891c:	b00d      	add	sp, #52	; 0x34
 801891e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018920:	2001539f 	.word	0x2001539f
 8018924:	08030764 	.word	0x08030764
 8018928:	08030a43 	.word	0x08030a43
 801892c:	08030810 	.word	0x08030810
 8018930:	2001539a 	.word	0x2001539a

08018934 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018938:	b08c      	sub	sp, #48	; 0x30
 801893a:	461e      	mov	r6, r3
 801893c:	2300      	movs	r3, #0
 801893e:	4604      	mov	r4, r0
 8018940:	466d      	mov	r5, sp
 8018942:	9306      	str	r3, [sp, #24]
 8018944:	6803      	ldr	r3, [r0, #0]
 8018946:	e885 0006 	stmia.w	r5, {r1, r2}
 801894a:	2501      	movs	r5, #1
 801894c:	f8bd 7000 	ldrh.w	r7, [sp]
 8018950:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8018954:	9503      	str	r5, [sp, #12]
 8018956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018958:	4798      	blx	r3
 801895a:	4642      	mov	r2, r8
 801895c:	4639      	mov	r1, r7
 801895e:	4603      	mov	r3, r0
 8018960:	4620      	mov	r0, r4
 8018962:	f7ff ff15 	bl	8018790 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018966:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801896a:	9004      	str	r0, [sp, #16]
 801896c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018970:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018974:	9607      	str	r6, [sp, #28]
 8018976:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801897a:	4b10      	ldr	r3, [pc, #64]	; (80189bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801897c:	881b      	ldrh	r3, [r3, #0]
 801897e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8018982:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018984:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018988:	f7ff fb84 	bl	8018094 <_ZN8touchgfx3HAL3lcdEv>
 801898c:	6803      	ldr	r3, [r0, #0]
 801898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018990:	4798      	blx	r3
 8018992:	23ff      	movs	r3, #255	; 0xff
 8018994:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8018998:	a903      	add	r1, sp, #12
 801899a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801899e:	6860      	ldr	r0, [r4, #4]
 80189a0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80189a4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80189a8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80189ac:	6803      	ldr	r3, [r0, #0]
 80189ae:	685b      	ldr	r3, [r3, #4]
 80189b0:	4798      	blx	r3
 80189b2:	4630      	mov	r0, r6
 80189b4:	b00c      	add	sp, #48	; 0x30
 80189b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189ba:	bf00      	nop
 80189bc:	2001539a 	.word	0x2001539a

080189c0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80189c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189c2:	b085      	sub	sp, #20
 80189c4:	4605      	mov	r5, r0
 80189c6:	ac02      	add	r4, sp, #8
 80189c8:	e884 0006 	stmia.w	r4, {r1, r2}
 80189cc:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80189d0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80189d4:	f7ff fd1e 	bl	8018414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80189d8:	4631      	mov	r1, r6
 80189da:	4603      	mov	r3, r0
 80189dc:	463a      	mov	r2, r7
 80189de:	4628      	mov	r0, r5
 80189e0:	f7ff fed6 	bl	8018790 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80189e4:	4a05      	ldr	r2, [pc, #20]	; (80189fc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80189e6:	682b      	ldr	r3, [r5, #0]
 80189e8:	8812      	ldrh	r2, [r2, #0]
 80189ea:	9200      	str	r2, [sp, #0]
 80189ec:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80189ee:	4603      	mov	r3, r0
 80189f0:	4628      	mov	r0, r5
 80189f2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80189f6:	47b0      	blx	r6
 80189f8:	b005      	add	sp, #20
 80189fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189fc:	2001539a 	.word	0x2001539a

08018a00 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018a00:	b570      	push	{r4, r5, r6, lr}
 8018a02:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8018a06:	4604      	mov	r4, r0
 8018a08:	b19b      	cbz	r3, 8018a32 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018a0a:	2002      	movs	r0, #2
 8018a0c:	f7e9 f8dc 	bl	8001bc8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018a10:	2300      	movs	r3, #0
 8018a12:	4620      	mov	r0, r4
 8018a14:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018a18:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8018a1c:	6823      	ldr	r3, [r4, #0]
 8018a1e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8018a22:	f7ff fcf7 	bl	8018414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018a26:	4601      	mov	r1, r0
 8018a28:	4620      	mov	r0, r4
 8018a2a:	462b      	mov	r3, r5
 8018a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a30:	4718      	bx	r3
 8018a32:	bd70      	pop	{r4, r5, r6, pc}

08018a34 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8018a34:	b570      	push	{r4, r5, r6, lr}
 8018a36:	4605      	mov	r5, r0
 8018a38:	460c      	mov	r4, r1
 8018a3a:	2003      	movs	r0, #3
 8018a3c:	b149      	cbz	r1, 8018a52 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8018a3e:	f7e9 f873 	bl	8001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018a42:	6928      	ldr	r0, [r5, #16]
 8018a44:	b168      	cbz	r0, 8018a62 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8018a46:	6803      	ldr	r3, [r0, #0]
 8018a48:	2101      	movs	r1, #1
 8018a4a:	695b      	ldr	r3, [r3, #20]
 8018a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a50:	4718      	bx	r3
 8018a52:	f7e9 f891 	bl	8001b78 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018a56:	6928      	ldr	r0, [r5, #16]
 8018a58:	b118      	cbz	r0, 8018a62 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8018a5a:	6803      	ldr	r3, [r0, #0]
 8018a5c:	4621      	mov	r1, r4
 8018a5e:	695b      	ldr	r3, [r3, #20]
 8018a60:	e7f4      	b.n	8018a4c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8018a62:	bd70      	pop	{r4, r5, r6, pc}

08018a64 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018a64:	b538      	push	{r3, r4, r5, lr}
 8018a66:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8018a6a:	4604      	mov	r4, r0
 8018a6c:	460d      	mov	r5, r1
 8018a6e:	428b      	cmp	r3, r1
 8018a70:	d006      	beq.n	8018a80 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8018a72:	6803      	ldr	r3, [r0, #0]
 8018a74:	b929      	cbnz	r1, 8018a82 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8018a76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8018a7a:	4798      	blx	r3
 8018a7c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8018a80:	bd38      	pop	{r3, r4, r5, pc}
 8018a82:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8018a86:	e7f8      	b.n	8018a7a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08018a88 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8018a88:	4b0d      	ldr	r3, [pc, #52]	; (8018ac0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8018a8a:	b510      	push	{r4, lr}
 8018a8c:	781b      	ldrb	r3, [r3, #0]
 8018a8e:	4604      	mov	r4, r0
 8018a90:	b95b      	cbnz	r3, 8018aaa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018a92:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8018a96:	2b02      	cmp	r3, #2
 8018a98:	d007      	beq.n	8018aaa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018a9a:	6840      	ldr	r0, [r0, #4]
 8018a9c:	f000 f93c 	bl	8018d18 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8018aa0:	b118      	cbz	r0, 8018aaa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018aa2:	6862      	ldr	r2, [r4, #4]
 8018aa4:	7a53      	ldrb	r3, [r2, #9]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d0fc      	beq.n	8018aa4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8018aaa:	f7e9 f9db 	bl	8001e64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018aae:	4620      	mov	r0, r4
 8018ab0:	2100      	movs	r1, #0
 8018ab2:	f7ff ffd7 	bl	8018a64 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018ab6:	4620      	mov	r0, r4
 8018ab8:	f7ff fcac 	bl	8018414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018abc:	bd10      	pop	{r4, pc}
 8018abe:	bf00      	nop
 8018ac0:	2001539e 	.word	0x2001539e

08018ac4 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018ac4:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018ac8:	1a13      	subs	r3, r2, r0
 8018aca:	4258      	negs	r0, r3
 8018acc:	4158      	adcs	r0, r3
 8018ace:	4770      	bx	lr

08018ad0 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018ad0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8018ad4:	1a9b      	subs	r3, r3, r2
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	bfdc      	itt	le
 8018ada:	6882      	ldrle	r2, [r0, #8]
 8018adc:	189b      	addle	r3, r3, r2
 8018ade:	2b01      	cmp	r3, #1
 8018ae0:	bfcc      	ite	gt
 8018ae2:	2000      	movgt	r0, #0
 8018ae4:	2001      	movle	r0, #1
 8018ae6:	4770      	bx	lr

08018ae8 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018ae8:	6902      	ldr	r2, [r0, #16]
 8018aea:	6843      	ldr	r3, [r0, #4]
 8018aec:	2024      	movs	r0, #36	; 0x24
 8018aee:	fb00 3002 	mla	r0, r0, r2, r3
 8018af2:	4770      	bx	lr

08018af4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018af4:	6803      	ldr	r3, [r0, #0]
 8018af6:	691b      	ldr	r3, [r3, #16]
 8018af8:	4718      	bx	r3

08018afa <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018afa:	4770      	bx	lr

08018afc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8018afc:	4770      	bx	lr

08018afe <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8018afe:	4770      	bx	lr

08018b00 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8018b00:	2301      	movs	r3, #1
 8018b02:	b570      	push	{r4, r5, r6, lr}
 8018b04:	7203      	strb	r3, [r0, #8]
 8018b06:	4604      	mov	r4, r0
 8018b08:	6840      	ldr	r0, [r0, #4]
 8018b0a:	6803      	ldr	r3, [r0, #0]
 8018b0c:	699b      	ldr	r3, [r3, #24]
 8018b0e:	4798      	blx	r3
 8018b10:	6803      	ldr	r3, [r0, #0]
 8018b12:	4605      	mov	r5, r0
 8018b14:	2b40      	cmp	r3, #64	; 0x40
 8018b16:	d039      	beq.n	8018b8c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018b18:	d815      	bhi.n	8018b46 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8018b1a:	2b04      	cmp	r3, #4
 8018b1c:	d022      	beq.n	8018b64 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018b1e:	d808      	bhi.n	8018b32 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018b20:	2b01      	cmp	r3, #1
 8018b22:	d033      	beq.n	8018b8c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018b24:	2b02      	cmp	r3, #2
 8018b26:	d108      	bne.n	8018b3a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8018b28:	6823      	ldr	r3, [r4, #0]
 8018b2a:	4620      	mov	r0, r4
 8018b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b2e:	4798      	blx	r3
 8018b30:	e025      	b.n	8018b7e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8018b32:	2b08      	cmp	r3, #8
 8018b34:	d01e      	beq.n	8018b74 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8018b36:	2b20      	cmp	r3, #32
 8018b38:	d028      	beq.n	8018b8c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018b3a:	4b17      	ldr	r3, [pc, #92]	; (8018b98 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8018b3c:	2188      	movs	r1, #136	; 0x88
 8018b3e:	4a17      	ldr	r2, [pc, #92]	; (8018b9c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8018b40:	4817      	ldr	r0, [pc, #92]	; (8018ba0 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8018b42:	f011 fd87 	bl	802a654 <__assert_func>
 8018b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018b4a:	d01f      	beq.n	8018b8c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018b4c:	d804      	bhi.n	8018b58 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8018b4e:	2b80      	cmp	r3, #128	; 0x80
 8018b50:	d01c      	beq.n	8018b8c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018b56:	e7ef      	b.n	8018b38 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8018b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018b5c:	d016      	beq.n	8018b8c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018b62:	e7e0      	b.n	8018b26 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8018b64:	6823      	ldr	r3, [r4, #0]
 8018b66:	7f01      	ldrb	r1, [r0, #28]
 8018b68:	4620      	mov	r0, r4
 8018b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b6c:	4798      	blx	r3
 8018b6e:	6823      	ldr	r3, [r4, #0]
 8018b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b72:	e006      	b.n	8018b82 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8018b74:	6823      	ldr	r3, [r4, #0]
 8018b76:	7f01      	ldrb	r1, [r0, #28]
 8018b78:	4620      	mov	r0, r4
 8018b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b7c:	4798      	blx	r3
 8018b7e:	6823      	ldr	r3, [r4, #0]
 8018b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b82:	4629      	mov	r1, r5
 8018b84:	4620      	mov	r0, r4
 8018b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b8a:	4718      	bx	r3
 8018b8c:	6823      	ldr	r3, [r4, #0]
 8018b8e:	4620      	mov	r0, r4
 8018b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b92:	4798      	blx	r3
 8018b94:	e7eb      	b.n	8018b6e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8018b96:	bf00      	nop
 8018b98:	08030ca8 	.word	0x08030ca8
 8018b9c:	08030d68 	.word	0x08030d68
 8018ba0:	08030ccd 	.word	0x08030ccd

08018ba4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018ba4:	b570      	push	{r4, r5, r6, lr}
 8018ba6:	4604      	mov	r4, r0
 8018ba8:	460e      	mov	r6, r1
 8018baa:	6860      	ldr	r0, [r4, #4]
 8018bac:	6803      	ldr	r3, [r0, #0]
 8018bae:	685b      	ldr	r3, [r3, #4]
 8018bb0:	4798      	blx	r3
 8018bb2:	2800      	cmp	r0, #0
 8018bb4:	d1f9      	bne.n	8018baa <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8018bb6:	4d0d      	ldr	r5, [pc, #52]	; (8018bec <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8018bb8:	6828      	ldr	r0, [r5, #0]
 8018bba:	6803      	ldr	r3, [r0, #0]
 8018bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018bbe:	4798      	blx	r3
 8018bc0:	f7e9 f95e 	bl	8001e80 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018bc4:	6828      	ldr	r0, [r5, #0]
 8018bc6:	2101      	movs	r1, #1
 8018bc8:	f7ff ff4c 	bl	8018a64 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018bcc:	6860      	ldr	r0, [r4, #4]
 8018bce:	4631      	mov	r1, r6
 8018bd0:	6803      	ldr	r3, [r0, #0]
 8018bd2:	689b      	ldr	r3, [r3, #8]
 8018bd4:	4798      	blx	r3
 8018bd6:	6823      	ldr	r3, [r4, #0]
 8018bd8:	4620      	mov	r0, r4
 8018bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bdc:	4798      	blx	r3
 8018bde:	6828      	ldr	r0, [r5, #0]
 8018be0:	6803      	ldr	r3, [r0, #0]
 8018be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018be8:	4718      	bx	r3
 8018bea:	bf00      	nop
 8018bec:	200153a0 	.word	0x200153a0

08018bf0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018bf0:	b508      	push	{r3, lr}
 8018bf2:	f7e9 f937 	bl	8001e64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018bf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018bfa:	f7e9 b93b 	b.w	8001e74 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018bfe <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8018bfe:	b510      	push	{r4, lr}
 8018c00:	4604      	mov	r4, r0
 8018c02:	2114      	movs	r1, #20
 8018c04:	f011 fcf7 	bl	802a5f6 <_ZdlPvj>
 8018c08:	4620      	mov	r0, r4
 8018c0a:	bd10      	pop	{r4, pc}

08018c0c <_ZN8touchgfx13DMA_Interface5startEv>:
 8018c0c:	b510      	push	{r4, lr}
 8018c0e:	4604      	mov	r4, r0
 8018c10:	6840      	ldr	r0, [r0, #4]
 8018c12:	6803      	ldr	r3, [r0, #0]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	4798      	blx	r3
 8018c18:	b948      	cbnz	r0, 8018c2e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018c1a:	7a63      	ldrb	r3, [r4, #9]
 8018c1c:	b13b      	cbz	r3, 8018c2e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018c1e:	7a23      	ldrb	r3, [r4, #8]
 8018c20:	b92b      	cbnz	r3, 8018c2e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018c22:	6823      	ldr	r3, [r4, #0]
 8018c24:	4620      	mov	r0, r4
 8018c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c2c:	4718      	bx	r3
 8018c2e:	bd10      	pop	{r4, pc}

08018c30 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8018c30:	b510      	push	{r4, lr}
 8018c32:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8018c36:	1ad2      	subs	r2, r2, r3
 8018c38:	2a00      	cmp	r2, #0
 8018c3a:	bfdc      	itt	le
 8018c3c:	6884      	ldrle	r4, [r0, #8]
 8018c3e:	1912      	addle	r2, r2, r4
 8018c40:	2a01      	cmp	r2, #1
 8018c42:	dd17      	ble.n	8018c74 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 8018c44:	6842      	ldr	r2, [r0, #4]
 8018c46:	2424      	movs	r4, #36	; 0x24
 8018c48:	fb04 2303 	mla	r3, r4, r3, r2
 8018c4c:	f101 0220 	add.w	r2, r1, #32
 8018c50:	f851 4b04 	ldr.w	r4, [r1], #4
 8018c54:	4291      	cmp	r1, r2
 8018c56:	f843 4b04 	str.w	r4, [r3], #4
 8018c5a:	d1f9      	bne.n	8018c50 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8018c5c:	780a      	ldrb	r2, [r1, #0]
 8018c5e:	701a      	strb	r2, [r3, #0]
 8018c60:	68c3      	ldr	r3, [r0, #12]
 8018c62:	6882      	ldr	r2, [r0, #8]
 8018c64:	f3bf 8f5b 	dmb	ish
 8018c68:	3301      	adds	r3, #1
 8018c6a:	429a      	cmp	r2, r3
 8018c6c:	bfd8      	it	le
 8018c6e:	1a9b      	suble	r3, r3, r2
 8018c70:	60c3      	str	r3, [r0, #12]
 8018c72:	bd10      	pop	{r4, pc}
 8018c74:	4b02      	ldr	r3, [pc, #8]	; (8018c80 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8018c76:	2136      	movs	r1, #54	; 0x36
 8018c78:	4a02      	ldr	r2, [pc, #8]	; (8018c84 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8018c7a:	4803      	ldr	r0, [pc, #12]	; (8018c88 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8018c7c:	f011 fcea 	bl	802a654 <__assert_func>
 8018c80:	08030cf3 	.word	0x08030cf3
 8018c84:	08030d98 	.word	0x08030d98
 8018c88:	08030ccd 	.word	0x08030ccd

08018c8c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8018c8c:	b510      	push	{r4, lr}
 8018c8e:	6803      	ldr	r3, [r0, #0]
 8018c90:	4604      	mov	r4, r0
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	4798      	blx	r3
 8018c96:	b128      	cbz	r0, 8018ca4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8018c98:	4b07      	ldr	r3, [pc, #28]	; (8018cb8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8018c9a:	213c      	movs	r1, #60	; 0x3c
 8018c9c:	4a07      	ldr	r2, [pc, #28]	; (8018cbc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8018c9e:	4808      	ldr	r0, [pc, #32]	; (8018cc0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8018ca0:	f011 fcd8 	bl	802a654 <__assert_func>
 8018ca4:	6923      	ldr	r3, [r4, #16]
 8018ca6:	68a2      	ldr	r2, [r4, #8]
 8018ca8:	f3bf 8f5b 	dmb	ish
 8018cac:	3301      	adds	r3, #1
 8018cae:	429a      	cmp	r2, r3
 8018cb0:	bfd8      	it	le
 8018cb2:	1a9b      	suble	r3, r3, r2
 8018cb4:	6123      	str	r3, [r4, #16]
 8018cb6:	bd10      	pop	{r4, pc}
 8018cb8:	08030d16 	.word	0x08030d16
 8018cbc:	08030de6 	.word	0x08030de6
 8018cc0:	08030ccd 	.word	0x08030ccd

08018cc4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018cc4:	b570      	push	{r4, r5, r6, lr}
 8018cc6:	4604      	mov	r4, r0
 8018cc8:	6840      	ldr	r0, [r0, #4]
 8018cca:	6803      	ldr	r3, [r0, #0]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	4798      	blx	r3
 8018cd0:	4605      	mov	r5, r0
 8018cd2:	b930      	cbnz	r0, 8018ce2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018cd4:	7a23      	ldrb	r3, [r4, #8]
 8018cd6:	b123      	cbz	r3, 8018ce2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018cd8:	6860      	ldr	r0, [r4, #4]
 8018cda:	6803      	ldr	r3, [r0, #0]
 8018cdc:	695b      	ldr	r3, [r3, #20]
 8018cde:	4798      	blx	r3
 8018ce0:	7225      	strb	r5, [r4, #8]
 8018ce2:	6860      	ldr	r0, [r4, #4]
 8018ce4:	6803      	ldr	r3, [r0, #0]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	4798      	blx	r3
 8018cea:	b928      	cbnz	r0, 8018cf8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018cec:	6823      	ldr	r3, [r4, #0]
 8018cee:	4620      	mov	r0, r4
 8018cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018cf6:	4718      	bx	r3
 8018cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018cfc:	f7e9 b8c8 	b.w	8001e90 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08018d00 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018d00:	b510      	push	{r4, lr}
 8018d02:	6082      	str	r2, [r0, #8]
 8018d04:	2200      	movs	r2, #0
 8018d06:	4c03      	ldr	r4, [pc, #12]	; (8018d14 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018d08:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018d0c:	e9c0 4100 	strd	r4, r1, [r0]
 8018d10:	bd10      	pop	{r4, pc}
 8018d12:	bf00      	nop
 8018d14:	08030d4c 	.word	0x08030d4c

08018d18 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018d18:	6840      	ldr	r0, [r0, #4]
 8018d1a:	6803      	ldr	r3, [r0, #0]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	4718      	bx	r3

08018d20 <_ZN8touchgfx8TextArea8setWidthEs>:
 8018d20:	b530      	push	{r4, r5, lr}
 8018d22:	b085      	sub	sp, #20
 8018d24:	6803      	ldr	r3, [r0, #0]
 8018d26:	4604      	mov	r4, r0
 8018d28:	8101      	strh	r1, [r0, #8]
 8018d2a:	466d      	mov	r5, sp
 8018d2c:	4601      	mov	r1, r0
 8018d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018d32:	343c      	adds	r4, #60	; 0x3c
 8018d34:	4628      	mov	r0, r5
 8018d36:	4798      	blx	r3
 8018d38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018d3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018d40:	b005      	add	sp, #20
 8018d42:	bd30      	pop	{r4, r5, pc}

08018d44 <_ZN8touchgfx8TextArea9setHeightEs>:
 8018d44:	b530      	push	{r4, r5, lr}
 8018d46:	b085      	sub	sp, #20
 8018d48:	6803      	ldr	r3, [r0, #0]
 8018d4a:	4604      	mov	r4, r0
 8018d4c:	8141      	strh	r1, [r0, #10]
 8018d4e:	466d      	mov	r5, sp
 8018d50:	4601      	mov	r1, r0
 8018d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018d56:	343c      	adds	r4, #60	; 0x3c
 8018d58:	4628      	mov	r0, r5
 8018d5a:	4798      	blx	r3
 8018d5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018d60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018d64:	b005      	add	sp, #20
 8018d66:	bd30      	pop	{r4, r5, pc}

08018d68 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8018d68:	2200      	movs	r2, #0
 8018d6a:	8002      	strh	r2, [r0, #0]
 8018d6c:	8042      	strh	r2, [r0, #2]
 8018d6e:	8082      	strh	r2, [r0, #4]
 8018d70:	80c2      	strh	r2, [r0, #6]
 8018d72:	4770      	bx	lr

08018d74 <_ZN8touchgfx8TextArea8setAlphaEh>:
 8018d74:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 8018d78:	4770      	bx	lr

08018d7a <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8018d7a:	b570      	push	{r4, r5, r6, lr}
 8018d7c:	6803      	ldr	r3, [r0, #0]
 8018d7e:	4604      	mov	r4, r0
 8018d80:	4615      	mov	r5, r2
 8018d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d84:	4798      	blx	r3
 8018d86:	6823      	ldr	r3, [r4, #0]
 8018d88:	4629      	mov	r1, r5
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d92:	4718      	bx	r3

08018d94 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8018d94:	2000      	movs	r0, #0
 8018d96:	4770      	bx	lr

08018d98 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8018d98:	2000      	movs	r0, #0
 8018d9a:	4770      	bx	lr

08018d9c <_ZN8touchgfx8TextAreaD1Ev>:
 8018d9c:	4770      	bx	lr
	...

08018da0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8018da0:	b570      	push	{r4, r5, r6, lr}
 8018da2:	6803      	ldr	r3, [r0, #0]
 8018da4:	4604      	mov	r4, r0
 8018da6:	b28d      	uxth	r5, r1
 8018da8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018daa:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8018dac:	4b10      	ldr	r3, [pc, #64]	; (8018df0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	b92b      	cbnz	r3, 8018dbe <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8018db2:	4b10      	ldr	r3, [pc, #64]	; (8018df4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8018db4:	21ae      	movs	r1, #174	; 0xae
 8018db6:	4a10      	ldr	r2, [pc, #64]	; (8018df8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8018db8:	4810      	ldr	r0, [pc, #64]	; (8018dfc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8018dba:	f011 fc4b 	bl	802a654 <__assert_func>
 8018dbe:	4910      	ldr	r1, [pc, #64]	; (8018e00 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8018dc0:	8809      	ldrh	r1, [r1, #0]
 8018dc2:	4291      	cmp	r1, r2
 8018dc4:	d803      	bhi.n	8018dce <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8018dc6:	4b0f      	ldr	r3, [pc, #60]	; (8018e04 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8018dc8:	21af      	movs	r1, #175	; 0xaf
 8018dca:	4a0b      	ldr	r2, [pc, #44]	; (8018df8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8018dcc:	e7f4      	b.n	8018db8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8018dce:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8018dd2:	4b0d      	ldr	r3, [pc, #52]	; (8018e08 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018dda:	6803      	ldr	r3, [r0, #0]
 8018ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dde:	4798      	blx	r3
 8018de0:	1a29      	subs	r1, r5, r0
 8018de2:	4633      	mov	r3, r6
 8018de4:	4620      	mov	r0, r4
 8018de6:	b209      	sxth	r1, r1
 8018de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018dec:	4718      	bx	r3
 8018dee:	bf00      	nop
 8018df0:	200153f0 	.word	0x200153f0
 8018df4:	08030e16 	.word	0x08030e16
 8018df8:	08030f50 	.word	0x08030f50
 8018dfc:	08030e58 	.word	0x08030e58
 8018e00:	200153f4 	.word	0x200153f4
 8018e04:	08030e81 	.word	0x08030e81
 8018e08:	200153f8 	.word	0x200153f8

08018e0c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018e0c:	4b1b      	ldr	r3, [pc, #108]	; (8018e7c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8018e0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018e12:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018e14:	4604      	mov	r4, r0
 8018e16:	881b      	ldrh	r3, [r3, #0]
 8018e18:	428b      	cmp	r3, r1
 8018e1a:	d92d      	bls.n	8018e78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>
 8018e1c:	4b18      	ldr	r3, [pc, #96]	; (8018e80 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	b92b      	cbnz	r3, 8018e2e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x22>
 8018e22:	4b18      	ldr	r3, [pc, #96]	; (8018e84 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8018e24:	21ae      	movs	r1, #174	; 0xae
 8018e26:	4a18      	ldr	r2, [pc, #96]	; (8018e88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8018e28:	4818      	ldr	r0, [pc, #96]	; (8018e8c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8018e2a:	f011 fc13 	bl	802a654 <__assert_func>
 8018e2e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018e32:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018e36:	4b16      	ldr	r3, [pc, #88]	; (8018e90 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x84>)
 8018e38:	7855      	ldrb	r5, [r2, #1]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8018e40:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8018e44:	6833      	ldr	r3, [r6, #0]
 8018e46:	69df      	ldr	r7, [r3, #28]
 8018e48:	4b12      	ldr	r3, [pc, #72]	; (8018e94 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x88>)
 8018e4a:	6818      	ldr	r0, [r3, #0]
 8018e4c:	f7eb fb2e 	bl	80044ac <_ZNK8touchgfx5Texts7getTextEt>
 8018e50:	6823      	ldr	r3, [r4, #0]
 8018e52:	4680      	mov	r8, r0
 8018e54:	4620      	mov	r0, r4
 8018e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018e58:	4798      	blx	r3
 8018e5a:	6823      	ldr	r3, [r4, #0]
 8018e5c:	4681      	mov	r9, r0
 8018e5e:	4620      	mov	r0, r4
 8018e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018e64:	4798      	blx	r3
 8018e66:	464b      	mov	r3, r9
 8018e68:	9000      	str	r0, [sp, #0]
 8018e6a:	4642      	mov	r2, r8
 8018e6c:	4629      	mov	r1, r5
 8018e6e:	4630      	mov	r0, r6
 8018e70:	47b8      	blx	r7
 8018e72:	b003      	add	sp, #12
 8018e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e78:	2000      	movs	r0, #0
 8018e7a:	e7fa      	b.n	8018e72 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x66>
 8018e7c:	200153f4 	.word	0x200153f4
 8018e80:	200153f0 	.word	0x200153f0
 8018e84:	08030e16 	.word	0x08030e16
 8018e88:	08030f50 	.word	0x08030f50
 8018e8c:	08030e58 	.word	0x08030e58
 8018e90:	200153f8 	.word	0x200153f8
 8018e94:	200153fc 	.word	0x200153fc

08018e98 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018e98:	b40e      	push	{r1, r2, r3}
 8018e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e9e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8018f90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 8018ea2:	b09c      	sub	sp, #112	; 0x70
 8018ea4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018ea6:	4604      	mov	r4, r0
 8018ea8:	f8b9 3000 	ldrh.w	r3, [r9]
 8018eac:	4293      	cmp	r3, r2
 8018eae:	d965      	bls.n	8018f7c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 8018eb0:	ab26      	add	r3, sp, #152	; 0x98
 8018eb2:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8018f94 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 8018eb6:	9302      	str	r3, [sp, #8]
 8018eb8:	f8da 3000 	ldr.w	r3, [sl]
 8018ebc:	b92b      	cbnz	r3, 8018eca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x32>
 8018ebe:	4b30      	ldr	r3, [pc, #192]	; (8018f80 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8018ec0:	21ae      	movs	r1, #174	; 0xae
 8018ec2:	4a30      	ldr	r2, [pc, #192]	; (8018f84 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8018ec4:	4830      	ldr	r0, [pc, #192]	; (8018f88 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8018ec6:	f011 fbc5 	bl	802a654 <__assert_func>
 8018eca:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8018f98 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8018ece:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8018ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8018ed6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018eda:	682b      	ldr	r3, [r5, #0]
 8018edc:	4628      	mov	r0, r5
 8018ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ee0:	4798      	blx	r3
 8018ee2:	4606      	mov	r6, r0
 8018ee4:	b207      	sxth	r7, r0
 8018ee6:	a803      	add	r0, sp, #12
 8018ee8:	f004 f8cf 	bl	801d08a <_ZN8touchgfx12TextProviderC1Ev>
 8018eec:	682b      	ldr	r3, [r5, #0]
 8018eee:	4628      	mov	r0, r5
 8018ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ef2:	4798      	blx	r3
 8018ef4:	682b      	ldr	r3, [r5, #0]
 8018ef6:	4683      	mov	fp, r0
 8018ef8:	4628      	mov	r0, r5
 8018efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018efc:	4798      	blx	r3
 8018efe:	465b      	mov	r3, fp
 8018f00:	9000      	str	r0, [sp, #0]
 8018f02:	a803      	add	r0, sp, #12
 8018f04:	9925      	ldr	r1, [sp, #148]	; 0x94
 8018f06:	9a02      	ldr	r2, [sp, #8]
 8018f08:	f004 f92a 	bl	801d160 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018f0c:	f8da 3000 	ldr.w	r3, [sl]
 8018f10:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d0d2      	beq.n	8018ebe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x26>
 8018f18:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018f1a:	f8b9 0000 	ldrh.w	r0, [r9]
 8018f1e:	4290      	cmp	r0, r2
 8018f20:	d926      	bls.n	8018f70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8018f22:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8018f26:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018f2a:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8018f2e:	786a      	ldrb	r2, [r5, #1]
 8018f30:	8925      	ldrh	r5, [r4, #8]
 8018f32:	f8d8 3000 	ldr.w	r3, [r8]
 8018f36:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8018f3a:	eba5 050c 	sub.w	r5, r5, ip
 8018f3e:	b22d      	sxth	r5, r5
 8018f40:	9500      	str	r5, [sp, #0]
 8018f42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018f46:	a803      	add	r0, sp, #12
 8018f48:	f001 ff00 	bl	801ad4c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8018f4c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8018f50:	b203      	sxth	r3, r0
 8018f52:	18b9      	adds	r1, r7, r2
 8018f54:	2900      	cmp	r1, #0
 8018f56:	dd0f      	ble.n	8018f78 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 8018f58:	3b01      	subs	r3, #1
 8018f5a:	fb13 f302 	smulbb	r3, r3, r2
 8018f5e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8018f62:	b21f      	sxth	r7, r3
 8018f64:	4638      	mov	r0, r7
 8018f66:	b01c      	add	sp, #112	; 0x70
 8018f68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f6c:	b003      	add	sp, #12
 8018f6e:	4770      	bx	lr
 8018f70:	4b06      	ldr	r3, [pc, #24]	; (8018f8c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8018f72:	21af      	movs	r1, #175	; 0xaf
 8018f74:	4a03      	ldr	r2, [pc, #12]	; (8018f84 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8018f76:	e7a5      	b.n	8018ec4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2c>
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	dcf3      	bgt.n	8018f64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8018f7c:	2700      	movs	r7, #0
 8018f7e:	e7f1      	b.n	8018f64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8018f80:	08030e16 	.word	0x08030e16
 8018f84:	08030f50 	.word	0x08030f50
 8018f88:	08030e58 	.word	0x08030e58
 8018f8c:	08030e81 	.word	0x08030e81
 8018f90:	200153f4 	.word	0x200153f4
 8018f94:	200153f0 	.word	0x200153f0
 8018f98:	200153f8 	.word	0x200153f8

08018f9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8018f9c:	4b6d      	ldr	r3, [pc, #436]	; (8019154 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b8>)
 8018f9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa2:	460c      	mov	r4, r1
 8018fa4:	881a      	ldrh	r2, [r3, #0]
 8018fa6:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8018fa8:	b0b9      	sub	sp, #228	; 0xe4
 8018faa:	4681      	mov	r9, r0
 8018fac:	428a      	cmp	r2, r1
 8018fae:	9302      	str	r3, [sp, #8]
 8018fb0:	d809      	bhi.n	8018fc6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2a>
 8018fb2:	2300      	movs	r3, #0
 8018fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018fb8:	6083      	str	r3, [r0, #8]
 8018fba:	e9c0 3200 	strd	r3, r2, [r0]
 8018fbe:	4648      	mov	r0, r9
 8018fc0:	b039      	add	sp, #228	; 0xe4
 8018fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fc6:	4a64      	ldr	r2, [pc, #400]	; (8019158 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1bc>)
 8018fc8:	6813      	ldr	r3, [r2, #0]
 8018fca:	4692      	mov	sl, r2
 8018fcc:	b92b      	cbnz	r3, 8018fda <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3e>
 8018fce:	4b63      	ldr	r3, [pc, #396]	; (801915c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c0>)
 8018fd0:	21ae      	movs	r1, #174	; 0xae
 8018fd2:	4a63      	ldr	r2, [pc, #396]	; (8019160 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c4>)
 8018fd4:	4863      	ldr	r0, [pc, #396]	; (8019164 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c8>)
 8018fd6:	f011 fb3d 	bl	802a654 <__assert_func>
 8018fda:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8018fde:	4b62      	ldr	r3, [pc, #392]	; (8019168 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1cc>)
 8018fe0:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8019170 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d4>
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	f8db 0000 	ldr.w	r0, [fp]
 8018fea:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018fee:	f7eb fa5d 	bl	80044ac <_ZNK8touchgfx5Texts7getTextEt>
 8018ff2:	4680      	mov	r8, r0
 8018ff4:	682b      	ldr	r3, [r5, #0]
 8018ff6:	4628      	mov	r0, r5
 8018ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ffa:	4798      	blx	r3
 8018ffc:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8018ffe:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
 8019002:	4406      	add	r6, r0
 8019004:	f8cd b00c 	str.w	fp, [sp, #12]
 8019008:	b2b6      	uxth	r6, r6
 801900a:	2f00      	cmp	r7, #0
 801900c:	f040 80b2 	bne.w	8019174 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d8>
 8019010:	a806      	add	r0, sp, #24
 8019012:	f004 f83a 	bl	801d08a <_ZN8touchgfx12TextProviderC1Ev>
 8019016:	682b      	ldr	r3, [r5, #0]
 8019018:	4628      	mov	r0, r5
 801901a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801901c:	4798      	blx	r3
 801901e:	682b      	ldr	r3, [r5, #0]
 8019020:	4683      	mov	fp, r0
 8019022:	4628      	mov	r0, r5
 8019024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019026:	4798      	blx	r3
 8019028:	6822      	ldr	r2, [r4, #0]
 801902a:	9005      	str	r0, [sp, #20]
 801902c:	4620      	mov	r0, r4
 801902e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8019030:	4790      	blx	r2
 8019032:	6821      	ldr	r1, [r4, #0]
 8019034:	9004      	str	r0, [sp, #16]
 8019036:	4620      	mov	r0, r4
 8019038:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 801903c:	4788      	blx	r1
 801903e:	9a04      	ldr	r2, [sp, #16]
 8019040:	4641      	mov	r1, r8
 8019042:	46b8      	mov	r8, r7
 8019044:	9001      	str	r0, [sp, #4]
 8019046:	a806      	add	r0, sp, #24
 8019048:	9200      	str	r2, [sp, #0]
 801904a:	465a      	mov	r2, fp
 801904c:	9b05      	ldr	r3, [sp, #20]
 801904e:	f004 f89c 	bl	801d18a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8019052:	f8da 3000 	ldr.w	r3, [sl]
 8019056:	2b00      	cmp	r3, #0
 8019058:	d0b9      	beq.n	8018fce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 801905a:	9902      	ldr	r1, [sp, #8]
 801905c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801905e:	8809      	ldrh	r1, [r1, #0]
 8019060:	4291      	cmp	r1, r2
 8019062:	d803      	bhi.n	801906c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xd0>
 8019064:	4b41      	ldr	r3, [pc, #260]	; (801916c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d0>)
 8019066:	21af      	movs	r1, #175	; 0xaf
 8019068:	4a3d      	ldr	r2, [pc, #244]	; (8019160 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c4>)
 801906a:	e7b3      	b.n	8018fd4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x38>
 801906c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019070:	4629      	mov	r1, r5
 8019072:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019076:	a806      	add	r0, sp, #24
 8019078:	785b      	ldrb	r3, [r3, #1]
 801907a:	3701      	adds	r7, #1
 801907c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019080:	b2bf      	uxth	r7, r7
 8019082:	f001 fbb7 	bl	801a7f4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8019086:	4580      	cmp	r8, r0
 8019088:	bfb8      	it	lt
 801908a:	fa0f f880 	sxthlt.w	r8, r0
 801908e:	a806      	add	r0, sp, #24
 8019090:	f004 f822 	bl	801d0d8 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8019094:	2800      	cmp	r0, #0
 8019096:	d0dc      	beq.n	8019052 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb6>
 8019098:	fb16 f607 	smulbb	r6, r6, r7
 801909c:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 801909e:	1bf6      	subs	r6, r6, r7
 80190a0:	b2b6      	uxth	r6, r6
 80190a2:	fa0f fb86 	sxth.w	fp, r6
 80190a6:	f1bb 0f00 	cmp.w	fp, #0
 80190aa:	dd06      	ble.n	80190ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x11e>
 80190ac:	682b      	ldr	r3, [r5, #0]
 80190ae:	4628      	mov	r0, r5
 80190b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190b2:	4798      	blx	r3
 80190b4:	4430      	add	r0, r6
 80190b6:	fa0f fb80 	sxth.w	fp, r0
 80190ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80190be:	4620      	mov	r0, r4
 80190c0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80190c4:	6823      	ldr	r3, [r4, #0]
 80190c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190c8:	bf0c      	ite	eq
 80190ca:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 80190ce:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 80190d2:	4798      	blx	r3
 80190d4:	2801      	cmp	r0, #1
 80190d6:	fa1f f288 	uxth.w	r2, r8
 80190da:	f000 80f7 	beq.w	80192cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x330>
 80190de:	2802      	cmp	r0, #2
 80190e0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80190e4:	f000 80f9 	beq.w	80192da <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x33e>
 80190e8:	7a29      	ldrb	r1, [r5, #8]
 80190ea:	b21b      	sxth	r3, r3
 80190ec:	7a68      	ldrb	r0, [r5, #9]
 80190ee:	1a5b      	subs	r3, r3, r1
 80190f0:	4401      	add	r1, r0
 80190f2:	b29b      	uxth	r3, r3
 80190f4:	440a      	add	r2, r1
 80190f6:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80190fa:	b21e      	sxth	r6, r3
 80190fc:	b292      	uxth	r2, r2
 80190fe:	2902      	cmp	r1, #2
 8019100:	b217      	sxth	r7, r2
 8019102:	f000 80ed 	beq.w	80192e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x344>
 8019106:	2903      	cmp	r1, #3
 8019108:	f000 80f3 	beq.w	80192f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x356>
 801910c:	2901      	cmp	r1, #1
 801910e:	f040 80f9 	bne.w	8019304 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x368>
 8019112:	8923      	ldrh	r3, [r4, #8]
 8019114:	463a      	mov	r2, r7
 8019116:	4635      	mov	r5, r6
 8019118:	465f      	mov	r7, fp
 801911a:	eba3 030b 	sub.w	r3, r3, fp
 801911e:	4693      	mov	fp, r2
 8019120:	b21e      	sxth	r6, r3
 8019122:	f8da 3000 	ldr.w	r3, [sl]
 8019126:	2b00      	cmp	r3, #0
 8019128:	f43f af51 	beq.w	8018fce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 801912c:	9b02      	ldr	r3, [sp, #8]
 801912e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019130:	881b      	ldrh	r3, [r3, #0]
 8019132:	428b      	cmp	r3, r1
 8019134:	d996      	bls.n	8019064 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xc8>
 8019136:	9b03      	ldr	r3, [sp, #12]
 8019138:	6818      	ldr	r0, [r3, #0]
 801913a:	f7eb f9b7 	bl	80044ac <_ZNK8touchgfx5Texts7getTextEt>
 801913e:	f8a9 6000 	strh.w	r6, [r9]
 8019142:	f8a9 5002 	strh.w	r5, [r9, #2]
 8019146:	f8a9 7004 	strh.w	r7, [r9, #4]
 801914a:	f8a9 b006 	strh.w	fp, [r9, #6]
 801914e:	f8c9 0008 	str.w	r0, [r9, #8]
 8019152:	e734      	b.n	8018fbe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x22>
 8019154:	200153f4 	.word	0x200153f4
 8019158:	200153f0 	.word	0x200153f0
 801915c:	08030e16 	.word	0x08030e16
 8019160:	08030f50 	.word	0x08030f50
 8019164:	08030e58 	.word	0x08030e58
 8019168:	200153f8 	.word	0x200153f8
 801916c:	08030e81 	.word	0x08030e81
 8019170:	200153fc 	.word	0x200153fc
 8019174:	af1f      	add	r7, sp, #124	; 0x7c
 8019176:	4638      	mov	r0, r7
 8019178:	f003 ff87 	bl	801d08a <_ZN8touchgfx12TextProviderC1Ev>
 801917c:	682b      	ldr	r3, [r5, #0]
 801917e:	4628      	mov	r0, r5
 8019180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019182:	4798      	blx	r3
 8019184:	682b      	ldr	r3, [r5, #0]
 8019186:	4683      	mov	fp, r0
 8019188:	4628      	mov	r0, r5
 801918a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801918c:	4798      	blx	r3
 801918e:	6822      	ldr	r2, [r4, #0]
 8019190:	9005      	str	r0, [sp, #20]
 8019192:	4620      	mov	r0, r4
 8019194:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8019196:	4790      	blx	r2
 8019198:	6821      	ldr	r1, [r4, #0]
 801919a:	9004      	str	r0, [sp, #16]
 801919c:	4620      	mov	r0, r4
 801919e:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 80191a2:	4788      	blx	r1
 80191a4:	9a04      	ldr	r2, [sp, #16]
 80191a6:	9001      	str	r0, [sp, #4]
 80191a8:	4641      	mov	r1, r8
 80191aa:	9200      	str	r2, [sp, #0]
 80191ac:	4638      	mov	r0, r7
 80191ae:	465a      	mov	r2, fp
 80191b0:	9b05      	ldr	r3, [sp, #20]
 80191b2:	f003 ffea 	bl	801d18a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80191b6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80191ba:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80191be:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80191c2:	f9b4 b008 	ldrsh.w	fp, [r4, #8]
 80191c6:	bf12      	itee	ne
 80191c8:	4613      	movne	r3, r2
 80191ca:	465b      	moveq	r3, fp
 80191cc:	4693      	moveq	fp, r2
 80191ce:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 80191d2:	1a9b      	subs	r3, r3, r2
 80191d4:	b29a      	uxth	r2, r3
 80191d6:	f8da 3000 	ldr.w	r3, [sl]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	f43f aef7 	beq.w	8018fce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 80191e0:	9802      	ldr	r0, [sp, #8]
 80191e2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80191e4:	8800      	ldrh	r0, [r0, #0]
 80191e6:	4288      	cmp	r0, r1
 80191e8:	f67f af3c 	bls.w	8019064 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xc8>
 80191ec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80191f0:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80191f4:	7859      	ldrb	r1, [r3, #1]
 80191f6:	2300      	movs	r3, #0
 80191f8:	9707      	str	r7, [sp, #28]
 80191fa:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80191fe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019202:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8019206:	f88d 1020 	strb.w	r1, [sp, #32]
 801920a:	9509      	str	r5, [sp, #36]	; 0x24
 801920c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019210:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019214:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8019218:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801921c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8019220:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019224:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8019228:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 801922c:	b350      	cbz	r0, 8019284 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 801922e:	682b      	ldr	r3, [r5, #0]
 8019230:	4628      	mov	r0, r5
 8019232:	695b      	ldr	r3, [r3, #20]
 8019234:	4798      	blx	r3
 8019236:	4680      	mov	r8, r0
 8019238:	b320      	cbz	r0, 8019284 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 801923a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801923c:	4641      	mov	r1, r8
 801923e:	6803      	ldr	r3, [r0, #0]
 8019240:	68db      	ldr	r3, [r3, #12]
 8019242:	4798      	blx	r3
 8019244:	4607      	mov	r7, r0
 8019246:	b1e8      	cbz	r0, 8019284 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 8019248:	7b43      	ldrb	r3, [r0, #13]
 801924a:	7a82      	ldrb	r2, [r0, #10]
 801924c:	005b      	lsls	r3, r3, #1
 801924e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019252:	4313      	orrs	r3, r2
 8019254:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8019258:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 801925c:	2b04      	cmp	r3, #4
 801925e:	d111      	bne.n	8019284 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 8019260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019262:	463a      	mov	r2, r7
 8019264:	4641      	mov	r1, r8
 8019266:	6803      	ldr	r3, [r0, #0]
 8019268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801926a:	4798      	blx	r3
 801926c:	7b7b      	ldrb	r3, [r7, #13]
 801926e:	005b      	lsls	r3, r3, #1
 8019270:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019274:	7abb      	ldrb	r3, [r7, #10]
 8019276:	4313      	orrs	r3, r2
 8019278:	4418      	add	r0, r3
 801927a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801927e:	4418      	add	r0, r3
 8019280:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8019284:	b233      	sxth	r3, r6
 8019286:	2700      	movs	r7, #0
 8019288:	005a      	lsls	r2, r3, #1
 801928a:	46b8      	mov	r8, r7
 801928c:	455a      	cmp	r2, fp
 801928e:	a806      	add	r0, sp, #24
 8019290:	9305      	str	r3, [sp, #20]
 8019292:	f107 0701 	add.w	r7, r7, #1
 8019296:	bfd4      	ite	le
 8019298:	2100      	movle	r1, #0
 801929a:	2101      	movgt	r1, #1
 801929c:	9204      	str	r2, [sp, #16]
 801929e:	f001 fc86 	bl	801abae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80192a2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80192a6:	ebab 0b06 	sub.w	fp, fp, r6
 80192aa:	b2bf      	uxth	r7, r7
 80192ac:	4588      	cmp	r8, r1
 80192ae:	fa0f fb8b 	sxth.w	fp, fp
 80192b2:	bfb8      	it	lt
 80192b4:	fa0f f881 	sxthlt.w	r8, r1
 80192b8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80192bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80192c0:	2900      	cmp	r1, #0
 80192c2:	f43f aee9 	beq.w	8019098 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80192c6:	455b      	cmp	r3, fp
 80192c8:	dbe0      	blt.n	801928c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f0>
 80192ca:	e6e5      	b.n	8019098 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80192cc:	eba6 0308 	sub.w	r3, r6, r8
 80192d0:	f04f 0802 	mov.w	r8, #2
 80192d4:	fb93 f3f8 	sdiv	r3, r3, r8
 80192d8:	e706      	b.n	80190e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14c>
 80192da:	4413      	add	r3, r2
 80192dc:	1af3      	subs	r3, r6, r3
 80192de:	e703      	b.n	80190e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14c>
 80192e0:	8926      	ldrh	r6, [r4, #8]
 80192e2:	8965      	ldrh	r5, [r4, #10]
 80192e4:	1ab2      	subs	r2, r6, r2
 80192e6:	eba5 050b 	sub.w	r5, r5, fp
 80192ea:	1ad3      	subs	r3, r2, r3
 80192ec:	b22d      	sxth	r5, r5
 80192ee:	b21e      	sxth	r6, r3
 80192f0:	e717      	b.n	8019122 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>
 80192f2:	8965      	ldrh	r5, [r4, #10]
 80192f4:	2600      	movs	r6, #0
 80192f6:	1aaa      	subs	r2, r5, r2
 80192f8:	1ad3      	subs	r3, r2, r3
 80192fa:	b21d      	sxth	r5, r3
 80192fc:	463b      	mov	r3, r7
 80192fe:	465f      	mov	r7, fp
 8019300:	469b      	mov	fp, r3
 8019302:	e70e      	b.n	8019122 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>
 8019304:	2500      	movs	r5, #0
 8019306:	e70c      	b.n	8019122 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>

08019308 <_ZN8touchgfx8TextAreaD0Ev>:
 8019308:	b510      	push	{r4, lr}
 801930a:	4604      	mov	r4, r0
 801930c:	2148      	movs	r1, #72	; 0x48
 801930e:	f011 f972 	bl	802a5f6 <_ZdlPvj>
 8019312:	4620      	mov	r0, r4
 8019314:	bd10      	pop	{r4, pc}
	...

08019318 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8019318:	b508      	push	{r3, lr}
 801931a:	4b0b      	ldr	r3, [pc, #44]	; (8019348 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x30>)
 801931c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801931e:	881b      	ldrh	r3, [r3, #0]
 8019320:	4293      	cmp	r3, r2
 8019322:	d90e      	bls.n	8019342 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x2a>
 8019324:	4b09      	ldr	r3, [pc, #36]	; (801934c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x34>)
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	b92b      	cbnz	r3, 8019336 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x1e>
 801932a:	4b09      	ldr	r3, [pc, #36]	; (8019350 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x38>)
 801932c:	21ae      	movs	r1, #174	; 0xae
 801932e:	4a09      	ldr	r2, [pc, #36]	; (8019354 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x3c>)
 8019330:	4809      	ldr	r0, [pc, #36]	; (8019358 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x40>)
 8019332:	f011 f98f 	bl	802a654 <__assert_func>
 8019336:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801933a:	7858      	ldrb	r0, [r3, #1]
 801933c:	f000 0003 	and.w	r0, r0, #3
 8019340:	bd08      	pop	{r3, pc}
 8019342:	2000      	movs	r0, #0
 8019344:	e7fc      	b.n	8019340 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x28>
 8019346:	bf00      	nop
 8019348:	200153f4 	.word	0x200153f4
 801934c:	200153f0 	.word	0x200153f0
 8019350:	08030e16 	.word	0x08030e16
 8019354:	08030f50 	.word	0x08030f50
 8019358:	08030e58 	.word	0x08030e58

0801935c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801935c:	4b16      	ldr	r3, [pc, #88]	; (80193b8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801935e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019362:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019364:	4604      	mov	r4, r0
 8019366:	881b      	ldrh	r3, [r3, #0]
 8019368:	428b      	cmp	r3, r1
 801936a:	d921      	bls.n	80193b0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x54>
 801936c:	6803      	ldr	r3, [r0, #0]
 801936e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8019370:	4b12      	ldr	r3, [pc, #72]	; (80193bc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x60>)
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	b92b      	cbnz	r3, 8019382 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x26>
 8019376:	4b12      	ldr	r3, [pc, #72]	; (80193c0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x64>)
 8019378:	21ae      	movs	r1, #174	; 0xae
 801937a:	4a12      	ldr	r2, [pc, #72]	; (80193c4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x68>)
 801937c:	4812      	ldr	r0, [pc, #72]	; (80193c8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x6c>)
 801937e:	f011 f969 	bl	802a654 <__assert_func>
 8019382:	4b12      	ldr	r3, [pc, #72]	; (80193cc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x70>)
 8019384:	6818      	ldr	r0, [r3, #0]
 8019386:	f7eb f891 	bl	80044ac <_ZNK8touchgfx5Texts7getTextEt>
 801938a:	6823      	ldr	r3, [r4, #0]
 801938c:	4606      	mov	r6, r0
 801938e:	4620      	mov	r0, r4
 8019390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019392:	4798      	blx	r3
 8019394:	6823      	ldr	r3, [r4, #0]
 8019396:	4607      	mov	r7, r0
 8019398:	4620      	mov	r0, r4
 801939a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801939e:	4798      	blx	r3
 80193a0:	463a      	mov	r2, r7
 80193a2:	4603      	mov	r3, r0
 80193a4:	4631      	mov	r1, r6
 80193a6:	4620      	mov	r0, r4
 80193a8:	46ac      	mov	ip, r5
 80193aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80193ae:	4760      	bx	ip
 80193b0:	2000      	movs	r0, #0
 80193b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193b6:	bf00      	nop
 80193b8:	200153f4 	.word	0x200153f4
 80193bc:	200153f0 	.word	0x200153f0
 80193c0:	08030e16 	.word	0x08030e16
 80193c4:	08030f50 	.word	0x08030f50
 80193c8:	08030e58 	.word	0x08030e58
 80193cc:	200153fc 	.word	0x200153fc

080193d0 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80193d0:	b513      	push	{r0, r1, r4, lr}
 80193d2:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80193d6:	4604      	mov	r4, r0
 80193d8:	b343      	cbz	r3, 801942c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 80193da:	4b1b      	ldr	r3, [pc, #108]	; (8019448 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x78>)
 80193dc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80193de:	881b      	ldrh	r3, [r3, #0]
 80193e0:	428b      	cmp	r3, r1
 80193e2:	d923      	bls.n	801942c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 80193e4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	dd1f      	ble.n	801942c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 80193ec:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	dd1b      	ble.n	801942c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 80193f4:	4b15      	ldr	r3, [pc, #84]	; (801944c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x7c>)
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	b92b      	cbnz	r3, 8019406 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x36>
 80193fa:	4b15      	ldr	r3, [pc, #84]	; (8019450 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x80>)
 80193fc:	21ae      	movs	r1, #174	; 0xae
 80193fe:	4a15      	ldr	r2, [pc, #84]	; (8019454 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x84>)
 8019400:	4815      	ldr	r0, [pc, #84]	; (8019458 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x88>)
 8019402:	f011 f927 	bl	802a654 <__assert_func>
 8019406:	4b15      	ldr	r3, [pc, #84]	; (801945c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x8c>)
 8019408:	6818      	ldr	r0, [r3, #0]
 801940a:	f7eb f84f 	bl	80044ac <_ZNK8touchgfx5Texts7getTextEt>
 801940e:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8019412:	6822      	ldr	r2, [r4, #0]
 8019414:	2b00      	cmp	r3, #0
 8019416:	db06      	blt.n	8019426 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x56>
 8019418:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801941c:	2b00      	cmp	r3, #0
 801941e:	db02      	blt.n	8019426 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x56>
 8019420:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019422:	4298      	cmp	r0, r3
 8019424:	d004      	beq.n	8019430 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x60>
 8019426:	6953      	ldr	r3, [r2, #20]
 8019428:	4620      	mov	r0, r4
 801942a:	4798      	blx	r3
 801942c:	b002      	add	sp, #8
 801942e:	bd10      	pop	{r4, pc}
 8019430:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8019434:	466b      	mov	r3, sp
 8019436:	6912      	ldr	r2, [r2, #16]
 8019438:	c903      	ldmia	r1, {r0, r1}
 801943a:	e883 0003 	stmia.w	r3, {r0, r1}
 801943e:	4619      	mov	r1, r3
 8019440:	4620      	mov	r0, r4
 8019442:	4790      	blx	r2
 8019444:	e7f2      	b.n	801942c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 8019446:	bf00      	nop
 8019448:	200153f4 	.word	0x200153f4
 801944c:	200153f0 	.word	0x200153f0
 8019450:	08030e16 	.word	0x08030e16
 8019454:	08030f50 	.word	0x08030f50
 8019458:	08030e58 	.word	0x08030e58
 801945c:	200153fc 	.word	0x200153fc

08019460 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019464:	4d56      	ldr	r5, [pc, #344]	; (80195c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x160>)
 8019466:	b08e      	sub	sp, #56	; 0x38
 8019468:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801946a:	4604      	mov	r4, r0
 801946c:	882b      	ldrh	r3, [r5, #0]
 801946e:	4293      	cmp	r3, r2
 8019470:	f240 80a3 	bls.w	80195ba <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 8019474:	6808      	ldr	r0, [r1, #0]
 8019476:	ab05      	add	r3, sp, #20
 8019478:	6849      	ldr	r1, [r1, #4]
 801947a:	4e52      	ldr	r6, [pc, #328]	; (80195c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x164>)
 801947c:	c303      	stmia	r3!, {r0, r1}
 801947e:	6833      	ldr	r3, [r6, #0]
 8019480:	b92b      	cbnz	r3, 801948e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8019482:	4b51      	ldr	r3, [pc, #324]	; (80195c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x168>)
 8019484:	21ae      	movs	r1, #174	; 0xae
 8019486:	4a51      	ldr	r2, [pc, #324]	; (80195cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16c>)
 8019488:	4851      	ldr	r0, [pc, #324]	; (80195d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x170>)
 801948a:	f011 f8e3 	bl	802a654 <__assert_func>
 801948e:	4f51      	ldr	r7, [pc, #324]	; (80195d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x174>)
 8019490:	4611      	mov	r1, r2
 8019492:	6838      	ldr	r0, [r7, #0]
 8019494:	f7eb f80a 	bl	80044ac <_ZNK8touchgfx5Texts7getTextEt>
 8019498:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801949c:	2b00      	cmp	r3, #0
 801949e:	db11      	blt.n	80194c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 80194a0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	db0d      	blt.n	80194c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 80194a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80194aa:	4298      	cmp	r0, r3
 80194ac:	d10a      	bne.n	80194c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 80194ae:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80194b2:	ab09      	add	r3, sp, #36	; 0x24
 80194b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80194bc:	4619      	mov	r1, r3
 80194be:	a805      	add	r0, sp, #20
 80194c0:	f7fd fe5c 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 80194c4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	dd76      	ble.n	80195ba <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 80194cc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	dd72      	ble.n	80195ba <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 80194d4:	6833      	ldr	r3, [r6, #0]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d0d3      	beq.n	8019482 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 80194da:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80194dc:	8829      	ldrh	r1, [r5, #0]
 80194de:	4291      	cmp	r1, r2
 80194e0:	d803      	bhi.n	80194ea <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x8a>
 80194e2:	4b3d      	ldr	r3, [pc, #244]	; (80195d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x178>)
 80194e4:	21af      	movs	r1, #175	; 0xaf
 80194e6:	4a39      	ldr	r2, [pc, #228]	; (80195cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16c>)
 80194e8:	e7ce      	b.n	8019488 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x28>
 80194ea:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80194ee:	4b3b      	ldr	r3, [pc, #236]	; (80195dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x17c>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80194f6:	f1b8 0f00 	cmp.w	r8, #0
 80194fa:	d05e      	beq.n	80195ba <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 80194fc:	6823      	ldr	r3, [r4, #0]
 80194fe:	4620      	mov	r0, r4
 8019500:	f894 9036 	ldrb.w	r9, [r4, #54]	; 0x36
 8019504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019506:	4798      	blx	r3
 8019508:	6833      	ldr	r3, [r6, #0]
 801950a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 801950e:	f894 c038 	ldrb.w	ip, [r4, #56]	; 0x38
 8019512:	2b00      	cmp	r3, #0
 8019514:	d0b5      	beq.n	8019482 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 8019516:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019518:	f8b5 e000 	ldrh.w	lr, [r5]
 801951c:	4596      	cmp	lr, r2
 801951e:	d9e0      	bls.n	80194e2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8019520:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019524:	f894 a037 	ldrb.w	sl, [r4, #55]	; 0x37
 8019528:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801952a:	785b      	ldrb	r3, [r3, #1]
 801952c:	f894 e039 	ldrb.w	lr, [r4, #57]	; 0x39
 8019530:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019534:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8019538:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801953c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019540:	4b27      	ldr	r3, [pc, #156]	; (80195e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x180>)
 8019542:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	920b      	str	r2, [sp, #44]	; 0x2c
 801954a:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 801954e:	f88d 9032 	strb.w	r9, [sp, #50]	; 0x32
 8019552:	f88d a033 	strb.w	sl, [sp, #51]	; 0x33
 8019556:	f88d e034 	strb.w	lr, [sp, #52]	; 0x34
 801955a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801955e:	b122      	cbz	r2, 801956a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x10a>
 8019560:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8019564:	f1b8 0f00 	cmp.w	r8, #0
 8019568:	d101      	bne.n	801956e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x10e>
 801956a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801956e:	f10d 091c 	add.w	r9, sp, #28
 8019572:	4621      	mov	r1, r4
 8019574:	4648      	mov	r0, r9
 8019576:	f003 f95f 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801957a:	6833      	ldr	r3, [r6, #0]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d080      	beq.n	8019482 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 8019580:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019582:	882b      	ldrh	r3, [r5, #0]
 8019584:	428b      	cmp	r3, r1
 8019586:	d9ac      	bls.n	80194e2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8019588:	6838      	ldr	r0, [r7, #0]
 801958a:	f7ea ff8f 	bl	80044ac <_ZNK8touchgfx5Texts7getTextEt>
 801958e:	6823      	ldr	r3, [r4, #0]
 8019590:	4605      	mov	r5, r0
 8019592:	4620      	mov	r0, r4
 8019594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019596:	4798      	blx	r3
 8019598:	6823      	ldr	r3, [r4, #0]
 801959a:	4606      	mov	r6, r0
 801959c:	4620      	mov	r0, r4
 801959e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80195a2:	4798      	blx	r3
 80195a4:	ab09      	add	r3, sp, #36	; 0x24
 80195a6:	9501      	str	r5, [sp, #4]
 80195a8:	9300      	str	r3, [sp, #0]
 80195aa:	ab05      	add	r3, sp, #20
 80195ac:	e9cd 6002 	strd	r6, r0, [sp, #8]
 80195b0:	4640      	mov	r0, r8
 80195b2:	e899 0006 	ldmia.w	r9, {r1, r2}
 80195b6:	f7ea ff2b 	bl	8004410 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80195ba:	b00e      	add	sp, #56	; 0x38
 80195bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195c0:	200153f4 	.word	0x200153f4
 80195c4:	200153f0 	.word	0x200153f0
 80195c8:	08030e16 	.word	0x08030e16
 80195cc:	08030f50 	.word	0x08030f50
 80195d0:	08030e58 	.word	0x08030e58
 80195d4:	200153fc 	.word	0x200153fc
 80195d8:	08030e81 	.word	0x08030e81
 80195dc:	200153f8 	.word	0x200153f8
 80195e0:	200153a0 	.word	0x200153a0

080195e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80195e4:	b538      	push	{r3, r4, r5, lr}
 80195e6:	4b0e      	ldr	r3, [pc, #56]	; (8019620 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80195e8:	4604      	mov	r4, r0
 80195ea:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80195ec:	881b      	ldrh	r3, [r3, #0]
 80195ee:	429a      	cmp	r2, r3
 80195f0:	d214      	bcs.n	801961c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80195f2:	6803      	ldr	r3, [r0, #0]
 80195f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80195f6:	4798      	blx	r3
 80195f8:	6823      	ldr	r3, [r4, #0]
 80195fa:	4605      	mov	r5, r0
 80195fc:	4620      	mov	r0, r4
 80195fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019600:	4798      	blx	r3
 8019602:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019606:	b22d      	sxth	r5, r5
 8019608:	4601      	mov	r1, r0
 801960a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801960e:	bf06      	itte	eq
 8019610:	4602      	moveq	r2, r0
 8019612:	4629      	moveq	r1, r5
 8019614:	462a      	movne	r2, r5
 8019616:	4620      	mov	r0, r4
 8019618:	f7fd ff36 	bl	8017488 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801961c:	bd38      	pop	{r3, r4, r5, pc}
 801961e:	bf00      	nop
 8019620:	200153f4 	.word	0x200153f4

08019624 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8019624:	b530      	push	{r4, r5, lr}
 8019626:	888b      	ldrh	r3, [r1, #4]
 8019628:	b085      	sub	sp, #20
 801962a:	4604      	mov	r4, r0
 801962c:	8583      	strh	r3, [r0, #44]	; 0x2c
 801962e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8019632:	b923      	cbnz	r3, 801963e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8019634:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019638:	b90b      	cbnz	r3, 801963e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801963a:	f7ff ffd3 	bl	80195e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801963e:	6823      	ldr	r3, [r4, #0]
 8019640:	466d      	mov	r5, sp
 8019642:	4621      	mov	r1, r4
 8019644:	343c      	adds	r4, #60	; 0x3c
 8019646:	4628      	mov	r0, r5
 8019648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801964c:	4798      	blx	r3
 801964e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019656:	b005      	add	sp, #20
 8019658:	bd30      	pop	{r4, r5, pc}

0801965a <_ZNK8touchgfx3Box12getSolidRectEv>:
 801965a:	2300      	movs	r3, #0
 801965c:	8083      	strh	r3, [r0, #4]
 801965e:	80c3      	strh	r3, [r0, #6]
 8019660:	8003      	strh	r3, [r0, #0]
 8019662:	8043      	strh	r3, [r0, #2]
 8019664:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8019668:	2bff      	cmp	r3, #255	; 0xff
 801966a:	bf01      	itttt	eq
 801966c:	890b      	ldrheq	r3, [r1, #8]
 801966e:	8083      	strheq	r3, [r0, #4]
 8019670:	894b      	ldrheq	r3, [r1, #10]
 8019672:	80c3      	strheq	r3, [r0, #6]
 8019674:	4770      	bx	lr
	...

08019678 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801967a:	4604      	mov	r4, r0
 801967c:	466b      	mov	r3, sp
 801967e:	6808      	ldr	r0, [r1, #0]
 8019680:	6849      	ldr	r1, [r1, #4]
 8019682:	c303      	stmia	r3!, {r0, r1}
 8019684:	6823      	ldr	r3, [r4, #0]
 8019686:	4669      	mov	r1, sp
 8019688:	4620      	mov	r0, r4
 801968a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801968c:	4798      	blx	r3
 801968e:	4b08      	ldr	r3, [pc, #32]	; (80196b0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019696:	b10a      	cbz	r2, 801969c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019698:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801969a:	b900      	cbnz	r0, 801969e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801969c:	6898      	ldr	r0, [r3, #8]
 801969e:	6803      	ldr	r3, [r0, #0]
 80196a0:	4669      	mov	r1, sp
 80196a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80196a4:	6a1d      	ldr	r5, [r3, #32]
 80196a6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80196aa:	47a8      	blx	r5
 80196ac:	b003      	add	sp, #12
 80196ae:	bd30      	pop	{r4, r5, pc}
 80196b0:	200153a0 	.word	0x200153a0

080196b4 <_ZN8touchgfx3BoxD1Ev>:
 80196b4:	4770      	bx	lr

080196b6 <_ZN8touchgfx3BoxD0Ev>:
 80196b6:	b510      	push	{r4, lr}
 80196b8:	4604      	mov	r4, r0
 80196ba:	212c      	movs	r1, #44	; 0x2c
 80196bc:	f010 ff9b 	bl	802a5f6 <_ZdlPvj>
 80196c0:	4620      	mov	r0, r4
 80196c2:	bd10      	pop	{r4, pc}

080196c4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80196c4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80196c8:	b12a      	cbz	r2, 80196d6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80196ca:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80196ce:	b112      	cbz	r2, 80196d6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80196d0:	6803      	ldr	r3, [r0, #0]
 80196d2:	695b      	ldr	r3, [r3, #20]
 80196d4:	4718      	bx	r3
 80196d6:	4770      	bx	lr

080196d8 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 80196d8:	b570      	push	{r4, r5, r6, lr}
 80196da:	6803      	ldr	r3, [r0, #0]
 80196dc:	4604      	mov	r4, r0
 80196de:	4615      	mov	r5, r2
 80196e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80196e2:	4798      	blx	r3
 80196e4:	6823      	ldr	r3, [r4, #0]
 80196e6:	4629      	mov	r1, r5
 80196e8:	4620      	mov	r0, r4
 80196ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196f0:	4718      	bx	r3

080196f2 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 80196f2:	b570      	push	{r4, r5, r6, lr}
 80196f4:	6803      	ldr	r3, [r0, #0]
 80196f6:	4604      	mov	r4, r0
 80196f8:	460e      	mov	r6, r1
 80196fa:	4615      	mov	r5, r2
 80196fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80196fe:	4798      	blx	r3
 8019700:	8030      	strh	r0, [r6, #0]
 8019702:	6823      	ldr	r3, [r4, #0]
 8019704:	4620      	mov	r0, r4
 8019706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019708:	4798      	blx	r3
 801970a:	8028      	strh	r0, [r5, #0]
 801970c:	bd70      	pop	{r4, r5, r6, pc}

0801970e <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801970e:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8019712:	4770      	bx	lr

08019714 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8019714:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8019718:	4770      	bx	lr

0801971a <_ZN8touchgfx10TiledImageD1Ev>:
 801971a:	4770      	bx	lr

0801971c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801971c:	b510      	push	{r4, lr}
 801971e:	4604      	mov	r4, r0
 8019720:	f000 faa5 	bl	8019c6e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8019724:	6823      	ldr	r3, [r4, #0]
 8019726:	4620      	mov	r0, r4
 8019728:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801972c:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8019730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019736:	4718      	bx	r3

08019738 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8019738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801973a:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801973e:	4605      	mov	r5, r0
 8019740:	8541      	strh	r1, [r0, #42]	; 0x2a
 8019742:	4630      	mov	r0, r6
 8019744:	f004 fd52 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019748:	b1a0      	cbz	r0, 8019774 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801974a:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801974e:	4630      	mov	r0, r6
 8019750:	f004 fd4c 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019754:	fb97 f4f0 	sdiv	r4, r7, r0
 8019758:	fb04 7410 	mls	r4, r4, r0, r7
 801975c:	4630      	mov	r0, r6
 801975e:	f004 fd45 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019762:	4404      	add	r4, r0
 8019764:	4630      	mov	r0, r6
 8019766:	f004 fd41 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801976a:	fb94 f3f0 	sdiv	r3, r4, r0
 801976e:	fb03 4010 	mls	r0, r3, r0, r4
 8019772:	8568      	strh	r0, [r5, #42]	; 0x2a
 8019774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019776 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8019776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019778:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801977c:	4605      	mov	r5, r0
 801977e:	8581      	strh	r1, [r0, #44]	; 0x2c
 8019780:	4630      	mov	r0, r6
 8019782:	f004 fd77 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019786:	b1a0      	cbz	r0, 80197b2 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 8019788:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801978c:	4630      	mov	r0, r6
 801978e:	f004 fd71 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019792:	fb97 f4f0 	sdiv	r4, r7, r0
 8019796:	fb04 7410 	mls	r4, r4, r0, r7
 801979a:	4630      	mov	r0, r6
 801979c:	f004 fd6a 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80197a0:	4404      	add	r4, r0
 80197a2:	4630      	mov	r0, r6
 80197a4:	f004 fd66 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80197a8:	fb94 f3f0 	sdiv	r3, r4, r0
 80197ac:	fb03 4010 	mls	r0, r3, r0, r4
 80197b0:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80197b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080197b4 <_ZN8touchgfx10TiledImageD0Ev>:
 80197b4:	b510      	push	{r4, lr}
 80197b6:	4604      	mov	r4, r0
 80197b8:	2130      	movs	r1, #48	; 0x30
 80197ba:	f010 ff1c 	bl	802a5f6 <_ZdlPvj>
 80197be:	4620      	mov	r0, r4
 80197c0:	bd10      	pop	{r4, pc}
	...

080197c4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80197c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197c8:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80197cc:	b093      	sub	sp, #76	; 0x4c
 80197ce:	4607      	mov	r7, r0
 80197d0:	460e      	mov	r6, r1
 80197d2:	4658      	mov	r0, fp
 80197d4:	f004 fd0a 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 80197d8:	4605      	mov	r5, r0
 80197da:	4658      	mov	r0, fp
 80197dc:	f004 fd4a 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80197e0:	4680      	mov	r8, r0
 80197e2:	2d00      	cmp	r5, #0
 80197e4:	f000 80c5 	beq.w	8019972 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80197e8:	2800      	cmp	r0, #0
 80197ea:	f000 80c2 	beq.w	8019972 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80197ee:	2300      	movs	r3, #0
 80197f0:	a90e      	add	r1, sp, #56	; 0x38
 80197f2:	4638      	mov	r0, r7
 80197f4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80197f8:	683b      	ldr	r3, [r7, #0]
 80197fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197fc:	4798      	blx	r3
 80197fe:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8019802:	f9b6 3000 	ldrsh.w	r3, [r6]
 8019806:	88b1      	ldrh	r1, [r6, #4]
 8019808:	189c      	adds	r4, r3, r2
 801980a:	440b      	add	r3, r1
 801980c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8019810:	fa02 f383 	sxtah	r3, r2, r3
 8019814:	3b01      	subs	r3, #1
 8019816:	fb93 f3f5 	sdiv	r3, r3, r5
 801981a:	fb94 f4f5 	sdiv	r4, r4, r5
 801981e:	fb13 f305 	smulbb	r3, r3, r5
 8019822:	fb14 f405 	smulbb	r4, r4, r5
 8019826:	b21b      	sxth	r3, r3
 8019828:	1aa4      	subs	r4, r4, r2
 801982a:	930b      	str	r3, [sp, #44]	; 0x2c
 801982c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8019830:	b2a4      	uxth	r4, r4
 8019832:	185a      	adds	r2, r3, r1
 8019834:	fb92 f2f8 	sdiv	r2, r2, r8
 8019838:	fb12 f208 	smulbb	r2, r2, r8
 801983c:	1a52      	subs	r2, r2, r1
 801983e:	b212      	sxth	r2, r2
 8019840:	920c      	str	r2, [sp, #48]	; 0x30
 8019842:	88f2      	ldrh	r2, [r6, #6]
 8019844:	4413      	add	r3, r2
 8019846:	fa01 f383 	sxtah	r3, r1, r3
 801984a:	3b01      	subs	r3, #1
 801984c:	fb93 f3f8 	sdiv	r3, r3, r8
 8019850:	fb13 f308 	smulbb	r3, r3, r8
 8019854:	b21b      	sxth	r3, r3
 8019856:	930d      	str	r3, [sp, #52]	; 0x34
 8019858:	1963      	adds	r3, r4, r5
 801985a:	fa1f fa83 	uxth.w	sl, r3
 801985e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019860:	b223      	sxth	r3, r4
 8019862:	4293      	cmp	r3, r2
 8019864:	9305      	str	r3, [sp, #20]
 8019866:	f300 8084 	bgt.w	8019972 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801986a:	fa0f f38a 	sxth.w	r3, sl
 801986e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8019872:	930a      	str	r3, [sp, #40]	; 0x28
 8019874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019876:	4599      	cmp	r9, r3
 8019878:	dd04      	ble.n	8019884 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801987a:	442c      	add	r4, r5
 801987c:	eb05 030a 	add.w	r3, r5, sl
 8019880:	b2a4      	uxth	r4, r4
 8019882:	e7ea      	b.n	801985a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 8019884:	f9b6 c000 	ldrsh.w	ip, [r6]
 8019888:	88b2      	ldrh	r2, [r6, #4]
 801988a:	4462      	add	r2, ip
 801988c:	b292      	uxth	r2, r2
 801988e:	b213      	sxth	r3, r2
 8019890:	9308      	str	r3, [sp, #32]
 8019892:	fa1f f389 	uxth.w	r3, r9
 8019896:	eb08 0103 	add.w	r1, r8, r3
 801989a:	9306      	str	r3, [sp, #24]
 801989c:	b289      	uxth	r1, r1
 801989e:	b208      	sxth	r0, r1
 80198a0:	9007      	str	r0, [sp, #28]
 80198a2:	9805      	ldr	r0, [sp, #20]
 80198a4:	4603      	mov	r3, r0
 80198a6:	9808      	ldr	r0, [sp, #32]
 80198a8:	4283      	cmp	r3, r0
 80198aa:	da5e      	bge.n	801996a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80198ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80198ae:	4584      	cmp	ip, r0
 80198b0:	da5b      	bge.n	801996a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80198b2:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80198b6:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 80198ba:	4486      	add	lr, r0
 80198bc:	fa1f fe8e 	uxth.w	lr, lr
 80198c0:	fa0f f38e 	sxth.w	r3, lr
 80198c4:	4599      	cmp	r9, r3
 80198c6:	9309      	str	r3, [sp, #36]	; 0x24
 80198c8:	da4f      	bge.n	801996a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80198ca:	9b07      	ldr	r3, [sp, #28]
 80198cc:	4298      	cmp	r0, r3
 80198ce:	da4c      	bge.n	801996a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80198d0:	9b05      	ldr	r3, [sp, #20]
 80198d2:	459c      	cmp	ip, r3
 80198d4:	bfb8      	it	lt
 80198d6:	469c      	movlt	ip, r3
 80198d8:	4548      	cmp	r0, r9
 80198da:	9b08      	ldr	r3, [sp, #32]
 80198dc:	bfb8      	it	lt
 80198de:	4648      	movlt	r0, r9
 80198e0:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 80198e4:	4699      	mov	r9, r3
 80198e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80198e8:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 80198ec:	4599      	cmp	r9, r3
 80198ee:	bfc8      	it	gt
 80198f0:	4652      	movgt	r2, sl
 80198f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198f4:	eba2 020c 	sub.w	r2, r2, ip
 80198f8:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80198fc:	9a07      	ldr	r2, [sp, #28]
 80198fe:	4293      	cmp	r3, r2
 8019900:	bfd8      	it	le
 8019902:	4671      	movle	r1, lr
 8019904:	1a09      	subs	r1, r1, r0
 8019906:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801990a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801990e:	9b06      	ldr	r3, [sp, #24]
 8019910:	1b12      	subs	r2, r2, r4
 8019912:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8019916:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801991a:	1ad2      	subs	r2, r2, r3
 801991c:	4b16      	ldr	r3, [pc, #88]	; (8019978 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801991e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8019922:	681a      	ldr	r2, [r3, #0]
 8019924:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8019928:	b109      	cbz	r1, 801992e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801992a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801992c:	b900      	cbnz	r0, 8019930 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801992e:	6890      	ldr	r0, [r2, #8]
 8019930:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8019934:	f04f 0c01 	mov.w	ip, #1
 8019938:	9b06      	ldr	r3, [sp, #24]
 801993a:	6801      	ldr	r1, [r0, #0]
 801993c:	4413      	add	r3, r2
 801993e:	f8cd c008 	str.w	ip, [sp, #8]
 8019942:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8019946:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801994a:	b21b      	sxth	r3, r3
 801994c:	4422      	add	r2, r4
 801994e:	f8cd c004 	str.w	ip, [sp, #4]
 8019952:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8019956:	b212      	sxth	r2, r2
 8019958:	f8cd c000 	str.w	ip, [sp]
 801995c:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8019960:	4659      	mov	r1, fp
 8019962:	47c8      	blx	r9
 8019964:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8019968:	e784      	b.n	8019874 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801996a:	2300      	movs	r3, #0
 801996c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8019970:	e7cb      	b.n	801990a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 8019972:	b013      	add	sp, #76	; 0x4c
 8019974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019978:	200153a0 	.word	0x200153a0

0801997c <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801997c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019980:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019984:	4606      	mov	r6, r0
 8019986:	4689      	mov	r9, r1
 8019988:	2bff      	cmp	r3, #255	; 0xff
 801998a:	d008      	beq.n	801999e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801998c:	2300      	movs	r3, #0
 801998e:	8003      	strh	r3, [r0, #0]
 8019990:	8043      	strh	r3, [r0, #2]
 8019992:	8083      	strh	r3, [r0, #4]
 8019994:	4630      	mov	r0, r6
 8019996:	80f3      	strh	r3, [r6, #6]
 8019998:	b003      	add	sp, #12
 801999a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801999e:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 80199a2:	4668      	mov	r0, sp
 80199a4:	4659      	mov	r1, fp
 80199a6:	f004 fca9 	bl	801e2fc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80199aa:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80199ae:	4658      	mov	r0, fp
 80199b0:	f9bd 7000 	ldrsh.w	r7, [sp]
 80199b4:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80199b8:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80199bc:	f004 fc16 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 80199c0:	4284      	cmp	r4, r0
 80199c2:	d10d      	bne.n	80199e0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80199c4:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80199c8:	4658      	mov	r0, fp
 80199ca:	f004 fc53 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80199ce:	4580      	cmp	r8, r0
 80199d0:	d12a      	bne.n	8019a28 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80199d2:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80199d6:	8037      	strh	r7, [r6, #0]
 80199d8:	f8a6 a002 	strh.w	sl, [r6, #2]
 80199dc:	80b5      	strh	r5, [r6, #4]
 80199de:	e7d9      	b.n	8019994 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 80199e0:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 80199e4:	4658      	mov	r0, fp
 80199e6:	f004 fc01 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 80199ea:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 80199ee:	1b7f      	subs	r7, r7, r5
 80199f0:	b2a3      	uxth	r3, r4
 80199f2:	b2bd      	uxth	r5, r7
 80199f4:	b22f      	sxth	r7, r5
 80199f6:	4428      	add	r0, r5
 80199f8:	2f00      	cmp	r7, #0
 80199fa:	b280      	uxth	r0, r0
 80199fc:	bfb8      	it	lt
 80199fe:	18ed      	addlt	r5, r5, r3
 8019a00:	4403      	add	r3, r0
 8019a02:	bfac      	ite	ge
 8019a04:	4625      	movge	r5, r4
 8019a06:	2700      	movlt	r7, #0
 8019a08:	b29b      	uxth	r3, r3
 8019a0a:	bfb8      	it	lt
 8019a0c:	b22d      	sxthlt	r5, r5
 8019a0e:	b219      	sxth	r1, r3
 8019a10:	bfb8      	it	lt
 8019a12:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8019a16:	4291      	cmp	r1, r2
 8019a18:	bfc4      	itt	gt
 8019a1a:	1a9c      	subgt	r4, r3, r2
 8019a1c:	b224      	sxthgt	r4, r4
 8019a1e:	42ac      	cmp	r4, r5
 8019a20:	bfc4      	itt	gt
 8019a22:	b207      	sxthgt	r7, r0
 8019a24:	4625      	movgt	r5, r4
 8019a26:	e7cf      	b.n	80199c8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8019a28:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8019a2c:	4658      	mov	r0, fp
 8019a2e:	f004 fc21 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019a32:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8019a36:	ebaa 0404 	sub.w	r4, sl, r4
 8019a3a:	fa1f f288 	uxth.w	r2, r8
 8019a3e:	b2a4      	uxth	r4, r4
 8019a40:	fa0f fa84 	sxth.w	sl, r4
 8019a44:	4420      	add	r0, r4
 8019a46:	f1ba 0f00 	cmp.w	sl, #0
 8019a4a:	b280      	uxth	r0, r0
 8019a4c:	bfb8      	it	lt
 8019a4e:	18a3      	addlt	r3, r4, r2
 8019a50:	4402      	add	r2, r0
 8019a52:	bfac      	ite	ge
 8019a54:	4643      	movge	r3, r8
 8019a56:	f04f 0a00 	movlt.w	sl, #0
 8019a5a:	b292      	uxth	r2, r2
 8019a5c:	bfb8      	it	lt
 8019a5e:	b21b      	sxthlt	r3, r3
 8019a60:	b214      	sxth	r4, r2
 8019a62:	bfb8      	it	lt
 8019a64:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019a68:	428c      	cmp	r4, r1
 8019a6a:	bfc4      	itt	gt
 8019a6c:	eba2 0801 	subgt.w	r8, r2, r1
 8019a70:	fa0f f888 	sxthgt.w	r8, r8
 8019a74:	4598      	cmp	r8, r3
 8019a76:	bfc4      	itt	gt
 8019a78:	fa0f fa80 	sxthgt.w	sl, r0
 8019a7c:	4643      	movgt	r3, r8
 8019a7e:	e7aa      	b.n	80199d6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08019a80 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8019a80:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8019a84:	b12a      	cbz	r2, 8019a92 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8019a86:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8019a8a:	b112      	cbz	r2, 8019a92 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8019a8c:	6803      	ldr	r3, [r0, #0]
 8019a8e:	695b      	ldr	r3, [r3, #20]
 8019a90:	4718      	bx	r3
 8019a92:	4770      	bx	lr

08019a94 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8019a94:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8019a98:	4770      	bx	lr

08019a9a <_ZNK8touchgfx6Button17invalidateContentEv>:
 8019a9a:	b508      	push	{r3, lr}
 8019a9c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8019aa0:	b10b      	cbz	r3, 8019aa6 <_ZNK8touchgfx6Button17invalidateContentEv+0xc>
 8019aa2:	f7e9 fef7 	bl	8003894 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8019aa6:	bd08      	pop	{r3, pc}

08019aa8 <_ZN8touchgfx14ButtonWithIconD1Ev>:
 8019aa8:	4770      	bx	lr

08019aaa <_ZN8touchgfx14ButtonWithIconD0Ev>:
 8019aaa:	b510      	push	{r4, lr}
 8019aac:	4604      	mov	r4, r0
 8019aae:	213c      	movs	r1, #60	; 0x3c
 8019ab0:	f010 fda1 	bl	802a5f6 <_ZdlPvj>
 8019ab4:	4620      	mov	r0, r4
 8019ab6:	bd10      	pop	{r4, pc}

08019ab8 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8019ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019abc:	461c      	mov	r4, r3
 8019abe:	4606      	mov	r6, r0
 8019ac0:	9f06      	ldr	r7, [sp, #24]
 8019ac2:	f010 fcd2 	bl	802a46a <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8019ac6:	8823      	ldrh	r3, [r4, #0]
 8019ac8:	f04f 0802 	mov.w	r8, #2
 8019acc:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8019ad0:	4638      	mov	r0, r7
 8019ad2:	86b3      	strh	r3, [r6, #52]	; 0x34
 8019ad4:	883b      	ldrh	r3, [r7, #0]
 8019ad6:	fb95 f5f8 	sdiv	r5, r5, r8
 8019ada:	86f3      	strh	r3, [r6, #54]	; 0x36
 8019adc:	b2ad      	uxth	r5, r5
 8019ade:	f004 fb85 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019ae2:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 8019ae6:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 8019aea:	fb94 f4f8 	sdiv	r4, r4, r8
 8019aee:	b2a4      	uxth	r4, r4
 8019af0:	8730      	strh	r0, [r6, #56]	; 0x38
 8019af2:	4638      	mov	r0, r7
 8019af4:	f004 fbbe 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019af8:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 8019afc:	8770      	strh	r0, [r6, #58]	; 0x3a
 8019afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019b02 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8019b02:	b510      	push	{r4, lr}
 8019b04:	4604      	mov	r4, r0
 8019b06:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019b08:	b150      	cbz	r0, 8019b20 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8019b0a:	6803      	ldr	r3, [r0, #0]
 8019b0c:	68db      	ldr	r3, [r3, #12]
 8019b0e:	4798      	blx	r3
 8019b10:	b130      	cbz	r0, 8019b20 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8019b12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8019b14:	4621      	mov	r1, r4
 8019b16:	6803      	ldr	r3, [r0, #0]
 8019b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b1c:	689b      	ldr	r3, [r3, #8]
 8019b1e:	4718      	bx	r3
 8019b20:	bd10      	pop	{r4, pc}
	...

08019b24 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 8019b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b28:	4604      	mov	r4, r0
 8019b2a:	b08c      	sub	sp, #48	; 0x30
 8019b2c:	460d      	mov	r5, r1
 8019b2e:	f010 fccf 	bl	802a4d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8019b32:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019b36:	b33b      	cbz	r3, 8019b88 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 8019b38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019b3a:	a805      	add	r0, sp, #20
 8019b3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019b40:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 8019b44:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 8019b48:	f004 fb50 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019b4c:	4606      	mov	r6, r0
 8019b4e:	a805      	add	r0, sp, #20
 8019b50:	f004 fb90 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019b54:	6869      	ldr	r1, [r5, #4]
 8019b56:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019b5a:	ab08      	add	r3, sp, #32
 8019b5c:	6828      	ldr	r0, [r5, #0]
 8019b5e:	ad08      	add	r5, sp, #32
 8019b60:	f8ad 8018 	strh.w	r8, [sp, #24]
 8019b64:	f8ad 701a 	strh.w	r7, [sp, #26]
 8019b68:	f8ad 601c 	strh.w	r6, [sp, #28]
 8019b6c:	c303      	stmia	r3!, {r0, r1}
 8019b6e:	a906      	add	r1, sp, #24
 8019b70:	4628      	mov	r0, r5
 8019b72:	f7fd fb03 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 8019b76:	4b25      	ldr	r3, [pc, #148]	; (8019c0c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	b93b      	cbnz	r3, 8019b8c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 8019b7c:	4b24      	ldr	r3, [pc, #144]	; (8019c10 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 8019b7e:	2187      	movs	r1, #135	; 0x87
 8019b80:	4a24      	ldr	r2, [pc, #144]	; (8019c14 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 8019b82:	4825      	ldr	r0, [pc, #148]	; (8019c18 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 8019b84:	f010 fd66 	bl	802a654 <__assert_func>
 8019b88:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019b8a:	e7d6      	b.n	8019b3a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 8019b8c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b94:	429a      	cmp	r2, r3
 8019b96:	d035      	beq.n	8019c04 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8019b98:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	dd31      	ble.n	8019c04 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8019ba0:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	dd2d      	ble.n	8019c04 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8019ba8:	2300      	movs	r3, #0
 8019baa:	a90a      	add	r1, sp, #40	; 0x28
 8019bac:	4620      	mov	r0, r4
 8019bae:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8019bb2:	6823      	ldr	r3, [r4, #0]
 8019bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bb6:	4798      	blx	r3
 8019bb8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019bbc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8019bbe:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019bc2:	1a9b      	subs	r3, r3, r2
 8019bc4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019bc8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8019bca:	1ac9      	subs	r1, r1, r3
 8019bcc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8019bd0:	4912      	ldr	r1, [pc, #72]	; (8019c1c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 8019bd2:	6809      	ldr	r1, [r1, #0]
 8019bd4:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 8019bd8:	b108      	cbz	r0, 8019bde <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 8019bda:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8019bdc:	b900      	cbnz	r0, 8019be0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 8019bde:	6888      	ldr	r0, [r1, #8]
 8019be0:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8019be4:	2601      	movs	r6, #1
 8019be6:	440b      	add	r3, r1
 8019be8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8019bec:	440a      	add	r2, r1
 8019bee:	6801      	ldr	r1, [r0, #0]
 8019bf0:	9602      	str	r6, [sp, #8]
 8019bf2:	b21b      	sxth	r3, r3
 8019bf4:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8019bf8:	b212      	sxth	r2, r2
 8019bfa:	e9cd 5400 	strd	r5, r4, [sp]
 8019bfe:	688c      	ldr	r4, [r1, #8]
 8019c00:	a905      	add	r1, sp, #20
 8019c02:	47a0      	blx	r4
 8019c04:	b00c      	add	sp, #48	; 0x30
 8019c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c0a:	bf00      	nop
 8019c0c:	20015428 	.word	0x20015428
 8019c10:	08030372 	.word	0x08030372
 8019c14:	080310e4 	.word	0x080310e4
 8019c18:	080303ae 	.word	0x080303ae
 8019c1c:	200153a0 	.word	0x200153a0

08019c20 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8019c20:	2101      	movs	r1, #1
 8019c22:	2200      	movs	r2, #0
 8019c24:	b510      	push	{r4, lr}
 8019c26:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8019c2a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8019c2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019c32:	4c0d      	ldr	r4, [pc, #52]	; (8019c68 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 8019c34:	8082      	strh	r2, [r0, #4]
 8019c36:	80c2      	strh	r2, [r0, #6]
 8019c38:	8102      	strh	r2, [r0, #8]
 8019c3a:	8142      	strh	r2, [r0, #10]
 8019c3c:	8182      	strh	r2, [r0, #12]
 8019c3e:	81c2      	strh	r2, [r0, #14]
 8019c40:	8202      	strh	r2, [r0, #16]
 8019c42:	8242      	strh	r2, [r0, #18]
 8019c44:	61c2      	str	r2, [r0, #28]
 8019c46:	8402      	strh	r2, [r0, #32]
 8019c48:	8442      	strh	r2, [r0, #34]	; 0x22
 8019c4a:	6282      	str	r2, [r0, #40]	; 0x28
 8019c4c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8019c50:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8019c52:	8601      	strh	r1, [r0, #48]	; 0x30
 8019c54:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8019c58:	6004      	str	r4, [r0, #0]
 8019c5a:	8681      	strh	r1, [r0, #52]	; 0x34
 8019c5c:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019c5e:	8702      	strh	r2, [r0, #56]	; 0x38
 8019c60:	8742      	strh	r2, [r0, #58]	; 0x3a
 8019c62:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019c66:	bd10      	pop	{r4, pc}
 8019c68:	08031074 	.word	0x08031074

08019c6c <_ZN8touchgfx5ImageD1Ev>:
 8019c6c:	4770      	bx	lr

08019c6e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8019c6e:	b570      	push	{r4, r5, r6, lr}
 8019c70:	880b      	ldrh	r3, [r1, #0]
 8019c72:	460d      	mov	r5, r1
 8019c74:	4604      	mov	r4, r0
 8019c76:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019c78:	4608      	mov	r0, r1
 8019c7a:	f004 fab7 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019c7e:	4606      	mov	r6, r0
 8019c80:	4628      	mov	r0, r5
 8019c82:	f004 faf7 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019c86:	6823      	ldr	r3, [r4, #0]
 8019c88:	4605      	mov	r5, r0
 8019c8a:	b231      	sxth	r1, r6
 8019c8c:	4620      	mov	r0, r4
 8019c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c90:	4798      	blx	r3
 8019c92:	6823      	ldr	r3, [r4, #0]
 8019c94:	b229      	sxth	r1, r5
 8019c96:	4620      	mov	r0, r4
 8019c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c9e:	4718      	bx	r3

08019ca0 <_ZN8touchgfx5ImageD0Ev>:
 8019ca0:	b510      	push	{r4, lr}
 8019ca2:	4604      	mov	r4, r0
 8019ca4:	212c      	movs	r1, #44	; 0x2c
 8019ca6:	f010 fca6 	bl	802a5f6 <_ZdlPvj>
 8019caa:	4620      	mov	r0, r4
 8019cac:	bd10      	pop	{r4, pc}

08019cae <_ZNK8touchgfx5Image12getSolidRectEv>:
 8019cae:	b510      	push	{r4, lr}
 8019cb0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019cb4:	4604      	mov	r4, r0
 8019cb6:	2bff      	cmp	r3, #255	; 0xff
 8019cb8:	d006      	beq.n	8019cc8 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019cba:	2300      	movs	r3, #0
 8019cbc:	8003      	strh	r3, [r0, #0]
 8019cbe:	8043      	strh	r3, [r0, #2]
 8019cc0:	8083      	strh	r3, [r0, #4]
 8019cc2:	80c3      	strh	r3, [r0, #6]
 8019cc4:	4620      	mov	r0, r4
 8019cc6:	bd10      	pop	{r4, pc}
 8019cc8:	3126      	adds	r1, #38	; 0x26
 8019cca:	f004 fb17 	bl	801e2fc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019cce:	e7f9      	b.n	8019cc4 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08019cd0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cd4:	4604      	mov	r4, r0
 8019cd6:	b088      	sub	sp, #32
 8019cd8:	2500      	movs	r5, #0
 8019cda:	460f      	mov	r7, r1
 8019cdc:	f854 3b26 	ldr.w	r3, [r4], #38
 8019ce0:	a904      	add	r1, sp, #16
 8019ce2:	4606      	mov	r6, r0
 8019ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ce6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019cea:	4798      	blx	r3
 8019cec:	4620      	mov	r0, r4
 8019cee:	f004 fa7d 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019cf2:	4680      	mov	r8, r0
 8019cf4:	4620      	mov	r0, r4
 8019cf6:	f004 fabd 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019cfa:	9506      	str	r5, [sp, #24]
 8019cfc:	ad06      	add	r5, sp, #24
 8019cfe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019d02:	4639      	mov	r1, r7
 8019d04:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019d08:	4628      	mov	r0, r5
 8019d0a:	f7fd fa37 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 8019d0e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	dd19      	ble.n	8019d4a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019d16:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	dd15      	ble.n	8019d4a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019d1e:	4b0c      	ldr	r3, [pc, #48]	; (8019d50 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019d26:	b10a      	cbz	r2, 8019d2c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8019d28:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019d2a:	b900      	cbnz	r0, 8019d2e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8019d2c:	6898      	ldr	r0, [r3, #8]
 8019d2e:	2701      	movs	r7, #1
 8019d30:	6801      	ldr	r1, [r0, #0]
 8019d32:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019d36:	9702      	str	r7, [sp, #8]
 8019d38:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8019d3c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019d40:	e9cd 5600 	strd	r5, r6, [sp]
 8019d44:	688d      	ldr	r5, [r1, #8]
 8019d46:	4621      	mov	r1, r4
 8019d48:	47a8      	blx	r5
 8019d4a:	b008      	add	sp, #32
 8019d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d50:	200153a0 	.word	0x200153a0

08019d54 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8019d54:	b510      	push	{r4, lr}
 8019d56:	6803      	ldr	r3, [r0, #0]
 8019d58:	460c      	mov	r4, r1
 8019d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d5c:	4798      	blx	r3
 8019d5e:	1b03      	subs	r3, r0, r4
 8019d60:	4258      	negs	r0, r3
 8019d62:	4158      	adcs	r0, r3
 8019d64:	bd10      	pop	{r4, pc}
	...

08019d68 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019d68:	4b01      	ldr	r3, [pc, #4]	; (8019d70 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019d6a:	6019      	str	r1, [r3, #0]
 8019d6c:	4770      	bx	lr
 8019d6e:	bf00      	nop
 8019d70:	200153a8 	.word	0x200153a8

08019d74 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d78:	4696      	mov	lr, r2
 8019d7a:	b097      	sub	sp, #92	; 0x5c
 8019d7c:	4605      	mov	r5, r0
 8019d7e:	4614      	mov	r4, r2
 8019d80:	460e      	mov	r6, r1
 8019d82:	461f      	mov	r7, r3
 8019d84:	f10d 0c1c 	add.w	ip, sp, #28
 8019d88:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8019d8c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8019d90:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8019d94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019d98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019d9c:	f8de 3000 	ldr.w	r3, [lr]
 8019da0:	f104 0e14 	add.w	lr, r4, #20
 8019da4:	f8cc 3000 	str.w	r3, [ip]
 8019da8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019dac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019db0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019db4:	f8de 3000 	ldr.w	r3, [lr]
 8019db8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019dbc:	f8cc 3000 	str.w	r3, [ip]
 8019dc0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019dc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019dc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019dcc:	f8de 3000 	ldr.w	r3, [lr]
 8019dd0:	4631      	mov	r1, r6
 8019dd2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019dd4:	4628      	mov	r0, r5
 8019dd6:	f8cc 3000 	str.w	r3, [ip]
 8019dda:	682b      	ldr	r3, [r5, #0]
 8019ddc:	9201      	str	r2, [sp, #4]
 8019dde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019de0:	f8cd 8008 	str.w	r8, [sp, #8]
 8019de4:	9200      	str	r2, [sp, #0]
 8019de6:	aa07      	add	r2, sp, #28
 8019de8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019dec:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8019df0:	463b      	mov	r3, r7
 8019df2:	47d8      	blx	fp
 8019df4:	46a6      	mov	lr, r4
 8019df6:	f10d 0c1c 	add.w	ip, sp, #28
 8019dfa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019dfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019e02:	f8de 3000 	ldr.w	r3, [lr]
 8019e06:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019e0a:	343c      	adds	r4, #60	; 0x3c
 8019e0c:	f8cc 3000 	str.w	r3, [ip]
 8019e10:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019e14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019e18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019e1c:	f8de 3000 	ldr.w	r3, [lr]
 8019e20:	f8cc 3000 	str.w	r3, [ip]
 8019e24:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019e2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019e2e:	6823      	ldr	r3, [r4, #0]
 8019e30:	4631      	mov	r1, r6
 8019e32:	4628      	mov	r0, r5
 8019e34:	f8cc 3000 	str.w	r3, [ip]
 8019e38:	682b      	ldr	r3, [r5, #0]
 8019e3a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019e3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019e40:	f8cd 8008 	str.w	r8, [sp, #8]
 8019e44:	9201      	str	r2, [sp, #4]
 8019e46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019e48:	9200      	str	r2, [sp, #0]
 8019e4a:	aa07      	add	r2, sp, #28
 8019e4c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8019e4e:	463b      	mov	r3, r7
 8019e50:	47a0      	blx	r4
 8019e52:	b017      	add	sp, #92	; 0x5c
 8019e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e58 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e5c:	b08d      	sub	sp, #52	; 0x34
 8019e5e:	4688      	mov	r8, r1
 8019e60:	f8d3 c000 	ldr.w	ip, [r3]
 8019e64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019e66:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8019e6a:	680f      	ldr	r7, [r1, #0]
 8019e6c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8019e70:	eba7 070c 	sub.w	r7, r7, ip
 8019e74:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8019e78:	edd3 6a07 	vldr	s13, [r3, #28]
 8019e7c:	42bc      	cmp	r4, r7
 8019e7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019e80:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8019e84:	bfa8      	it	ge
 8019e86:	463c      	movge	r4, r7
 8019e88:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019e8c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8019e90:	ee07 4a90 	vmov	s15, r4
 8019e94:	eb09 0e0c 	add.w	lr, r9, ip
 8019e98:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019e9c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019ea0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019ea4:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8019ea8:	4571      	cmp	r1, lr
 8019eaa:	ee25 4a04 	vmul.f32	s8, s10, s8
 8019eae:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019eb2:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019eb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019eba:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8019ebe:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019ec2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019ec6:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019eca:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019ece:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019ed2:	f340 808c 	ble.w	8019fee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8019ed6:	eba1 060e 	sub.w	r6, r1, lr
 8019eda:	fb96 f5f4 	sdiv	r5, r6, r4
 8019ede:	ee07 5a10 	vmov	s14, r5
 8019ee2:	2d00      	cmp	r5, #0
 8019ee4:	fb04 6615 	mls	r6, r4, r5, r6
 8019ee8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019eec:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019ef0:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019ef4:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019ef8:	dd12      	ble.n	8019f20 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8019efa:	ee70 6a44 	vsub.f32	s13, s0, s8
 8019efe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019f02:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019f06:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f0e:	bf14      	ite	ne
 8019f10:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019f14:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019f18:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019f1c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019f20:	fb05 f204 	mul.w	r2, r5, r4
 8019f24:	1abf      	subs	r7, r7, r2
 8019f26:	4494      	add	ip, r2
 8019f28:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019f2c:	4411      	add	r1, r2
 8019f2e:	eb09 020c 	add.w	r2, r9, ip
 8019f32:	b209      	sxth	r1, r1
 8019f34:	443a      	add	r2, r7
 8019f36:	428a      	cmp	r2, r1
 8019f38:	bfc4      	itt	gt
 8019f3a:	eba1 0209 	subgt.w	r2, r1, r9
 8019f3e:	eba2 070c 	subgt.w	r7, r2, ip
 8019f42:	2f00      	cmp	r7, #0
 8019f44:	dd50      	ble.n	8019fe8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8019f46:	fb97 f1f4 	sdiv	r1, r7, r4
 8019f4a:	fb04 7211 	mls	r2, r4, r1, r7
 8019f4e:	b90a      	cbnz	r2, 8019f54 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8019f50:	3901      	subs	r1, #1
 8019f52:	4622      	mov	r2, r4
 8019f54:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019f58:	6840      	ldr	r0, [r0, #4]
 8019f5a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8019f5e:	44b6      	add	lr, r6
 8019f60:	f8d0 a000 	ldr.w	sl, [r0]
 8019f64:	2900      	cmp	r1, #0
 8019f66:	bfcc      	ite	gt
 8019f68:	46a1      	movgt	r9, r4
 8019f6a:	4691      	movle	r9, r2
 8019f6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8019f6e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019f70:	fb04 e505 	mla	r5, r4, r5, lr
 8019f74:	eef0 6a42 	vmov.f32	s13, s4
 8019f78:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019f7c:	9008      	str	r0, [sp, #32]
 8019f7e:	eeb0 7a61 	vmov.f32	s14, s3
 8019f82:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019f84:	695b      	ldr	r3, [r3, #20]
 8019f86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f8a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8019f8e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019f92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019f94:	445b      	add	r3, fp
 8019f96:	9307      	str	r3, [sp, #28]
 8019f98:	ee16 3a90 	vmov	r3, s13
 8019f9c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019fa0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019fa4:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019fa8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019fac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019fb0:	ee17 7a90 	vmov	r7, s15
 8019fb4:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019fb8:	fb97 f7f4 	sdiv	r7, r7, r4
 8019fbc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019fc0:	ee17 ca90 	vmov	ip, s15
 8019fc4:	fb9c fcf4 	sdiv	ip, ip, r4
 8019fc8:	fb0c 3306 	mla	r3, ip, r6, r3
 8019fcc:	9302      	str	r3, [sp, #8]
 8019fce:	ee17 3a10 	vmov	r3, s14
 8019fd2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019fd6:	fb07 3706 	mla	r7, r7, r6, r3
 8019fda:	eba9 0306 	sub.w	r3, r9, r6
 8019fde:	e9cd 4700 	strd	r4, r7, [sp]
 8019fe2:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019fe6:	47a0      	blx	r4
 8019fe8:	b00d      	add	sp, #52	; 0x34
 8019fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fee:	2500      	movs	r5, #0
 8019ff0:	462e      	mov	r6, r5
 8019ff2:	e799      	b.n	8019f28 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019ff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ff8:	b0db      	sub	sp, #364	; 0x16c
 8019ffa:	461d      	mov	r5, r3
 8019ffc:	4614      	mov	r4, r2
 8019ffe:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801a002:	910f      	str	r1, [sp, #60]	; 0x3c
 801a004:	4629      	mov	r1, r5
 801a006:	930a      	str	r3, [sp, #40]	; 0x28
 801a008:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801a00c:	9009      	str	r0, [sp, #36]	; 0x24
 801a00e:	930b      	str	r3, [sp, #44]	; 0x2c
 801a010:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801a014:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801a018:	9310      	str	r3, [sp, #64]	; 0x40
 801a01a:	6803      	ldr	r3, [r0, #0]
 801a01c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801a01e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a022:	47b8      	blx	r7
 801a024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a026:	6058      	str	r0, [r3, #4]
 801a028:	2800      	cmp	r0, #0
 801a02a:	f000 83a1 	beq.w	801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a02e:	682b      	ldr	r3, [r5, #0]
 801a030:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a034:	ed94 7a02 	vldr	s14, [r4, #8]
 801a038:	9314      	str	r3, [sp, #80]	; 0x50
 801a03a:	686b      	ldr	r3, [r5, #4]
 801a03c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a040:	9315      	str	r3, [sp, #84]	; 0x54
 801a042:	4bc1      	ldr	r3, [pc, #772]	; (801a348 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a044:	7819      	ldrb	r1, [r3, #0]
 801a046:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a04a:	2900      	cmp	r1, #0
 801a04c:	bf16      	itet	ne
 801a04e:	4619      	movne	r1, r3
 801a050:	4611      	moveq	r1, r2
 801a052:	4613      	movne	r3, r2
 801a054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a058:	9116      	str	r1, [sp, #88]	; 0x58
 801a05a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801a05e:	f240 8387 	bls.w	801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a062:	ed94 7a07 	vldr	s14, [r4, #28]
 801a066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a06e:	f240 837f 	bls.w	801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a072:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801a076:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a07e:	f240 8377 	bls.w	801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a082:	6822      	ldr	r2, [r4, #0]
 801a084:	4bb1      	ldr	r3, [pc, #708]	; (801a34c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a086:	429a      	cmp	r2, r3
 801a088:	f2c0 8372 	blt.w	801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a08c:	49b0      	ldr	r1, [pc, #704]	; (801a350 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a08e:	6963      	ldr	r3, [r4, #20]
 801a090:	428a      	cmp	r2, r1
 801a092:	f300 836d 	bgt.w	801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a096:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a09a:	48ae      	ldr	r0, [pc, #696]	; (801a354 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a09c:	33ff      	adds	r3, #255	; 0xff
 801a09e:	4283      	cmp	r3, r0
 801a0a0:	f200 8366 	bhi.w	801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a0a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a0a6:	4dac      	ldr	r5, [pc, #688]	; (801a358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a0a8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a0ac:	33ff      	adds	r3, #255	; 0xff
 801a0ae:	42ab      	cmp	r3, r5
 801a0b0:	f200 835e 	bhi.w	801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a0b4:	6862      	ldr	r2, [r4, #4]
 801a0b6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a0ba:	33ff      	adds	r3, #255	; 0xff
 801a0bc:	4283      	cmp	r3, r0
 801a0be:	f200 8357 	bhi.w	801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a0c2:	69a1      	ldr	r1, [r4, #24]
 801a0c4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a0c8:	33ff      	adds	r3, #255	; 0xff
 801a0ca:	4283      	cmp	r3, r0
 801a0cc:	f200 8350 	bhi.w	801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a0d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a0d2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a0d6:	30ff      	adds	r0, #255	; 0xff
 801a0d8:	42a8      	cmp	r0, r5
 801a0da:	f200 8349 	bhi.w	801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a0de:	428a      	cmp	r2, r1
 801a0e0:	f280 8110 	bge.w	801a304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a0e4:	429a      	cmp	r2, r3
 801a0e6:	f300 8119 	bgt.w	801a31c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a0ea:	4299      	cmp	r1, r3
 801a0ec:	f280 811d 	bge.w	801a32a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a0f0:	2502      	movs	r5, #2
 801a0f2:	2701      	movs	r7, #1
 801a0f4:	46a9      	mov	r9, r5
 801a0f6:	46b8      	mov	r8, r7
 801a0f8:	f04f 0a00 	mov.w	sl, #0
 801a0fc:	4621      	mov	r1, r4
 801a0fe:	a849      	add	r0, sp, #292	; 0x124
 801a100:	f003 fd84 	bl	801dc0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a104:	4622      	mov	r2, r4
 801a106:	4653      	mov	r3, sl
 801a108:	a949      	add	r1, sp, #292	; 0x124
 801a10a:	f8cd 9000 	str.w	r9, [sp]
 801a10e:	a819      	add	r0, sp, #100	; 0x64
 801a110:	f003 feac 	bl	801de6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a114:	4622      	mov	r2, r4
 801a116:	4653      	mov	r3, sl
 801a118:	a949      	add	r1, sp, #292	; 0x124
 801a11a:	f8cd 8000 	str.w	r8, [sp]
 801a11e:	a829      	add	r0, sp, #164	; 0xa4
 801a120:	f003 fea4 	bl	801de6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a124:	4643      	mov	r3, r8
 801a126:	4622      	mov	r2, r4
 801a128:	a949      	add	r1, sp, #292	; 0x124
 801a12a:	f8cd 9000 	str.w	r9, [sp]
 801a12e:	a839      	add	r0, sp, #228	; 0xe4
 801a130:	f003 fe9c 	bl	801de6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a134:	42af      	cmp	r7, r5
 801a136:	af12      	add	r7, sp, #72	; 0x48
 801a138:	bfb7      	itett	lt
 801a13a:	2300      	movlt	r3, #0
 801a13c:	2301      	movge	r3, #1
 801a13e:	ad29      	addlt	r5, sp, #164	; 0xa4
 801a140:	ac19      	addlt	r4, sp, #100	; 0x64
 801a142:	bfb1      	iteee	lt
 801a144:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a146:	ad19      	addge	r5, sp, #100	; 0x64
 801a148:	930e      	strge	r3, [sp, #56]	; 0x38
 801a14a:	ac29      	addge	r4, sp, #164	; 0xa4
 801a14c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a14e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a152:	e887 0003 	stmia.w	r7, {r0, r1}
 801a156:	b928      	cbnz	r0, 801a164 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a158:	4b80      	ldr	r3, [pc, #512]	; (801a35c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a15a:	6818      	ldr	r0, [r3, #0]
 801a15c:	6803      	ldr	r3, [r0, #0]
 801a15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a160:	4798      	blx	r3
 801a162:	6038      	str	r0, [r7, #0]
 801a164:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a166:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a16a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a16e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a170:	930c      	str	r3, [sp, #48]	; 0x30
 801a172:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a174:	6963      	ldr	r3, [r4, #20]
 801a176:	440b      	add	r3, r1
 801a178:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a17c:	4408      	add	r0, r1
 801a17e:	b200      	sxth	r0, r0
 801a180:	4283      	cmp	r3, r0
 801a182:	900d      	str	r0, [sp, #52]	; 0x34
 801a184:	f280 80dd 	bge.w	801a342 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a188:	428b      	cmp	r3, r1
 801a18a:	da08      	bge.n	801a19e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a18c:	2a00      	cmp	r2, #0
 801a18e:	dd06      	ble.n	801a19e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a190:	1acb      	subs	r3, r1, r3
 801a192:	429a      	cmp	r2, r3
 801a194:	f2c0 80e4 	blt.w	801a360 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a198:	2b00      	cmp	r3, #0
 801a19a:	f300 80e2 	bgt.w	801a362 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a19e:	6967      	ldr	r7, [r4, #20]
 801a1a0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a1a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a1a6:	443b      	add	r3, r7
 801a1a8:	461f      	mov	r7, r3
 801a1aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1ac:	1bdf      	subs	r7, r3, r7
 801a1ae:	4297      	cmp	r7, r2
 801a1b0:	bfa8      	it	ge
 801a1b2:	4617      	movge	r7, r2
 801a1b4:	2f00      	cmp	r7, #0
 801a1b6:	f340 8166 	ble.w	801a486 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a1ba:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a1bc:	6829      	ldr	r1, [r5, #0]
 801a1be:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a1c2:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a1c6:	4411      	add	r1, r2
 801a1c8:	6820      	ldr	r0, [r4, #0]
 801a1ca:	4299      	cmp	r1, r3
 801a1cc:	dd1a      	ble.n	801a204 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a1ce:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a1d2:	4402      	add	r2, r0
 801a1d4:	440b      	add	r3, r1
 801a1d6:	b21b      	sxth	r3, r3
 801a1d8:	429a      	cmp	r2, r3
 801a1da:	dc13      	bgt.n	801a204 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a1dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a1de:	a912      	add	r1, sp, #72	; 0x48
 801a1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	9206      	str	r2, [sp, #24]
 801a1e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a1ea:	9500      	str	r5, [sp, #0]
 801a1ec:	9205      	str	r2, [sp, #20]
 801a1ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a1f0:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a1f4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a1f6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a1fa:	aa49      	add	r2, sp, #292	; 0x124
 801a1fc:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a200:	4623      	mov	r3, r4
 801a202:	47c8      	blx	r9
 801a204:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a208:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a20c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a210:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a214:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a218:	68a1      	ldr	r1, [r4, #8]
 801a21a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a21e:	ed94 6a08 	vldr	s12, [r4, #32]
 801a222:	edd4 6a07 	vldr	s13, [r4, #28]
 801a226:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a22a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a22e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a232:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a236:	edc4 6a07 	vstr	s13, [r4, #28]
 801a23a:	441a      	add	r2, r3
 801a23c:	6963      	ldr	r3, [r4, #20]
 801a23e:	3301      	adds	r3, #1
 801a240:	6022      	str	r2, [r4, #0]
 801a242:	6163      	str	r3, [r4, #20]
 801a244:	69a3      	ldr	r3, [r4, #24]
 801a246:	3b01      	subs	r3, #1
 801a248:	61a3      	str	r3, [r4, #24]
 801a24a:	6923      	ldr	r3, [r4, #16]
 801a24c:	440b      	add	r3, r1
 801a24e:	68e1      	ldr	r1, [r4, #12]
 801a250:	428b      	cmp	r3, r1
 801a252:	6123      	str	r3, [r4, #16]
 801a254:	db15      	blt.n	801a282 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a256:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a25a:	3201      	adds	r2, #1
 801a25c:	1a5b      	subs	r3, r3, r1
 801a25e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a262:	6022      	str	r2, [r4, #0]
 801a264:	6123      	str	r3, [r4, #16]
 801a266:	edc4 6a07 	vstr	s13, [r4, #28]
 801a26a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a26e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a272:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a276:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a27a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a27e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a282:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a286:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a28a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a28e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a292:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a296:	68a9      	ldr	r1, [r5, #8]
 801a298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a29c:	ed95 6a08 	vldr	s12, [r5, #32]
 801a2a0:	edd5 6a07 	vldr	s13, [r5, #28]
 801a2a4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a2a8:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a2ac:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a2b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a2b4:	edc5 6a07 	vstr	s13, [r5, #28]
 801a2b8:	441a      	add	r2, r3
 801a2ba:	696b      	ldr	r3, [r5, #20]
 801a2bc:	3301      	adds	r3, #1
 801a2be:	602a      	str	r2, [r5, #0]
 801a2c0:	616b      	str	r3, [r5, #20]
 801a2c2:	69ab      	ldr	r3, [r5, #24]
 801a2c4:	3b01      	subs	r3, #1
 801a2c6:	61ab      	str	r3, [r5, #24]
 801a2c8:	692b      	ldr	r3, [r5, #16]
 801a2ca:	440b      	add	r3, r1
 801a2cc:	68e9      	ldr	r1, [r5, #12]
 801a2ce:	428b      	cmp	r3, r1
 801a2d0:	612b      	str	r3, [r5, #16]
 801a2d2:	db15      	blt.n	801a300 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a2d4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a2d8:	3201      	adds	r2, #1
 801a2da:	1a5b      	subs	r3, r3, r1
 801a2dc:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a2e0:	602a      	str	r2, [r5, #0]
 801a2e2:	612b      	str	r3, [r5, #16]
 801a2e4:	edc5 6a07 	vstr	s13, [r5, #28]
 801a2e8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a2ec:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a2f0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a2f4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a2f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a2fc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a300:	3f01      	subs	r7, #1
 801a302:	e757      	b.n	801a1b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a304:	4299      	cmp	r1, r3
 801a306:	dc13      	bgt.n	801a330 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a308:	429a      	cmp	r2, r3
 801a30a:	da14      	bge.n	801a336 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a30c:	2502      	movs	r5, #2
 801a30e:	2703      	movs	r7, #3
 801a310:	f04f 0800 	mov.w	r8, #0
 801a314:	46a9      	mov	r9, r5
 801a316:	f04f 0a01 	mov.w	sl, #1
 801a31a:	e6ef      	b.n	801a0fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a31c:	2501      	movs	r5, #1
 801a31e:	2700      	movs	r7, #0
 801a320:	46a9      	mov	r9, r5
 801a322:	46b8      	mov	r8, r7
 801a324:	f04f 0a02 	mov.w	sl, #2
 801a328:	e6e8      	b.n	801a0fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a32a:	2501      	movs	r5, #1
 801a32c:	2702      	movs	r7, #2
 801a32e:	e6e1      	b.n	801a0f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a330:	2500      	movs	r5, #0
 801a332:	2701      	movs	r7, #1
 801a334:	e7f4      	b.n	801a320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a336:	2702      	movs	r7, #2
 801a338:	2503      	movs	r5, #3
 801a33a:	f04f 0900 	mov.w	r9, #0
 801a33e:	46b8      	mov	r8, r7
 801a340:	e7e9      	b.n	801a316 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a342:	4613      	mov	r3, r2
 801a344:	e728      	b.n	801a198 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a346:	bf00      	nop
 801a348:	20015398 	.word	0x20015398
 801a34c:	fffd8f01 	.word	0xfffd8f01
 801a350:	00027100 	.word	0x00027100
 801a354:	0004e1ff 	.word	0x0004e1ff
 801a358:	0004e1fe 	.word	0x0004e1fe
 801a35c:	200153a0 	.word	0x200153a0
 801a360:	4613      	mov	r3, r2
 801a362:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a364:	469e      	mov	lr, r3
 801a366:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801a368:	469c      	mov	ip, r3
 801a36a:	9111      	str	r1, [sp, #68]	; 0x44
 801a36c:	f04f 0900 	mov.w	r9, #0
 801a370:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801a374:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801a378:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801a37c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801a380:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801a384:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801a388:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801a38c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801a390:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801a394:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801a398:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801a39c:	f1bc 0f00 	cmp.w	ip, #0
 801a3a0:	d147      	bne.n	801a432 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a3a2:	eb03 0c07 	add.w	ip, r3, r7
 801a3a6:	1ad7      	subs	r7, r2, r3
 801a3a8:	f1b9 0f00 	cmp.w	r9, #0
 801a3ac:	d009      	beq.n	801a3c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a3ae:	9029      	str	r0, [sp, #164]	; 0xa4
 801a3b0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801a3b4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801a3b8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801a3bc:	912d      	str	r1, [sp, #180]	; 0xb4
 801a3be:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801a3c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a3c4:	f04f 0800 	mov.w	r8, #0
 801a3c8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a3cc:	9111      	str	r1, [sp, #68]	; 0x44
 801a3ce:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a3d2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a3d6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a3da:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a3de:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a3e2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a3e6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a3ea:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a3ee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a3f2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a3f6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a3fa:	f1be 0f00 	cmp.w	lr, #0
 801a3fe:	d031      	beq.n	801a464 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a400:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a402:	4450      	add	r0, sl
 801a404:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a408:	4431      	add	r1, r6
 801a40a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a40e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a412:	4549      	cmp	r1, r9
 801a414:	db08      	blt.n	801a428 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a416:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a41a:	3001      	adds	r0, #1
 801a41c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a420:	eba1 0109 	sub.w	r1, r1, r9
 801a424:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a428:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 801a42c:	f04f 0801 	mov.w	r8, #1
 801a430:	e7e3      	b.n	801a3fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801a432:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a434:	4450      	add	r0, sl
 801a436:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a43a:	4431      	add	r1, r6
 801a43c:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a440:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a444:	4541      	cmp	r1, r8
 801a446:	db08      	blt.n	801a45a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801a448:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a44c:	3001      	adds	r0, #1
 801a44e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a452:	eba1 0108 	sub.w	r1, r1, r8
 801a456:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a45a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801a45e:	f04f 0901 	mov.w	r9, #1
 801a462:	e79b      	b.n	801a39c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801a464:	449c      	add	ip, r3
 801a466:	1aff      	subs	r7, r7, r3
 801a468:	f1b8 0f00 	cmp.w	r8, #0
 801a46c:	d009      	beq.n	801a482 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801a46e:	9019      	str	r0, [sp, #100]	; 0x64
 801a470:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a474:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a478:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a47c:	911d      	str	r1, [sp, #116]	; 0x74
 801a47e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a482:	1ad2      	subs	r2, r2, r3
 801a484:	e68b      	b.n	801a19e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a488:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	f000 80d1 	beq.w	801a632 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801a490:	ad19      	add	r5, sp, #100	; 0x64
 801a492:	ac39      	add	r4, sp, #228	; 0xe4
 801a494:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a496:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a49a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a49e:	930c      	str	r3, [sp, #48]	; 0x30
 801a4a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a4a2:	6963      	ldr	r3, [r4, #20]
 801a4a4:	440b      	add	r3, r1
 801a4a6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a4aa:	4408      	add	r0, r1
 801a4ac:	b200      	sxth	r0, r0
 801a4ae:	4283      	cmp	r3, r0
 801a4b0:	900d      	str	r0, [sp, #52]	; 0x34
 801a4b2:	f280 80c1 	bge.w	801a638 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801a4b6:	428b      	cmp	r3, r1
 801a4b8:	da08      	bge.n	801a4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a4ba:	2a00      	cmp	r2, #0
 801a4bc:	dd06      	ble.n	801a4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a4be:	1acb      	subs	r3, r1, r3
 801a4c0:	429a      	cmp	r2, r3
 801a4c2:	f2c0 80bb 	blt.w	801a63c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	f300 80b9 	bgt.w	801a63e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801a4cc:	6967      	ldr	r7, [r4, #20]
 801a4ce:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a4d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4d4:	443b      	add	r3, r7
 801a4d6:	461f      	mov	r7, r3
 801a4d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a4da:	1bdf      	subs	r7, r3, r7
 801a4dc:	4297      	cmp	r7, r2
 801a4de:	bfa8      	it	ge
 801a4e0:	4617      	movge	r7, r2
 801a4e2:	2f00      	cmp	r7, #0
 801a4e4:	f340 813c 	ble.w	801a760 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801a4e8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a4ea:	6829      	ldr	r1, [r5, #0]
 801a4ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a4f0:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a4f4:	4411      	add	r1, r2
 801a4f6:	6820      	ldr	r0, [r4, #0]
 801a4f8:	4299      	cmp	r1, r3
 801a4fa:	dd1a      	ble.n	801a532 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a4fc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a500:	4402      	add	r2, r0
 801a502:	440b      	add	r3, r1
 801a504:	b21b      	sxth	r3, r3
 801a506:	429a      	cmp	r2, r3
 801a508:	dc13      	bgt.n	801a532 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a50a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a50c:	a912      	add	r1, sp, #72	; 0x48
 801a50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a510:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	9206      	str	r2, [sp, #24]
 801a516:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a518:	9500      	str	r5, [sp, #0]
 801a51a:	9205      	str	r2, [sp, #20]
 801a51c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a51e:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a522:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a524:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a528:	aa49      	add	r2, sp, #292	; 0x124
 801a52a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a52e:	4623      	mov	r3, r4
 801a530:	47c8      	blx	r9
 801a532:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a536:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a53a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a53e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a542:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a546:	68a1      	ldr	r1, [r4, #8]
 801a548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a54c:	ed94 6a08 	vldr	s12, [r4, #32]
 801a550:	edd4 6a07 	vldr	s13, [r4, #28]
 801a554:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a558:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a55c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a560:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a564:	edc4 6a07 	vstr	s13, [r4, #28]
 801a568:	441a      	add	r2, r3
 801a56a:	6963      	ldr	r3, [r4, #20]
 801a56c:	3301      	adds	r3, #1
 801a56e:	6022      	str	r2, [r4, #0]
 801a570:	6163      	str	r3, [r4, #20]
 801a572:	69a3      	ldr	r3, [r4, #24]
 801a574:	3b01      	subs	r3, #1
 801a576:	61a3      	str	r3, [r4, #24]
 801a578:	6923      	ldr	r3, [r4, #16]
 801a57a:	440b      	add	r3, r1
 801a57c:	68e1      	ldr	r1, [r4, #12]
 801a57e:	428b      	cmp	r3, r1
 801a580:	6123      	str	r3, [r4, #16]
 801a582:	db15      	blt.n	801a5b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801a584:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a588:	3201      	adds	r2, #1
 801a58a:	1a5b      	subs	r3, r3, r1
 801a58c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a590:	6022      	str	r2, [r4, #0]
 801a592:	6123      	str	r3, [r4, #16]
 801a594:	edc4 6a07 	vstr	s13, [r4, #28]
 801a598:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a59c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a5a0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a5a4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a5a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a5ac:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a5b0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a5b4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a5b8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a5bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a5c0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a5c4:	68a9      	ldr	r1, [r5, #8]
 801a5c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a5ca:	ed95 6a08 	vldr	s12, [r5, #32]
 801a5ce:	edd5 6a07 	vldr	s13, [r5, #28]
 801a5d2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a5d6:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a5da:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a5de:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a5e2:	edc5 6a07 	vstr	s13, [r5, #28]
 801a5e6:	441a      	add	r2, r3
 801a5e8:	696b      	ldr	r3, [r5, #20]
 801a5ea:	3301      	adds	r3, #1
 801a5ec:	602a      	str	r2, [r5, #0]
 801a5ee:	616b      	str	r3, [r5, #20]
 801a5f0:	69ab      	ldr	r3, [r5, #24]
 801a5f2:	3b01      	subs	r3, #1
 801a5f4:	61ab      	str	r3, [r5, #24]
 801a5f6:	692b      	ldr	r3, [r5, #16]
 801a5f8:	440b      	add	r3, r1
 801a5fa:	68e9      	ldr	r1, [r5, #12]
 801a5fc:	428b      	cmp	r3, r1
 801a5fe:	612b      	str	r3, [r5, #16]
 801a600:	db15      	blt.n	801a62e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801a602:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a606:	3201      	adds	r2, #1
 801a608:	1a5b      	subs	r3, r3, r1
 801a60a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a60e:	602a      	str	r2, [r5, #0]
 801a610:	612b      	str	r3, [r5, #16]
 801a612:	edc5 6a07 	vstr	s13, [r5, #28]
 801a616:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a61a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a61e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a622:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a626:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a62a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a62e:	3f01      	subs	r7, #1
 801a630:	e757      	b.n	801a4e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801a632:	ad39      	add	r5, sp, #228	; 0xe4
 801a634:	ac19      	add	r4, sp, #100	; 0x64
 801a636:	e72d      	b.n	801a494 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801a638:	4613      	mov	r3, r2
 801a63a:	e744      	b.n	801a4c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801a63c:	4613      	mov	r3, r2
 801a63e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801a640:	469e      	mov	lr, r3
 801a642:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801a646:	461f      	mov	r7, r3
 801a648:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801a64c:	f04f 0900 	mov.w	r9, #0
 801a650:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801a654:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801a658:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801a65c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801a660:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801a664:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801a666:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801a66a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801a66e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801a672:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801a676:	960e      	str	r6, [sp, #56]	; 0x38
 801a678:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801a67c:	2f00      	cmp	r7, #0
 801a67e:	d146      	bne.n	801a70e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801a680:	449c      	add	ip, r3
 801a682:	1ad7      	subs	r7, r2, r3
 801a684:	f1b9 0f00 	cmp.w	r9, #0
 801a688:	d009      	beq.n	801a69e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801a68a:	9039      	str	r0, [sp, #228]	; 0xe4
 801a68c:	913d      	str	r1, [sp, #244]	; 0xf4
 801a68e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801a692:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801a696:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801a69a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801a69e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a6a0:	f04f 0800 	mov.w	r8, #0
 801a6a4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a6a8:	910e      	str	r1, [sp, #56]	; 0x38
 801a6aa:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a6ae:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a6b2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a6b6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a6ba:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a6be:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a6c2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a6c6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a6ca:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a6ce:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a6d2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a6d6:	f1be 0f00 	cmp.w	lr, #0
 801a6da:	d030      	beq.n	801a73e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801a6dc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a6de:	4450      	add	r0, sl
 801a6e0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a6e4:	4431      	add	r1, r6
 801a6e6:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a6ea:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a6ee:	4549      	cmp	r1, r9
 801a6f0:	db08      	blt.n	801a704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a6f2:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a6f6:	3001      	adds	r0, #1
 801a6f8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a6fc:	eba1 0109 	sub.w	r1, r1, r9
 801a700:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a704:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 801a708:	f04f 0801 	mov.w	r8, #1
 801a70c:	e7e3      	b.n	801a6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a70e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a710:	4450      	add	r0, sl
 801a712:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a716:	4431      	add	r1, r6
 801a718:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a71c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a720:	4541      	cmp	r1, r8
 801a722:	db08      	blt.n	801a736 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a724:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a728:	3001      	adds	r0, #1
 801a72a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a72e:	eba1 0108 	sub.w	r1, r1, r8
 801a732:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a736:	3f01      	subs	r7, #1
 801a738:	f04f 0901 	mov.w	r9, #1
 801a73c:	e79e      	b.n	801a67c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801a73e:	449c      	add	ip, r3
 801a740:	1aff      	subs	r7, r7, r3
 801a742:	f1b8 0f00 	cmp.w	r8, #0
 801a746:	d009      	beq.n	801a75c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801a748:	9019      	str	r0, [sp, #100]	; 0x64
 801a74a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a74e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a752:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a756:	911d      	str	r1, [sp, #116]	; 0x74
 801a758:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a75c:	1ad2      	subs	r2, r2, r3
 801a75e:	e6b5      	b.n	801a4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	b923      	cbnz	r3, 801a770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a766:	4b04      	ldr	r3, [pc, #16]	; (801a778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801a768:	6818      	ldr	r0, [r3, #0]
 801a76a:	6803      	ldr	r3, [r0, #0]
 801a76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a76e:	4798      	blx	r3
 801a770:	b05b      	add	sp, #364	; 0x16c
 801a772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a776:	bf00      	nop
 801a778:	200153a0 	.word	0x200153a0

0801a77c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801a77c:	b570      	push	{r4, r5, r6, lr}
 801a77e:	4604      	mov	r4, r0
 801a780:	2500      	movs	r5, #0
 801a782:	9804      	ldr	r0, [sp, #16]
 801a784:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801a788:	8025      	strh	r5, [r4, #0]
 801a78a:	6061      	str	r1, [r4, #4]
 801a78c:	7223      	strb	r3, [r4, #8]
 801a78e:	7266      	strb	r6, [r4, #9]
 801a790:	60e0      	str	r0, [r4, #12]
 801a792:	8222      	strh	r2, [r4, #16]
 801a794:	8265      	strh	r5, [r4, #18]
 801a796:	82a5      	strh	r5, [r4, #20]
 801a798:	82e5      	strh	r5, [r4, #22]
 801a79a:	8325      	strh	r5, [r4, #24]
 801a79c:	8365      	strh	r5, [r4, #26]
 801a79e:	83a5      	strh	r5, [r4, #28]
 801a7a0:	77a5      	strb	r5, [r4, #30]
 801a7a2:	b32e      	cbz	r6, 801a7f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a7a4:	6803      	ldr	r3, [r0, #0]
 801a7a6:	695b      	ldr	r3, [r3, #20]
 801a7a8:	4798      	blx	r3
 801a7aa:	4606      	mov	r6, r0
 801a7ac:	b300      	cbz	r0, 801a7f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a7ae:	68e0      	ldr	r0, [r4, #12]
 801a7b0:	4631      	mov	r1, r6
 801a7b2:	6803      	ldr	r3, [r0, #0]
 801a7b4:	68db      	ldr	r3, [r3, #12]
 801a7b6:	4798      	blx	r3
 801a7b8:	4605      	mov	r5, r0
 801a7ba:	b1c8      	cbz	r0, 801a7f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a7bc:	7b43      	ldrb	r3, [r0, #13]
 801a7be:	7a82      	ldrb	r2, [r0, #10]
 801a7c0:	005b      	lsls	r3, r3, #1
 801a7c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a7c6:	4313      	orrs	r3, r2
 801a7c8:	83a3      	strh	r3, [r4, #28]
 801a7ca:	7a63      	ldrb	r3, [r4, #9]
 801a7cc:	2b04      	cmp	r3, #4
 801a7ce:	d10f      	bne.n	801a7f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a7d0:	68e0      	ldr	r0, [r4, #12]
 801a7d2:	462a      	mov	r2, r5
 801a7d4:	4631      	mov	r1, r6
 801a7d6:	6803      	ldr	r3, [r0, #0]
 801a7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a7da:	4798      	blx	r3
 801a7dc:	7b6b      	ldrb	r3, [r5, #13]
 801a7de:	005b      	lsls	r3, r3, #1
 801a7e0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a7e4:	7aab      	ldrb	r3, [r5, #10]
 801a7e6:	4313      	orrs	r3, r2
 801a7e8:	4418      	add	r0, r3
 801a7ea:	8ba3      	ldrh	r3, [r4, #28]
 801a7ec:	4418      	add	r0, r3
 801a7ee:	83a0      	strh	r0, [r4, #28]
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	bd70      	pop	{r4, r5, r6, pc}

0801a7f4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7f8:	2400      	movs	r4, #0
 801a7fa:	b085      	sub	sp, #20
 801a7fc:	4681      	mov	r9, r0
 801a7fe:	4688      	mov	r8, r1
 801a800:	4692      	mov	sl, r2
 801a802:	469b      	mov	fp, r3
 801a804:	4627      	mov	r7, r4
 801a806:	4625      	mov	r5, r4
 801a808:	4626      	mov	r6, r4
 801a80a:	4554      	cmp	r4, sl
 801a80c:	da2a      	bge.n	801a864 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a80e:	2300      	movs	r3, #0
 801a810:	9303      	str	r3, [sp, #12]
 801a812:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a816:	429d      	cmp	r5, r3
 801a818:	d004      	beq.n	801a824 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a81a:	f242 030b 	movw	r3, #8203	; 0x200b
 801a81e:	429d      	cmp	r5, r3
 801a820:	bf18      	it	ne
 801a822:	462f      	movne	r7, r5
 801a824:	ab03      	add	r3, sp, #12
 801a826:	4642      	mov	r2, r8
 801a828:	4659      	mov	r1, fp
 801a82a:	4648      	mov	r0, r9
 801a82c:	f002 ffaa 	bl	801d784 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a830:	4605      	mov	r5, r0
 801a832:	b1b8      	cbz	r0, 801a864 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a834:	280a      	cmp	r0, #10
 801a836:	d015      	beq.n	801a864 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a838:	9a03      	ldr	r2, [sp, #12]
 801a83a:	b18a      	cbz	r2, 801a860 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a83c:	7b50      	ldrb	r0, [r2, #13]
 801a83e:	4639      	mov	r1, r7
 801a840:	7a93      	ldrb	r3, [r2, #10]
 801a842:	0040      	lsls	r0, r0, #1
 801a844:	8895      	ldrh	r5, [r2, #4]
 801a846:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a84a:	4303      	orrs	r3, r0
 801a84c:	4640      	mov	r0, r8
 801a84e:	9301      	str	r3, [sp, #4]
 801a850:	f8d8 3000 	ldr.w	r3, [r8]
 801a854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a856:	4798      	blx	r3
 801a858:	9b01      	ldr	r3, [sp, #4]
 801a85a:	4418      	add	r0, r3
 801a85c:	4406      	add	r6, r0
 801a85e:	b2b6      	uxth	r6, r6
 801a860:	3401      	adds	r4, #1
 801a862:	e7d2      	b.n	801a80a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a864:	4630      	mov	r0, r6
 801a866:	b005      	add	sp, #20
 801a868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a86c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a86c:	2a02      	cmp	r2, #2
 801a86e:	b530      	push	{r4, r5, lr}
 801a870:	d011      	beq.n	801a896 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a872:	2a03      	cmp	r2, #3
 801a874:	d01c      	beq.n	801a8b0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a876:	2a01      	cmp	r2, #1
 801a878:	d10c      	bne.n	801a894 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a87a:	888b      	ldrh	r3, [r1, #4]
 801a87c:	8801      	ldrh	r1, [r0, #0]
 801a87e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a882:	1a5b      	subs	r3, r3, r1
 801a884:	8844      	ldrh	r4, [r0, #2]
 801a886:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a88a:	1a9b      	subs	r3, r3, r2
 801a88c:	8004      	strh	r4, [r0, #0]
 801a88e:	8081      	strh	r1, [r0, #4]
 801a890:	8043      	strh	r3, [r0, #2]
 801a892:	80c2      	strh	r2, [r0, #6]
 801a894:	bd30      	pop	{r4, r5, pc}
 801a896:	88cb      	ldrh	r3, [r1, #6]
 801a898:	8842      	ldrh	r2, [r0, #2]
 801a89a:	1a9b      	subs	r3, r3, r2
 801a89c:	88c2      	ldrh	r2, [r0, #6]
 801a89e:	1a9b      	subs	r3, r3, r2
 801a8a0:	888a      	ldrh	r2, [r1, #4]
 801a8a2:	8801      	ldrh	r1, [r0, #0]
 801a8a4:	8043      	strh	r3, [r0, #2]
 801a8a6:	1a52      	subs	r2, r2, r1
 801a8a8:	8881      	ldrh	r1, [r0, #4]
 801a8aa:	1a52      	subs	r2, r2, r1
 801a8ac:	8002      	strh	r2, [r0, #0]
 801a8ae:	e7f1      	b.n	801a894 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a8b0:	88cb      	ldrh	r3, [r1, #6]
 801a8b2:	8841      	ldrh	r1, [r0, #2]
 801a8b4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a8b8:	1a5b      	subs	r3, r3, r1
 801a8ba:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a8be:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a8c2:	1a9b      	subs	r3, r3, r2
 801a8c4:	8045      	strh	r5, [r0, #2]
 801a8c6:	8082      	strh	r2, [r0, #4]
 801a8c8:	8003      	strh	r3, [r0, #0]
 801a8ca:	80c4      	strh	r4, [r0, #6]
 801a8cc:	e7e2      	b.n	801a894 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a8ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8d2:	b09f      	sub	sp, #124	; 0x7c
 801a8d4:	9116      	str	r1, [sp, #88]	; 0x58
 801a8d6:	9317      	str	r3, [sp, #92]	; 0x5c
 801a8d8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a8da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a8dc:	8809      	ldrh	r1, [r1, #0]
 801a8de:	889b      	ldrh	r3, [r3, #4]
 801a8e0:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801a8e4:	440b      	add	r3, r1
 801a8e6:	9212      	str	r2, [sp, #72]	; 0x48
 801a8e8:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801a8ec:	b21b      	sxth	r3, r3
 801a8ee:	9011      	str	r0, [sp, #68]	; 0x44
 801a8f0:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801a8f4:	9310      	str	r3, [sp, #64]	; 0x40
 801a8f6:	f8d8 3000 	ldr.w	r3, [r8]
 801a8fa:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 801a8fe:	7a59      	ldrb	r1, [r3, #9]
 801a900:	7a1b      	ldrb	r3, [r3, #8]
 801a902:	9114      	str	r1, [sp, #80]	; 0x50
 801a904:	9315      	str	r3, [sp, #84]	; 0x54
 801a906:	2a00      	cmp	r2, #0
 801a908:	d067      	beq.n	801a9da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10c>
 801a90a:	f898 3010 	ldrb.w	r3, [r8, #16]
 801a90e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a910:	2b04      	cmp	r3, #4
 801a912:	bf14      	ite	ne
 801a914:	2301      	movne	r3, #1
 801a916:	2302      	moveq	r3, #2
 801a918:	4413      	add	r3, r2
 801a91a:	f04f 0900 	mov.w	r9, #0
 801a91e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a920:	464c      	mov	r4, r9
 801a922:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801a926:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801a92a:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801a92e:	4293      	cmp	r3, r2
 801a930:	f280 808c 	bge.w	801aa4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 801a934:	2300      	movs	r3, #0
 801a936:	931c      	str	r3, [sp, #112]	; 0x70
 801a938:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a93c:	429c      	cmp	r4, r3
 801a93e:	d006      	beq.n	801a94e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x80>
 801a940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a942:	f242 020b 	movw	r2, #8203	; 0x200b
 801a946:	4294      	cmp	r4, r2
 801a948:	bf18      	it	ne
 801a94a:	4623      	movne	r3, r4
 801a94c:	930d      	str	r3, [sp, #52]	; 0x34
 801a94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a950:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801a952:	f8d8 2000 	ldr.w	r2, [r8]
 801a956:	428b      	cmp	r3, r1
 801a958:	db41      	blt.n	801a9de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x110>
 801a95a:	6813      	ldr	r3, [r2, #0]
 801a95c:	4610      	mov	r0, r2
 801a95e:	695b      	ldr	r3, [r3, #20]
 801a960:	4798      	blx	r3
 801a962:	4604      	mov	r4, r0
 801a964:	f8d8 0000 	ldr.w	r0, [r8]
 801a968:	aa1d      	add	r2, sp, #116	; 0x74
 801a96a:	4621      	mov	r1, r4
 801a96c:	6803      	ldr	r3, [r0, #0]
 801a96e:	689e      	ldr	r6, [r3, #8]
 801a970:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a974:	47b0      	blx	r6
 801a976:	901c      	str	r0, [sp, #112]	; 0x70
 801a978:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a97c:	429c      	cmp	r4, r3
 801a97e:	f000 80ea 	beq.w	801ab56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801a982:	f242 030b 	movw	r3, #8203	; 0x200b
 801a986:	429c      	cmp	r4, r3
 801a988:	f000 80e5 	beq.w	801ab56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801a98c:	2c00      	cmp	r4, #0
 801a98e:	f000 80f7 	beq.w	801ab80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801a992:	2c0a      	cmp	r4, #10
 801a994:	d060      	beq.n	801aa58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18a>
 801a996:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a998:	b36a      	cbz	r2, 801a9f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x128>
 801a99a:	8894      	ldrh	r4, [r2, #4]
 801a99c:	f1bb 0f00 	cmp.w	fp, #0
 801a9a0:	d03b      	beq.n	801aa1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14c>
 801a9a2:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a9a6:	f1bb 0f01 	cmp.w	fp, #1
 801a9aa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a9ae:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801a9b2:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a9b6:	ea49 0903 	orr.w	r9, r9, r3
 801a9ba:	d134      	bne.n	801aa26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x158>
 801a9bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a9be:	eba5 0509 	sub.w	r5, r5, r9
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d14f      	bne.n	801aa66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x198>
 801a9c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a9c8:	eb09 0305 	add.w	r3, r9, r5
 801a9cc:	4413      	add	r3, r2
 801a9ce:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a9d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a9d4:	4293      	cmp	r3, r2
 801a9d6:	da51      	bge.n	801aa7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801a9d8:	e038      	b.n	801aa4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 801a9da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a9dc:	e79d      	b.n	801a91a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801a9de:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a9e2:	4659      	mov	r1, fp
 801a9e4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a9e6:	9301      	str	r3, [sp, #4]
 801a9e8:	ab1d      	add	r3, sp, #116	; 0x74
 801a9ea:	9300      	str	r3, [sp, #0]
 801a9ec:	ab1c      	add	r3, sp, #112	; 0x70
 801a9ee:	f002 ff21 	bl	801d834 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a9f2:	4604      	mov	r4, r0
 801a9f4:	e7c0      	b.n	801a978 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xaa>
 801a9f6:	f8d8 0000 	ldr.w	r0, [r8]
 801a9fa:	6803      	ldr	r3, [r0, #0]
 801a9fc:	691b      	ldr	r3, [r3, #16]
 801a9fe:	4798      	blx	r3
 801aa00:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801aa04:	4298      	cmp	r0, r3
 801aa06:	f000 80a6 	beq.w	801ab56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801aa0a:	f242 030b 	movw	r3, #8203	; 0x200b
 801aa0e:	4298      	cmp	r0, r3
 801aa10:	f000 80a1 	beq.w	801ab56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801aa14:	f1bb 0f00 	cmp.w	fp, #0
 801aa18:	d100      	bne.n	801aa1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801aa1a:	444d      	add	r5, r9
 801aa1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801aa1e:	2a00      	cmp	r2, #0
 801aa20:	d1bf      	bne.n	801a9a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd4>
 801aa22:	4691      	mov	r9, r2
 801aa24:	e097      	b.n	801ab56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801aa26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	f000 80ab 	beq.w	801ab84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801aa2e:	f1bb 0f00 	cmp.w	fp, #0
 801aa32:	d118      	bne.n	801aa66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x198>
 801aa34:	f8d8 0000 	ldr.w	r0, [r8]
 801aa38:	990d      	ldr	r1, [sp, #52]	; 0x34
 801aa3a:	6803      	ldr	r3, [r0, #0]
 801aa3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa3e:	4798      	blx	r3
 801aa40:	4405      	add	r5, r0
 801aa42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aa46:	1aeb      	subs	r3, r5, r3
 801aa48:	4293      	cmp	r3, r2
 801aa4a:	dd17      	ble.n	801aa7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801aa4c:	2c00      	cmp	r4, #0
 801aa4e:	f000 8097 	beq.w	801ab80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801aa52:	2c0a      	cmp	r4, #10
 801aa54:	f040 8085 	bne.w	801ab62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 801aa58:	240a      	movs	r4, #10
 801aa5a:	fab4 f084 	clz	r0, r4
 801aa5e:	0940      	lsrs	r0, r0, #5
 801aa60:	b01f      	add	sp, #124	; 0x7c
 801aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa66:	f8d8 0000 	ldr.w	r0, [r8]
 801aa6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801aa6c:	6803      	ldr	r3, [r0, #0]
 801aa6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa70:	4798      	blx	r3
 801aa72:	f1bb 0f01 	cmp.w	fp, #1
 801aa76:	eba5 0500 	sub.w	r5, r5, r0
 801aa7a:	d0a4      	beq.n	801a9c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf8>
 801aa7c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801aa7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801aa80:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801aa84:	f9b3 6000 	ldrsh.w	r6, [r3]
 801aa88:	7b43      	ldrb	r3, [r0, #13]
 801aa8a:	4429      	add	r1, r5
 801aa8c:	015b      	lsls	r3, r3, #5
 801aa8e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aa92:	7983      	ldrb	r3, [r0, #6]
 801aa94:	4313      	orrs	r3, r2
 801aa96:	440b      	add	r3, r1
 801aa98:	42b3      	cmp	r3, r6
 801aa9a:	db5c      	blt.n	801ab56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801aa9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa9e:	4299      	cmp	r1, r3
 801aaa0:	da59      	bge.n	801ab56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801aaa2:	f8d8 0000 	ldr.w	r0, [r8]
 801aaa6:	42ae      	cmp	r6, r5
 801aaa8:	6803      	ldr	r3, [r0, #0]
 801aaaa:	bfcc      	ite	gt
 801aaac:	1b76      	subgt	r6, r6, r5
 801aaae:	2600      	movle	r6, #0
 801aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aab2:	bfc8      	it	gt
 801aab4:	b2b6      	uxthgt	r6, r6
 801aab6:	4798      	blx	r3
 801aab8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801aaba:	7b5a      	ldrb	r2, [r3, #13]
 801aabc:	00d1      	lsls	r1, r2, #3
 801aabe:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801aac2:	7a19      	ldrb	r1, [r3, #8]
 801aac4:	4339      	orrs	r1, r7
 801aac6:	0657      	lsls	r7, r2, #25
 801aac8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801aaca:	bf48      	it	mi
 801aacc:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801aad0:	4407      	add	r7, r0
 801aad2:	bf48      	it	mi
 801aad4:	b209      	sxthmi	r1, r1
 801aad6:	1a7f      	subs	r7, r7, r1
 801aad8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801aada:	b2bf      	uxth	r7, r7
 801aadc:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801aae0:	fa0f fa87 	sxth.w	sl, r7
 801aae4:	4551      	cmp	r1, sl
 801aae6:	dd3a      	ble.n	801ab5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801aae8:	0112      	lsls	r2, r2, #4
 801aaea:	79d8      	ldrb	r0, [r3, #7]
 801aaec:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801aaf0:	4302      	orrs	r2, r0
 801aaf2:	4492      	add	sl, r2
 801aaf4:	4551      	cmp	r1, sl
 801aaf6:	dc2e      	bgt.n	801ab56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801aaf8:	1bcf      	subs	r7, r1, r7
 801aafa:	468a      	mov	sl, r1
 801aafc:	b2bf      	uxth	r7, r7
 801aafe:	9319      	str	r3, [sp, #100]	; 0x64
 801ab00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ab02:	f8d8 0000 	ldr.w	r0, [r8]
 801ab06:	681a      	ldr	r2, [r3, #0]
 801ab08:	6801      	ldr	r1, [r0, #0]
 801ab0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801ab0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ab0e:	9313      	str	r3, [sp, #76]	; 0x4c
 801ab10:	9218      	str	r2, [sp, #96]	; 0x60
 801ab12:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801ab14:	4788      	blx	r1
 801ab16:	f898 1006 	ldrb.w	r1, [r8, #6]
 801ab1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ab1c:	910b      	str	r1, [sp, #44]	; 0x2c
 801ab1e:	f898 100e 	ldrb.w	r1, [r8, #14]
 801ab22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ab24:	910a      	str	r1, [sp, #40]	; 0x28
 801ab26:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801ab2a:	9109      	str	r1, [sp, #36]	; 0x24
 801ab2c:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801ab30:	9305      	str	r3, [sp, #20]
 801ab32:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ab34:	9206      	str	r2, [sp, #24]
 801ab36:	e9cd a601 	strd	sl, r6, [sp, #4]
 801ab3a:	442e      	add	r6, r5
 801ab3c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801ab40:	b236      	sxth	r6, r6
 801ab42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ab44:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801ab48:	9600      	str	r6, [sp, #0]
 801ab4a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ab4c:	681a      	ldr	r2, [r3, #0]
 801ab4e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ab50:	685b      	ldr	r3, [r3, #4]
 801ab52:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ab54:	47b0      	blx	r6
 801ab56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab58:	3301      	adds	r3, #1
 801ab5a:	930e      	str	r3, [sp, #56]	; 0x38
 801ab5c:	e6e5      	b.n	801a92a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801ab5e:	2700      	movs	r7, #0
 801ab60:	e7cd      	b.n	801aafe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 801ab62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ab64:	3501      	adds	r5, #1
 801ab66:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ab68:	429d      	cmp	r5, r3
 801ab6a:	f6bf af76 	bge.w	801aa5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801ab6e:	4659      	mov	r1, fp
 801ab70:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801ab72:	f7e9 fc09 	bl	8004388 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ab76:	4604      	mov	r4, r0
 801ab78:	b110      	cbz	r0, 801ab80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801ab7a:	280a      	cmp	r0, #10
 801ab7c:	d1f2      	bne.n	801ab64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801ab7e:	e76b      	b.n	801aa58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18a>
 801ab80:	2400      	movs	r4, #0
 801ab82:	e76a      	b.n	801aa5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801ab84:	f1bb 0f00 	cmp.w	fp, #0
 801ab88:	f43f af5b 	beq.w	801aa42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 801ab8c:	e776      	b.n	801aa7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801ab8e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801ab8e:	b530      	push	{r4, r5, lr}
 801ab90:	8a44      	ldrh	r4, [r0, #18]
 801ab92:	8ac5      	ldrh	r5, [r0, #22]
 801ab94:	82c3      	strh	r3, [r0, #22]
 801ab96:	442c      	add	r4, r5
 801ab98:	1ae4      	subs	r4, r4, r3
 801ab9a:	8b03      	ldrh	r3, [r0, #24]
 801ab9c:	8244      	strh	r4, [r0, #18]
 801ab9e:	8a84      	ldrh	r4, [r0, #20]
 801aba0:	4422      	add	r2, r4
 801aba2:	440c      	add	r4, r1
 801aba4:	1a59      	subs	r1, r3, r1
 801aba6:	8342      	strh	r2, [r0, #26]
 801aba8:	8284      	strh	r4, [r0, #20]
 801abaa:	8301      	strh	r1, [r0, #24]
 801abac:	bd30      	pop	{r4, r5, pc}

0801abae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801abae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abb2:	7a43      	ldrb	r3, [r0, #9]
 801abb4:	b087      	sub	sp, #28
 801abb6:	4604      	mov	r4, r0
 801abb8:	460f      	mov	r7, r1
 801abba:	1eda      	subs	r2, r3, #3
 801abbc:	b2d2      	uxtb	r2, r2
 801abbe:	2900      	cmp	r1, #0
 801abc0:	d036      	beq.n	801ac30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801abc2:	2a01      	cmp	r2, #1
 801abc4:	d932      	bls.n	801ac2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801abc6:	1e58      	subs	r0, r3, #1
 801abc8:	f1d0 0b00 	rsbs	fp, r0, #0
 801abcc:	eb4b 0b00 	adc.w	fp, fp, r0
 801abd0:	1e99      	subs	r1, r3, #2
 801abd2:	424b      	negs	r3, r1
 801abd4:	414b      	adcs	r3, r1
 801abd6:	9303      	str	r3, [sp, #12]
 801abd8:	2300      	movs	r3, #0
 801abda:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801abde:	2500      	movs	r5, #0
 801abe0:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801abe4:	46a9      	mov	r9, r5
 801abe6:	8265      	strh	r5, [r4, #18]
 801abe8:	82a5      	strh	r5, [r4, #20]
 801abea:	2300      	movs	r3, #0
 801abec:	9305      	str	r3, [sp, #20]
 801abee:	8823      	ldrh	r3, [r4, #0]
 801abf0:	2b20      	cmp	r3, #32
 801abf2:	d02b      	beq.n	801ac4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801abf4:	eba3 020a 	sub.w	r2, r3, sl
 801abf8:	4256      	negs	r6, r2
 801abfa:	4156      	adcs	r6, r2
 801abfc:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801ac00:	4293      	cmp	r3, r2
 801ac02:	d004      	beq.n	801ac0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801ac04:	4553      	cmp	r3, sl
 801ac06:	bf16      	itet	ne
 801ac08:	4699      	movne	r9, r3
 801ac0a:	2601      	moveq	r6, #1
 801ac0c:	2600      	movne	r6, #0
 801ac0e:	ab05      	add	r3, sp, #20
 801ac10:	68e2      	ldr	r2, [r4, #12]
 801ac12:	7a21      	ldrb	r1, [r4, #8]
 801ac14:	6860      	ldr	r0, [r4, #4]
 801ac16:	f002 fdb5 	bl	801d784 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ac1a:	8020      	strh	r0, [r4, #0]
 801ac1c:	b9c8      	cbnz	r0, 801ac52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801ac1e:	8b22      	ldrh	r2, [r4, #24]
 801ac20:	2300      	movs	r3, #0
 801ac22:	4611      	mov	r1, r2
 801ac24:	4620      	mov	r0, r4
 801ac26:	f7ff ffb2 	bl	801ab8e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801ac2a:	e066      	b.n	801acfa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801ac2c:	468b      	mov	fp, r1
 801ac2e:	e7cf      	b.n	801abd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801ac30:	3b01      	subs	r3, #1
 801ac32:	2a01      	cmp	r2, #1
 801ac34:	9103      	str	r1, [sp, #12]
 801ac36:	468b      	mov	fp, r1
 801ac38:	bf8c      	ite	hi
 801ac3a:	2200      	movhi	r2, #0
 801ac3c:	2201      	movls	r2, #1
 801ac3e:	2b01      	cmp	r3, #1
 801ac40:	9202      	str	r2, [sp, #8]
 801ac42:	bf8c      	ite	hi
 801ac44:	2300      	movhi	r3, #0
 801ac46:	2301      	movls	r3, #1
 801ac48:	9301      	str	r3, [sp, #4]
 801ac4a:	e7c8      	b.n	801abde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801ac4c:	4699      	mov	r9, r3
 801ac4e:	2601      	movs	r6, #1
 801ac50:	e7dd      	b.n	801ac0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801ac52:	8ae3      	ldrh	r3, [r4, #22]
 801ac54:	280a      	cmp	r0, #10
 801ac56:	f103 0301 	add.w	r3, r3, #1
 801ac5a:	82e3      	strh	r3, [r4, #22]
 801ac5c:	d0df      	beq.n	801ac1e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801ac5e:	9a05      	ldr	r2, [sp, #20]
 801ac60:	bb42      	cbnz	r2, 801acb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801ac62:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ac66:	4298      	cmp	r0, r3
 801ac68:	d001      	beq.n	801ac6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801ac6a:	4550      	cmp	r0, sl
 801ac6c:	d1bd      	bne.n	801abea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ac6e:	8823      	ldrh	r3, [r4, #0]
 801ac70:	8b21      	ldrh	r1, [r4, #24]
 801ac72:	2b20      	cmp	r3, #32
 801ac74:	d001      	beq.n	801ac7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801ac76:	4553      	cmp	r3, sl
 801ac78:	d131      	bne.n	801acde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801ac7a:	2e00      	cmp	r6, #0
 801ac7c:	bf0a      	itet	eq
 801ac7e:	460d      	moveq	r5, r1
 801ac80:	4630      	movne	r0, r6
 801ac82:	2001      	moveq	r0, #1
 801ac84:	440a      	add	r2, r1
 801ac86:	8aa3      	ldrh	r3, [r4, #20]
 801ac88:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801ac8c:	b292      	uxth	r2, r2
 801ac8e:	8322      	strh	r2, [r4, #24]
 801ac90:	4413      	add	r3, r2
 801ac92:	2f00      	cmp	r7, #0
 801ac94:	d03a      	beq.n	801ad0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801ac96:	f1bb 0f00 	cmp.w	fp, #0
 801ac9a:	d102      	bne.n	801aca2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801ac9c:	9903      	ldr	r1, [sp, #12]
 801ac9e:	b301      	cbz	r1, 801ace2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801aca0:	b1f8      	cbz	r0, 801ace2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801aca2:	8ba1      	ldrh	r1, [r4, #28]
 801aca4:	4419      	add	r1, r3
 801aca6:	458c      	cmp	ip, r1
 801aca8:	da2a      	bge.n	801ad00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801acaa:	8a61      	ldrh	r1, [r4, #18]
 801acac:	b341      	cbz	r1, 801ad00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801acae:	4563      	cmp	r3, ip
 801acb0:	dd9b      	ble.n	801abea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801acb2:	e01c      	b.n	801acee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801acb4:	8893      	ldrh	r3, [r2, #4]
 801acb6:	4649      	mov	r1, r9
 801acb8:	8023      	strh	r3, [r4, #0]
 801acba:	f892 800d 	ldrb.w	r8, [r2, #13]
 801acbe:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801acc2:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801acc6:	f892 800a 	ldrb.w	r8, [r2, #10]
 801acca:	ea48 0800 	orr.w	r8, r8, r0
 801acce:	68e0      	ldr	r0, [r4, #12]
 801acd0:	6803      	ldr	r3, [r0, #0]
 801acd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801acd4:	4798      	blx	r3
 801acd6:	eb08 0200 	add.w	r2, r8, r0
 801acda:	b292      	uxth	r2, r2
 801acdc:	e7c7      	b.n	801ac6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801acde:	2000      	movs	r0, #0
 801ace0:	e7d0      	b.n	801ac84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801ace2:	4563      	cmp	r3, ip
 801ace4:	dd81      	ble.n	801abea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ace6:	8a63      	ldrh	r3, [r4, #18]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	f43f af7e 	beq.w	801abea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801acee:	2301      	movs	r3, #1
 801acf0:	8ba2      	ldrh	r2, [r4, #28]
 801acf2:	77a3      	strb	r3, [r4, #30]
 801acf4:	8b63      	ldrh	r3, [r4, #26]
 801acf6:	4413      	add	r3, r2
 801acf8:	8363      	strh	r3, [r4, #26]
 801acfa:	b007      	add	sp, #28
 801acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad00:	2300      	movs	r3, #0
 801ad02:	4611      	mov	r1, r2
 801ad04:	4620      	mov	r0, r4
 801ad06:	f7ff ff42 	bl	801ab8e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801ad0a:	e76e      	b.n	801abea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ad0c:	4563      	cmp	r3, ip
 801ad0e:	dd14      	ble.n	801ad3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801ad10:	9b02      	ldr	r3, [sp, #8]
 801ad12:	b113      	cbz	r3, 801ad1a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801ad14:	2301      	movs	r3, #1
 801ad16:	460a      	mov	r2, r1
 801ad18:	e783      	b.n	801ac22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801ad1a:	9b01      	ldr	r3, [sp, #4]
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	f43f af64 	beq.w	801abea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ad22:	2800      	cmp	r0, #0
 801ad24:	f47f af61 	bne.w	801abea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ad28:	b116      	cbz	r6, 801ad30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801ad2a:	2301      	movs	r3, #1
 801ad2c:	462a      	mov	r2, r5
 801ad2e:	e779      	b.n	801ac24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801ad30:	8a63      	ldrh	r3, [r4, #18]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	f43f af59 	beq.w	801abea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ad38:	e7df      	b.n	801acfa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801ad3a:	2800      	cmp	r0, #0
 801ad3c:	f47f af55 	bne.w	801abea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ad40:	2e00      	cmp	r6, #0
 801ad42:	f43f af52 	beq.w	801abea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ad46:	2301      	movs	r3, #1
 801ad48:	462a      	mov	r2, r5
 801ad4a:	e7db      	b.n	801ad04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801ad4c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801ad4c:	b530      	push	{r4, r5, lr}
 801ad4e:	4605      	mov	r5, r0
 801ad50:	b08b      	sub	sp, #44	; 0x2c
 801ad52:	b191      	cbz	r1, 801ad7a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801ad54:	2401      	movs	r4, #1
 801ad56:	e9cd 3100 	strd	r3, r1, [sp]
 801ad5a:	4613      	mov	r3, r2
 801ad5c:	4601      	mov	r1, r0
 801ad5e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801ad62:	a802      	add	r0, sp, #8
 801ad64:	f7ff fd0a 	bl	801a77c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801ad68:	2100      	movs	r1, #0
 801ad6a:	a802      	add	r0, sp, #8
 801ad6c:	f7ff ff1f 	bl	801abae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ad70:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ad74:	b163      	cbz	r3, 801ad90 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801ad76:	3401      	adds	r4, #1
 801ad78:	e7f6      	b.n	801ad68 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801ad7a:	2401      	movs	r4, #1
 801ad7c:	f002 fdfc 	bl	801d978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ad80:	280a      	cmp	r0, #10
 801ad82:	4628      	mov	r0, r5
 801ad84:	bf08      	it	eq
 801ad86:	3401      	addeq	r4, #1
 801ad88:	f002 fdf6 	bl	801d978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ad8c:	2800      	cmp	r0, #0
 801ad8e:	d1f7      	bne.n	801ad80 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801ad90:	b2a0      	uxth	r0, r4
 801ad92:	b00b      	add	sp, #44	; 0x2c
 801ad94:	bd30      	pop	{r4, r5, pc}

0801ad96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801ad96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad9a:	b0e5      	sub	sp, #404	; 0x194
 801ad9c:	4689      	mov	r9, r1
 801ad9e:	461c      	mov	r4, r3
 801ada0:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801ada4:	900a      	str	r0, [sp, #40]	; 0x28
 801ada6:	f1ba 0f00 	cmp.w	sl, #0
 801adaa:	f000 80b4 	beq.w	801af16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	f000 80b0 	beq.w	801af16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801adb6:	7ba3      	ldrb	r3, [r4, #14]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	f000 80ac 	beq.w	801af16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801adbe:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801adc2:	6810      	ldr	r0, [r2, #0]
 801adc4:	6851      	ldr	r1, [r2, #4]
 801adc6:	2500      	movs	r5, #0
 801adc8:	4643      	mov	r3, r8
 801adca:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801adce:	950f      	str	r5, [sp, #60]	; 0x3c
 801add0:	af19      	add	r7, sp, #100	; 0x64
 801add2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801add6:	79a2      	ldrb	r2, [r4, #6]
 801add8:	c303      	stmia	r3!, {r0, r1}
 801adda:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801adde:	a90f      	add	r1, sp, #60	; 0x3c
 801ade0:	4640      	mov	r0, r8
 801ade2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ade6:	f7ff fd41 	bl	801a86c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801adea:	a90f      	add	r1, sp, #60	; 0x3c
 801adec:	79a2      	ldrb	r2, [r4, #6]
 801adee:	4608      	mov	r0, r1
 801adf0:	f7ff fd3c 	bl	801a86c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801adf4:	4638      	mov	r0, r7
 801adf6:	f002 f948 	bl	801d08a <_ZN8touchgfx12TextProviderC1Ev>
 801adfa:	6820      	ldr	r0, [r4, #0]
 801adfc:	6803      	ldr	r3, [r0, #0]
 801adfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae00:	4798      	blx	r3
 801ae02:	4606      	mov	r6, r0
 801ae04:	6820      	ldr	r0, [r4, #0]
 801ae06:	6803      	ldr	r3, [r0, #0]
 801ae08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ae0a:	4798      	blx	r3
 801ae0c:	4633      	mov	r3, r6
 801ae0e:	9000      	str	r0, [sp, #0]
 801ae10:	4651      	mov	r1, sl
 801ae12:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801ae14:	4638      	mov	r0, r7
 801ae16:	f002 f9a3 	bl	801d160 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ae1a:	7923      	ldrb	r3, [r4, #4]
 801ae1c:	6820      	ldr	r0, [r4, #0]
 801ae1e:	9308      	str	r3, [sp, #32]
 801ae20:	6803      	ldr	r3, [r0, #0]
 801ae22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae24:	4798      	blx	r3
 801ae26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae2a:	181e      	adds	r6, r3, r0
 801ae2c:	42ae      	cmp	r6, r5
 801ae2e:	dd06      	ble.n	801ae3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801ae30:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801ae34:	4282      	cmp	r2, r0
 801ae36:	bfa4      	itt	ge
 801ae38:	189d      	addge	r5, r3, r2
 801ae3a:	fb95 f5f6 	sdivge	r5, r5, r6
 801ae3e:	a832      	add	r0, sp, #200	; 0xc8
 801ae40:	f002 f923 	bl	801d08a <_ZN8touchgfx12TextProviderC1Ev>
 801ae44:	7c23      	ldrb	r3, [r4, #16]
 801ae46:	b17b      	cbz	r3, 801ae68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801ae48:	6820      	ldr	r0, [r4, #0]
 801ae4a:	6803      	ldr	r3, [r0, #0]
 801ae4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae4e:	4798      	blx	r3
 801ae50:	4683      	mov	fp, r0
 801ae52:	6820      	ldr	r0, [r4, #0]
 801ae54:	6803      	ldr	r3, [r0, #0]
 801ae56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ae58:	4798      	blx	r3
 801ae5a:	465b      	mov	r3, fp
 801ae5c:	9000      	str	r0, [sp, #0]
 801ae5e:	4651      	mov	r1, sl
 801ae60:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801ae62:	a832      	add	r0, sp, #200	; 0xc8
 801ae64:	f002 f97c 	bl	801d160 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ae68:	7be1      	ldrb	r1, [r4, #15]
 801ae6a:	a811      	add	r0, sp, #68	; 0x44
 801ae6c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801ae70:	7963      	ldrb	r3, [r4, #5]
 801ae72:	1a52      	subs	r2, r2, r1
 801ae74:	7c21      	ldrb	r1, [r4, #16]
 801ae76:	9101      	str	r1, [sp, #4]
 801ae78:	b292      	uxth	r2, r2
 801ae7a:	6821      	ldr	r1, [r4, #0]
 801ae7c:	9100      	str	r1, [sp, #0]
 801ae7e:	a932      	add	r1, sp, #200	; 0xc8
 801ae80:	f7ff fc7c 	bl	801a77c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801ae84:	7c23      	ldrb	r3, [r4, #16]
 801ae86:	b9bb      	cbnz	r3, 801aeb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801ae88:	fa1f fa86 	uxth.w	sl, r6
 801ae8c:	2d00      	cmp	r5, #0
 801ae8e:	dd45      	ble.n	801af1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801ae90:	4638      	mov	r0, r7
 801ae92:	f002 fd71 	bl	801d978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ae96:	2800      	cmp	r0, #0
 801ae98:	d03d      	beq.n	801af16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ae9a:	280a      	cmp	r0, #10
 801ae9c:	d1f6      	bne.n	801ae8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801ae9e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801aea2:	3d01      	subs	r5, #1
 801aea4:	4453      	add	r3, sl
 801aea6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801aeaa:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801aeae:	eba3 030a 	sub.w	r3, r3, sl
 801aeb2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801aeb6:	e7e9      	b.n	801ae8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801aeb8:	0073      	lsls	r3, r6, #1
 801aeba:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801aebe:	fa1f fa86 	uxth.w	sl, r6
 801aec2:	9309      	str	r3, [sp, #36]	; 0x24
 801aec4:	2d00      	cmp	r5, #0
 801aec6:	dd29      	ble.n	801af1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801aec8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801aecc:	a811      	add	r0, sp, #68	; 0x44
 801aece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aed0:	428b      	cmp	r3, r1
 801aed2:	bfd4      	ite	le
 801aed4:	2100      	movle	r1, #0
 801aed6:	2101      	movgt	r1, #1
 801aed8:	f7ff fe69 	bl	801abae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801aedc:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801aee0:	3b01      	subs	r3, #1
 801aee2:	b29b      	uxth	r3, r3
 801aee4:	455b      	cmp	r3, fp
 801aee6:	930b      	str	r3, [sp, #44]	; 0x2c
 801aee8:	d005      	beq.n	801aef6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801aeea:	7961      	ldrb	r1, [r4, #5]
 801aeec:	4638      	mov	r0, r7
 801aeee:	f7e9 fa4b 	bl	8004388 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801aef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aef4:	e7f4      	b.n	801aee0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801aef6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801aefa:	3d01      	subs	r5, #1
 801aefc:	4453      	add	r3, sl
 801aefe:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801af02:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801af06:	eba3 030a 	sub.w	r3, r3, sl
 801af0a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801af0e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801af12:	2b00      	cmp	r3, #0
 801af14:	d1d6      	bne.n	801aec4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801af16:	b065      	add	sp, #404	; 0x194
 801af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af1c:	0075      	lsls	r5, r6, #1
 801af1e:	f04f 0a00 	mov.w	sl, #0
 801af22:	7c23      	ldrb	r3, [r4, #16]
 801af24:	2b00      	cmp	r3, #0
 801af26:	d066      	beq.n	801aff6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801af28:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801af2c:	a811      	add	r0, sp, #68	; 0x44
 801af2e:	428d      	cmp	r5, r1
 801af30:	bfd4      	ite	le
 801af32:	2100      	movle	r1, #0
 801af34:	2101      	movgt	r1, #1
 801af36:	f7ff fe3a 	bl	801abae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801af3a:	9b08      	ldr	r3, [sp, #32]
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	d055      	beq.n	801afec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801af40:	f894 b010 	ldrb.w	fp, [r4, #16]
 801af44:	2264      	movs	r2, #100	; 0x64
 801af46:	4639      	mov	r1, r7
 801af48:	a84b      	add	r0, sp, #300	; 0x12c
 801af4a:	f00f fc05 	bl	802a758 <memcpy>
 801af4e:	f1bb 0f00 	cmp.w	fp, #0
 801af52:	d058      	beq.n	801b006 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801af54:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801af58:	7922      	ldrb	r2, [r4, #4]
 801af5a:	2a01      	cmp	r2, #1
 801af5c:	d13c      	bne.n	801afd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801af5e:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801af62:	1ac0      	subs	r0, r0, r3
 801af64:	2302      	movs	r3, #2
 801af66:	fb90 f0f3 	sdiv	r0, r0, r3
 801af6a:	b200      	sxth	r0, r0
 801af6c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801af70:	4418      	add	r0, r3
 801af72:	7c23      	ldrb	r3, [r4, #16]
 801af74:	b200      	sxth	r0, r0
 801af76:	2b00      	cmp	r3, #0
 801af78:	d03a      	beq.n	801aff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801af7a:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801af7e:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801af82:	9000      	str	r0, [sp, #0]
 801af84:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801af88:	980a      	ldr	r0, [sp, #40]	; 0x28
 801af8a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801af8e:	e9cd a703 	strd	sl, r7, [sp, #12]
 801af92:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801af96:	464a      	mov	r2, r9
 801af98:	2100      	movs	r1, #0
 801af9a:	f7ff fc98 	bl	801a8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801af9e:	2800      	cmp	r0, #0
 801afa0:	d1b9      	bne.n	801af16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801afa2:	b2b2      	uxth	r2, r6
 801afa4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801afa8:	4611      	mov	r1, r2
 801afaa:	4413      	add	r3, r2
 801afac:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801afb0:	b21b      	sxth	r3, r3
 801afb2:	1a52      	subs	r2, r2, r1
 801afb4:	7c21      	ldrb	r1, [r4, #16]
 801afb6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801afba:	b212      	sxth	r2, r2
 801afbc:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801afc0:	b109      	cbz	r1, 801afc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801afc2:	42b2      	cmp	r2, r6
 801afc4:	dba7      	blt.n	801af16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801afc6:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801afca:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801afce:	440a      	add	r2, r1
 801afd0:	b212      	sxth	r2, r2
 801afd2:	4293      	cmp	r3, r2
 801afd4:	dda5      	ble.n	801af22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 801afd6:	e79e      	b.n	801af16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801afd8:	2a02      	cmp	r2, #2
 801afda:	d105      	bne.n	801afe8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801afdc:	7be2      	ldrb	r2, [r4, #15]
 801afde:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801afe2:	1a80      	subs	r0, r0, r2
 801afe4:	1ac0      	subs	r0, r0, r3
 801afe6:	e7c0      	b.n	801af6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801afe8:	2000      	movs	r0, #0
 801afea:	e7bf      	b.n	801af6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801afec:	7be0      	ldrb	r0, [r4, #15]
 801afee:	e7bd      	b.n	801af6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801aff0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801aff4:	e7c3      	b.n	801af7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801aff6:	9b08      	ldr	r3, [sp, #32]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d0f7      	beq.n	801afec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801affc:	2264      	movs	r2, #100	; 0x64
 801affe:	4639      	mov	r1, r7
 801b000:	a84b      	add	r0, sp, #300	; 0x12c
 801b002:	f00f fba9 	bl	802a758 <memcpy>
 801b006:	2300      	movs	r3, #0
 801b008:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b00c:	6821      	ldr	r1, [r4, #0]
 801b00e:	a84b      	add	r0, sp, #300	; 0x12c
 801b010:	f7ff fbf0 	bl	801a7f4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b014:	b203      	sxth	r3, r0
 801b016:	e79f      	b.n	801af58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

0801b018 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b018:	2b02      	cmp	r3, #2
 801b01a:	b510      	push	{r4, lr}
 801b01c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b020:	d00b      	beq.n	801b03a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801b022:	2b03      	cmp	r3, #3
 801b024:	d00e      	beq.n	801b044 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801b026:	2b01      	cmp	r3, #1
 801b028:	d001      	beq.n	801b02e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801b02a:	1860      	adds	r0, r4, r1
 801b02c:	bd10      	pop	{r4, pc}
 801b02e:	8880      	ldrh	r0, [r0, #4]
 801b030:	4420      	add	r0, r4
 801b032:	b200      	sxth	r0, r0
 801b034:	1a80      	subs	r0, r0, r2
 801b036:	3801      	subs	r0, #1
 801b038:	e7f8      	b.n	801b02c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801b03a:	8880      	ldrh	r0, [r0, #4]
 801b03c:	4420      	add	r0, r4
 801b03e:	b200      	sxth	r0, r0
 801b040:	1a40      	subs	r0, r0, r1
 801b042:	e7f8      	b.n	801b036 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b044:	18a0      	adds	r0, r4, r2
 801b046:	e7f1      	b.n	801b02c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801b048 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b048:	2b02      	cmp	r3, #2
 801b04a:	b510      	push	{r4, lr}
 801b04c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801b050:	d006      	beq.n	801b060 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801b052:	2b03      	cmp	r3, #3
 801b054:	d00a      	beq.n	801b06c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b056:	2b01      	cmp	r3, #1
 801b058:	bf14      	ite	ne
 801b05a:	18a0      	addne	r0, r4, r2
 801b05c:	1860      	addeq	r0, r4, r1
 801b05e:	bd10      	pop	{r4, pc}
 801b060:	88c0      	ldrh	r0, [r0, #6]
 801b062:	4420      	add	r0, r4
 801b064:	b200      	sxth	r0, r0
 801b066:	1a80      	subs	r0, r0, r2
 801b068:	3801      	subs	r0, #1
 801b06a:	e7f8      	b.n	801b05e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801b06c:	88c0      	ldrh	r0, [r0, #6]
 801b06e:	4420      	add	r0, r4
 801b070:	b200      	sxth	r0, r0
 801b072:	1a40      	subs	r0, r0, r1
 801b074:	e7f8      	b.n	801b068 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801b078 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b078:	4b01      	ldr	r3, [pc, #4]	; (801b080 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b07a:	2200      	movs	r2, #0
 801b07c:	601a      	str	r2, [r3, #0]
 801b07e:	4770      	bx	lr
 801b080:	200153a8 	.word	0x200153a8

0801b084 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801b084:	4603      	mov	r3, r0
 801b086:	b1c8      	cbz	r0, 801b0bc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801b088:	0c02      	lsrs	r2, r0, #16
 801b08a:	0412      	lsls	r2, r2, #16
 801b08c:	b9a2      	cbnz	r2, 801b0b8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801b08e:	0403      	lsls	r3, r0, #16
 801b090:	2010      	movs	r0, #16
 801b092:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b096:	bf04      	itt	eq
 801b098:	021b      	lsleq	r3, r3, #8
 801b09a:	3008      	addeq	r0, #8
 801b09c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b0a0:	bf04      	itt	eq
 801b0a2:	011b      	lsleq	r3, r3, #4
 801b0a4:	3004      	addeq	r0, #4
 801b0a6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b0aa:	bf04      	itt	eq
 801b0ac:	009b      	lsleq	r3, r3, #2
 801b0ae:	3002      	addeq	r0, #2
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	db04      	blt.n	801b0be <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b0b4:	3001      	adds	r0, #1
 801b0b6:	4770      	bx	lr
 801b0b8:	2000      	movs	r0, #0
 801b0ba:	e7ea      	b.n	801b092 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b0bc:	2020      	movs	r0, #32
 801b0be:	4770      	bx	lr

0801b0c0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0c4:	b087      	sub	sp, #28
 801b0c6:	4681      	mov	r9, r0
 801b0c8:	4698      	mov	r8, r3
 801b0ca:	4610      	mov	r0, r2
 801b0cc:	460d      	mov	r5, r1
 801b0ce:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801b0d2:	b981      	cbnz	r1, 801b0f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801b0d4:	b14b      	cbz	r3, 801b0ea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801b0d6:	460b      	mov	r3, r1
 801b0d8:	464a      	mov	r2, r9
 801b0da:	4641      	mov	r1, r8
 801b0dc:	e9cd 4700 	strd	r4, r7, [sp]
 801b0e0:	f7ff ffee 	bl	801b0c0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b0e4:	b007      	add	sp, #28
 801b0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b0ee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b0f2:	603b      	str	r3, [r7, #0]
 801b0f4:	e7f6      	b.n	801b0e4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b0f6:	fa32 fa01 	lsrs.w	sl, r2, r1
 801b0fa:	d107      	bne.n	801b10c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801b0fc:	fb09 f602 	mul.w	r6, r9, r2
 801b100:	fbb6 f0f4 	udiv	r0, r6, r4
 801b104:	fb04 6610 	mls	r6, r4, r0, r6
 801b108:	603e      	str	r6, [r7, #0]
 801b10a:	e7eb      	b.n	801b0e4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b10c:	2601      	movs	r6, #1
 801b10e:	fa09 fb01 	lsl.w	fp, r9, r1
 801b112:	408e      	lsls	r6, r1
 801b114:	fbbb f3f4 	udiv	r3, fp, r4
 801b118:	3e01      	subs	r6, #1
 801b11a:	9302      	str	r3, [sp, #8]
 801b11c:	fb0a f303 	mul.w	r3, sl, r3
 801b120:	4016      	ands	r6, r2
 801b122:	9303      	str	r3, [sp, #12]
 801b124:	4630      	mov	r0, r6
 801b126:	f7ff ffad 	bl	801b084 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b12a:	464a      	mov	r2, r9
 801b12c:	460b      	mov	r3, r1
 801b12e:	4601      	mov	r1, r0
 801b130:	4630      	mov	r0, r6
 801b132:	e9cd 4700 	strd	r4, r7, [sp]
 801b136:	f7ff ffc3 	bl	801b0c0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b13a:	9b02      	ldr	r3, [sp, #8]
 801b13c:	4606      	mov	r6, r0
 801b13e:	eb05 0108 	add.w	r1, r5, r8
 801b142:	fb04 bb13 	mls	fp, r4, r3, fp
 801b146:	4658      	mov	r0, fp
 801b148:	f7ff ff9c 	bl	801b084 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b14c:	ab05      	add	r3, sp, #20
 801b14e:	465a      	mov	r2, fp
 801b150:	e9cd 4300 	strd	r4, r3, [sp]
 801b154:	4603      	mov	r3, r0
 801b156:	4650      	mov	r0, sl
 801b158:	f7ff ffb2 	bl	801b0c0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b15c:	6839      	ldr	r1, [r7, #0]
 801b15e:	9a05      	ldr	r2, [sp, #20]
 801b160:	9b03      	ldr	r3, [sp, #12]
 801b162:	4411      	add	r1, r2
 801b164:	fbb1 f2f4 	udiv	r2, r1, r4
 801b168:	18d3      	adds	r3, r2, r3
 801b16a:	fb04 1412 	mls	r4, r4, r2, r1
 801b16e:	441e      	add	r6, r3
 801b170:	603c      	str	r4, [r7, #0]
 801b172:	4430      	add	r0, r6
 801b174:	e7b6      	b.n	801b0e4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801b176 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801b176:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b17a:	b085      	sub	sp, #20
 801b17c:	f1b0 0900 	subs.w	r9, r0, #0
 801b180:	461d      	mov	r5, r3
 801b182:	4617      	mov	r7, r2
 801b184:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b186:	bfbb      	ittet	lt
 801b188:	f1c9 0900 	rsblt	r9, r9, #0
 801b18c:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 801b190:	2601      	movge	r6, #1
 801b192:	6823      	ldrlt	r3, [r4, #0]
 801b194:	bfbc      	itt	lt
 801b196:	425b      	neglt	r3, r3
 801b198:	6023      	strlt	r3, [r4, #0]
 801b19a:	2a00      	cmp	r2, #0
 801b19c:	da04      	bge.n	801b1a8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801b19e:	6823      	ldr	r3, [r4, #0]
 801b1a0:	4257      	negs	r7, r2
 801b1a2:	4276      	negs	r6, r6
 801b1a4:	425b      	negs	r3, r3
 801b1a6:	6023      	str	r3, [r4, #0]
 801b1a8:	2d00      	cmp	r5, #0
 801b1aa:	4638      	mov	r0, r7
 801b1ac:	bfba      	itte	lt
 801b1ae:	426d      	neglt	r5, r5
 801b1b0:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
 801b1b4:	f04f 0801 	movge.w	r8, #1
 801b1b8:	f7ff ff64 	bl	801b084 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b1bc:	ab03      	add	r3, sp, #12
 801b1be:	463a      	mov	r2, r7
 801b1c0:	e9cd 5300 	strd	r5, r3, [sp]
 801b1c4:	4603      	mov	r3, r0
 801b1c6:	4648      	mov	r0, r9
 801b1c8:	f7ff ff7a 	bl	801b0c0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b1cc:	6823      	ldr	r3, [r4, #0]
 801b1ce:	9a03      	ldr	r2, [sp, #12]
 801b1d0:	4546      	cmp	r6, r8
 801b1d2:	441a      	add	r2, r3
 801b1d4:	fb92 f3f5 	sdiv	r3, r2, r5
 801b1d8:	4418      	add	r0, r3
 801b1da:	fb05 2313 	mls	r3, r5, r3, r2
 801b1de:	bf18      	it	ne
 801b1e0:	4240      	negne	r0, r0
 801b1e2:	1c72      	adds	r2, r6, #1
 801b1e4:	6023      	str	r3, [r4, #0]
 801b1e6:	d105      	bne.n	801b1f4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	f1c3 0200 	rsb	r2, r3, #0
 801b1ee:	db0b      	blt.n	801b208 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801b1f0:	6022      	str	r2, [r4, #0]
 801b1f2:	e006      	b.n	801b202 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b1f4:	2e01      	cmp	r6, #1
 801b1f6:	d104      	bne.n	801b202 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	da02      	bge.n	801b202 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b1fc:	442b      	add	r3, r5
 801b1fe:	3801      	subs	r0, #1
 801b200:	6023      	str	r3, [r4, #0]
 801b202:	b005      	add	sp, #20
 801b204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b208:	3801      	subs	r0, #1
 801b20a:	1b52      	subs	r2, r2, r5
 801b20c:	e7f0      	b.n	801b1f0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801b210 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b210:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b214:	4c1c      	ldr	r4, [pc, #112]	; (801b288 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801b216:	4605      	mov	r5, r0
 801b218:	6807      	ldr	r7, [r0, #0]
 801b21a:	69a3      	ldr	r3, [r4, #24]
 801b21c:	b92b      	cbnz	r3, 801b22a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801b21e:	6840      	ldr	r0, [r0, #4]
 801b220:	e9c5 7000 	strd	r7, r0, [r5]
 801b224:	b004      	add	sp, #16
 801b226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b22a:	f04f 0802 	mov.w	r8, #2
 801b22e:	68a2      	ldr	r2, [r4, #8]
 801b230:	ae04      	add	r6, sp, #16
 801b232:	6820      	ldr	r0, [r4, #0]
 801b234:	fb93 f1f8 	sdiv	r1, r3, r8
 801b238:	440a      	add	r2, r1
 801b23a:	69e1      	ldr	r1, [r4, #28]
 801b23c:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b240:	463a      	mov	r2, r7
 801b242:	9600      	str	r6, [sp, #0]
 801b244:	f7ff ff97 	bl	801b176 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b248:	69a3      	ldr	r3, [r4, #24]
 801b24a:	4607      	mov	r7, r0
 801b24c:	686a      	ldr	r2, [r5, #4]
 801b24e:	6a21      	ldr	r1, [r4, #32]
 801b250:	9600      	str	r6, [sp, #0]
 801b252:	6860      	ldr	r0, [r4, #4]
 801b254:	f7ff ff8f 	bl	801b176 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b258:	69a3      	ldr	r3, [r4, #24]
 801b25a:	6962      	ldr	r2, [r4, #20]
 801b25c:	4407      	add	r7, r0
 801b25e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b260:	9600      	str	r6, [sp, #0]
 801b262:	68e0      	ldr	r0, [r4, #12]
 801b264:	fb93 f8f8 	sdiv	r8, r3, r8
 801b268:	4442      	add	r2, r8
 801b26a:	9203      	str	r2, [sp, #12]
 801b26c:	682a      	ldr	r2, [r5, #0]
 801b26e:	f7ff ff82 	bl	801b176 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b272:	4680      	mov	r8, r0
 801b274:	9600      	str	r6, [sp, #0]
 801b276:	69a3      	ldr	r3, [r4, #24]
 801b278:	686a      	ldr	r2, [r5, #4]
 801b27a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b27c:	6920      	ldr	r0, [r4, #16]
 801b27e:	f7ff ff7a 	bl	801b176 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b282:	4440      	add	r0, r8
 801b284:	e7cc      	b.n	801b220 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b286:	bf00      	nop
 801b288:	200153ac 	.word	0x200153ac

0801b28c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b28c:	4b07      	ldr	r3, [pc, #28]	; (801b2ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b28e:	781b      	ldrb	r3, [r3, #0]
 801b290:	2b01      	cmp	r3, #1
 801b292:	d109      	bne.n	801b2a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b294:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b298:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b29c:	8003      	strh	r3, [r0, #0]
 801b29e:	4b04      	ldr	r3, [pc, #16]	; (801b2b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b2a0:	881b      	ldrh	r3, [r3, #0]
 801b2a2:	3b01      	subs	r3, #1
 801b2a4:	1a9b      	subs	r3, r3, r2
 801b2a6:	800b      	strh	r3, [r1, #0]
 801b2a8:	4770      	bx	lr
 801b2aa:	bf00      	nop
 801b2ac:	20015398 	.word	0x20015398
 801b2b0:	20015394 	.word	0x20015394

0801b2b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b2b4:	4b07      	ldr	r3, [pc, #28]	; (801b2d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b2b6:	b510      	push	{r4, lr}
 801b2b8:	781b      	ldrb	r3, [r3, #0]
 801b2ba:	2b01      	cmp	r3, #1
 801b2bc:	d108      	bne.n	801b2d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b2be:	4b06      	ldr	r3, [pc, #24]	; (801b2d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b2c0:	880c      	ldrh	r4, [r1, #0]
 801b2c2:	881b      	ldrh	r3, [r3, #0]
 801b2c4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b2c8:	3b01      	subs	r3, #1
 801b2ca:	1b1b      	subs	r3, r3, r4
 801b2cc:	8003      	strh	r3, [r0, #0]
 801b2ce:	800a      	strh	r2, [r1, #0]
 801b2d0:	bd10      	pop	{r4, pc}
 801b2d2:	bf00      	nop
 801b2d4:	20015398 	.word	0x20015398
 801b2d8:	20015394 	.word	0x20015394

0801b2dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801b2dc:	4b0a      	ldr	r3, [pc, #40]	; (801b308 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801b2de:	b510      	push	{r4, lr}
 801b2e0:	781b      	ldrb	r3, [r3, #0]
 801b2e2:	2b01      	cmp	r3, #1
 801b2e4:	d10e      	bne.n	801b304 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801b2e6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b2ea:	8843      	ldrh	r3, [r0, #2]
 801b2ec:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b2f0:	18ca      	adds	r2, r1, r3
 801b2f2:	4b06      	ldr	r3, [pc, #24]	; (801b30c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801b2f4:	8044      	strh	r4, [r0, #2]
 801b2f6:	881b      	ldrh	r3, [r3, #0]
 801b2f8:	1a9b      	subs	r3, r3, r2
 801b2fa:	8003      	strh	r3, [r0, #0]
 801b2fc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b300:	8081      	strh	r1, [r0, #4]
 801b302:	80c3      	strh	r3, [r0, #6]
 801b304:	bd10      	pop	{r4, pc}
 801b306:	bf00      	nop
 801b308:	20015398 	.word	0x20015398
 801b30c:	20015394 	.word	0x20015394

0801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b310:	4b08      	ldr	r3, [pc, #32]	; (801b334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801b312:	781b      	ldrb	r3, [r3, #0]
 801b314:	2b01      	cmp	r3, #1
 801b316:	d10c      	bne.n	801b332 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801b318:	8803      	ldrh	r3, [r0, #0]
 801b31a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b31e:	8842      	ldrh	r2, [r0, #2]
 801b320:	8002      	strh	r2, [r0, #0]
 801b322:	185a      	adds	r2, r3, r1
 801b324:	4b04      	ldr	r3, [pc, #16]	; (801b338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b326:	881b      	ldrh	r3, [r3, #0]
 801b328:	1a9b      	subs	r3, r3, r2
 801b32a:	8043      	strh	r3, [r0, #2]
 801b32c:	88c3      	ldrh	r3, [r0, #6]
 801b32e:	80c1      	strh	r1, [r0, #6]
 801b330:	8083      	strh	r3, [r0, #4]
 801b332:	4770      	bx	lr
 801b334:	20015398 	.word	0x20015398
 801b338:	20015394 	.word	0x20015394

0801b33c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b33c:	4b07      	ldr	r3, [pc, #28]	; (801b35c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b33e:	b510      	push	{r4, lr}
 801b340:	781b      	ldrb	r3, [r3, #0]
 801b342:	2b01      	cmp	r3, #1
 801b344:	d108      	bne.n	801b358 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b346:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b34a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b34e:	8003      	strh	r3, [r0, #0]
 801b350:	8893      	ldrh	r3, [r2, #4]
 801b352:	3b01      	subs	r3, #1
 801b354:	1b1b      	subs	r3, r3, r4
 801b356:	800b      	strh	r3, [r1, #0]
 801b358:	bd10      	pop	{r4, pc}
 801b35a:	bf00      	nop
 801b35c:	20015398 	.word	0x20015398

0801b360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b360:	4b0a      	ldr	r3, [pc, #40]	; (801b38c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b362:	460a      	mov	r2, r1
 801b364:	b510      	push	{r4, lr}
 801b366:	781b      	ldrb	r3, [r3, #0]
 801b368:	2b01      	cmp	r3, #1
 801b36a:	d10d      	bne.n	801b388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b36c:	8881      	ldrh	r1, [r0, #4]
 801b36e:	8803      	ldrh	r3, [r0, #0]
 801b370:	440b      	add	r3, r1
 801b372:	4601      	mov	r1, r0
 801b374:	3b01      	subs	r3, #1
 801b376:	f821 3b02 	strh.w	r3, [r1], #2
 801b37a:	f7ff ffdf 	bl	801b33c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b37e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b382:	88c2      	ldrh	r2, [r0, #6]
 801b384:	80c3      	strh	r3, [r0, #6]
 801b386:	8082      	strh	r2, [r0, #4]
 801b388:	bd10      	pop	{r4, pc}
 801b38a:	bf00      	nop
 801b38c:	20015398 	.word	0x20015398

0801b390 <_ZN8touchgfx11Application13requestRedrawEv>:
 801b390:	4b06      	ldr	r3, [pc, #24]	; (801b3ac <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b392:	2100      	movs	r1, #0
 801b394:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b398:	4b05      	ldr	r3, [pc, #20]	; (801b3b0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b39a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801b39e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b3a2:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801b3a6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801b3aa:	4770      	bx	lr
 801b3ac:	20015394 	.word	0x20015394
 801b3b0:	20015396 	.word	0x20015396

0801b3b4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b3b4:	4b03      	ldr	r3, [pc, #12]	; (801b3c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b3b6:	6818      	ldr	r0, [r3, #0]
 801b3b8:	b110      	cbz	r0, 801b3c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b3ba:	6803      	ldr	r3, [r0, #0]
 801b3bc:	699b      	ldr	r3, [r3, #24]
 801b3be:	4718      	bx	r3
 801b3c0:	4770      	bx	lr
 801b3c2:	bf00      	nop
 801b3c4:	200153dc 	.word	0x200153dc

0801b3c8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b3c8:	4770      	bx	lr
	...

0801b3cc <_ZN8touchgfx11Application4drawEv>:
 801b3cc:	4b09      	ldr	r3, [pc, #36]	; (801b3f4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801b3ce:	b507      	push	{r0, r1, r2, lr}
 801b3d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b3d4:	2100      	movs	r1, #0
 801b3d6:	4b08      	ldr	r3, [pc, #32]	; (801b3f8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b3d8:	9100      	str	r1, [sp, #0]
 801b3da:	4669      	mov	r1, sp
 801b3dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b3e0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b3e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b3e8:	6803      	ldr	r3, [r0, #0]
 801b3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3ec:	4798      	blx	r3
 801b3ee:	b003      	add	sp, #12
 801b3f0:	f85d fb04 	ldr.w	pc, [sp], #4
 801b3f4:	20015394 	.word	0x20015394
 801b3f8:	20015396 	.word	0x20015396

0801b3fc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b3fc:	4b03      	ldr	r3, [pc, #12]	; (801b40c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b3fe:	6818      	ldr	r0, [r3, #0]
 801b400:	b110      	cbz	r0, 801b408 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b402:	6803      	ldr	r3, [r0, #0]
 801b404:	69db      	ldr	r3, [r3, #28]
 801b406:	4718      	bx	r3
 801b408:	4770      	bx	lr
 801b40a:	bf00      	nop
 801b40c:	200153dc 	.word	0x200153dc

0801b410 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b410:	4b03      	ldr	r3, [pc, #12]	; (801b420 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b412:	6818      	ldr	r0, [r3, #0]
 801b414:	b110      	cbz	r0, 801b41c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b416:	6803      	ldr	r3, [r0, #0]
 801b418:	6a1b      	ldr	r3, [r3, #32]
 801b41a:	4718      	bx	r3
 801b41c:	4770      	bx	lr
 801b41e:	bf00      	nop
 801b420:	200153dc 	.word	0x200153dc

0801b424 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801b424:	2300      	movs	r3, #0
 801b426:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b42a:	4770      	bx	lr

0801b42c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b42c:	4b03      	ldr	r3, [pc, #12]	; (801b43c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b42e:	6818      	ldr	r0, [r3, #0]
 801b430:	b110      	cbz	r0, 801b438 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b432:	6803      	ldr	r3, [r0, #0]
 801b434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b436:	4718      	bx	r3
 801b438:	4770      	bx	lr
 801b43a:	bf00      	nop
 801b43c:	200153dc 	.word	0x200153dc

0801b440 <_ZN8touchgfx11ApplicationD1Ev>:
 801b440:	4770      	bx	lr

0801b442 <_ZN8touchgfx11ApplicationD0Ev>:
 801b442:	b510      	push	{r4, lr}
 801b444:	4604      	mov	r4, r0
 801b446:	f44f 719c 	mov.w	r1, #312	; 0x138
 801b44a:	f00f f8d4 	bl	802a5f6 <_ZdlPvj>
 801b44e:	4620      	mov	r0, r4
 801b450:	bd10      	pop	{r4, pc}
	...

0801b454 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b454:	b570      	push	{r4, r5, r6, lr}
 801b456:	4d38      	ldr	r5, [pc, #224]	; (801b538 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801b458:	4604      	mov	r4, r0
 801b45a:	6828      	ldr	r0, [r5, #0]
 801b45c:	b140      	cbz	r0, 801b470 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b45e:	7a03      	ldrb	r3, [r0, #8]
 801b460:	b933      	cbnz	r3, 801b470 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b462:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801b466:	6803      	ldr	r3, [r0, #0]
 801b468:	689b      	ldr	r3, [r3, #8]
 801b46a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b46e:	4718      	bx	r3
 801b470:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 801b474:	b97b      	cbnz	r3, 801b496 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b476:	b170      	cbz	r0, 801b496 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b478:	7a03      	ldrb	r3, [r0, #8]
 801b47a:	b163      	cbz	r3, 801b496 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b47c:	4b2f      	ldr	r3, [pc, #188]	; (801b53c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801b47e:	6818      	ldr	r0, [r3, #0]
 801b480:	b110      	cbz	r0, 801b488 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b482:	6803      	ldr	r3, [r0, #0]
 801b484:	691b      	ldr	r3, [r3, #16]
 801b486:	4798      	blx	r3
 801b488:	6828      	ldr	r0, [r5, #0]
 801b48a:	6803      	ldr	r3, [r0, #0]
 801b48c:	68db      	ldr	r3, [r3, #12]
 801b48e:	4798      	blx	r3
 801b490:	2301      	movs	r3, #1
 801b492:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801b496:	2500      	movs	r5, #0
 801b498:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801b49c:	42a8      	cmp	r0, r5
 801b49e:	dd0c      	ble.n	801b4ba <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801b4a0:	1963      	adds	r3, r4, r5
 801b4a2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801b4a6:	b132      	cbz	r2, 801b4b6 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801b4a8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801b4ac:	4413      	add	r3, r2
 801b4ae:	6858      	ldr	r0, [r3, #4]
 801b4b0:	6803      	ldr	r3, [r0, #0]
 801b4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b4b4:	4798      	blx	r3
 801b4b6:	3501      	adds	r5, #1
 801b4b8:	e7ee      	b.n	801b498 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	461a      	mov	r2, r3
 801b4be:	4298      	cmp	r0, r3
 801b4c0:	d10f      	bne.n	801b4e2 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801b4c2:	1d25      	adds	r5, r4, #4
 801b4c4:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801b4c8:	4291      	cmp	r1, r2
 801b4ca:	dd2d      	ble.n	801b528 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801b4cc:	1e48      	subs	r0, r1, #1
 801b4ce:	b280      	uxth	r0, r0
 801b4d0:	4288      	cmp	r0, r1
 801b4d2:	d31a      	bcc.n	801b50a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801b4d4:	4b1a      	ldr	r3, [pc, #104]	; (801b540 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801b4d6:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801b4da:	4a1a      	ldr	r2, [pc, #104]	; (801b544 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801b4dc:	481a      	ldr	r0, [pc, #104]	; (801b548 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801b4de:	f00f f8b9 	bl	802a654 <__assert_func>
 801b4e2:	18e1      	adds	r1, r4, r3
 801b4e4:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801b4e8:	b16d      	cbz	r5, 801b506 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801b4ea:	429a      	cmp	r2, r3
 801b4ec:	d00a      	beq.n	801b504 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801b4ee:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801b4f2:	4431      	add	r1, r6
 801b4f4:	684e      	ldr	r6, [r1, #4]
 801b4f6:	b291      	uxth	r1, r2
 801b4f8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b4fc:	604e      	str	r6, [r1, #4]
 801b4fe:	18a1      	adds	r1, r4, r2
 801b500:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801b504:	3201      	adds	r2, #1
 801b506:	3301      	adds	r3, #1
 801b508:	e7d9      	b.n	801b4be <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801b50a:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801b50e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801b512:	3304      	adds	r3, #4
 801b514:	428b      	cmp	r3, r1
 801b516:	d004      	beq.n	801b522 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801b518:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801b51c:	f843 6c04 	str.w	r6, [r3, #-4]
 801b520:	e7f8      	b.n	801b514 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801b522:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801b526:	e7cd      	b.n	801b4c4 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801b528:	4b04      	ldr	r3, [pc, #16]	; (801b53c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801b52a:	6818      	ldr	r0, [r3, #0]
 801b52c:	b110      	cbz	r0, 801b534 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801b52e:	6803      	ldr	r3, [r0, #0]
 801b530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b532:	e79a      	b.n	801b46a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b534:	bd70      	pop	{r4, r5, r6, pc}
 801b536:	bf00      	nop
 801b538:	200153e0 	.word	0x200153e0
 801b53c:	200153dc 	.word	0x200153dc
 801b540:	080311b8 	.word	0x080311b8
 801b544:	08031419 	.word	0x08031419
 801b548:	080311c6 	.word	0x080311c6

0801b54c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b54c:	b570      	push	{r4, r5, r6, lr}
 801b54e:	4606      	mov	r6, r0
 801b550:	460c      	mov	r4, r1
 801b552:	b929      	cbnz	r1, 801b560 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801b554:	4b0c      	ldr	r3, [pc, #48]	; (801b588 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801b556:	215e      	movs	r1, #94	; 0x5e
 801b558:	4a0c      	ldr	r2, [pc, #48]	; (801b58c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801b55a:	480d      	ldr	r0, [pc, #52]	; (801b590 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801b55c:	f00f f87a 	bl	802a654 <__assert_func>
 801b560:	2300      	movs	r3, #0
 801b562:	4d0c      	ldr	r5, [pc, #48]	; (801b594 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801b564:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801b568:	6828      	ldr	r0, [r5, #0]
 801b56a:	b110      	cbz	r0, 801b572 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801b56c:	6803      	ldr	r3, [r0, #0]
 801b56e:	695b      	ldr	r3, [r3, #20]
 801b570:	4798      	blx	r3
 801b572:	602c      	str	r4, [r5, #0]
 801b574:	4620      	mov	r0, r4
 801b576:	6823      	ldr	r3, [r4, #0]
 801b578:	68db      	ldr	r3, [r3, #12]
 801b57a:	4798      	blx	r3
 801b57c:	6833      	ldr	r3, [r6, #0]
 801b57e:	4630      	mov	r0, r6
 801b580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b586:	4718      	bx	r3
 801b588:	08031184 	.word	0x08031184
 801b58c:	08031294 	.word	0x08031294
 801b590:	0803118e 	.word	0x0803118e
 801b594:	200153dc 	.word	0x200153dc

0801b598 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801b598:	b510      	push	{r4, lr}
 801b59a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b59e:	888a      	ldrh	r2, [r1, #4]
 801b5a0:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b5a4:	4422      	add	r2, r4
 801b5a6:	b212      	sxth	r2, r2
 801b5a8:	4293      	cmp	r3, r2
 801b5aa:	da15      	bge.n	801b5d8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b5ac:	8882      	ldrh	r2, [r0, #4]
 801b5ae:	4413      	add	r3, r2
 801b5b0:	b21b      	sxth	r3, r3
 801b5b2:	429c      	cmp	r4, r3
 801b5b4:	da10      	bge.n	801b5d8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b5b6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b5ba:	88c9      	ldrh	r1, [r1, #6]
 801b5bc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b5c0:	4419      	add	r1, r3
 801b5c2:	b209      	sxth	r1, r1
 801b5c4:	428a      	cmp	r2, r1
 801b5c6:	da07      	bge.n	801b5d8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b5c8:	88c0      	ldrh	r0, [r0, #6]
 801b5ca:	4410      	add	r0, r2
 801b5cc:	b200      	sxth	r0, r0
 801b5ce:	4283      	cmp	r3, r0
 801b5d0:	bfac      	ite	ge
 801b5d2:	2000      	movge	r0, #0
 801b5d4:	2001      	movlt	r0, #1
 801b5d6:	bd10      	pop	{r4, pc}
 801b5d8:	2000      	movs	r0, #0
 801b5da:	e7fc      	b.n	801b5d6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b5dc <_ZN8touchgfx4Rect10restrictToEss>:
 801b5dc:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	b510      	push	{r4, lr}
 801b5e4:	da04      	bge.n	801b5f0 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801b5e6:	8884      	ldrh	r4, [r0, #4]
 801b5e8:	4423      	add	r3, r4
 801b5ea:	8083      	strh	r3, [r0, #4]
 801b5ec:	2300      	movs	r3, #0
 801b5ee:	8003      	strh	r3, [r0, #0]
 801b5f0:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b5f4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b5f8:	1b09      	subs	r1, r1, r4
 801b5fa:	428b      	cmp	r3, r1
 801b5fc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b600:	bfc8      	it	gt
 801b602:	8081      	strhgt	r1, [r0, #4]
 801b604:	2b00      	cmp	r3, #0
 801b606:	da04      	bge.n	801b612 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801b608:	88c1      	ldrh	r1, [r0, #6]
 801b60a:	440b      	add	r3, r1
 801b60c:	80c3      	strh	r3, [r0, #6]
 801b60e:	2300      	movs	r3, #0
 801b610:	8043      	strh	r3, [r0, #2]
 801b612:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b616:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801b61a:	1a52      	subs	r2, r2, r1
 801b61c:	4293      	cmp	r3, r2
 801b61e:	bfc8      	it	gt
 801b620:	80c2      	strhgt	r2, [r0, #6]
 801b622:	bd10      	pop	{r4, pc}

0801b624 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b624:	4b10      	ldr	r3, [pc, #64]	; (801b668 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801b626:	b510      	push	{r4, lr}
 801b628:	460c      	mov	r4, r1
 801b62a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b62e:	4b0f      	ldr	r3, [pc, #60]	; (801b66c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801b630:	4620      	mov	r0, r4
 801b632:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b636:	f7ff ffd1 	bl	801b5dc <_ZN8touchgfx4Rect10restrictToEss>
 801b63a:	4b0d      	ldr	r3, [pc, #52]	; (801b670 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801b63c:	6818      	ldr	r0, [r3, #0]
 801b63e:	b190      	cbz	r0, 801b666 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801b640:	6803      	ldr	r3, [r0, #0]
 801b642:	4621      	mov	r1, r4
 801b644:	689b      	ldr	r3, [r3, #8]
 801b646:	4798      	blx	r3
 801b648:	4b0a      	ldr	r3, [pc, #40]	; (801b674 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801b64a:	6818      	ldr	r0, [r3, #0]
 801b64c:	b118      	cbz	r0, 801b656 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801b64e:	6803      	ldr	r3, [r0, #0]
 801b650:	4621      	mov	r1, r4
 801b652:	689b      	ldr	r3, [r3, #8]
 801b654:	4798      	blx	r3
 801b656:	4b08      	ldr	r3, [pc, #32]	; (801b678 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801b658:	4621      	mov	r1, r4
 801b65a:	6818      	ldr	r0, [r3, #0]
 801b65c:	6803      	ldr	r3, [r0, #0]
 801b65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b662:	69db      	ldr	r3, [r3, #28]
 801b664:	4718      	bx	r3
 801b666:	bd10      	pop	{r4, pc}
 801b668:	20015396 	.word	0x20015396
 801b66c:	20015394 	.word	0x20015394
 801b670:	200153dc 	.word	0x200153dc
 801b674:	200153d8 	.word	0x200153d8
 801b678:	200153a0 	.word	0x200153a0

0801b67c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b67e:	4606      	mov	r6, r0
 801b680:	4608      	mov	r0, r1
 801b682:	460f      	mov	r7, r1
 801b684:	f7fb fdbd 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b688:	b9e8      	cbnz	r0, 801b6c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b68a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801b68e:	f9b6 4000 	ldrsh.w	r4, [r6]
 801b692:	42a5      	cmp	r5, r4
 801b694:	db17      	blt.n	801b6c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b696:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801b69a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801b69e:	429a      	cmp	r2, r3
 801b6a0:	db11      	blt.n	801b6c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b6a2:	88b9      	ldrh	r1, [r7, #4]
 801b6a4:	440d      	add	r5, r1
 801b6a6:	88b1      	ldrh	r1, [r6, #4]
 801b6a8:	440c      	add	r4, r1
 801b6aa:	b22d      	sxth	r5, r5
 801b6ac:	b224      	sxth	r4, r4
 801b6ae:	42a5      	cmp	r5, r4
 801b6b0:	dc09      	bgt.n	801b6c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b6b2:	88f8      	ldrh	r0, [r7, #6]
 801b6b4:	4410      	add	r0, r2
 801b6b6:	88f2      	ldrh	r2, [r6, #6]
 801b6b8:	4413      	add	r3, r2
 801b6ba:	b200      	sxth	r0, r0
 801b6bc:	b21b      	sxth	r3, r3
 801b6be:	4298      	cmp	r0, r3
 801b6c0:	bfcc      	ite	gt
 801b6c2:	2000      	movgt	r0, #0
 801b6c4:	2001      	movle	r0, #1
 801b6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b6c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801b6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6ca:	4604      	mov	r4, r0
 801b6cc:	4608      	mov	r0, r1
 801b6ce:	460d      	mov	r5, r1
 801b6d0:	f7fb fd97 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b6d4:	b978      	cbnz	r0, 801b6f6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801b6d6:	4620      	mov	r0, r4
 801b6d8:	f7fb fd93 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b6dc:	f9b5 6000 	ldrsh.w	r6, [r5]
 801b6e0:	b150      	cbz	r0, 801b6f8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801b6e2:	8026      	strh	r6, [r4, #0]
 801b6e4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b6e8:	8063      	strh	r3, [r4, #2]
 801b6ea:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801b6ee:	80a3      	strh	r3, [r4, #4]
 801b6f0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b6f4:	80e3      	strh	r3, [r4, #6]
 801b6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6f8:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b6fc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b700:	42b1      	cmp	r1, r6
 801b702:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b706:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801b70a:	460f      	mov	r7, r1
 801b70c:	88ed      	ldrh	r5, [r5, #6]
 801b70e:	bfa8      	it	ge
 801b710:	4637      	movge	r7, r6
 801b712:	4293      	cmp	r3, r2
 801b714:	4618      	mov	r0, r3
 801b716:	4466      	add	r6, ip
 801b718:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b71c:	bfa8      	it	ge
 801b71e:	4610      	movge	r0, r2
 801b720:	442a      	add	r2, r5
 801b722:	88e5      	ldrh	r5, [r4, #6]
 801b724:	4461      	add	r1, ip
 801b726:	b236      	sxth	r6, r6
 801b728:	8027      	strh	r7, [r4, #0]
 801b72a:	442b      	add	r3, r5
 801b72c:	b209      	sxth	r1, r1
 801b72e:	b212      	sxth	r2, r2
 801b730:	8060      	strh	r0, [r4, #2]
 801b732:	b21b      	sxth	r3, r3
 801b734:	428e      	cmp	r6, r1
 801b736:	bfac      	ite	ge
 801b738:	ebc7 0106 	rsbge	r1, r7, r6
 801b73c:	ebc7 0101 	rsblt	r1, r7, r1
 801b740:	429a      	cmp	r2, r3
 801b742:	bfac      	ite	ge
 801b744:	ebc0 0202 	rsbge	r2, r0, r2
 801b748:	ebc0 0203 	rsblt	r2, r0, r3
 801b74c:	80a1      	strh	r1, [r4, #4]
 801b74e:	80e2      	strh	r2, [r4, #6]
 801b750:	e7d1      	b.n	801b6f6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801b754 <_ZN8touchgfx11Application11getInstanceEv>:
 801b754:	4b01      	ldr	r3, [pc, #4]	; (801b75c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b756:	6818      	ldr	r0, [r3, #0]
 801b758:	4770      	bx	lr
 801b75a:	bf00      	nop
 801b75c:	200153ec 	.word	0x200153ec

0801b760 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801b760:	b570      	push	{r4, r5, r6, lr}
 801b762:	2200      	movs	r2, #0
 801b764:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801b768:	1d04      	adds	r4, r0, #4
 801b76a:	b295      	uxth	r5, r2
 801b76c:	42ab      	cmp	r3, r5
 801b76e:	d90e      	bls.n	801b78e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801b770:	f854 6b04 	ldr.w	r6, [r4], #4
 801b774:	4615      	mov	r5, r2
 801b776:	3201      	adds	r2, #1
 801b778:	428e      	cmp	r6, r1
 801b77a:	d1f6      	bne.n	801b76a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801b77c:	4428      	add	r0, r5
 801b77e:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801b782:	2bff      	cmp	r3, #255	; 0xff
 801b784:	d002      	beq.n	801b78c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801b786:	3301      	adds	r3, #1
 801b788:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801b78c:	bd70      	pop	{r4, r5, r6, pc}
 801b78e:	2b20      	cmp	r3, #32
 801b790:	d106      	bne.n	801b7a0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801b792:	4b09      	ldr	r3, [pc, #36]	; (801b7b8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801b794:	f240 2149 	movw	r1, #585	; 0x249
 801b798:	4a08      	ldr	r2, [pc, #32]	; (801b7bc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801b79a:	4809      	ldr	r0, [pc, #36]	; (801b7c0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801b79c:	f00e ff5a 	bl	802a654 <__assert_func>
 801b7a0:	18c2      	adds	r2, r0, r3
 801b7a2:	2401      	movs	r4, #1
 801b7a4:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801b7a8:	191a      	adds	r2, r3, r4
 801b7aa:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801b7ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801b7b2:	6041      	str	r1, [r0, #4]
 801b7b4:	e7ea      	b.n	801b78c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801b7b6:	bf00      	nop
 801b7b8:	080311ef 	.word	0x080311ef
 801b7bc:	080312d8 	.word	0x080312d8
 801b7c0:	0803118e 	.word	0x0803118e

0801b7c4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801b7c4:	b570      	push	{r4, r5, r6, lr}
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801b7cc:	1d04      	adds	r4, r0, #4
 801b7ce:	b29a      	uxth	r2, r3
 801b7d0:	4296      	cmp	r6, r2
 801b7d2:	d90a      	bls.n	801b7ea <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801b7d4:	f854 2b04 	ldr.w	r2, [r4], #4
 801b7d8:	428a      	cmp	r2, r1
 801b7da:	d107      	bne.n	801b7ec <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b7dc:	18c5      	adds	r5, r0, r3
 801b7de:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801b7e2:	b11a      	cbz	r2, 801b7ec <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b7e4:	3a01      	subs	r2, #1
 801b7e6:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801b7ea:	bd70      	pop	{r4, r5, r6, pc}
 801b7ec:	3301      	adds	r3, #1
 801b7ee:	e7ee      	b.n	801b7ce <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801b7f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801b7f6:	30a8      	adds	r0, #168	; 0xa8
 801b7f8:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b7fc:	f802 3b01 	strb.w	r3, [r2], #1
 801b800:	4282      	cmp	r2, r0
 801b802:	d1fb      	bne.n	801b7fc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801b804:	4770      	bx	lr

0801b806 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b806:	4603      	mov	r3, r0
 801b808:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801b80c:	2200      	movs	r2, #0
 801b80e:	801a      	strh	r2, [r3, #0]
 801b810:	3308      	adds	r3, #8
 801b812:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b816:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b81a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b81e:	428b      	cmp	r3, r1
 801b820:	d1f5      	bne.n	801b80e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b822:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801b826:	4770      	bx	lr

0801b828 <_ZN8touchgfx11ApplicationC1Ev>:
 801b828:	b570      	push	{r4, r5, r6, lr}
 801b82a:	4b19      	ldr	r3, [pc, #100]	; (801b890 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801b82c:	2500      	movs	r5, #0
 801b82e:	4604      	mov	r4, r0
 801b830:	30a8      	adds	r0, #168	; 0xa8
 801b832:	f840 3ca8 	str.w	r3, [r0, #-168]
 801b836:	f820 5c24 	strh.w	r5, [r0, #-36]
 801b83a:	f7ff ffe4 	bl	801b806 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b83e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801b842:	f7ff ffe0 	bl	801b806 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b846:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801b84a:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801b84e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801b852:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801b856:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801b85a:	490e      	ldr	r1, [pc, #56]	; (801b894 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801b85c:	480e      	ldr	r0, [pc, #56]	; (801b898 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801b85e:	f00e fce1 	bl	802a224 <CRC_Lock>
 801b862:	4e0e      	ldr	r6, [pc, #56]	; (801b89c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801b864:	4b0e      	ldr	r3, [pc, #56]	; (801b8a0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b866:	b158      	cbz	r0, 801b880 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 801b868:	801d      	strh	r5, [r3, #0]
 801b86a:	2300      	movs	r3, #0
 801b86c:	4a0d      	ldr	r2, [pc, #52]	; (801b8a4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b86e:	4620      	mov	r0, r4
 801b870:	6013      	str	r3, [r2, #0]
 801b872:	4a0d      	ldr	r2, [pc, #52]	; (801b8a8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b874:	6033      	str	r3, [r6, #0]
 801b876:	6013      	str	r3, [r2, #0]
 801b878:	f7ff ffba 	bl	801b7f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801b87c:	4620      	mov	r0, r4
 801b87e:	bd70      	pop	{r4, r5, r6, pc}
 801b880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b884:	2002      	movs	r0, #2
 801b886:	801a      	strh	r2, [r3, #0]
 801b888:	6030      	str	r0, [r6, #0]
 801b88a:	f001 fa13 	bl	801ccb4 <_ZN8touchgfx6Screen4drawEv>
 801b88e:	e7ec      	b.n	801b86a <_ZN8touchgfx11ApplicationC1Ev+0x42>
 801b890:	08031250 	.word	0x08031250
 801b894:	b5e8b5cd 	.word	0xb5e8b5cd
 801b898:	f407a5c2 	.word	0xf407a5c2
 801b89c:	200153dc 	.word	0x200153dc
 801b8a0:	20000044 	.word	0x20000044
 801b8a4:	200153ec 	.word	0x200153ec
 801b8a8:	200153e0 	.word	0x200153e0

0801b8ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b8ac:	b510      	push	{r4, lr}
 801b8ae:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801b8b2:	428b      	cmp	r3, r1
 801b8b4:	d806      	bhi.n	801b8c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801b8b6:	4b0b      	ldr	r3, [pc, #44]	; (801b8e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801b8b8:	f240 11dd 	movw	r1, #477	; 0x1dd
 801b8bc:	4a0a      	ldr	r2, [pc, #40]	; (801b8e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801b8be:	480b      	ldr	r0, [pc, #44]	; (801b8ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801b8c0:	f00e fec8 	bl	802a654 <__assert_func>
 801b8c4:	3b01      	subs	r3, #1
 801b8c6:	b29b      	uxth	r3, r3
 801b8c8:	428b      	cmp	r3, r1
 801b8ca:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801b8ce:	d908      	bls.n	801b8e2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801b8d0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b8d4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b8d8:	681a      	ldr	r2, [r3, #0]
 801b8da:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b8de:	685a      	ldr	r2, [r3, #4]
 801b8e0:	6062      	str	r2, [r4, #4]
 801b8e2:	bd10      	pop	{r4, pc}
 801b8e4:	080311b8 	.word	0x080311b8
 801b8e8:	0803131d 	.word	0x0803131d
 801b8ec:	080311c6 	.word	0x080311c6

0801b8f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801b8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b8f2:	466b      	mov	r3, sp
 801b8f4:	4604      	mov	r4, r0
 801b8f6:	e883 0006 	stmia.w	r3, {r1, r2}
 801b8fa:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801b8fe:	2a07      	cmp	r2, #7
 801b900:	d906      	bls.n	801b910 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801b902:	4b09      	ldr	r3, [pc, #36]	; (801b928 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801b904:	f240 11a3 	movw	r1, #419	; 0x1a3
 801b908:	4a08      	ldr	r2, [pc, #32]	; (801b92c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801b90a:	4809      	ldr	r0, [pc, #36]	; (801b930 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801b90c:	f00e fea2 	bl	802a654 <__assert_func>
 801b910:	1c51      	adds	r1, r2, #1
 801b912:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801b916:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801b91a:	cb03      	ldmia	r3!, {r0, r1}
 801b91c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801b920:	6069      	str	r1, [r5, #4]
 801b922:	b003      	add	sp, #12
 801b924:	bd30      	pop	{r4, r5, pc}
 801b926:	bf00      	nop
 801b928:	08031217 	.word	0x08031217
 801b92c:	080313b3 	.word	0x080313b3
 801b930:	080311c6 	.word	0x080311c6

0801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b938:	b08d      	sub	sp, #52	; 0x34
 801b93a:	4b94      	ldr	r3, [pc, #592]	; (801bb8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801b93c:	4683      	mov	fp, r0
 801b93e:	ac08      	add	r4, sp, #32
 801b940:	e884 0006 	stmia.w	r4, {r1, r2}
 801b944:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b948:	4620      	mov	r0, r4
 801b94a:	4b91      	ldr	r3, [pc, #580]	; (801bb90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801b94c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b950:	f7ff fe44 	bl	801b5dc <_ZN8touchgfx4Rect10restrictToEss>
 801b954:	4620      	mov	r0, r4
 801b956:	f7fb fc54 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b95a:	2800      	cmp	r0, #0
 801b95c:	d16a      	bne.n	801ba34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b95e:	9402      	str	r4, [sp, #8]
 801b960:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801b964:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b968:	2400      	movs	r4, #0
 801b96a:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801b96e:	9301      	str	r3, [sp, #4]
 801b970:	36a0      	adds	r6, #160	; 0xa0
 801b972:	42a5      	cmp	r5, r4
 801b974:	d00d      	beq.n	801b992 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801b976:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801b97a:	9802      	ldr	r0, [sp, #8]
 801b97c:	f7ff fe7e 	bl	801b67c <_ZNK8touchgfx4Rect8includesERKS0_>
 801b980:	b128      	cbz	r0, 801b98e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801b982:	1e69      	subs	r1, r5, #1
 801b984:	9801      	ldr	r0, [sp, #4]
 801b986:	1b09      	subs	r1, r1, r4
 801b988:	b289      	uxth	r1, r1
 801b98a:	f7ff ff8f 	bl	801b8ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b98e:	3401      	adds	r4, #1
 801b990:	e7ef      	b.n	801b972 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801b992:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801b996:	1e7b      	subs	r3, r7, #1
 801b998:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801b99c:	9703      	str	r7, [sp, #12]
 801b99e:	9300      	str	r3, [sp, #0]
 801b9a0:	2400      	movs	r4, #0
 801b9a2:	4655      	mov	r5, sl
 801b9a4:	9704      	str	r7, [sp, #16]
 801b9a6:	4626      	mov	r6, r4
 801b9a8:	9b04      	ldr	r3, [sp, #16]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d078      	beq.n	801baa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801b9ae:	9902      	ldr	r1, [sp, #8]
 801b9b0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b9b4:	f7ff fdf0 	bl	801b598 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b9b8:	b360      	cbz	r0, 801ba14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b9ba:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801b9be:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801b9c2:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801b9c6:	45e6      	cmp	lr, ip
 801b9c8:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801b9cc:	db35      	blt.n	801ba3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b9ce:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801b9d2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b9d6:	4472      	add	r2, lr
 801b9d8:	4463      	add	r3, ip
 801b9da:	b212      	sxth	r2, r2
 801b9dc:	b21b      	sxth	r3, r3
 801b9de:	429a      	cmp	r2, r3
 801b9e0:	dc2b      	bgt.n	801ba3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b9e2:	fa1f f288 	uxth.w	r2, r8
 801b9e6:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801b9ea:	45c1      	cmp	r9, r8
 801b9ec:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801b9f0:	4413      	add	r3, r2
 801b9f2:	fa1f fc89 	uxth.w	ip, r9
 801b9f6:	b29b      	uxth	r3, r3
 801b9f8:	fa0f fe83 	sxth.w	lr, r3
 801b9fc:	db0f      	blt.n	801ba1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b9fe:	eba3 030c 	sub.w	r3, r3, ip
 801ba02:	1ac9      	subs	r1, r1, r3
 801ba04:	b209      	sxth	r1, r1
 801ba06:	2900      	cmp	r1, #0
 801ba08:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801ba0c:	dd12      	ble.n	801ba34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ba0e:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801ba12:	4604      	mov	r4, r0
 801ba14:	9b04      	ldr	r3, [sp, #16]
 801ba16:	3d08      	subs	r5, #8
 801ba18:	3b01      	subs	r3, #1
 801ba1a:	9304      	str	r3, [sp, #16]
 801ba1c:	e7c4      	b.n	801b9a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801ba1e:	4461      	add	r1, ip
 801ba20:	b209      	sxth	r1, r1
 801ba22:	4571      	cmp	r1, lr
 801ba24:	dc3a      	bgt.n	801ba9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801ba26:	eba2 020c 	sub.w	r2, r2, ip
 801ba2a:	b212      	sxth	r2, r2
 801ba2c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801ba30:	2a00      	cmp	r2, #0
 801ba32:	dcee      	bgt.n	801ba12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801ba34:	b00d      	add	sp, #52	; 0x34
 801ba36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba3a:	45c1      	cmp	r9, r8
 801ba3c:	db2e      	blt.n	801ba9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801ba3e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801ba42:	4499      	add	r9, r3
 801ba44:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801ba48:	4498      	add	r8, r3
 801ba4a:	fa0f f989 	sxth.w	r9, r9
 801ba4e:	fa0f f888 	sxth.w	r8, r8
 801ba52:	45c1      	cmp	r9, r8
 801ba54:	dc22      	bgt.n	801ba9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801ba56:	fa1f f28c 	uxth.w	r2, ip
 801ba5a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801ba5e:	45e6      	cmp	lr, ip
 801ba60:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ba64:	4413      	add	r3, r2
 801ba66:	fa1f f88e 	uxth.w	r8, lr
 801ba6a:	b29b      	uxth	r3, r3
 801ba6c:	fa0f f983 	sxth.w	r9, r3
 801ba70:	db0a      	blt.n	801ba88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801ba72:	eba3 0308 	sub.w	r3, r3, r8
 801ba76:	1ac9      	subs	r1, r1, r3
 801ba78:	b209      	sxth	r1, r1
 801ba7a:	2900      	cmp	r1, #0
 801ba7c:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801ba80:	ddd8      	ble.n	801ba34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ba82:	f8ad 9020 	strh.w	r9, [sp, #32]
 801ba86:	e7c4      	b.n	801ba12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801ba88:	4441      	add	r1, r8
 801ba8a:	b209      	sxth	r1, r1
 801ba8c:	4549      	cmp	r1, r9
 801ba8e:	dc05      	bgt.n	801ba9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801ba90:	eba2 0208 	sub.w	r2, r2, r8
 801ba94:	b212      	sxth	r2, r2
 801ba96:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801ba9a:	e7c9      	b.n	801ba30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801ba9c:	4606      	mov	r6, r0
 801ba9e:	e7b9      	b.n	801ba14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801baa0:	2c00      	cmp	r4, #0
 801baa2:	f47f af7d 	bne.w	801b9a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801baa6:	2e00      	cmp	r6, #0
 801baa8:	f000 81e0 	beq.w	801be6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 801baac:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801bab0:	4655      	mov	r5, sl
 801bab2:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801bab6:	b2b9      	uxth	r1, r7
 801bab8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801babc:	b2b3      	uxth	r3, r6
 801babe:	9104      	str	r1, [sp, #16]
 801bac0:	9804      	ldr	r0, [sp, #16]
 801bac2:	441a      	add	r2, r3
 801bac4:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801bac8:	b292      	uxth	r2, r2
 801baca:	4401      	add	r1, r0
 801bacc:	fa0f f882 	sxth.w	r8, r2
 801bad0:	b289      	uxth	r1, r1
 801bad2:	9105      	str	r1, [sp, #20]
 801bad4:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801bad8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801badc:	9b03      	ldr	r3, [sp, #12]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d058      	beq.n	801bb94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801bae2:	9902      	ldr	r1, [sp, #8]
 801bae4:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801bae8:	f7ff fd56 	bl	801b598 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801baec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801baf0:	b1d8      	cbz	r0, 801bb2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801baf2:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801baf6:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801bafa:	4576      	cmp	r6, lr
 801bafc:	dc26      	bgt.n	801bb4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801bafe:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801bb02:	44f4      	add	ip, lr
 801bb04:	fa0f fc8c 	sxth.w	ip, ip
 801bb08:	45e0      	cmp	r8, ip
 801bb0a:	db1f      	blt.n	801bb4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801bb0c:	428f      	cmp	r7, r1
 801bb0e:	fa1f fc81 	uxth.w	ip, r1
 801bb12:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801bb16:	dc0f      	bgt.n	801bb38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801bb18:	9805      	ldr	r0, [sp, #20]
 801bb1a:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801bb1e:	eba0 0c0c 	sub.w	ip, r0, ip
 801bb22:	eba1 010c 	sub.w	r1, r1, ip
 801bb26:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801bb2a:	4620      	mov	r0, r4
 801bb2c:	9903      	ldr	r1, [sp, #12]
 801bb2e:	3d08      	subs	r5, #8
 801bb30:	4604      	mov	r4, r0
 801bb32:	3901      	subs	r1, #1
 801bb34:	9103      	str	r1, [sp, #12]
 801bb36:	e7cf      	b.n	801bad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801bb38:	4461      	add	r1, ip
 801bb3a:	b209      	sxth	r1, r1
 801bb3c:	4549      	cmp	r1, r9
 801bb3e:	dcf5      	bgt.n	801bb2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801bb40:	9904      	ldr	r1, [sp, #16]
 801bb42:	eba1 0c0c 	sub.w	ip, r1, ip
 801bb46:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801bb4a:	e7ee      	b.n	801bb2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801bb4c:	428f      	cmp	r7, r1
 801bb4e:	dced      	bgt.n	801bb2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801bb50:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801bb54:	4461      	add	r1, ip
 801bb56:	b209      	sxth	r1, r1
 801bb58:	4589      	cmp	r9, r1
 801bb5a:	dbe7      	blt.n	801bb2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801bb5c:	4576      	cmp	r6, lr
 801bb5e:	fa1f fc8e 	uxth.w	ip, lr
 801bb62:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801bb66:	dc08      	bgt.n	801bb7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801bb68:	eba2 0c0c 	sub.w	ip, r2, ip
 801bb6c:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801bb70:	eba1 010c 	sub.w	r1, r1, ip
 801bb74:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801bb78:	e7d7      	b.n	801bb2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801bb7a:	4461      	add	r1, ip
 801bb7c:	b209      	sxth	r1, r1
 801bb7e:	4588      	cmp	r8, r1
 801bb80:	dbd4      	blt.n	801bb2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801bb82:	eba3 0c0c 	sub.w	ip, r3, ip
 801bb86:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801bb8a:	e7ce      	b.n	801bb2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801bb8c:	20015396 	.word	0x20015396
 801bb90:	20015394 	.word	0x20015394
 801bb94:	2c00      	cmp	r4, #0
 801bb96:	f000 8169 	beq.w	801be6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 801bb9a:	9b00      	ldr	r3, [sp, #0]
 801bb9c:	3301      	adds	r3, #1
 801bb9e:	f000 8165 	beq.w	801be6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 801bba2:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801bba6:	9802      	ldr	r0, [sp, #8]
 801bba8:	4621      	mov	r1, r4
 801bbaa:	f7ff fd67 	bl	801b67c <_ZNK8touchgfx4Rect8includesERKS0_>
 801bbae:	b120      	cbz	r0, 801bbba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801bbb0:	f8bd 1000 	ldrh.w	r1, [sp]
 801bbb4:	9801      	ldr	r0, [sp, #4]
 801bbb6:	f7ff fe79 	bl	801b8ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bbba:	9902      	ldr	r1, [sp, #8]
 801bbbc:	4620      	mov	r0, r4
 801bbbe:	f7ff fceb 	bl	801b598 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bbc2:	2800      	cmp	r0, #0
 801bbc4:	f000 809b 	beq.w	801bcfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801bbc8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801bbcc:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801bbd0:	fa1f f288 	uxth.w	r2, r8
 801bbd4:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801bbd8:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801bbdc:	19d5      	adds	r5, r2, r7
 801bbde:	b2a1      	uxth	r1, r4
 801bbe0:	45a0      	cmp	r8, r4
 801bbe2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801bbe6:	fa1f f985 	uxth.w	r9, r5
 801bbea:	440b      	add	r3, r1
 801bbec:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801bbf0:	fa0f f589 	sxth.w	r5, r9
 801bbf4:	b29b      	uxth	r3, r3
 801bbf6:	9503      	str	r5, [sp, #12]
 801bbf8:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801bbfc:	9507      	str	r5, [sp, #28]
 801bbfe:	f340 809d 	ble.w	801bd3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 801bc02:	1a52      	subs	r2, r2, r1
 801bc04:	4584      	cmp	ip, r0
 801bc06:	fa0f fe83 	sxth.w	lr, r3
 801bc0a:	b292      	uxth	r2, r2
 801bc0c:	b215      	sxth	r5, r2
 801bc0e:	dd2f      	ble.n	801bc70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33c>
 801bc10:	9e00      	ldr	r6, [sp, #0]
 801bc12:	fa1f fc8c 	uxth.w	ip, ip
 801bc16:	b280      	uxth	r0, r0
 801bc18:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801bc1c:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801bc20:	9e03      	ldr	r6, [sp, #12]
 801bc22:	ebac 0300 	sub.w	r3, ip, r0
 801bc26:	448c      	add	ip, r1
 801bc28:	eba6 060e 	sub.w	r6, r6, lr
 801bc2c:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801bc30:	b29b      	uxth	r3, r3
 801bc32:	4470      	add	r0, lr
 801bc34:	fa0f fc8c 	sxth.w	ip, ip
 801bc38:	b21c      	sxth	r4, r3
 801bc3a:	b200      	sxth	r0, r0
 801bc3c:	4366      	muls	r6, r4
 801bc3e:	ebac 0000 	sub.w	r0, ip, r0
 801bc42:	4368      	muls	r0, r5
 801bc44:	4286      	cmp	r6, r0
 801bc46:	db09      	blt.n	801bc5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 801bc48:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801bc4c:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801bc50:	4417      	add	r7, r2
 801bc52:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bc56:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801bc5a:	e681      	b.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bc5c:	440b      	add	r3, r1
 801bc5e:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801bc62:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801bc66:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801bc6a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801bc6e:	e677      	b.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bc70:	9e03      	ldr	r6, [sp, #12]
 801bc72:	45b6      	cmp	lr, r6
 801bc74:	da28      	bge.n	801bcc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801bc76:	9b00      	ldr	r3, [sp, #0]
 801bc78:	eba6 060e 	sub.w	r6, r6, lr
 801bc7c:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801bc80:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801bc84:	eb04 030c 	add.w	r3, r4, ip
 801bc88:	fa1f f883 	uxth.w	r8, r3
 801bc8c:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801bc90:	4403      	add	r3, r0
 801bc92:	fa0f f988 	sxth.w	r9, r8
 801bc96:	eba0 000c 	sub.w	r0, r0, ip
 801bc9a:	eba3 0308 	sub.w	r3, r3, r8
 801bc9e:	4368      	muls	r0, r5
 801bca0:	b29b      	uxth	r3, r3
 801bca2:	fa0f f883 	sxth.w	r8, r3
 801bca6:	fb08 f606 	mul.w	r6, r8, r6
 801bcaa:	42b0      	cmp	r0, r6
 801bcac:	dc06      	bgt.n	801bcbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801bcae:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801bcb2:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801bcb6:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801bcba:	e7c9      	b.n	801bc50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31c>
 801bcbc:	4423      	add	r3, r4
 801bcbe:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801bcc2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801bcc6:	e64b      	b.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bcc8:	eba3 0309 	sub.w	r3, r3, r9
 801bccc:	9807      	ldr	r0, [sp, #28]
 801bcce:	b29b      	uxth	r3, r3
 801bcd0:	2806      	cmp	r0, #6
 801bcd2:	fa0f fc83 	sxth.w	ip, r3
 801bcd6:	d818      	bhi.n	801bd0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801bcd8:	4652      	mov	r2, sl
 801bcda:	ab0a      	add	r3, sp, #40	; 0x28
 801bcdc:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801bce0:	6851      	ldr	r1, [r2, #4]
 801bce2:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801bce6:	c303      	stmia	r3!, {r0, r1}
 801bce8:	9b03      	ldr	r3, [sp, #12]
 801bcea:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801bcee:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801bcf2:	ab0a      	add	r3, sp, #40	; 0x28
 801bcf4:	9801      	ldr	r0, [sp, #4]
 801bcf6:	e893 0006 	ldmia.w	r3, {r1, r2}
 801bcfa:	f7ff fdf9 	bl	801b8f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bcfe:	9b00      	ldr	r3, [sp, #0]
 801bd00:	f1aa 0a08 	sub.w	sl, sl, #8
 801bd04:	3b01      	subs	r3, #1
 801bd06:	9300      	str	r3, [sp, #0]
 801bd08:	e747      	b.n	801bb9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801bd0a:	9800      	ldr	r0, [sp, #0]
 801bd0c:	45ac      	cmp	ip, r5
 801bd0e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801bd12:	db0c      	blt.n	801bd2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fa>
 801bd14:	4417      	add	r7, r2
 801bd16:	4458      	add	r0, fp
 801bd18:	f8ad 4020 	strh.w	r4, [sp, #32]
 801bd1c:	b2bf      	uxth	r7, r7
 801bd1e:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801bd22:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801bd26:	440f      	add	r7, r1
 801bd28:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801bd2c:	e618      	b.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bd2e:	4458      	add	r0, fp
 801bd30:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801bd34:	443b      	add	r3, r7
 801bd36:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801bd3a:	e611      	b.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bd3c:	fa1f f18c 	uxth.w	r1, ip
 801bd40:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801bd44:	b282      	uxth	r2, r0
 801bd46:	4584      	cmp	ip, r0
 801bd48:	eb01 0e05 	add.w	lr, r1, r5
 801bd4c:	9204      	str	r2, [sp, #16]
 801bd4e:	fa1f fe8e 	uxth.w	lr, lr
 801bd52:	9e04      	ldr	r6, [sp, #16]
 801bd54:	fa0f f28e 	sxth.w	r2, lr
 801bd58:	9205      	str	r2, [sp, #20]
 801bd5a:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801bd5e:	4432      	add	r2, r6
 801bd60:	b292      	uxth	r2, r2
 801bd62:	9206      	str	r2, [sp, #24]
 801bd64:	da26      	bge.n	801bdb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x480>
 801bd66:	eba3 0309 	sub.w	r3, r3, r9
 801bd6a:	eba2 020e 	sub.w	r2, r2, lr
 801bd6e:	eba0 000c 	sub.w	r0, r0, ip
 801bd72:	eba4 0408 	sub.w	r4, r4, r8
 801bd76:	b29b      	uxth	r3, r3
 801bd78:	b292      	uxth	r2, r2
 801bd7a:	fa0f fa83 	sxth.w	sl, r3
 801bd7e:	b211      	sxth	r1, r2
 801bd80:	fb0a f000 	mul.w	r0, sl, r0
 801bd84:	434c      	muls	r4, r1
 801bd86:	42a0      	cmp	r0, r4
 801bd88:	9800      	ldr	r0, [sp, #0]
 801bd8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801bd8e:	dc06      	bgt.n	801bd9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801bd90:	4458      	add	r0, fp
 801bd92:	9a05      	ldr	r2, [sp, #20]
 801bd94:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801bd98:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801bd9c:	e7ca      	b.n	801bd34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 801bd9e:	eb0b 0300 	add.w	r3, fp, r0
 801bda2:	9903      	ldr	r1, [sp, #12]
 801bda4:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801bda8:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801bdac:	442a      	add	r2, r5
 801bdae:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801bdb2:	e5d5      	b.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bdb4:	9e04      	ldr	r6, [sp, #16]
 801bdb6:	9a03      	ldr	r2, [sp, #12]
 801bdb8:	1b89      	subs	r1, r1, r6
 801bdba:	b21e      	sxth	r6, r3
 801bdbc:	b289      	uxth	r1, r1
 801bdbe:	4296      	cmp	r6, r2
 801bdc0:	fa0f fc81 	sxth.w	ip, r1
 801bdc4:	dd25      	ble.n	801be12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4de>
 801bdc6:	eba3 0309 	sub.w	r3, r3, r9
 801bdca:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801bdce:	9e05      	ldr	r6, [sp, #20]
 801bdd0:	eba4 0408 	sub.w	r4, r4, r8
 801bdd4:	b29b      	uxth	r3, r3
 801bdd6:	eba6 0902 	sub.w	r9, r6, r2
 801bdda:	fb0c f404 	mul.w	r4, ip, r4
 801bdde:	b218      	sxth	r0, r3
 801bde0:	9a00      	ldr	r2, [sp, #0]
 801bde2:	fb00 f909 	mul.w	r9, r0, r9
 801bde6:	00d2      	lsls	r2, r2, #3
 801bde8:	454c      	cmp	r4, r9
 801bdea:	db03      	blt.n	801bdf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801bdec:	445a      	add	r2, fp
 801bdee:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801bdf2:	e79f      	b.n	801bd34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 801bdf4:	eb0b 0302 	add.w	r3, fp, r2
 801bdf8:	9a03      	ldr	r2, [sp, #12]
 801bdfa:	4429      	add	r1, r5
 801bdfc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801be00:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801be04:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801be08:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801be0c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801be10:	e5a6      	b.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801be12:	9b06      	ldr	r3, [sp, #24]
 801be14:	9c07      	ldr	r4, [sp, #28]
 801be16:	eba3 020e 	sub.w	r2, r3, lr
 801be1a:	2c06      	cmp	r4, #6
 801be1c:	b292      	uxth	r2, r2
 801be1e:	b213      	sxth	r3, r2
 801be20:	d80d      	bhi.n	801be3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50a>
 801be22:	4651      	mov	r1, sl
 801be24:	aa0a      	add	r2, sp, #40	; 0x28
 801be26:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801be2a:	6849      	ldr	r1, [r1, #4]
 801be2c:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801be30:	9b05      	ldr	r3, [sp, #20]
 801be32:	c203      	stmia	r2!, {r0, r1}
 801be34:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801be38:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801be3c:	e759      	b.n	801bcf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801be3e:	9c00      	ldr	r4, [sp, #0]
 801be40:	4563      	cmp	r3, ip
 801be42:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801be46:	db0d      	blt.n	801be64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x530>
 801be48:	4429      	add	r1, r5
 801be4a:	9a04      	ldr	r2, [sp, #16]
 801be4c:	445c      	add	r4, fp
 801be4e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801be52:	b289      	uxth	r1, r1
 801be54:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801be58:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801be5c:	4411      	add	r1, r2
 801be5e:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801be62:	e57d      	b.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801be64:	445c      	add	r4, fp
 801be66:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801be6a:	e79f      	b.n	801bdac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x478>
 801be6c:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801be70:	2f07      	cmp	r7, #7
 801be72:	d806      	bhi.n	801be82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 801be74:	ab08      	add	r3, sp, #32
 801be76:	9801      	ldr	r0, [sp, #4]
 801be78:	e893 0006 	ldmia.w	r3, {r1, r2}
 801be7c:	f7ff fd38 	bl	801b8f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801be80:	e5d8      	b.n	801ba34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801be82:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
 801be86:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801be8a:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801be8e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801be92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801be96:	2400      	movs	r4, #0
 801be98:	9304      	str	r3, [sp, #16]
 801be9a:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801be9e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801bea2:	9300      	str	r3, [sp, #0]
 801bea4:	4690      	mov	r8, r2
 801bea6:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801beaa:	9303      	str	r3, [sp, #12]
 801beac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801beb0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 801beb4:	6818      	ldr	r0, [r3, #0]
 801beb6:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801beba:	9206      	str	r2, [sp, #24]
 801bebc:	bf16      	itet	ne
 801bebe:	9904      	ldrne	r1, [sp, #16]
 801bec0:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801bec4:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801bec8:	9305      	str	r3, [sp, #20]
 801beca:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801bece:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801bed2:	fb16 f601 	smulbb	r6, r6, r1
 801bed6:	6859      	ldr	r1, [r3, #4]
 801bed8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bedc:	4671      	mov	r1, lr
 801bede:	a80a      	add	r0, sp, #40	; 0x28
 801bee0:	f7ff fbf2 	bl	801b6c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bee4:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801bee8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801beec:	9b03      	ldr	r3, [sp, #12]
 801beee:	9a00      	ldr	r2, [sp, #0]
 801bef0:	fb11 f100 	smulbb	r1, r1, r0
 801bef4:	2008      	movs	r0, #8
 801bef6:	fb02 6603 	mla	r6, r2, r3, r6
 801befa:	1b8e      	subs	r6, r1, r6
 801befc:	fb91 f1f0 	sdiv	r1, r1, r0
 801bf00:	42b1      	cmp	r1, r6
 801bf02:	dc21      	bgt.n	801bf48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 801bf04:	4556      	cmp	r6, sl
 801bf06:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801bf0a:	da03      	bge.n	801bf14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 801bf0c:	b1e6      	cbz	r6, 801bf48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 801bf0e:	46b2      	mov	sl, r6
 801bf10:	4645      	mov	r5, r8
 801bf12:	464c      	mov	r4, r9
 801bf14:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801bf18:	f118 0f02 	cmn.w	r8, #2
 801bf1c:	d1c8      	bne.n	801beb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 801bf1e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801bf22:	f1a7 0708 	sub.w	r7, r7, #8
 801bf26:	4691      	mov	r9, r2
 801bf28:	d1b7      	bne.n	801be9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x566>
 801bf2a:	9b01      	ldr	r3, [sp, #4]
 801bf2c:	b2a6      	uxth	r6, r4
 801bf2e:	00e4      	lsls	r4, r4, #3
 801bf30:	1918      	adds	r0, r3, r4
 801bf32:	1c6b      	adds	r3, r5, #1
 801bf34:	d10b      	bne.n	801bf4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x61a>
 801bf36:	4601      	mov	r1, r0
 801bf38:	9802      	ldr	r0, [sp, #8]
 801bf3a:	f7ff fbc5 	bl	801b6c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bf3e:	4631      	mov	r1, r6
 801bf40:	9801      	ldr	r0, [sp, #4]
 801bf42:	f7ff fcb3 	bl	801b8ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bf46:	e50b      	b.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bf48:	4645      	mov	r5, r8
 801bf4a:	464c      	mov	r4, r9
 801bf4c:	e7ed      	b.n	801bf2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f6>
 801bf4e:	9b01      	ldr	r3, [sp, #4]
 801bf50:	00ed      	lsls	r5, r5, #3
 801bf52:	445c      	add	r4, fp
 801bf54:	1959      	adds	r1, r3, r5
 801bf56:	445d      	add	r5, fp
 801bf58:	f7ff fbb6 	bl	801b6c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bf5c:	9b02      	ldr	r3, [sp, #8]
 801bf5e:	cb03      	ldmia	r3!, {r0, r1}
 801bf60:	9b02      	ldr	r3, [sp, #8]
 801bf62:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801bf66:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801bf6a:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801bf6e:	6861      	ldr	r1, [r4, #4]
 801bf70:	c303      	stmia	r3!, {r0, r1}
 801bf72:	e7e4      	b.n	801bf3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60a>

0801bf74 <_ZN8touchgfx11Application10invalidateEv>:
 801bf74:	4b09      	ldr	r3, [pc, #36]	; (801bf9c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801bf76:	b082      	sub	sp, #8
 801bf78:	2100      	movs	r1, #0
 801bf7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf7e:	4b08      	ldr	r3, [pc, #32]	; (801bfa0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801bf80:	9100      	str	r1, [sp, #0]
 801bf82:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bf86:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bf8a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bf8e:	ab02      	add	r3, sp, #8
 801bf90:	e913 0006 	ldmdb	r3, {r1, r2}
 801bf94:	b002      	add	sp, #8
 801bf96:	f7ff bccd 	b.w	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bf9a:	bf00      	nop
 801bf9c:	20015394 	.word	0x20015394
 801bfa0:	20015396 	.word	0x20015396

0801bfa4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfa8:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801bfac:	b09b      	sub	sp, #108	; 0x6c
 801bfae:	4604      	mov	r4, r0
 801bfb0:	4630      	mov	r0, r6
 801bfb2:	f7fb f926 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bfb6:	4605      	mov	r5, r0
 801bfb8:	b940      	cbnz	r0, 801bfcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801bfba:	4620      	mov	r0, r4
 801bfbc:	e896 0006 	ldmia.w	r6, {r1, r2}
 801bfc0:	f7ff fcb8 	bl	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bfc4:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801bfc8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801bfcc:	4bc6      	ldr	r3, [pc, #792]	; (801c2e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	b33b      	cbz	r3, 801c022 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 801bfd2:	4dc6      	ldr	r5, [pc, #792]	; (801c2ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801bfd4:	4628      	mov	r0, r5
 801bfd6:	f7fb f914 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bfda:	4606      	mov	r6, r0
 801bfdc:	bb08      	cbnz	r0, 801c022 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 801bfde:	4628      	mov	r0, r5
 801bfe0:	f7ff f97c 	bl	801b2dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bfe4:	6829      	ldr	r1, [r5, #0]
 801bfe6:	686a      	ldr	r2, [r5, #4]
 801bfe8:	4620      	mov	r0, r4
 801bfea:	f7ff fca3 	bl	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bfee:	802e      	strh	r6, [r5, #0]
 801bff0:	806e      	strh	r6, [r5, #2]
 801bff2:	80ae      	strh	r6, [r5, #4]
 801bff4:	80ee      	strh	r6, [r5, #6]
 801bff6:	4dbe      	ldr	r5, [pc, #760]	; (801c2f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801bff8:	a809      	add	r0, sp, #36	; 0x24
 801bffa:	f7ff fc04 	bl	801b806 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bffe:	882f      	ldrh	r7, [r5, #0]
 801c000:	463e      	mov	r6, r7
 801c002:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c006:	42b3      	cmp	r3, r6
 801c008:	d912      	bls.n	801c030 <_ZN8touchgfx11Application15drawCachedAreasEv+0x8c>
 801c00a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c00e:	3601      	adds	r6, #1
 801c010:	a809      	add	r0, sp, #36	; 0x24
 801c012:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801c016:	b2b6      	uxth	r6, r6
 801c018:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801c01c:	f7ff fc68 	bl	801b8f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c020:	e7ef      	b.n	801c002 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5e>
 801c022:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c026:	2b00      	cmp	r3, #0
 801c028:	d1e5      	bne.n	801bff6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52>
 801c02a:	b01b      	add	sp, #108	; 0x6c
 801c02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c030:	463e      	mov	r6, r7
 801c032:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801c036:	42b3      	cmp	r3, r6
 801c038:	d90b      	bls.n	801c052 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801c03a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c03e:	3601      	adds	r6, #1
 801c040:	4620      	mov	r0, r4
 801c042:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801c046:	b2b6      	uxth	r6, r6
 801c048:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801c04c:	f7ff fc72 	bl	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c050:	e7ef      	b.n	801c032 <_ZN8touchgfx11Application15drawCachedAreasEv+0x8e>
 801c052:	4ea8      	ldr	r6, [pc, #672]	; (801c2f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801c054:	6833      	ldr	r3, [r6, #0]
 801c056:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c05a:	2b01      	cmp	r3, #1
 801c05c:	f040 80d2 	bne.w	801c204 <_ZN8touchgfx11Application15drawCachedAreasEv+0x260>
 801c060:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801c064:	4639      	mov	r1, r7
 801c066:	f8b4 c0e8 	ldrh.w	ip, [r4, #232]	; 0xe8
 801c06a:	2700      	movs	r7, #0
 801c06c:	33aa      	adds	r3, #170	; 0xaa
 801c06e:	458c      	cmp	ip, r1
 801c070:	f103 0308 	add.w	r3, r3, #8
 801c074:	dd0a      	ble.n	801c08c <_ZN8touchgfx11Application15drawCachedAreasEv+0xe8>
 801c076:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c07a:	3101      	adds	r1, #1
 801c07c:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801c080:	4402      	add	r2, r0
 801c082:	b212      	sxth	r2, r2
 801c084:	4297      	cmp	r7, r2
 801c086:	bfb8      	it	lt
 801c088:	4617      	movlt	r7, r2
 801c08a:	e7f0      	b.n	801c06e <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801c08c:	4b9a      	ldr	r3, [pc, #616]	; (801c2f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801c08e:	f8b3 9000 	ldrh.w	r9, [r3]
 801c092:	2300      	movs	r3, #0
 801c094:	f1b9 0f0f 	cmp.w	r9, #15
 801c098:	bf8c      	ite	hi
 801c09a:	ea4f 09d9 	movhi.w	r9, r9, lsr #3
 801c09e:	f04f 0901 	movls.w	r9, #1
 801c0a2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c0a6:	f8bd 801a 	ldrh.w	r8, [sp, #26]
 801c0aa:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801c0ae:	4440      	add	r0, r8
 801c0b0:	fa0f f880 	sxth.w	r8, r0
 801c0b4:	6830      	ldr	r0, [r6, #0]
 801c0b6:	4547      	cmp	r7, r8
 801c0b8:	6803      	ldr	r3, [r0, #0]
 801c0ba:	f340 8086 	ble.w	801c1ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x226>
 801c0be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c0c2:	4798      	blx	r3
 801c0c4:	eb08 0309 	add.w	r3, r8, r9
 801c0c8:	4298      	cmp	r0, r3
 801c0ca:	da08      	bge.n	801c0de <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801c0cc:	4287      	cmp	r7, r0
 801c0ce:	dd06      	ble.n	801c0de <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801c0d0:	4580      	cmp	r8, r0
 801c0d2:	dd70      	ble.n	801c1b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 801c0d4:	f1b8 0f00 	cmp.w	r8, #0
 801c0d8:	dd6d      	ble.n	801c1b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 801c0da:	4638      	mov	r0, r7
 801c0dc:	e004      	b.n	801c0e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x144>
 801c0de:	4580      	cmp	r8, r0
 801c0e0:	dcfb      	bgt.n	801c0da <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801c0e2:	42b8      	cmp	r0, r7
 801c0e4:	bfa8      	it	ge
 801c0e6:	4638      	movge	r0, r7
 801c0e8:	4b84      	ldr	r3, [pc, #528]	; (801c2fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801c0ea:	eba0 0008 	sub.w	r0, r0, r8
 801c0ee:	2200      	movs	r2, #0
 801c0f0:	f8ad 8016 	strh.w	r8, [sp, #22]
 801c0f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c0f8:	f8b5 8000 	ldrh.w	r8, [r5]
 801c0fc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c100:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c104:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c108:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c10c:	4543      	cmp	r3, r8
 801c10e:	d9ca      	bls.n	801c0a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 801c110:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 801c114:	ab07      	add	r3, sp, #28
 801c116:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c11a:	6851      	ldr	r1, [r2, #4]
 801c11c:	c303      	stmia	r3!, {r0, r1}
 801c11e:	a905      	add	r1, sp, #20
 801c120:	a807      	add	r0, sp, #28
 801c122:	f7ff fa39 	bl	801b598 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c126:	2800      	cmp	r0, #0
 801c128:	d04c      	beq.n	801c1c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x220>
 801c12a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801c12e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801c132:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801c136:	4686      	mov	lr, r0
 801c138:	4290      	cmp	r0, r2
 801c13a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801c13e:	4450      	add	r0, sl
 801c140:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801c144:	bfb8      	it	lt
 801c146:	4696      	movlt	lr, r2
 801c148:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c14c:	4452      	add	r2, sl
 801c14e:	b280      	uxth	r0, r0
 801c150:	4299      	cmp	r1, r3
 801c152:	468c      	mov	ip, r1
 801c154:	b292      	uxth	r2, r2
 801c156:	f8ad e01c 	strh.w	lr, [sp, #28]
 801c15a:	fa0f fb80 	sxth.w	fp, r0
 801c15e:	bfb8      	it	lt
 801c160:	469c      	movlt	ip, r3
 801c162:	fa0f fa82 	sxth.w	sl, r2
 801c166:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c16a:	45d3      	cmp	fp, sl
 801c16c:	bfb8      	it	lt
 801c16e:	4602      	movlt	r2, r0
 801c170:	eba2 020e 	sub.w	r2, r2, lr
 801c174:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c178:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c17c:	4411      	add	r1, r2
 801c17e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c182:	4413      	add	r3, r2
 801c184:	b289      	uxth	r1, r1
 801c186:	b29b      	uxth	r3, r3
 801c188:	b208      	sxth	r0, r1
 801c18a:	b21a      	sxth	r2, r3
 801c18c:	4290      	cmp	r0, r2
 801c18e:	bfb8      	it	lt
 801c190:	460b      	movlt	r3, r1
 801c192:	eba3 030c 	sub.w	r3, r3, ip
 801c196:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c19a:	a807      	add	r0, sp, #28
 801c19c:	f7fb f831 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c1a0:	b920      	cbnz	r0, 801c1ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x208>
 801c1a2:	6823      	ldr	r3, [r4, #0]
 801c1a4:	a907      	add	r1, sp, #28
 801c1a6:	4620      	mov	r0, r4
 801c1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1aa:	4798      	blx	r3
 801c1ac:	f108 0801 	add.w	r8, r8, #1
 801c1b0:	fa1f f888 	uxth.w	r8, r8
 801c1b4:	e7a8      	b.n	801c108 <_ZN8touchgfx11Application15drawCachedAreasEv+0x164>
 801c1b6:	6830      	ldr	r0, [r6, #0]
 801c1b8:	2101      	movs	r1, #1
 801c1ba:	6803      	ldr	r3, [r0, #0]
 801c1bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c1c0:	4798      	blx	r3
 801c1c2:	e770      	b.n	801c0a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 801c1c4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801c1c8:	e7e7      	b.n	801c19a <_ZN8touchgfx11Application15drawCachedAreasEv+0x1f6>
 801c1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1cc:	4798      	blx	r3
 801c1ce:	4b4c      	ldr	r3, [pc, #304]	; (801c300 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801c1d0:	781b      	ldrb	r3, [r3, #0]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	f43f af29 	beq.w	801c02a <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 801c1d8:	2300      	movs	r3, #0
 801c1da:	882d      	ldrh	r5, [r5, #0]
 801c1dc:	34ea      	adds	r4, #234	; 0xea
 801c1de:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801c1e2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801c1e6:	42ab      	cmp	r3, r5
 801c1e8:	f67f af1f 	bls.w	801c02a <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 801c1ec:	ab1a      	add	r3, sp, #104	; 0x68
 801c1ee:	4620      	mov	r0, r4
 801c1f0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c1f4:	3501      	adds	r5, #1
 801c1f6:	3b44      	subs	r3, #68	; 0x44
 801c1f8:	b2ad      	uxth	r5, r5
 801c1fa:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c1fe:	f7ff fb77 	bl	801b8f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c202:	e7ee      	b.n	801c1e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801c204:	2b02      	cmp	r3, #2
 801c206:	f040 8137 	bne.w	801c478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>
 801c20a:	4b3e      	ldr	r3, [pc, #248]	; (801c304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801c20c:	781b      	ldrb	r3, [r3, #0]
 801c20e:	2b01      	cmp	r3, #1
 801c210:	d02c      	beq.n	801c26c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c8>
 801c212:	f104 0aa8 	add.w	sl, r4, #168	; 0xa8
 801c216:	882a      	ldrh	r2, [r5, #0]
 801c218:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801c21c:	3201      	adds	r2, #1
 801c21e:	b292      	uxth	r2, r2
 801c220:	2900      	cmp	r1, #0
 801c222:	d0d4      	beq.n	801c1ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 801c224:	f8b4 70aa 	ldrh.w	r7, [r4, #170]	; 0xaa
 801c228:	4610      	mov	r0, r2
 801c22a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801c22e:	f04f 0900 	mov.w	r9, #0
 801c232:	441f      	add	r7, r3
 801c234:	b23f      	sxth	r7, r7
 801c236:	b283      	uxth	r3, r0
 801c238:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 801c23c:	4299      	cmp	r1, r3
 801c23e:	f240 80c5 	bls.w	801c3cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x428>
 801c242:	44a0      	add	r8, r4
 801c244:	eb04 0bc0 	add.w	fp, r4, r0, lsl #3
 801c248:	4684      	mov	ip, r0
 801c24a:	f9b8 30aa 	ldrsh.w	r3, [r8, #170]	; 0xaa
 801c24e:	f9bb e0aa 	ldrsh.w	lr, [fp, #170]	; 0xaa
 801c252:	4573      	cmp	r3, lr
 801c254:	f340 80a7 	ble.w	801c3a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801c258:	f8bb 70ae 	ldrh.w	r7, [fp, #174]	; 0xae
 801c25c:	4477      	add	r7, lr
 801c25e:	b23f      	sxth	r7, r7
 801c260:	429f      	cmp	r7, r3
 801c262:	bfa8      	it	ge
 801c264:	461f      	movge	r7, r3
 801c266:	3001      	adds	r0, #1
 801c268:	46e1      	mov	r9, ip
 801c26a:	e7e4      	b.n	801c236 <_ZN8touchgfx11Application15drawCachedAreasEv+0x292>
 801c26c:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801c270:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801c274:	f1bb 0f00 	cmp.w	fp, #0
 801c278:	d0a9      	beq.n	801c1ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 801c27a:	882b      	ldrh	r3, [r5, #0]
 801c27c:	f04f 0800 	mov.w	r8, #0
 801c280:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801c284:	3301      	adds	r3, #1
 801c286:	b29b      	uxth	r3, r3
 801c288:	b299      	uxth	r1, r3
 801c28a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801c28e:	458b      	cmp	fp, r1
 801c290:	d93a      	bls.n	801c308 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 801c292:	4427      	add	r7, r4
 801c294:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801c298:	469c      	mov	ip, r3
 801c29a:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 801c29e:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 801c2a2:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801c2a6:	4408      	add	r0, r1
 801c2a8:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801c2ac:	4471      	add	r1, lr
 801c2ae:	b200      	sxth	r0, r0
 801c2b0:	b209      	sxth	r1, r1
 801c2b2:	4288      	cmp	r0, r1
 801c2b4:	da06      	bge.n	801c2c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801c2b6:	4586      	cmp	lr, r0
 801c2b8:	4672      	mov	r2, lr
 801c2ba:	bfb8      	it	lt
 801c2bc:	4602      	movlt	r2, r0
 801c2be:	3301      	adds	r3, #1
 801c2c0:	46e0      	mov	r8, ip
 801c2c2:	e7e1      	b.n	801c288 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e4>
 801c2c4:	d10b      	bne.n	801c2de <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 801c2c6:	f9b7 c0ae 	ldrsh.w	ip, [r7, #174]	; 0xae
 801c2ca:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801c2ce:	458c      	cmp	ip, r1
 801c2d0:	bfb4      	ite	lt
 801c2d2:	469c      	movlt	ip, r3
 801c2d4:	46c4      	movge	ip, r8
 801c2d6:	4572      	cmp	r2, lr
 801c2d8:	bfb8      	it	lt
 801c2da:	4672      	movlt	r2, lr
 801c2dc:	e7ef      	b.n	801c2be <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 801c2de:	428a      	cmp	r2, r1
 801c2e0:	46c4      	mov	ip, r8
 801c2e2:	bfb8      	it	lt
 801c2e4:	460a      	movlt	r2, r1
 801c2e6:	e7ea      	b.n	801c2be <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 801c2e8:	200153d8 	.word	0x200153d8
 801c2ec:	200153e4 	.word	0x200153e4
 801c2f0:	20000044 	.word	0x20000044
 801c2f4:	200153a0 	.word	0x200153a0
 801c2f8:	20015396 	.word	0x20015396
 801c2fc:	20015394 	.word	0x20015394
 801c300:	2001539e 	.word	0x2001539e
 801c304:	20015398 	.word	0x20015398
 801c308:	19e1      	adds	r1, r4, r7
 801c30a:	ab07      	add	r3, sp, #28
 801c30c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801c310:	6849      	ldr	r1, [r1, #4]
 801c312:	c303      	stmia	r3!, {r0, r1}
 801c314:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c318:	a807      	add	r0, sp, #28
 801c31a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c31e:	2b13      	cmp	r3, #19
 801c320:	440b      	add	r3, r1
 801c322:	bfd8      	it	le
 801c324:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801c328:	1a9b      	subs	r3, r3, r2
 801c32a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c32e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c332:	f7fe ffed 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c336:	a807      	add	r0, sp, #28
 801c338:	f7fa ff63 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c33c:	2800      	cmp	r0, #0
 801c33e:	d197      	bne.n	801c270 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 801c340:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c344:	4427      	add	r7, r4
 801c346:	6830      	ldr	r0, [r6, #0]
 801c348:	f1bc 0f14 	cmp.w	ip, #20
 801c34c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c350:	f8d0 e000 	ldr.w	lr, [r0]
 801c354:	bfa8      	it	ge
 801c356:	f04f 0c14 	movge.w	ip, #20
 801c35a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c35e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c362:	fa1f fc8c 	uxth.w	ip, ip
 801c366:	f8cd c000 	str.w	ip, [sp]
 801c36a:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801c36e:	47d0      	blx	sl
 801c370:	4682      	mov	sl, r0
 801c372:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c376:	a807      	add	r0, sp, #28
 801c378:	f7fe ffb0 	bl	801b2dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c37c:	6823      	ldr	r3, [r4, #0]
 801c37e:	4620      	mov	r0, r4
 801c380:	a907      	add	r1, sp, #28
 801c382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c384:	4798      	blx	r3
 801c386:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 801c38a:	eba0 000a 	sub.w	r0, r0, sl
 801c38e:	b200      	sxth	r0, r0
 801c390:	f8a7 00ac 	strh.w	r0, [r7, #172]	; 0xac
 801c394:	2800      	cmp	r0, #0
 801c396:	f47f af6b 	bne.w	801c270 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 801c39a:	fa1f f188 	uxth.w	r1, r8
 801c39e:	4648      	mov	r0, r9
 801c3a0:	f7ff fa84 	bl	801b8ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c3a4:	e764      	b.n	801c270 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 801c3a6:	d10c      	bne.n	801c3c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41e>
 801c3a8:	f9b8 e0ac 	ldrsh.w	lr, [r8, #172]	; 0xac
 801c3ac:	f9bb c0ac 	ldrsh.w	ip, [fp, #172]	; 0xac
 801c3b0:	45e6      	cmp	lr, ip
 801c3b2:	bfb4      	ite	lt
 801c3b4:	4684      	movlt	ip, r0
 801c3b6:	46cc      	movge	ip, r9
 801c3b8:	f8bb e0ae 	ldrh.w	lr, [fp, #174]	; 0xae
 801c3bc:	4473      	add	r3, lr
 801c3be:	b21b      	sxth	r3, r3
 801c3c0:	e74e      	b.n	801c260 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2bc>
 801c3c2:	4577      	cmp	r7, lr
 801c3c4:	46cc      	mov	ip, r9
 801c3c6:	bfa8      	it	ge
 801c3c8:	4677      	movge	r7, lr
 801c3ca:	e74c      	b.n	801c266 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c2>
 801c3cc:	eb0a 0008 	add.w	r0, sl, r8
 801c3d0:	44a0      	add	r8, r4
 801c3d2:	f9b8 b0ae 	ldrsh.w	fp, [r8, #174]	; 0xae
 801c3d6:	f1bb 0f13 	cmp.w	fp, #19
 801c3da:	bfdc      	itt	le
 801c3dc:	f8b8 70aa 	ldrhle.w	r7, [r8, #170]	; 0xaa
 801c3e0:	445f      	addle	r7, fp
 801c3e2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c3e6:	bfd8      	it	le
 801c3e8:	b23f      	sxthle	r7, r7
 801c3ea:	f7fa ff0a 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c3ee:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c3f2:	2800      	cmp	r0, #0
 801c3f4:	f47f af14 	bne.w	801c220 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27c>
 801c3f8:	f9b8 20aa 	ldrsh.w	r2, [r8, #170]	; 0xaa
 801c3fc:	fa1f fb8b 	uxth.w	fp, fp
 801c400:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c404:	1abf      	subs	r7, r7, r2
 801c406:	f9b8 10a8 	ldrsh.w	r1, [r8, #168]	; 0xa8
 801c40a:	f9b8 30ac 	ldrsh.w	r3, [r8, #172]	; 0xac
 801c40e:	2f14      	cmp	r7, #20
 801c410:	6830      	ldr	r0, [r6, #0]
 801c412:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c416:	b289      	uxth	r1, r1
 801c418:	bfa8      	it	ge
 801c41a:	2714      	movge	r7, #20
 801c41c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801c420:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c424:	b292      	uxth	r2, r2
 801c426:	f8d0 c000 	ldr.w	ip, [r0]
 801c42a:	b2bf      	uxth	r7, r7
 801c42c:	b29b      	uxth	r3, r3
 801c42e:	455f      	cmp	r7, fp
 801c430:	bf94      	ite	ls
 801c432:	9700      	strls	r7, [sp, #0]
 801c434:	f8cd b000 	strhi.w	fp, [sp]
 801c438:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
 801c43c:	47b8      	blx	r7
 801c43e:	6823      	ldr	r3, [r4, #0]
 801c440:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c444:	a907      	add	r1, sp, #28
 801c446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c448:	4620      	mov	r0, r4
 801c44a:	4798      	blx	r3
 801c44c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801c450:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801c454:	f8b8 20aa 	ldrh.w	r2, [r8, #170]	; 0xaa
 801c458:	1a5b      	subs	r3, r3, r1
 801c45a:	440a      	add	r2, r1
 801c45c:	b21b      	sxth	r3, r3
 801c45e:	f8a8 20aa 	strh.w	r2, [r8, #170]	; 0xaa
 801c462:	f8a8 30ae 	strh.w	r3, [r8, #174]	; 0xae
 801c466:	2b00      	cmp	r3, #0
 801c468:	f47f aed5 	bne.w	801c216 <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 801c46c:	fa1f f189 	uxth.w	r1, r9
 801c470:	4650      	mov	r0, sl
 801c472:	f7ff fa1b 	bl	801b8ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c476:	e6ce      	b.n	801c216 <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 801c478:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c47c:	42bb      	cmp	r3, r7
 801c47e:	f67f aea6 	bls.w	801c1ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 801c482:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801c486:	ab07      	add	r3, sp, #28
 801c488:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c48c:	6851      	ldr	r1, [r2, #4]
 801c48e:	c303      	stmia	r3!, {r0, r1}
 801c490:	a807      	add	r0, sp, #28
 801c492:	f7fa feb6 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c496:	b920      	cbnz	r0, 801c4a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fe>
 801c498:	6823      	ldr	r3, [r4, #0]
 801c49a:	a907      	add	r1, sp, #28
 801c49c:	4620      	mov	r0, r4
 801c49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4a0:	4798      	blx	r3
 801c4a2:	3701      	adds	r7, #1
 801c4a4:	b2bf      	uxth	r7, r7
 801c4a6:	e7e7      	b.n	801c478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>

0801c4a8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c4a8:	4b03      	ldr	r3, [pc, #12]	; (801c4b8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c4aa:	2200      	movs	r2, #0
 801c4ac:	801a      	strh	r2, [r3, #0]
 801c4ae:	805a      	strh	r2, [r3, #2]
 801c4b0:	809a      	strh	r2, [r3, #4]
 801c4b2:	80da      	strh	r2, [r3, #6]
 801c4b4:	4770      	bx	lr
 801c4b6:	bf00      	nop
 801c4b8:	200153e4 	.word	0x200153e4

0801c4bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4c0:	b09d      	sub	sp, #116	; 0x74
 801c4c2:	4606      	mov	r6, r0
 801c4c4:	4614      	mov	r4, r2
 801c4c6:	468a      	mov	sl, r1
 801c4c8:	a803      	add	r0, sp, #12
 801c4ca:	461d      	mov	r5, r3
 801c4cc:	f000 fddd 	bl	801d08a <_ZN8touchgfx12TextProviderC1Ev>
 801c4d0:	6833      	ldr	r3, [r6, #0]
 801c4d2:	4630      	mov	r0, r6
 801c4d4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c4da:	4798      	blx	r3
 801c4dc:	6833      	ldr	r3, [r6, #0]
 801c4de:	4607      	mov	r7, r0
 801c4e0:	4630      	mov	r0, r6
 801c4e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c4e4:	4798      	blx	r3
 801c4e6:	462a      	mov	r2, r5
 801c4e8:	2500      	movs	r5, #0
 801c4ea:	4621      	mov	r1, r4
 801c4ec:	9000      	str	r0, [sp, #0]
 801c4ee:	463b      	mov	r3, r7
 801c4f0:	462c      	mov	r4, r5
 801c4f2:	46a9      	mov	r9, r5
 801c4f4:	46a8      	mov	r8, r5
 801c4f6:	a803      	add	r0, sp, #12
 801c4f8:	f000 fe32 	bl	801d160 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	9302      	str	r3, [sp, #8]
 801c500:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c504:	429c      	cmp	r4, r3
 801c506:	d002      	beq.n	801c50e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c508:	455c      	cmp	r4, fp
 801c50a:	bf18      	it	ne
 801c50c:	4625      	movne	r5, r4
 801c50e:	ab02      	add	r3, sp, #8
 801c510:	4632      	mov	r2, r6
 801c512:	4651      	mov	r1, sl
 801c514:	a803      	add	r0, sp, #12
 801c516:	f001 f935 	bl	801d784 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c51a:	4604      	mov	r4, r0
 801c51c:	b108      	cbz	r0, 801c522 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c51e:	280a      	cmp	r0, #10
 801c520:	d10a      	bne.n	801c538 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c522:	45c1      	cmp	r9, r8
 801c524:	bf38      	it	cc
 801c526:	46c1      	movcc	r9, r8
 801c528:	f04f 0800 	mov.w	r8, #0
 801c52c:	2c00      	cmp	r4, #0
 801c52e:	d1e5      	bne.n	801c4fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c530:	4648      	mov	r0, r9
 801c532:	b01d      	add	sp, #116	; 0x74
 801c534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c538:	9a02      	ldr	r2, [sp, #8]
 801c53a:	2a00      	cmp	r2, #0
 801c53c:	d0de      	beq.n	801c4fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c53e:	7b57      	ldrb	r7, [r2, #13]
 801c540:	4629      	mov	r1, r5
 801c542:	6833      	ldr	r3, [r6, #0]
 801c544:	007f      	lsls	r7, r7, #1
 801c546:	8894      	ldrh	r4, [r2, #4]
 801c548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c54a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c54e:	7a97      	ldrb	r7, [r2, #10]
 801c550:	4307      	orrs	r7, r0
 801c552:	4630      	mov	r0, r6
 801c554:	4798      	blx	r3
 801c556:	4438      	add	r0, r7
 801c558:	4480      	add	r8, r0
 801c55a:	fa1f f888 	uxth.w	r8, r8
 801c55e:	e7e5      	b.n	801c52c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c560 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c560:	b508      	push	{r3, lr}
 801c562:	6803      	ldr	r3, [r0, #0]
 801c564:	68db      	ldr	r3, [r3, #12]
 801c566:	4798      	blx	r3
 801c568:	b128      	cbz	r0, 801c576 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c56a:	7b43      	ldrb	r3, [r0, #13]
 801c56c:	7a80      	ldrb	r0, [r0, #10]
 801c56e:	005b      	lsls	r3, r3, #1
 801c570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c574:	4318      	orrs	r0, r3
 801c576:	bd08      	pop	{r3, pc}

0801c578 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c578:	b40e      	push	{r1, r2, r3}
 801c57a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c57c:	b09e      	sub	sp, #120	; 0x78
 801c57e:	4605      	mov	r5, r0
 801c580:	ab23      	add	r3, sp, #140	; 0x8c
 801c582:	a805      	add	r0, sp, #20
 801c584:	f853 4b04 	ldr.w	r4, [r3], #4
 801c588:	9303      	str	r3, [sp, #12]
 801c58a:	f000 fd7e 	bl	801d08a <_ZN8touchgfx12TextProviderC1Ev>
 801c58e:	682b      	ldr	r3, [r5, #0]
 801c590:	4628      	mov	r0, r5
 801c592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c594:	4798      	blx	r3
 801c596:	682b      	ldr	r3, [r5, #0]
 801c598:	4606      	mov	r6, r0
 801c59a:	4628      	mov	r0, r5
 801c59c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c59e:	4798      	blx	r3
 801c5a0:	4633      	mov	r3, r6
 801c5a2:	4621      	mov	r1, r4
 801c5a4:	ae1e      	add	r6, sp, #120	; 0x78
 801c5a6:	2400      	movs	r4, #0
 801c5a8:	9000      	str	r0, [sp, #0]
 801c5aa:	9a03      	ldr	r2, [sp, #12]
 801c5ac:	a805      	add	r0, sp, #20
 801c5ae:	f000 fdd7 	bl	801d160 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c5b2:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c5b6:	462a      	mov	r2, r5
 801c5b8:	4633      	mov	r3, r6
 801c5ba:	4621      	mov	r1, r4
 801c5bc:	a805      	add	r0, sp, #20
 801c5be:	f001 f8e1 	bl	801d784 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c5c2:	b300      	cbz	r0, 801c606 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c5c4:	280a      	cmp	r0, #10
 801c5c6:	d01a      	beq.n	801c5fe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c5c8:	9f04      	ldr	r7, [sp, #16]
 801c5ca:	b1c7      	cbz	r7, 801c5fe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c5cc:	7b78      	ldrb	r0, [r7, #13]
 801c5ce:	7a3b      	ldrb	r3, [r7, #8]
 801c5d0:	00c1      	lsls	r1, r0, #3
 801c5d2:	88aa      	ldrh	r2, [r5, #4]
 801c5d4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c5d8:	4319      	orrs	r1, r3
 801c5da:	0643      	lsls	r3, r0, #25
 801c5dc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c5e0:	bf48      	it	mi
 801c5e2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801c5e6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c5ea:	bf48      	it	mi
 801c5ec:	b219      	sxthmi	r1, r3
 801c5ee:	79fb      	ldrb	r3, [r7, #7]
 801c5f0:	4303      	orrs	r3, r0
 801c5f2:	4413      	add	r3, r2
 801c5f4:	1a5b      	subs	r3, r3, r1
 801c5f6:	b29b      	uxth	r3, r3
 801c5f8:	42a3      	cmp	r3, r4
 801c5fa:	bfc8      	it	gt
 801c5fc:	b21c      	sxthgt	r4, r3
 801c5fe:	4633      	mov	r3, r6
 801c600:	462a      	mov	r2, r5
 801c602:	2100      	movs	r1, #0
 801c604:	e7da      	b.n	801c5bc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c606:	b2a0      	uxth	r0, r4
 801c608:	b01e      	add	sp, #120	; 0x78
 801c60a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c60e:	b003      	add	sp, #12
 801c610:	4770      	bx	lr

0801c612 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c612:	b40e      	push	{r1, r2, r3}
 801c614:	b570      	push	{r4, r5, r6, lr}
 801c616:	b09d      	sub	sp, #116	; 0x74
 801c618:	4604      	mov	r4, r0
 801c61a:	ab21      	add	r3, sp, #132	; 0x84
 801c61c:	a803      	add	r0, sp, #12
 801c61e:	f853 5b04 	ldr.w	r5, [r3], #4
 801c622:	9302      	str	r3, [sp, #8]
 801c624:	f000 fd31 	bl	801d08a <_ZN8touchgfx12TextProviderC1Ev>
 801c628:	6823      	ldr	r3, [r4, #0]
 801c62a:	4620      	mov	r0, r4
 801c62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c62e:	4798      	blx	r3
 801c630:	6823      	ldr	r3, [r4, #0]
 801c632:	4606      	mov	r6, r0
 801c634:	4620      	mov	r0, r4
 801c636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c638:	2401      	movs	r4, #1
 801c63a:	4798      	blx	r3
 801c63c:	4633      	mov	r3, r6
 801c63e:	9000      	str	r0, [sp, #0]
 801c640:	4629      	mov	r1, r5
 801c642:	9a02      	ldr	r2, [sp, #8]
 801c644:	a803      	add	r0, sp, #12
 801c646:	f000 fd8b 	bl	801d160 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c64a:	a803      	add	r0, sp, #12
 801c64c:	f001 f994 	bl	801d978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c650:	b2a3      	uxth	r3, r4
 801c652:	b138      	cbz	r0, 801c664 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c654:	280a      	cmp	r0, #10
 801c656:	a803      	add	r0, sp, #12
 801c658:	bf04      	itt	eq
 801c65a:	3301      	addeq	r3, #1
 801c65c:	b21c      	sxtheq	r4, r3
 801c65e:	f001 f98b 	bl	801d978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c662:	e7f5      	b.n	801c650 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c664:	4618      	mov	r0, r3
 801c666:	b01d      	add	sp, #116	; 0x74
 801c668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c66c:	b003      	add	sp, #12
 801c66e:	4770      	bx	lr

0801c670 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c670:	b40e      	push	{r1, r2, r3}
 801c672:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c674:	b09e      	sub	sp, #120	; 0x78
 801c676:	4604      	mov	r4, r0
 801c678:	ab23      	add	r3, sp, #140	; 0x8c
 801c67a:	a805      	add	r0, sp, #20
 801c67c:	f853 5b04 	ldr.w	r5, [r3], #4
 801c680:	9303      	str	r3, [sp, #12]
 801c682:	f000 fd02 	bl	801d08a <_ZN8touchgfx12TextProviderC1Ev>
 801c686:	6823      	ldr	r3, [r4, #0]
 801c688:	4620      	mov	r0, r4
 801c68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c68c:	4798      	blx	r3
 801c68e:	6823      	ldr	r3, [r4, #0]
 801c690:	4606      	mov	r6, r0
 801c692:	4620      	mov	r0, r4
 801c694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c696:	4798      	blx	r3
 801c698:	4633      	mov	r3, r6
 801c69a:	4629      	mov	r1, r5
 801c69c:	9000      	str	r0, [sp, #0]
 801c69e:	9a03      	ldr	r2, [sp, #12]
 801c6a0:	a805      	add	r0, sp, #20
 801c6a2:	f000 fd5d 	bl	801d160 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c6a6:	ad1e      	add	r5, sp, #120	; 0x78
 801c6a8:	2100      	movs	r1, #0
 801c6aa:	26ff      	movs	r6, #255	; 0xff
 801c6ac:	4622      	mov	r2, r4
 801c6ae:	a805      	add	r0, sp, #20
 801c6b0:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c6b4:	462b      	mov	r3, r5
 801c6b6:	f001 f865 	bl	801d784 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c6ba:	b1d8      	cbz	r0, 801c6f4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801c6bc:	280a      	cmp	r0, #10
 801c6be:	d012      	beq.n	801c6e6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c6c0:	9804      	ldr	r0, [sp, #16]
 801c6c2:	b180      	cbz	r0, 801c6e6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c6c4:	7b47      	ldrb	r7, [r0, #13]
 801c6c6:	7922      	ldrb	r2, [r4, #4]
 801c6c8:	00fb      	lsls	r3, r7, #3
 801c6ca:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c6ce:	7a03      	ldrb	r3, [r0, #8]
 801c6d0:	430b      	orrs	r3, r1
 801c6d2:	0679      	lsls	r1, r7, #25
 801c6d4:	bf44      	itt	mi
 801c6d6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c6da:	b21b      	sxthmi	r3, r3
 801c6dc:	1ad3      	subs	r3, r2, r3
 801c6de:	b2db      	uxtb	r3, r3
 801c6e0:	429e      	cmp	r6, r3
 801c6e2:	bf28      	it	cs
 801c6e4:	461e      	movcs	r6, r3
 801c6e6:	462b      	mov	r3, r5
 801c6e8:	4622      	mov	r2, r4
 801c6ea:	2100      	movs	r1, #0
 801c6ec:	a805      	add	r0, sp, #20
 801c6ee:	f001 f849 	bl	801d784 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c6f2:	e7e2      	b.n	801c6ba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801c6f4:	4630      	mov	r0, r6
 801c6f6:	b01e      	add	sp, #120	; 0x78
 801c6f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c6fc:	b003      	add	sp, #12
 801c6fe:	4770      	bx	lr

0801c700 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c700:	b513      	push	{r0, r1, r4, lr}
 801c702:	6803      	ldr	r3, [r0, #0]
 801c704:	2400      	movs	r4, #0
 801c706:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c70a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c70e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c712:	4669      	mov	r1, sp
 801c714:	691b      	ldr	r3, [r3, #16]
 801c716:	9400      	str	r4, [sp, #0]
 801c718:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c71c:	4798      	blx	r3
 801c71e:	b002      	add	sp, #8
 801c720:	bd10      	pop	{r4, pc}

0801c722 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c722:	b538      	push	{r3, r4, r5, lr}
 801c724:	680b      	ldr	r3, [r1, #0]
 801c726:	460c      	mov	r4, r1
 801c728:	4605      	mov	r5, r0
 801c72a:	68db      	ldr	r3, [r3, #12]
 801c72c:	4798      	blx	r3
 801c72e:	6823      	ldr	r3, [r4, #0]
 801c730:	4620      	mov	r0, r4
 801c732:	4629      	mov	r1, r5
 801c734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c736:	4798      	blx	r3
 801c738:	4628      	mov	r0, r5
 801c73a:	bd38      	pop	{r3, r4, r5, pc}

0801c73c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c73c:	b410      	push	{r4}
 801c73e:	880a      	ldrh	r2, [r1, #0]
 801c740:	8884      	ldrh	r4, [r0, #4]
 801c742:	4422      	add	r2, r4
 801c744:	800a      	strh	r2, [r1, #0]
 801c746:	884a      	ldrh	r2, [r1, #2]
 801c748:	88c4      	ldrh	r4, [r0, #6]
 801c74a:	4422      	add	r2, r4
 801c74c:	804a      	strh	r2, [r1, #2]
 801c74e:	6940      	ldr	r0, [r0, #20]
 801c750:	b120      	cbz	r0, 801c75c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c752:	6803      	ldr	r3, [r0, #0]
 801c754:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c75a:	4718      	bx	r3
 801c75c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c760:	4770      	bx	lr

0801c762 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c762:	b570      	push	{r4, r5, r6, lr}
 801c764:	8882      	ldrh	r2, [r0, #4]
 801c766:	460c      	mov	r4, r1
 801c768:	880b      	ldrh	r3, [r1, #0]
 801c76a:	4605      	mov	r5, r0
 801c76c:	4413      	add	r3, r2
 801c76e:	800b      	strh	r3, [r1, #0]
 801c770:	884b      	ldrh	r3, [r1, #2]
 801c772:	88c2      	ldrh	r2, [r0, #6]
 801c774:	4413      	add	r3, r2
 801c776:	804b      	strh	r3, [r1, #2]
 801c778:	1d01      	adds	r1, r0, #4
 801c77a:	4620      	mov	r0, r4
 801c77c:	f7fa fcfe 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 801c780:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c784:	2b00      	cmp	r3, #0
 801c786:	dd0b      	ble.n	801c7a0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c788:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	dd07      	ble.n	801c7a0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c790:	6968      	ldr	r0, [r5, #20]
 801c792:	b128      	cbz	r0, 801c7a0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c794:	6803      	ldr	r3, [r0, #0]
 801c796:	4621      	mov	r1, r4
 801c798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c79a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c79e:	4718      	bx	r3
 801c7a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c7a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c7a4:	b570      	push	{r4, r5, r6, lr}
 801c7a6:	8882      	ldrh	r2, [r0, #4]
 801c7a8:	460c      	mov	r4, r1
 801c7aa:	880b      	ldrh	r3, [r1, #0]
 801c7ac:	4605      	mov	r5, r0
 801c7ae:	4413      	add	r3, r2
 801c7b0:	800b      	strh	r3, [r1, #0]
 801c7b2:	884b      	ldrh	r3, [r1, #2]
 801c7b4:	88c2      	ldrh	r2, [r0, #6]
 801c7b6:	4413      	add	r3, r2
 801c7b8:	804b      	strh	r3, [r1, #2]
 801c7ba:	1d01      	adds	r1, r0, #4
 801c7bc:	4620      	mov	r0, r4
 801c7be:	f7fa fcdd 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 801c7c2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	dd18      	ble.n	801c7fc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c7ca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	dd14      	ble.n	801c7fc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c7d2:	6968      	ldr	r0, [r5, #20]
 801c7d4:	b128      	cbz	r0, 801c7e2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c7d6:	6803      	ldr	r3, [r0, #0]
 801c7d8:	4621      	mov	r1, r4
 801c7da:	691b      	ldr	r3, [r3, #16]
 801c7dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c7e0:	4718      	bx	r3
 801c7e2:	4b07      	ldr	r3, [pc, #28]	; (801c800 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801c7e4:	681b      	ldr	r3, [r3, #0]
 801c7e6:	3304      	adds	r3, #4
 801c7e8:	429d      	cmp	r5, r3
 801c7ea:	d107      	bne.n	801c7fc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c7ec:	f7fe ffb2 	bl	801b754 <_ZN8touchgfx11Application11getInstanceEv>
 801c7f0:	6821      	ldr	r1, [r4, #0]
 801c7f2:	6862      	ldr	r2, [r4, #4]
 801c7f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c7f8:	f7ff b89c 	b.w	801b934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c7fc:	bd70      	pop	{r4, r5, r6, pc}
 801c7fe:	bf00      	nop
 801c800:	200153dc 	.word	0x200153dc

0801c804 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c804:	b570      	push	{r4, r5, r6, lr}
 801c806:	4604      	mov	r4, r0
 801c808:	4616      	mov	r6, r2
 801c80a:	460d      	mov	r5, r1
 801c80c:	b901      	cbnz	r1, 801c810 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c80e:	b192      	cbz	r2, 801c836 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c810:	6823      	ldr	r3, [r4, #0]
 801c812:	4620      	mov	r0, r4
 801c814:	699b      	ldr	r3, [r3, #24]
 801c816:	4798      	blx	r3
 801c818:	88e2      	ldrh	r2, [r4, #6]
 801c81a:	88a1      	ldrh	r1, [r4, #4]
 801c81c:	4620      	mov	r0, r4
 801c81e:	4432      	add	r2, r6
 801c820:	4429      	add	r1, r5
 801c822:	b212      	sxth	r2, r2
 801c824:	b209      	sxth	r1, r1
 801c826:	f7e7 f848 	bl	80038ba <_ZN8touchgfx8Drawable5setXYEss>
 801c82a:	6823      	ldr	r3, [r4, #0]
 801c82c:	4620      	mov	r0, r4
 801c82e:	699b      	ldr	r3, [r3, #24]
 801c830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c834:	4718      	bx	r3
 801c836:	bd70      	pop	{r4, r5, r6, pc}

0801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c838:	b510      	push	{r4, lr}
 801c83a:	2300      	movs	r3, #0
 801c83c:	4604      	mov	r4, r0
 801c83e:	4608      	mov	r0, r1
 801c840:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c844:	8023      	strh	r3, [r4, #0]
 801c846:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c84a:	8063      	strh	r3, [r4, #2]
 801c84c:	6803      	ldr	r3, [r0, #0]
 801c84e:	80a1      	strh	r1, [r4, #4]
 801c850:	4621      	mov	r1, r4
 801c852:	80e2      	strh	r2, [r4, #6]
 801c854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c856:	4798      	blx	r3
 801c858:	4620      	mov	r0, r4
 801c85a:	bd10      	pop	{r4, pc}

0801c85c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801c85c:	b530      	push	{r4, r5, lr}
 801c85e:	8083      	strh	r3, [r0, #4]
 801c860:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c864:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801c868:	7183      	strb	r3, [r0, #6]
 801c86a:	79c3      	ldrb	r3, [r0, #7]
 801c86c:	6101      	str	r1, [r0, #16]
 801c86e:	f365 0306 	bfi	r3, r5, #0, #7
 801c872:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c876:	8282      	strh	r2, [r0, #20]
 801c878:	f365 13c7 	bfi	r3, r5, #7, #1
 801c87c:	71c3      	strb	r3, [r0, #7]
 801c87e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801c882:	7203      	strb	r3, [r0, #8]
 801c884:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801c888:	7243      	strb	r3, [r0, #9]
 801c88a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c88e:	8143      	strh	r3, [r0, #10]
 801c890:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801c894:	8183      	strh	r3, [r0, #12]
 801c896:	4b01      	ldr	r3, [pc, #4]	; (801c89c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801c898:	6003      	str	r3, [r0, #0]
 801c89a:	bd30      	pop	{r4, r5, pc}
 801c89c:	08031520 	.word	0x08031520

0801c8a0 <_ZNK8touchgfx9ConstFont4findEt>:
 801c8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8a2:	6904      	ldr	r4, [r0, #16]
 801c8a4:	b3bc      	cbz	r4, 801c916 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8a6:	88a3      	ldrh	r3, [r4, #4]
 801c8a8:	8a82      	ldrh	r2, [r0, #20]
 801c8aa:	1acb      	subs	r3, r1, r3
 801c8ac:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801c8b0:	d431      	bmi.n	801c916 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8b2:	4293      	cmp	r3, r2
 801c8b4:	dd0c      	ble.n	801c8d0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c8b6:	230e      	movs	r3, #14
 801c8b8:	fb03 4302 	mla	r3, r3, r2, r4
 801c8bc:	889b      	ldrh	r3, [r3, #4]
 801c8be:	1a5b      	subs	r3, r3, r1
 801c8c0:	1ad3      	subs	r3, r2, r3
 801c8c2:	429a      	cmp	r2, r3
 801c8c4:	db27      	blt.n	801c916 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	bfbc      	itt	lt
 801c8ca:	2302      	movlt	r3, #2
 801c8cc:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c8d0:	2500      	movs	r5, #0
 801c8d2:	260e      	movs	r6, #14
 801c8d4:	4295      	cmp	r5, r2
 801c8d6:	dc1e      	bgt.n	801c916 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8d8:	fb06 4003 	mla	r0, r6, r3, r4
 801c8dc:	8887      	ldrh	r7, [r0, #4]
 801c8de:	42b9      	cmp	r1, r7
 801c8e0:	d01a      	beq.n	801c918 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c8e2:	d20d      	bcs.n	801c900 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c8e4:	1e5a      	subs	r2, r3, #1
 801c8e6:	4295      	cmp	r5, r2
 801c8e8:	dc15      	bgt.n	801c916 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8ea:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c8ee:	1a5b      	subs	r3, r3, r1
 801c8f0:	1ad3      	subs	r3, r2, r3
 801c8f2:	429a      	cmp	r2, r3
 801c8f4:	db0f      	blt.n	801c916 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8f6:	429d      	cmp	r5, r3
 801c8f8:	ddec      	ble.n	801c8d4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c8fa:	1953      	adds	r3, r2, r5
 801c8fc:	105b      	asrs	r3, r3, #1
 801c8fe:	e7e9      	b.n	801c8d4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c900:	1c5d      	adds	r5, r3, #1
 801c902:	42aa      	cmp	r2, r5
 801c904:	db07      	blt.n	801c916 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c906:	8a43      	ldrh	r3, [r0, #18]
 801c908:	1acb      	subs	r3, r1, r3
 801c90a:	442b      	add	r3, r5
 801c90c:	429d      	cmp	r5, r3
 801c90e:	dc02      	bgt.n	801c916 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c910:	429a      	cmp	r2, r3
 801c912:	dadf      	bge.n	801c8d4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c914:	e7f1      	b.n	801c8fa <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c916:	2000      	movs	r0, #0
 801c918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c91a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c91c:	4604      	mov	r4, r0
 801c91e:	4617      	mov	r7, r2
 801c920:	461e      	mov	r6, r3
 801c922:	b911      	cbnz	r1, 801c92a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c924:	2500      	movs	r5, #0
 801c926:	4628      	mov	r0, r5
 801c928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c92a:	290a      	cmp	r1, #10
 801c92c:	d0fa      	beq.n	801c924 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c92e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c932:	4291      	cmp	r1, r2
 801c934:	d0f6      	beq.n	801c924 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c936:	f242 020b 	movw	r2, #8203	; 0x200b
 801c93a:	4291      	cmp	r1, r2
 801c93c:	d0f2      	beq.n	801c924 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c93e:	f7ff ffaf 	bl	801c8a0 <_ZNK8touchgfx9ConstFont4findEt>
 801c942:	4605      	mov	r5, r0
 801c944:	b950      	cbnz	r0, 801c95c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c946:	6823      	ldr	r3, [r4, #0]
 801c948:	4620      	mov	r0, r4
 801c94a:	691b      	ldr	r3, [r3, #16]
 801c94c:	4798      	blx	r3
 801c94e:	4601      	mov	r1, r0
 801c950:	4620      	mov	r0, r4
 801c952:	f7ff ffa5 	bl	801c8a0 <_ZNK8touchgfx9ConstFont4findEt>
 801c956:	4605      	mov	r5, r0
 801c958:	2800      	cmp	r0, #0
 801c95a:	d0e3      	beq.n	801c924 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c95c:	6823      	ldr	r3, [r4, #0]
 801c95e:	4629      	mov	r1, r5
 801c960:	4620      	mov	r0, r4
 801c962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c964:	4798      	blx	r3
 801c966:	6038      	str	r0, [r7, #0]
 801c968:	6823      	ldr	r3, [r4, #0]
 801c96a:	4620      	mov	r0, r4
 801c96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c96e:	4798      	blx	r3
 801c970:	7030      	strb	r0, [r6, #0]
 801c972:	e7d8      	b.n	801c926 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c974 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801c974:	2000      	movs	r0, #0
 801c976:	4770      	bx	lr

0801c978 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801c978:	2001      	movs	r0, #1
 801c97a:	4770      	bx	lr

0801c97c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801c97c:	2002      	movs	r0, #2
 801c97e:	4770      	bx	lr

0801c980 <_ZN8touchgfx6ScreenD1Ev>:
 801c980:	4770      	bx	lr

0801c982 <_ZN8touchgfx12GestureEventD1Ev>:
 801c982:	4770      	bx	lr

0801c984 <_ZN8touchgfx9DragEventD1Ev>:
 801c984:	4770      	bx	lr

0801c986 <_ZN8touchgfx10ClickEventD1Ev>:
 801c986:	4770      	bx	lr

0801c988 <_ZN8touchgfx10ClickEventD0Ev>:
 801c988:	b510      	push	{r4, lr}
 801c98a:	4604      	mov	r4, r0
 801c98c:	210c      	movs	r1, #12
 801c98e:	f00d fe32 	bl	802a5f6 <_ZdlPvj>
 801c992:	4620      	mov	r0, r4
 801c994:	bd10      	pop	{r4, pc}

0801c996 <_ZN8touchgfx9DragEventD0Ev>:
 801c996:	b510      	push	{r4, lr}
 801c998:	4604      	mov	r4, r0
 801c99a:	2110      	movs	r1, #16
 801c99c:	f00d fe2b 	bl	802a5f6 <_ZdlPvj>
 801c9a0:	4620      	mov	r0, r4
 801c9a2:	bd10      	pop	{r4, pc}

0801c9a4 <_ZN8touchgfx12GestureEventD0Ev>:
 801c9a4:	b510      	push	{r4, lr}
 801c9a6:	4604      	mov	r4, r0
 801c9a8:	210c      	movs	r1, #12
 801c9aa:	f00d fe24 	bl	802a5f6 <_ZdlPvj>
 801c9ae:	4620      	mov	r0, r4
 801c9b0:	bd10      	pop	{r4, pc}

0801c9b2 <_ZN8touchgfx6ScreenD0Ev>:
 801c9b2:	b510      	push	{r4, lr}
 801c9b4:	4604      	mov	r4, r0
 801c9b6:	213c      	movs	r1, #60	; 0x3c
 801c9b8:	f00d fe1d 	bl	802a5f6 <_ZdlPvj>
 801c9bc:	4620      	mov	r0, r4
 801c9be:	bd10      	pop	{r4, pc}

0801c9c0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c9c0:	b530      	push	{r4, r5, lr}
 801c9c2:	460d      	mov	r5, r1
 801c9c4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c9c6:	b087      	sub	sp, #28
 801c9c8:	4604      	mov	r4, r0
 801c9ca:	b301      	cbz	r1, 801ca0e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c9cc:	a801      	add	r0, sp, #4
 801c9ce:	f7ff ff33 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c9d2:	892a      	ldrh	r2, [r5, #8]
 801c9d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c9d8:	7928      	ldrb	r0, [r5, #4]
 801c9da:	1ad2      	subs	r2, r2, r3
 801c9dc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c9de:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c9e2:	441a      	add	r2, r3
 801c9e4:	896b      	ldrh	r3, [r5, #10]
 801c9e6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c9ea:	f88d 0010 	strb.w	r0, [sp, #16]
 801c9ee:	1b5b      	subs	r3, r3, r5
 801c9f0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801c9f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c9f4:	442b      	add	r3, r5
 801c9f6:	4d07      	ldr	r5, [pc, #28]	; (801ca14 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c9f8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c9fc:	a903      	add	r1, sp, #12
 801c9fe:	9503      	str	r5, [sp, #12]
 801ca00:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ca04:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ca08:	6803      	ldr	r3, [r0, #0]
 801ca0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ca0c:	4798      	blx	r3
 801ca0e:	b007      	add	sp, #28
 801ca10:	bd30      	pop	{r4, r5, pc}
 801ca12:	bf00      	nop
 801ca14:	080315a0 	.word	0x080315a0

0801ca18 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801ca18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801ca1e:	b08a      	sub	sp, #40	; 0x28
 801ca20:	4604      	mov	r4, r0
 801ca22:	460d      	mov	r5, r1
 801ca24:	b113      	cbz	r3, 801ca2c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801ca26:	790b      	ldrb	r3, [r1, #4]
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d044      	beq.n	801cab6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801ca2c:	f104 0804 	add.w	r8, r4, #4
 801ca30:	a803      	add	r0, sp, #12
 801ca32:	4641      	mov	r1, r8
 801ca34:	f7ff ff00 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca38:	792b      	ldrb	r3, [r5, #4]
 801ca3a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801ca3e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801ca42:	b983      	cbnz	r3, 801ca66 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801ca44:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801ca48:	892a      	ldrh	r2, [r5, #8]
 801ca4a:	88e9      	ldrh	r1, [r5, #6]
 801ca4c:	4640      	mov	r0, r8
 801ca4e:	1b92      	subs	r2, r2, r6
 801ca50:	9301      	str	r3, [sp, #4]
 801ca52:	1bc9      	subs	r1, r1, r7
 801ca54:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801ca58:	b212      	sxth	r2, r2
 801ca5a:	9300      	str	r3, [sp, #0]
 801ca5c:	b209      	sxth	r1, r1
 801ca5e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801ca62:	f7fa faa9 	bl	8016fb8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801ca66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ca68:	b329      	cbz	r1, 801cab6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801ca6a:	a805      	add	r0, sp, #20
 801ca6c:	f7ff fee4 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca70:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801ca74:	792b      	ldrb	r3, [r5, #4]
 801ca76:	a907      	add	r1, sp, #28
 801ca78:	1abf      	subs	r7, r7, r2
 801ca7a:	88ea      	ldrh	r2, [r5, #6]
 801ca7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ca7e:	4417      	add	r7, r2
 801ca80:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801ca82:	f88d 3020 	strb.w	r3, [sp, #32]
 801ca86:	4417      	add	r7, r2
 801ca88:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ca8c:	1ab6      	subs	r6, r6, r2
 801ca8e:	892a      	ldrh	r2, [r5, #8]
 801ca90:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801ca94:	4416      	add	r6, r2
 801ca96:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ca98:	4416      	add	r6, r2
 801ca9a:	4a08      	ldr	r2, [pc, #32]	; (801cabc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801ca9c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801caa0:	2600      	movs	r6, #0
 801caa2:	9207      	str	r2, [sp, #28]
 801caa4:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801caa8:	6803      	ldr	r3, [r0, #0]
 801caaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801caac:	4798      	blx	r3
 801caae:	792b      	ldrb	r3, [r5, #4]
 801cab0:	b10b      	cbz	r3, 801cab6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cab2:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801cab6:	b00a      	add	sp, #40	; 0x28
 801cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cabc:	08031578 	.word	0x08031578

0801cac0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801cac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cac4:	460c      	mov	r4, r1
 801cac6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801cac8:	b088      	sub	sp, #32
 801caca:	4605      	mov	r5, r0
 801cacc:	2900      	cmp	r1, #0
 801cace:	d06d      	beq.n	801cbac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801cad0:	4668      	mov	r0, sp
 801cad2:	f7ff feb1 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cad6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801cad8:	88e3      	ldrh	r3, [r4, #6]
 801cada:	f9bd 8000 	ldrsh.w	r8, [sp]
 801cade:	440b      	add	r3, r1
 801cae0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801cae4:	b21b      	sxth	r3, r3
 801cae6:	4543      	cmp	r3, r8
 801cae8:	db31      	blt.n	801cb4e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801caea:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801caee:	44c4      	add	ip, r8
 801caf0:	fa0f fc8c 	sxth.w	ip, ip
 801caf4:	4563      	cmp	r3, ip
 801caf6:	da2a      	bge.n	801cb4e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801caf8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801cafa:	8926      	ldrh	r6, [r4, #8]
 801cafc:	4416      	add	r6, r2
 801cafe:	b236      	sxth	r6, r6
 801cb00:	42be      	cmp	r6, r7
 801cb02:	db24      	blt.n	801cb4e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cb04:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801cb08:	4438      	add	r0, r7
 801cb0a:	b200      	sxth	r0, r0
 801cb0c:	4286      	cmp	r6, r0
 801cb0e:	da1e      	bge.n	801cb4e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cb10:	8963      	ldrh	r3, [r4, #10]
 801cb12:	4419      	add	r1, r3
 801cb14:	b209      	sxth	r1, r1
 801cb16:	4541      	cmp	r1, r8
 801cb18:	db08      	blt.n	801cb2c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cb1a:	4561      	cmp	r1, ip
 801cb1c:	da06      	bge.n	801cb2c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cb1e:	89a3      	ldrh	r3, [r4, #12]
 801cb20:	441a      	add	r2, r3
 801cb22:	b212      	sxth	r2, r2
 801cb24:	42ba      	cmp	r2, r7
 801cb26:	db01      	blt.n	801cb2c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cb28:	4282      	cmp	r2, r0
 801cb2a:	db10      	blt.n	801cb4e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cb2c:	4b21      	ldr	r3, [pc, #132]	; (801cbb4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801cb2e:	a904      	add	r1, sp, #16
 801cb30:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801cb32:	9304      	str	r3, [sp, #16]
 801cb34:	2302      	movs	r3, #2
 801cb36:	f88d 3014 	strb.w	r3, [sp, #20]
 801cb3a:	2300      	movs	r3, #0
 801cb3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cb40:	f8ad 3018 	strh.w	r3, [sp, #24]
 801cb44:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cb48:	6803      	ldr	r3, [r0, #0]
 801cb4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb4c:	4798      	blx	r3
 801cb4e:	1d29      	adds	r1, r5, #4
 801cb50:	a802      	add	r0, sp, #8
 801cb52:	f7ff fe71 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb56:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cb5a:	88e0      	ldrh	r0, [r4, #6]
 801cb5c:	eba3 0808 	sub.w	r8, r3, r8
 801cb60:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cb64:	7921      	ldrb	r1, [r4, #4]
 801cb66:	fa1f f888 	uxth.w	r8, r8
 801cb6a:	1bdf      	subs	r7, r3, r7
 801cb6c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801cb70:	b2bb      	uxth	r3, r7
 801cb72:	4440      	add	r0, r8
 801cb74:	8922      	ldrh	r2, [r4, #8]
 801cb76:	8967      	ldrh	r7, [r4, #10]
 801cb78:	4460      	add	r0, ip
 801cb7a:	89a4      	ldrh	r4, [r4, #12]
 801cb7c:	441a      	add	r2, r3
 801cb7e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801cb80:	44b8      	add	r8, r7
 801cb82:	4423      	add	r3, r4
 801cb84:	f8ad 0016 	strh.w	r0, [sp, #22]
 801cb88:	4432      	add	r2, r6
 801cb8a:	44e0      	add	r8, ip
 801cb8c:	4433      	add	r3, r6
 801cb8e:	4c0a      	ldr	r4, [pc, #40]	; (801cbb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801cb90:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801cb92:	f88d 1014 	strb.w	r1, [sp, #20]
 801cb96:	a904      	add	r1, sp, #16
 801cb98:	9404      	str	r4, [sp, #16]
 801cb9a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cb9e:	f8ad 801a 	strh.w	r8, [sp, #26]
 801cba2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cba6:	6803      	ldr	r3, [r0, #0]
 801cba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cbaa:	4798      	blx	r3
 801cbac:	b008      	add	sp, #32
 801cbae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cbb2:	bf00      	nop
 801cbb4:	08031578 	.word	0x08031578
 801cbb8:	0803158c 	.word	0x0803158c

0801cbbc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801cbbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cbbe:	4604      	mov	r4, r0
 801cbc0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801cbc4:	3201      	adds	r2, #1
 801cbc6:	d112      	bne.n	801cbee <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801cbc8:	2500      	movs	r5, #0
 801cbca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cbce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cbd2:	6803      	ldr	r3, [r0, #0]
 801cbd4:	9500      	str	r5, [sp, #0]
 801cbd6:	466d      	mov	r5, sp
 801cbd8:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cbdc:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cbe0:	4629      	mov	r1, r5
 801cbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbe4:	4798      	blx	r3
 801cbe6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801cbea:	e884 0003 	stmia.w	r4, {r0, r1}
 801cbee:	4620      	mov	r0, r4
 801cbf0:	b003      	add	sp, #12
 801cbf2:	bd30      	pop	{r4, r5, pc}

0801cbf4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801cbf4:	b513      	push	{r0, r1, r4, lr}
 801cbf6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801cbfa:	4604      	mov	r4, r0
 801cbfc:	3301      	adds	r3, #1
 801cbfe:	d109      	bne.n	801cc14 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801cc00:	4601      	mov	r1, r0
 801cc02:	4668      	mov	r0, sp
 801cc04:	f7ff fe18 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cc08:	f8bd 3000 	ldrh.w	r3, [sp]
 801cc0c:	8423      	strh	r3, [r4, #32]
 801cc0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cc12:	8463      	strh	r3, [r4, #34]	; 0x22
 801cc14:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801cc18:	b002      	add	sp, #8
 801cc1a:	bd10      	pop	{r4, pc}

0801cc1c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801cc1c:	b513      	push	{r0, r1, r4, lr}
 801cc1e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801cc22:	4604      	mov	r4, r0
 801cc24:	3301      	adds	r3, #1
 801cc26:	d109      	bne.n	801cc3c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801cc28:	4601      	mov	r1, r0
 801cc2a:	4668      	mov	r0, sp
 801cc2c:	f7ff fe04 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cc30:	f8bd 3000 	ldrh.w	r3, [sp]
 801cc34:	8423      	strh	r3, [r4, #32]
 801cc36:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cc3a:	8463      	strh	r3, [r4, #34]	; 0x22
 801cc3c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801cc40:	b002      	add	sp, #8
 801cc42:	bd10      	pop	{r4, pc}

0801cc44 <_ZN8touchgfx6ScreenC1Ev>:
 801cc44:	b570      	push	{r4, r5, r6, lr}
 801cc46:	4b17      	ldr	r3, [pc, #92]	; (801cca4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801cc48:	4605      	mov	r5, r0
 801cc4a:	4a17      	ldr	r2, [pc, #92]	; (801cca8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801cc4c:	2101      	movs	r1, #1
 801cc4e:	f845 3b04 	str.w	r3, [r5], #4
 801cc52:	2300      	movs	r3, #0
 801cc54:	6042      	str	r2, [r0, #4]
 801cc56:	4604      	mov	r4, r0
 801cc58:	8103      	strh	r3, [r0, #8]
 801cc5a:	8143      	strh	r3, [r0, #10]
 801cc5c:	8183      	strh	r3, [r0, #12]
 801cc5e:	81c3      	strh	r3, [r0, #14]
 801cc60:	8203      	strh	r3, [r0, #16]
 801cc62:	8243      	strh	r3, [r0, #18]
 801cc64:	8283      	strh	r3, [r0, #20]
 801cc66:	82c3      	strh	r3, [r0, #22]
 801cc68:	6203      	str	r3, [r0, #32]
 801cc6a:	8483      	strh	r3, [r0, #36]	; 0x24
 801cc6c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801cc6e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801cc72:	6343      	str	r3, [r0, #52]	; 0x34
 801cc74:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801cc78:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801cc7c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801cc80:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801cc84:	4b09      	ldr	r3, [pc, #36]	; (801ccac <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801cc86:	4628      	mov	r0, r5
 801cc88:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cc8c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801cc8e:	4a08      	ldr	r2, [pc, #32]	; (801ccb0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801cc90:	f9b2 1000 	ldrsh.w	r1, [r2]
 801cc94:	4798      	blx	r3
 801cc96:	6863      	ldr	r3, [r4, #4]
 801cc98:	4628      	mov	r0, r5
 801cc9a:	4631      	mov	r1, r6
 801cc9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cc9e:	4798      	blx	r3
 801cca0:	4620      	mov	r0, r4
 801cca2:	bd70      	pop	{r4, r5, r6, pc}
 801cca4:	080315b4 	.word	0x080315b4
 801cca8:	080301b4 	.word	0x080301b4
 801ccac:	20015396 	.word	0x20015396
 801ccb0:	20015394 	.word	0x20015394

0801ccb4 <_ZN8touchgfx6Screen4drawEv>:
 801ccb4:	4b09      	ldr	r3, [pc, #36]	; (801ccdc <_ZN8touchgfx6Screen4drawEv+0x28>)
 801ccb6:	b507      	push	{r0, r1, r2, lr}
 801ccb8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ccbc:	2100      	movs	r1, #0
 801ccbe:	4b08      	ldr	r3, [pc, #32]	; (801cce0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801ccc0:	9100      	str	r1, [sp, #0]
 801ccc2:	4669      	mov	r1, sp
 801ccc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ccc8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cccc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ccd0:	6803      	ldr	r3, [r0, #0]
 801ccd2:	689b      	ldr	r3, [r3, #8]
 801ccd4:	4798      	blx	r3
 801ccd6:	b003      	add	sp, #12
 801ccd8:	f85d fb04 	ldr.w	pc, [sp], #4
 801ccdc:	20015394 	.word	0x20015394
 801cce0:	20015396 	.word	0x20015396

0801cce4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cce8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ccec:	b089      	sub	sp, #36	; 0x24
 801ccee:	4680      	mov	r8, r0
 801ccf0:	460c      	mov	r4, r1
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	4615      	mov	r5, r2
 801ccf6:	dd0e      	ble.n	801cd16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ccf8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	dd0a      	ble.n	801cd16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cd00:	4628      	mov	r0, r5
 801cd02:	f7ff ff5b 	bl	801cbbc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cd06:	4621      	mov	r1, r4
 801cd08:	f7fe fc46 	bl	801b598 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cd0c:	69eb      	ldr	r3, [r5, #28]
 801cd0e:	b928      	cbnz	r0, 801cd1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801cd10:	461d      	mov	r5, r3
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d1f4      	bne.n	801cd00 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801cd16:	b009      	add	sp, #36	; 0x24
 801cd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd1c:	ae04      	add	r6, sp, #16
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	f000 80b5 	beq.w	801ce8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cd24:	682b      	ldr	r3, [r5, #0]
 801cd26:	4629      	mov	r1, r5
 801cd28:	a802      	add	r0, sp, #8
 801cd2a:	68db      	ldr	r3, [r3, #12]
 801cd2c:	4798      	blx	r3
 801cd2e:	4628      	mov	r0, r5
 801cd30:	f7ff ff60 	bl	801cbf4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cd34:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801cd38:	4407      	add	r7, r0
 801cd3a:	4628      	mov	r0, r5
 801cd3c:	f7ff ff6e 	bl	801cc1c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cd40:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cd44:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801cd48:	b23f      	sxth	r7, r7
 801cd4a:	4418      	add	r0, r3
 801cd4c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801cd50:	4621      	mov	r1, r4
 801cd52:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cd56:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cd5a:	4630      	mov	r0, r6
 801cd5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cd60:	f8ad 7010 	strh.w	r7, [sp, #16]
 801cd64:	f7fa fa0a 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 801cd68:	4628      	mov	r0, r5
 801cd6a:	f7ff ff27 	bl	801cbbc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cd6e:	ab06      	add	r3, sp, #24
 801cd70:	4602      	mov	r2, r0
 801cd72:	e896 0003 	ldmia.w	r6, {r0, r1}
 801cd76:	e883 0003 	stmia.w	r3, {r0, r1}
 801cd7a:	4611      	mov	r1, r2
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	f7fa f9fd 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 801cd82:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cd86:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cd8a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801cd8e:	4299      	cmp	r1, r3
 801cd90:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801cd94:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801cd98:	d10b      	bne.n	801cdb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cd9a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cd9e:	4552      	cmp	r2, sl
 801cda0:	d107      	bne.n	801cdb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cda2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801cda6:	455a      	cmp	r2, fp
 801cda8:	d103      	bne.n	801cdb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cdaa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801cdae:	454a      	cmp	r2, r9
 801cdb0:	d06d      	beq.n	801ce8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cdb2:	f1bb 0f00 	cmp.w	fp, #0
 801cdb6:	dd65      	ble.n	801ce84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cdb8:	f1b9 0f00 	cmp.w	r9, #0
 801cdbc:	dd62      	ble.n	801ce84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cdbe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cdc2:	fa1f f08a 	uxth.w	r0, sl
 801cdc6:	4552      	cmp	r2, sl
 801cdc8:	9000      	str	r0, [sp, #0]
 801cdca:	da12      	bge.n	801cdf2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801cdcc:	9301      	str	r3, [sp, #4]
 801cdce:	9b00      	ldr	r3, [sp, #0]
 801cdd0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cdd4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cdd8:	1a9a      	subs	r2, r3, r2
 801cdda:	f8ad 1010 	strh.w	r1, [sp, #16]
 801cdde:	4631      	mov	r1, r6
 801cde0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cde4:	4640      	mov	r0, r8
 801cde6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801cdea:	69ea      	ldr	r2, [r5, #28]
 801cdec:	f7ff ff7a 	bl	801cce4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cdf0:	9b01      	ldr	r3, [sp, #4]
 801cdf2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cdf6:	b29f      	uxth	r7, r3
 801cdf8:	429a      	cmp	r2, r3
 801cdfa:	da0d      	bge.n	801ce18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801cdfc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ce00:	1aba      	subs	r2, r7, r2
 801ce02:	f8ad a012 	strh.w	sl, [sp, #18]
 801ce06:	4631      	mov	r1, r6
 801ce08:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ce0c:	4640      	mov	r0, r8
 801ce0e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ce12:	69ea      	ldr	r2, [r5, #28]
 801ce14:	f7ff ff66 	bl	801cce4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ce18:	8822      	ldrh	r2, [r4, #0]
 801ce1a:	445f      	add	r7, fp
 801ce1c:	88a3      	ldrh	r3, [r4, #4]
 801ce1e:	b2bf      	uxth	r7, r7
 801ce20:	4413      	add	r3, r2
 801ce22:	b23a      	sxth	r2, r7
 801ce24:	b29b      	uxth	r3, r3
 801ce26:	b219      	sxth	r1, r3
 801ce28:	4291      	cmp	r1, r2
 801ce2a:	dd0d      	ble.n	801ce48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ce2c:	1bdb      	subs	r3, r3, r7
 801ce2e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ce32:	f8ad a012 	strh.w	sl, [sp, #18]
 801ce36:	4631      	mov	r1, r6
 801ce38:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ce3c:	4640      	mov	r0, r8
 801ce3e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ce42:	69ea      	ldr	r2, [r5, #28]
 801ce44:	f7ff ff4e 	bl	801cce4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ce48:	88e2      	ldrh	r2, [r4, #6]
 801ce4a:	8863      	ldrh	r3, [r4, #2]
 801ce4c:	4413      	add	r3, r2
 801ce4e:	9a00      	ldr	r2, [sp, #0]
 801ce50:	444a      	add	r2, r9
 801ce52:	b29b      	uxth	r3, r3
 801ce54:	fa1f f982 	uxth.w	r9, r2
 801ce58:	b219      	sxth	r1, r3
 801ce5a:	fa0f f289 	sxth.w	r2, r9
 801ce5e:	428a      	cmp	r2, r1
 801ce60:	da15      	bge.n	801ce8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ce62:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ce66:	eba3 0309 	sub.w	r3, r3, r9
 801ce6a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ce6e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ce72:	4631      	mov	r1, r6
 801ce74:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ce78:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ce7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ce80:	69ea      	ldr	r2, [r5, #28]
 801ce82:	e001      	b.n	801ce88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801ce84:	69ea      	ldr	r2, [r5, #28]
 801ce86:	4621      	mov	r1, r4
 801ce88:	4640      	mov	r0, r8
 801ce8a:	f7ff ff2b 	bl	801cce4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ce8e:	4628      	mov	r0, r5
 801ce90:	f7ff fe94 	bl	801cbbc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ce94:	6861      	ldr	r1, [r4, #4]
 801ce96:	4602      	mov	r2, r0
 801ce98:	4633      	mov	r3, r6
 801ce9a:	6820      	ldr	r0, [r4, #0]
 801ce9c:	c303      	stmia	r3!, {r0, r1}
 801ce9e:	4611      	mov	r1, r2
 801cea0:	4630      	mov	r0, r6
 801cea2:	f7fa f96b 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 801cea6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	f77f af33 	ble.w	801cd16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ceb0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	f77f af2e 	ble.w	801cd16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ceba:	4628      	mov	r0, r5
 801cebc:	f7ff fe9a 	bl	801cbf4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cec0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cec4:	1a18      	subs	r0, r3, r0
 801cec6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ceca:	4628      	mov	r0, r5
 801cecc:	f7ff fea6 	bl	801cc1c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ced0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ced4:	4631      	mov	r1, r6
 801ced6:	1a18      	subs	r0, r3, r0
 801ced8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cedc:	4628      	mov	r0, r5
 801cede:	682b      	ldr	r3, [r5, #0]
 801cee0:	689b      	ldr	r3, [r3, #8]
 801cee2:	4798      	blx	r3
 801cee4:	e717      	b.n	801cd16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801cee6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801cee6:	b570      	push	{r4, r5, r6, lr}
 801cee8:	1d06      	adds	r6, r0, #4
 801ceea:	b086      	sub	sp, #24
 801ceec:	460c      	mov	r4, r1
 801ceee:	2300      	movs	r3, #0
 801cef0:	4631      	mov	r1, r6
 801cef2:	4605      	mov	r5, r0
 801cef4:	a802      	add	r0, sp, #8
 801cef6:	9301      	str	r3, [sp, #4]
 801cef8:	f7ff fc9e 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cefc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cf00:	8822      	ldrh	r2, [r4, #0]
 801cf02:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801cf06:	1ad2      	subs	r2, r2, r3
 801cf08:	8863      	ldrh	r3, [r4, #2]
 801cf0a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cf0e:	1a5b      	subs	r3, r3, r1
 801cf10:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801cf14:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cf18:	aa01      	add	r2, sp, #4
 801cf1a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cf1e:	4630      	mov	r0, r6
 801cf20:	f8ad 1016 	strh.w	r1, [sp, #22]
 801cf24:	a904      	add	r1, sp, #16
 801cf26:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cf2a:	f7fa f9ff 	bl	801732c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801cf2e:	9a01      	ldr	r2, [sp, #4]
 801cf30:	b11a      	cbz	r2, 801cf3a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801cf32:	4621      	mov	r1, r4
 801cf34:	4628      	mov	r0, r5
 801cf36:	f7ff fed5 	bl	801cce4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cf3a:	b006      	add	sp, #24
 801cf3c:	bd70      	pop	{r4, r5, r6, pc}

0801cf3e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cf3e:	4602      	mov	r2, r0
 801cf40:	b530      	push	{r4, r5, lr}
 801cf42:	4604      	mov	r4, r0
 801cf44:	b085      	sub	sp, #20
 801cf46:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cf4a:	460d      	mov	r5, r1
 801cf4c:	466b      	mov	r3, sp
 801cf4e:	6851      	ldr	r1, [r2, #4]
 801cf50:	c303      	stmia	r3!, {r0, r1}
 801cf52:	4629      	mov	r1, r5
 801cf54:	4668      	mov	r0, sp
 801cf56:	f7fa f911 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 801cf5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cf5e:	b12b      	cbz	r3, 801cf6c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801cf60:	4669      	mov	r1, sp
 801cf62:	4620      	mov	r0, r4
 801cf64:	f7ff ffbf 	bl	801cee6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801cf68:	b005      	add	sp, #20
 801cf6a:	bd30      	pop	{r4, r5, pc}
 801cf6c:	3404      	adds	r4, #4
 801cf6e:	a802      	add	r0, sp, #8
 801cf70:	4621      	mov	r1, r4
 801cf72:	f7ff fc61 	bl	801c838 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cf76:	f8bd 3000 	ldrh.w	r3, [sp]
 801cf7a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801cf7e:	4669      	mov	r1, sp
 801cf80:	4620      	mov	r0, r4
 801cf82:	1a9b      	subs	r3, r3, r2
 801cf84:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cf88:	f8ad 3000 	strh.w	r3, [sp]
 801cf8c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cf90:	1a9b      	subs	r3, r3, r2
 801cf92:	f8ad 3002 	strh.w	r3, [sp, #2]
 801cf96:	f7fa f990 	bl	80172ba <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801cf9a:	e7e5      	b.n	801cf68 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801cf9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801cf9c:	460b      	mov	r3, r1
 801cf9e:	680a      	ldr	r2, [r1, #0]
 801cfa0:	1d01      	adds	r1, r0, #4
 801cfa2:	6992      	ldr	r2, [r2, #24]
 801cfa4:	4618      	mov	r0, r3
 801cfa6:	4710      	bx	r2

0801cfa8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 801cfa8:	4298      	cmp	r0, r3
 801cfaa:	d200      	bcs.n	801cfae <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x6>
 801cfac:	b913      	cbnz	r3, 801cfb4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0xc>
 801cfae:	440a      	add	r2, r1
 801cfb0:	b210      	sxth	r0, r2
 801cfb2:	4770      	bx	lr
 801cfb4:	ee07 0a90 	vmov	s15, r0
 801cfb8:	eddf 4a18 	vldr	s9, [pc, #96]	; 801d01c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x74>
 801cfbc:	eddf 5a18 	vldr	s11, [pc, #96]	; 801d020 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x78>
 801cfc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cfc4:	ee07 3a90 	vmov	s15, r3
 801cfc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cfcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cfd0:	ee07 2a90 	vmov	s15, r2
 801cfd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cfd8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801cfdc:	ee07 1a90 	vmov	s15, r1
 801cfe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cfe4:	ee37 7a66 	vsub.f32	s14, s14, s13
 801cfe8:	eee7 5a24 	vfma.f32	s11, s14, s9
 801cfec:	ee27 5a07 	vmul.f32	s10, s14, s14
 801cff0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801cff4:	eee5 6a25 	vfma.f32	s13, s10, s11
 801cff8:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d004:	bfcc      	ite	gt
 801d006:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d00a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d00e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d012:	ee17 3a90 	vmov	r3, s15
 801d016:	b218      	sxth	r0, r3
 801d018:	4770      	bx	lr
 801d01a:	bf00      	nop
 801d01c:	402ce6b0 	.word	0x402ce6b0
 801d020:	3fd9cd60 	.word	0x3fd9cd60

0801d024 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d024:	4298      	cmp	r0, r3
 801d026:	d200      	bcs.n	801d02a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801d028:	b913      	cbnz	r3, 801d030 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801d02a:	440a      	add	r2, r1
 801d02c:	b210      	sxth	r0, r2
 801d02e:	4770      	bx	lr
 801d030:	ee07 0a90 	vmov	s15, r0
 801d034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d038:	ee07 3a90 	vmov	s15, r3
 801d03c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d044:	ee07 2a90 	vmov	s15, r2
 801d048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d04c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801d050:	ee07 1a90 	vmov	s15, r1
 801d054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d058:	ee37 7a66 	vsub.f32	s14, s14, s13
 801d05c:	ee67 5a07 	vmul.f32	s11, s14, s14
 801d060:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d064:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d068:	eee6 7a26 	vfma.f32	s15, s12, s13
 801d06c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d074:	bfcc      	ite	gt
 801d076:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d07a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d07e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d082:	ee17 3a90 	vmov	r3, s15
 801d086:	b218      	sxth	r0, r3
 801d088:	4770      	bx	lr

0801d08a <_ZN8touchgfx12TextProviderC1Ev>:
 801d08a:	b538      	push	{r3, r4, r5, lr}
 801d08c:	2500      	movs	r5, #0
 801d08e:	2302      	movs	r3, #2
 801d090:	4604      	mov	r4, r0
 801d092:	220e      	movs	r2, #14
 801d094:	7403      	strb	r3, [r0, #16]
 801d096:	4629      	mov	r1, r5
 801d098:	6145      	str	r5, [r0, #20]
 801d09a:	7605      	strb	r5, [r0, #24]
 801d09c:	83c5      	strh	r5, [r0, #30]
 801d09e:	8405      	strh	r5, [r0, #32]
 801d0a0:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d0a2:	8705      	strh	r5, [r0, #56]	; 0x38
 801d0a4:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801d0a6:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801d0aa:	e9c0 5500 	strd	r5, r5, [r0]
 801d0ae:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801d0b2:	304c      	adds	r0, #76	; 0x4c
 801d0b4:	f00d fb5e 	bl	802a774 <memset>
 801d0b8:	2301      	movs	r3, #1
 801d0ba:	4620      	mov	r0, r4
 801d0bc:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801d0c0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d0c4:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801d0c8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801d0cc:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801d0d0:	f7e7 f99c 	bl	800440c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d0d4:	4620      	mov	r0, r4
 801d0d6:	bd38      	pop	{r3, r4, r5, pc}

0801d0d8 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801d0d8:	b508      	push	{r3, lr}
 801d0da:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801d0dc:	b92b      	cbnz	r3, 801d0ea <_ZN8touchgfx12TextProvider11endOfStringEv+0x12>
 801d0de:	4b07      	ldr	r3, [pc, #28]	; (801d0fc <_ZN8touchgfx12TextProvider11endOfStringEv+0x24>)
 801d0e0:	21c0      	movs	r1, #192	; 0xc0
 801d0e2:	4a07      	ldr	r2, [pc, #28]	; (801d100 <_ZN8touchgfx12TextProvider11endOfStringEv+0x28>)
 801d0e4:	4807      	ldr	r0, [pc, #28]	; (801d104 <_ZN8touchgfx12TextProvider11endOfStringEv+0x2c>)
 801d0e6:	f00d fab5 	bl	802a654 <__assert_func>
 801d0ea:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d0ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d0f0:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801d0f2:	fab0 f080 	clz	r0, r0
 801d0f6:	0940      	lsrs	r0, r0, #5
 801d0f8:	bd08      	pop	{r3, pc}
 801d0fa:	bf00      	nop
 801d0fc:	0802db84 	.word	0x0802db84
 801d100:	0803180f 	.word	0x0803180f
 801d104:	0802dc56 	.word	0x0802dc56

0801d108 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d108:	b530      	push	{r4, r5, lr}
 801d10a:	2500      	movs	r5, #0
 801d10c:	2401      	movs	r4, #1
 801d10e:	6843      	ldr	r3, [r0, #4]
 801d110:	b913      	cbnz	r3, 801d118 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d112:	6803      	ldr	r3, [r0, #0]
 801d114:	b313      	cbz	r3, 801d15c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d116:	6043      	str	r3, [r0, #4]
 801d118:	7e03      	ldrb	r3, [r0, #24]
 801d11a:	b143      	cbz	r3, 801d12e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d11c:	6943      	ldr	r3, [r0, #20]
 801d11e:	b12b      	cbz	r3, 801d12c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d120:	881a      	ldrh	r2, [r3, #0]
 801d122:	b11a      	cbz	r2, 801d12c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d124:	1c9a      	adds	r2, r3, #2
 801d126:	6142      	str	r2, [r0, #20]
 801d128:	8818      	ldrh	r0, [r3, #0]
 801d12a:	bd30      	pop	{r4, r5, pc}
 801d12c:	7605      	strb	r5, [r0, #24]
 801d12e:	6843      	ldr	r3, [r0, #4]
 801d130:	8819      	ldrh	r1, [r3, #0]
 801d132:	b199      	cbz	r1, 801d15c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d134:	1c9a      	adds	r2, r3, #2
 801d136:	2902      	cmp	r1, #2
 801d138:	6042      	str	r2, [r0, #4]
 801d13a:	d1f5      	bne.n	801d128 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d13c:	7c03      	ldrb	r3, [r0, #16]
 801d13e:	2b01      	cmp	r3, #1
 801d140:	d8e5      	bhi.n	801d10e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d142:	1c5a      	adds	r2, r3, #1
 801d144:	3302      	adds	r3, #2
 801d146:	7402      	strb	r2, [r0, #16]
 801d148:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d14c:	6143      	str	r3, [r0, #20]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d0dd      	beq.n	801d10e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d152:	881b      	ldrh	r3, [r3, #0]
 801d154:	2b00      	cmp	r3, #0
 801d156:	d0da      	beq.n	801d10e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d158:	7604      	strb	r4, [r0, #24]
 801d15a:	e7d8      	b.n	801d10e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d15c:	2000      	movs	r0, #0
 801d15e:	e7e4      	b.n	801d12a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d160 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d160:	6001      	str	r1, [r0, #0]
 801d162:	2100      	movs	r1, #0
 801d164:	b430      	push	{r4, r5}
 801d166:	6041      	str	r1, [r0, #4]
 801d168:	6815      	ldr	r5, [r2, #0]
 801d16a:	6085      	str	r5, [r0, #8]
 801d16c:	6852      	ldr	r2, [r2, #4]
 801d16e:	6443      	str	r3, [r0, #68]	; 0x44
 801d170:	9b02      	ldr	r3, [sp, #8]
 801d172:	60c2      	str	r2, [r0, #12]
 801d174:	7401      	strb	r1, [r0, #16]
 801d176:	6141      	str	r1, [r0, #20]
 801d178:	7601      	strb	r1, [r0, #24]
 801d17a:	8701      	strh	r1, [r0, #56]	; 0x38
 801d17c:	8401      	strh	r1, [r0, #32]
 801d17e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801d182:	6483      	str	r3, [r0, #72]	; 0x48
 801d184:	bc30      	pop	{r4, r5}
 801d186:	f7e7 b941 	b.w	800440c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d18a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801d18a:	b408      	push	{r3}
 801d18c:	b510      	push	{r4, lr}
 801d18e:	b085      	sub	sp, #20
 801d190:	ac07      	add	r4, sp, #28
 801d192:	f854 3b04 	ldr.w	r3, [r4], #4
 801d196:	9300      	str	r3, [sp, #0]
 801d198:	4613      	mov	r3, r2
 801d19a:	4622      	mov	r2, r4
 801d19c:	9403      	str	r4, [sp, #12]
 801d19e:	f7ff ffdf 	bl	801d160 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d1a2:	b005      	add	sp, #20
 801d1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d1a8:	b001      	add	sp, #4
 801d1aa:	4770      	bx	lr

0801d1ac <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1ae:	4605      	mov	r5, r0
 801d1b0:	4608      	mov	r0, r1
 801d1b2:	b1f1      	cbz	r1, 801d1f2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d1b4:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801d1b8:	460b      	mov	r3, r1
 801d1ba:	f101 0708 	add.w	r7, r1, #8
 801d1be:	4622      	mov	r2, r4
 801d1c0:	6818      	ldr	r0, [r3, #0]
 801d1c2:	3308      	adds	r3, #8
 801d1c4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d1c8:	4626      	mov	r6, r4
 801d1ca:	42bb      	cmp	r3, r7
 801d1cc:	c603      	stmia	r6!, {r0, r1}
 801d1ce:	4634      	mov	r4, r6
 801d1d0:	d1f6      	bne.n	801d1c0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d1d2:	6818      	ldr	r0, [r3, #0]
 801d1d4:	6030      	str	r0, [r6, #0]
 801d1d6:	4610      	mov	r0, r2
 801d1d8:	889b      	ldrh	r3, [r3, #4]
 801d1da:	80b3      	strh	r3, [r6, #4]
 801d1dc:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801d1e0:	015b      	lsls	r3, r3, #5
 801d1e2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d1e6:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801d1ea:	430b      	orrs	r3, r1
 801d1ec:	425b      	negs	r3, r3
 801d1ee:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801d1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d1f4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d1f4:	b538      	push	{r3, r4, r5, lr}
 801d1f6:	460c      	mov	r4, r1
 801d1f8:	6811      	ldr	r1, [r2, #0]
 801d1fa:	4610      	mov	r0, r2
 801d1fc:	68cd      	ldr	r5, [r1, #12]
 801d1fe:	4619      	mov	r1, r3
 801d200:	47a8      	blx	r5
 801d202:	2800      	cmp	r0, #0
 801d204:	bf08      	it	eq
 801d206:	4620      	moveq	r0, r4
 801d208:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d20c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d20e:	4604      	mov	r4, r0
 801d210:	4615      	mov	r5, r2
 801d212:	4608      	mov	r0, r1
 801d214:	b93a      	cbnz	r2, 801d226 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d216:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d21a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801d21e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801d222:	4628      	mov	r0, r5
 801d224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d226:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801d22a:	8893      	ldrh	r3, [r2, #4]
 801d22c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801d230:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d234:	79ee      	ldrb	r6, [r5, #7]
 801d236:	4316      	orrs	r6, r2
 801d238:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801d23c:	189a      	adds	r2, r3, r2
 801d23e:	b2b7      	uxth	r7, r6
 801d240:	b291      	uxth	r1, r2
 801d242:	291d      	cmp	r1, #29
 801d244:	f200 8084 	bhi.w	801d350 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d248:	2201      	movs	r2, #1
 801d24a:	10f6      	asrs	r6, r6, #3
 801d24c:	408a      	lsls	r2, r1
 801d24e:	4978      	ldr	r1, [pc, #480]	; (801d430 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801d250:	420a      	tst	r2, r1
 801d252:	d12e      	bne.n	801d2b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801d254:	f412 7f60 	tst.w	r2, #896	; 0x380
 801d258:	d07a      	beq.n	801d350 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d25a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801d25e:	462b      	mov	r3, r5
 801d260:	f105 0e08 	add.w	lr, r5, #8
 801d264:	4615      	mov	r5, r2
 801d266:	6818      	ldr	r0, [r3, #0]
 801d268:	3308      	adds	r3, #8
 801d26a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d26e:	4694      	mov	ip, r2
 801d270:	4573      	cmp	r3, lr
 801d272:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d276:	4662      	mov	r2, ip
 801d278:	d1f5      	bne.n	801d266 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801d27a:	6818      	ldr	r0, [r3, #0]
 801d27c:	f8cc 0000 	str.w	r0, [ip]
 801d280:	889b      	ldrh	r3, [r3, #4]
 801d282:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d286:	b2b3      	uxth	r3, r6
 801d288:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801d28c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801d290:	1aca      	subs	r2, r1, r3
 801d292:	1bcf      	subs	r7, r1, r7
 801d294:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801d298:	b292      	uxth	r2, r2
 801d29a:	1afb      	subs	r3, r7, r3
 801d29c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801d2a0:	10d2      	asrs	r2, r2, #3
 801d2a2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801d2a6:	4302      	orrs	r2, r0
 801d2a8:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801d2ac:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d2b0:	e7b7      	b.n	801d222 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d2b2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d2b4:	b92b      	cbnz	r3, 801d2c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801d2b6:	4b5f      	ldr	r3, [pc, #380]	; (801d434 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801d2b8:	21c0      	movs	r1, #192	; 0xc0
 801d2ba:	4a5f      	ldr	r2, [pc, #380]	; (801d438 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801d2bc:	485f      	ldr	r0, [pc, #380]	; (801d43c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801d2be:	f00d f9c9 	bl	802a654 <__assert_func>
 801d2c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d2c4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d2c8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801d2ca:	f640 6333 	movw	r3, #3635	; 0xe33
 801d2ce:	4299      	cmp	r1, r3
 801d2d0:	d110      	bne.n	801d2f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801d2d2:	6803      	ldr	r3, [r0, #0]
 801d2d4:	68db      	ldr	r3, [r3, #12]
 801d2d6:	4798      	blx	r3
 801d2d8:	7b41      	ldrb	r1, [r0, #13]
 801d2da:	00cb      	lsls	r3, r1, #3
 801d2dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d2e0:	7a03      	ldrb	r3, [r0, #8]
 801d2e2:	0648      	lsls	r0, r1, #25
 801d2e4:	ea43 0302 	orr.w	r3, r3, r2
 801d2e8:	bf44      	itt	mi
 801d2ea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d2ee:	b21b      	sxthmi	r3, r3
 801d2f0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d2f4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801d2f8:	462a      	mov	r2, r5
 801d2fa:	f105 0c08 	add.w	ip, r5, #8
 801d2fe:	443b      	add	r3, r7
 801d300:	4433      	add	r3, r6
 801d302:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801d306:	b29b      	uxth	r3, r3
 801d308:	4635      	mov	r5, r6
 801d30a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d30e:	6810      	ldr	r0, [r2, #0]
 801d310:	3208      	adds	r2, #8
 801d312:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d316:	4637      	mov	r7, r6
 801d318:	4562      	cmp	r2, ip
 801d31a:	c703      	stmia	r7!, {r0, r1}
 801d31c:	463e      	mov	r6, r7
 801d31e:	d1f6      	bne.n	801d30e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801d320:	6810      	ldr	r0, [r2, #0]
 801d322:	6038      	str	r0, [r7, #0]
 801d324:	8892      	ldrh	r2, [r2, #4]
 801d326:	80ba      	strh	r2, [r7, #4]
 801d328:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d32c:	10db      	asrs	r3, r3, #3
 801d32e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d332:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d336:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d33a:	4313      	orrs	r3, r2
 801d33c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801d340:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d344:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801d348:	1a9b      	subs	r3, r3, r2
 801d34a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801d34e:	e768      	b.n	801d222 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d350:	f023 0204 	bic.w	r2, r3, #4
 801d354:	f640 611b 	movw	r1, #3611	; 0xe1b
 801d358:	428a      	cmp	r2, r1
 801d35a:	d003      	beq.n	801d364 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801d35c:	f640 621d 	movw	r2, #3613	; 0xe1d
 801d360:	4293      	cmp	r3, r2
 801d362:	d120      	bne.n	801d3a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801d364:	3b01      	subs	r3, #1
 801d366:	4602      	mov	r2, r0
 801d368:	4629      	mov	r1, r5
 801d36a:	4620      	mov	r0, r4
 801d36c:	b29b      	uxth	r3, r3
 801d36e:	f7ff ff41 	bl	801d1f4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d372:	7b41      	ldrb	r1, [r0, #13]
 801d374:	00cb      	lsls	r3, r1, #3
 801d376:	0649      	lsls	r1, r1, #25
 801d378:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d37c:	7a03      	ldrb	r3, [r0, #8]
 801d37e:	ea43 0302 	orr.w	r3, r3, r2
 801d382:	bf44      	itt	mi
 801d384:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d388:	b21b      	sxthmi	r3, r3
 801d38a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d38e:	7b6b      	ldrb	r3, [r5, #13]
 801d390:	7aaa      	ldrb	r2, [r5, #10]
 801d392:	005b      	lsls	r3, r3, #1
 801d394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d398:	4313      	orrs	r3, r2
 801d39a:	115a      	asrs	r2, r3, #5
 801d39c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d3a0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d3a4:	e035      	b.n	801d412 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801d3a6:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d3aa:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801d3ae:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801d3b2:	7a2a      	ldrb	r2, [r5, #8]
 801d3b4:	ea42 0201 	orr.w	r2, r2, r1
 801d3b8:	f640 6109 	movw	r1, #3593	; 0xe09
 801d3bc:	bf1c      	itt	ne
 801d3be:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801d3c2:	b212      	sxthne	r2, r2
 801d3c4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d3c8:	f023 0210 	bic.w	r2, r3, #16
 801d3cc:	428a      	cmp	r2, r1
 801d3ce:	d003      	beq.n	801d3d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801d3d0:	f640 6213 	movw	r2, #3603	; 0xe13
 801d3d4:	4293      	cmp	r3, r2
 801d3d6:	d129      	bne.n	801d42c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801d3d8:	7b6e      	ldrb	r6, [r5, #13]
 801d3da:	4629      	mov	r1, r5
 801d3dc:	0076      	lsls	r6, r6, #1
 801d3de:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d3e2:	7aae      	ldrb	r6, [r5, #10]
 801d3e4:	4316      	orrs	r6, r2
 801d3e6:	f640 6213 	movw	r2, #3603	; 0xe13
 801d3ea:	4293      	cmp	r3, r2
 801d3ec:	4602      	mov	r2, r0
 801d3ee:	4620      	mov	r0, r4
 801d3f0:	bf16      	itet	ne
 801d3f2:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 801d3f6:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d3fa:	b29b      	uxthne	r3, r3
 801d3fc:	f7ff fefa 	bl	801d1f4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d400:	7b43      	ldrb	r3, [r0, #13]
 801d402:	7a82      	ldrb	r2, [r0, #10]
 801d404:	005b      	lsls	r3, r3, #1
 801d406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d40a:	4313      	orrs	r3, r2
 801d40c:	1af6      	subs	r6, r6, r3
 801d40e:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801d412:	7b69      	ldrb	r1, [r5, #13]
 801d414:	00cb      	lsls	r3, r1, #3
 801d416:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d41a:	7a2b      	ldrb	r3, [r5, #8]
 801d41c:	4313      	orrs	r3, r2
 801d41e:	064a      	lsls	r2, r1, #25
 801d420:	bf44      	itt	mi
 801d422:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d426:	b21b      	sxthmi	r3, r3
 801d428:	1bdb      	subs	r3, r3, r7
 801d42a:	e73f      	b.n	801d2ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801d42c:	2300      	movs	r3, #0
 801d42e:	e7b7      	b.n	801d3a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801d430:	3fc00079 	.word	0x3fc00079
 801d434:	0802db84 	.word	0x0802db84
 801d438:	0803180f 	.word	0x0803180f
 801d43c:	0802dc56 	.word	0x0802dc56

0801d440 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d444:	4604      	mov	r4, r0
 801d446:	b942      	cbnz	r2, 801d45a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d44c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801d450:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801d454:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d458:	e046      	b.n	801d4e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d45a:	7b51      	ldrb	r1, [r2, #13]
 801d45c:	8893      	ldrh	r3, [r2, #4]
 801d45e:	010f      	lsls	r7, r1, #4
 801d460:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801d464:	79d7      	ldrb	r7, [r2, #7]
 801d466:	4307      	orrs	r7, r0
 801d468:	2f04      	cmp	r7, #4
 801d46a:	b2bd      	uxth	r5, r7
 801d46c:	bfcc      	ite	gt
 801d46e:	08bf      	lsrgt	r7, r7, #2
 801d470:	2701      	movle	r7, #1
 801d472:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801d476:	f200 80ab 	bhi.w	801d5d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801d47a:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801d47e:	4283      	cmp	r3, r0
 801d480:	d216      	bcs.n	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d482:	f240 605b 	movw	r0, #1627	; 0x65b
 801d486:	4283      	cmp	r3, r0
 801d488:	d859      	bhi.n	801d53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801d48a:	f240 6057 	movw	r0, #1623	; 0x657
 801d48e:	4283      	cmp	r3, r0
 801d490:	d20e      	bcs.n	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d492:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d496:	d24a      	bcs.n	801d52e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801d498:	f240 604e 	movw	r0, #1614	; 0x64e
 801d49c:	4283      	cmp	r3, r0
 801d49e:	d207      	bcs.n	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d4a0:	f240 601a 	movw	r0, #1562	; 0x61a
 801d4a4:	4283      	cmp	r3, r0
 801d4a6:	d02a      	beq.n	801d4fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d4a8:	d821      	bhi.n	801d4ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801d4aa:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801d4ae:	d35b      	bcc.n	801d568 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d4b0:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801d4b4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d4b8:	f040 80d0 	bne.w	801d65c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d4bc:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801d4c0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d4c4:	f040 80ca 	bne.w	801d65c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d4c8:	00cb      	lsls	r3, r1, #3
 801d4ca:	0649      	lsls	r1, r1, #25
 801d4cc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d4d0:	7a13      	ldrb	r3, [r2, #8]
 801d4d2:	ea43 0300 	orr.w	r3, r3, r0
 801d4d6:	bf44      	itt	mi
 801d4d8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d4dc:	b21b      	sxthmi	r3, r3
 801d4de:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d4e2:	1b5d      	subs	r5, r3, r5
 801d4e4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d4e8:	4610      	mov	r0, r2
 801d4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d4ee:	f240 604b 	movw	r0, #1611	; 0x64b
 801d4f2:	4283      	cmp	r3, r0
 801d4f4:	d338      	bcc.n	801d568 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d4f6:	f240 604c 	movw	r0, #1612	; 0x64c
 801d4fa:	4283      	cmp	r3, r0
 801d4fc:	d9d8      	bls.n	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d4fe:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801d502:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801d506:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d50a:	f040 80f2 	bne.w	801d6f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d50e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d512:	f040 80ee 	bne.w	801d6f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d516:	00cb      	lsls	r3, r1, #3
 801d518:	064e      	lsls	r6, r1, #25
 801d51a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d51e:	7a13      	ldrb	r3, [r2, #8]
 801d520:	ea43 0300 	orr.w	r3, r3, r0
 801d524:	bf44      	itt	mi
 801d526:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d52a:	b21b      	sxthmi	r3, r3
 801d52c:	e7d9      	b.n	801d4e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801d52e:	f240 6054 	movw	r0, #1620	; 0x654
 801d532:	4283      	cmp	r3, r0
 801d534:	d8e3      	bhi.n	801d4fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d536:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d53a:	d9e0      	bls.n	801d4fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d53c:	e7b8      	b.n	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d53e:	f240 6074 	movw	r0, #1652	; 0x674
 801d542:	4283      	cmp	r3, r0
 801d544:	d0b4      	beq.n	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d546:	d82d      	bhi.n	801d5a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801d548:	f240 605e 	movw	r0, #1630	; 0x65e
 801d54c:	4283      	cmp	r3, r0
 801d54e:	d804      	bhi.n	801d55a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801d550:	f240 605d 	movw	r0, #1629	; 0x65d
 801d554:	4283      	cmp	r3, r0
 801d556:	d3d2      	bcc.n	801d4fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d558:	e7aa      	b.n	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d55a:	f240 605f 	movw	r0, #1631	; 0x65f
 801d55e:	4283      	cmp	r3, r0
 801d560:	d0cd      	beq.n	801d4fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d562:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801d566:	d0a3      	beq.n	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d568:	00cb      	lsls	r3, r1, #3
 801d56a:	0649      	lsls	r1, r1, #25
 801d56c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d570:	7a13      	ldrb	r3, [r2, #8]
 801d572:	ea43 0300 	orr.w	r3, r3, r0
 801d576:	bf44      	itt	mi
 801d578:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d57c:	b21b      	sxthmi	r3, r3
 801d57e:	1b5d      	subs	r5, r3, r5
 801d580:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d584:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d588:	7b53      	ldrb	r3, [r2, #13]
 801d58a:	015b      	lsls	r3, r3, #5
 801d58c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d590:	7993      	ldrb	r3, [r2, #6]
 801d592:	430b      	orrs	r3, r1
 801d594:	2105      	movs	r1, #5
 801d596:	005b      	lsls	r3, r3, #1
 801d598:	fb93 f3f1 	sdiv	r3, r3, r1
 801d59c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d5a0:	440b      	add	r3, r1
 801d5a2:	e757      	b.n	801d454 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d5a4:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801d5a8:	4283      	cmp	r3, r0
 801d5aa:	d809      	bhi.n	801d5c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801d5ac:	f240 60df 	movw	r0, #1759	; 0x6df
 801d5b0:	4283      	cmp	r3, r0
 801d5b2:	f4bf af7d 	bcs.w	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d5b6:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801d5ba:	2b05      	cmp	r3, #5
 801d5bc:	d8d4      	bhi.n	801d568 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d5be:	e777      	b.n	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d5c0:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801d5c4:	4283      	cmp	r3, r0
 801d5c6:	d09a      	beq.n	801d4fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d5c8:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801d5cc:	4283      	cmp	r3, r0
 801d5ce:	e7ca      	b.n	801d566 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801d5d0:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801d5d4:	d22b      	bcs.n	801d62e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801d5d6:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801d5da:	4283      	cmp	r3, r0
 801d5dc:	d28f      	bcs.n	801d4fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d5de:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d5e2:	4283      	cmp	r3, r0
 801d5e4:	d816      	bhi.n	801d614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801d5e6:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801d5ea:	4283      	cmp	r3, r0
 801d5ec:	f4bf af60 	bcs.w	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d5f0:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801d5f4:	4283      	cmp	r3, r0
 801d5f6:	d80a      	bhi.n	801d60e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801d5f8:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801d5fc:	4283      	cmp	r3, r0
 801d5fe:	f4bf af57 	bcs.w	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d602:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801d606:	4283      	cmp	r3, r0
 801d608:	f43f af79 	beq.w	801d4fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d60c:	e7ac      	b.n	801d568 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d60e:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801d612:	e7f8      	b.n	801d606 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801d614:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801d618:	4283      	cmp	r3, r0
 801d61a:	d802      	bhi.n	801d622 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801d61c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d620:	e798      	b.n	801d554 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801d622:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801d626:	4283      	cmp	r3, r0
 801d628:	f47f af42 	bne.w	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d62c:	e767      	b.n	801d4fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d62e:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801d632:	4283      	cmp	r3, r0
 801d634:	f43f af63 	beq.w	801d4fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d638:	d802      	bhi.n	801d640 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801d63a:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801d63e:	e7f2      	b.n	801d626 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801d640:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801d644:	4283      	cmp	r3, r0
 801d646:	d805      	bhi.n	801d654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801d648:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801d64c:	4283      	cmp	r3, r0
 801d64e:	f4ff af2f 	bcc.w	801d4b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d652:	e754      	b.n	801d4fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d654:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801d658:	4283      	cmp	r3, r0
 801d65a:	e7af      	b.n	801d5bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801d65c:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d660:	4617      	mov	r7, r2
 801d662:	f102 0808 	add.w	r8, r2, #8
 801d666:	4666      	mov	r6, ip
 801d668:	6838      	ldr	r0, [r7, #0]
 801d66a:	3708      	adds	r7, #8
 801d66c:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d670:	46e6      	mov	lr, ip
 801d672:	4547      	cmp	r7, r8
 801d674:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d678:	46f4      	mov	ip, lr
 801d67a:	d1f5      	bne.n	801d668 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801d67c:	6838      	ldr	r0, [r7, #0]
 801d67e:	f8ce 0000 	str.w	r0, [lr]
 801d682:	88b9      	ldrh	r1, [r7, #4]
 801d684:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d688:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d68c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d690:	d009      	beq.n	801d6a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801d692:	7b51      	ldrb	r1, [r2, #13]
 801d694:	7992      	ldrb	r2, [r2, #6]
 801d696:	0149      	lsls	r1, r1, #5
 801d698:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d69c:	4311      	orrs	r1, r2
 801d69e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d6a2:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d6a6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d6aa:	d00d      	beq.n	801d6c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801d6ac:	442b      	add	r3, r5
 801d6ae:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d6b2:	b29b      	uxth	r3, r3
 801d6b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d6b8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d6bc:	10db      	asrs	r3, r3, #3
 801d6be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d6c2:	4313      	orrs	r3, r2
 801d6c4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d6c8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d6cc:	00cb      	lsls	r3, r1, #3
 801d6ce:	064f      	lsls	r7, r1, #25
 801d6d0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d6d4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d6d8:	ea43 0302 	orr.w	r3, r3, r2
 801d6dc:	bf44      	itt	mi
 801d6de:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d6e2:	b21b      	sxthmi	r3, r3
 801d6e4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d6e8:	1b5d      	subs	r5, r3, r5
 801d6ea:	4632      	mov	r2, r6
 801d6ec:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d6f0:	e6fa      	b.n	801d4e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d6f2:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801d6f6:	4694      	mov	ip, r2
 801d6f8:	f102 0908 	add.w	r9, r2, #8
 801d6fc:	4676      	mov	r6, lr
 801d6fe:	f8dc 0000 	ldr.w	r0, [ip]
 801d702:	f10c 0c08 	add.w	ip, ip, #8
 801d706:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801d70a:	46f0      	mov	r8, lr
 801d70c:	45cc      	cmp	ip, r9
 801d70e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d712:	46c6      	mov	lr, r8
 801d714:	d1f3      	bne.n	801d6fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801d716:	f8dc 0000 	ldr.w	r0, [ip]
 801d71a:	f8c8 0000 	str.w	r0, [r8]
 801d71e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801d722:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d726:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d72a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d72e:	d009      	beq.n	801d744 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801d730:	7b51      	ldrb	r1, [r2, #13]
 801d732:	7992      	ldrb	r2, [r2, #6]
 801d734:	0149      	lsls	r1, r1, #5
 801d736:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d73a:	4311      	orrs	r1, r2
 801d73c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d740:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d744:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d748:	d00d      	beq.n	801d766 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801d74a:	1bdb      	subs	r3, r3, r7
 801d74c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d750:	b29b      	uxth	r3, r3
 801d752:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d756:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d75a:	10db      	asrs	r3, r3, #3
 801d75c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d760:	4313      	orrs	r3, r2
 801d762:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d766:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d76a:	00cb      	lsls	r3, r1, #3
 801d76c:	0648      	lsls	r0, r1, #25
 801d76e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d772:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d776:	ea43 0302 	orr.w	r3, r3, r2
 801d77a:	bf44      	itt	mi
 801d77c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d780:	b21b      	sxthmi	r3, r3
 801d782:	e7b1      	b.n	801d6e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801d784 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d788:	461e      	mov	r6, r3
 801d78a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801d78c:	4604      	mov	r4, r0
 801d78e:	4617      	mov	r7, r2
 801d790:	b92b      	cbnz	r3, 801d79e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801d792:	4b25      	ldr	r3, [pc, #148]	; (801d828 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801d794:	21c0      	movs	r1, #192	; 0xc0
 801d796:	4a25      	ldr	r2, [pc, #148]	; (801d82c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801d798:	4825      	ldr	r0, [pc, #148]	; (801d830 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801d79a:	f00c ff5b 	bl	802a654 <__assert_func>
 801d79e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d7a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d7a4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d7a8:	f7e6 fdee 	bl	8004388 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d7ac:	4605      	mov	r5, r0
 801d7ae:	b918      	cbnz	r0, 801d7b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801d7b0:	6030      	str	r0, [r6, #0]
 801d7b2:	4628      	mov	r0, r5
 801d7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7b8:	683b      	ldr	r3, [r7, #0]
 801d7ba:	4601      	mov	r1, r0
 801d7bc:	4638      	mov	r0, r7
 801d7be:	68db      	ldr	r3, [r3, #12]
 801d7c0:	4798      	blx	r3
 801d7c2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d7c6:	4602      	mov	r2, r0
 801d7c8:	6030      	str	r0, [r6, #0]
 801d7ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d7ce:	d213      	bcs.n	801d7f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801d7d0:	4643      	mov	r3, r8
 801d7d2:	4639      	mov	r1, r7
 801d7d4:	4620      	mov	r0, r4
 801d7d6:	f7ff fe33 	bl	801d440 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d7da:	6030      	str	r0, [r6, #0]
 801d7dc:	6833      	ldr	r3, [r6, #0]
 801d7de:	b143      	cbz	r3, 801d7f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801d7e0:	7b5a      	ldrb	r2, [r3, #13]
 801d7e2:	7a9b      	ldrb	r3, [r3, #10]
 801d7e4:	0052      	lsls	r2, r2, #1
 801d7e6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d7ea:	4313      	orrs	r3, r2
 801d7ec:	bf0c      	ite	eq
 801d7ee:	2301      	moveq	r3, #1
 801d7f0:	2300      	movne	r3, #0
 801d7f2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d7f6:	e7dc      	b.n	801d7b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801d7f8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d7fc:	b29b      	uxth	r3, r3
 801d7fe:	2b7f      	cmp	r3, #127	; 0x7f
 801d800:	d804      	bhi.n	801d80c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801d802:	4639      	mov	r1, r7
 801d804:	4620      	mov	r0, r4
 801d806:	f7ff fd01 	bl	801d20c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d80a:	e7e6      	b.n	801d7da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801d80c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d810:	2b00      	cmp	r3, #0
 801d812:	d0e3      	beq.n	801d7dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801d814:	f640 1302 	movw	r3, #2306	; 0x902
 801d818:	429d      	cmp	r5, r3
 801d81a:	d1df      	bne.n	801d7dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801d81c:	4601      	mov	r1, r0
 801d81e:	4620      	mov	r0, r4
 801d820:	f7ff fcc4 	bl	801d1ac <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d824:	e7d9      	b.n	801d7da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801d826:	bf00      	nop
 801d828:	0802db84 	.word	0x0802db84
 801d82c:	0803180f 	.word	0x0803180f
 801d830:	0802dc56 	.word	0x0802dc56

0801d834 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d838:	461e      	mov	r6, r3
 801d83a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801d83c:	4604      	mov	r4, r0
 801d83e:	4617      	mov	r7, r2
 801d840:	b92b      	cbnz	r3, 801d84e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801d842:	4b26      	ldr	r3, [pc, #152]	; (801d8dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801d844:	21c0      	movs	r1, #192	; 0xc0
 801d846:	4a26      	ldr	r2, [pc, #152]	; (801d8e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801d848:	4826      	ldr	r0, [pc, #152]	; (801d8e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801d84a:	f00c ff03 	bl	802a654 <__assert_func>
 801d84e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d850:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d854:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d858:	f7e6 fd96 	bl	8004388 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d85c:	4605      	mov	r5, r0
 801d85e:	b918      	cbnz	r0, 801d868 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801d860:	6030      	str	r0, [r6, #0]
 801d862:	4628      	mov	r0, r5
 801d864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d868:	683b      	ldr	r3, [r7, #0]
 801d86a:	4601      	mov	r1, r0
 801d86c:	4638      	mov	r0, r7
 801d86e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d872:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d876:	47c8      	blx	r9
 801d878:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d87c:	4602      	mov	r2, r0
 801d87e:	6030      	str	r0, [r6, #0]
 801d880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d884:	d213      	bcs.n	801d8ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801d886:	4643      	mov	r3, r8
 801d888:	4639      	mov	r1, r7
 801d88a:	4620      	mov	r0, r4
 801d88c:	f7ff fdd8 	bl	801d440 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d890:	6030      	str	r0, [r6, #0]
 801d892:	6833      	ldr	r3, [r6, #0]
 801d894:	b143      	cbz	r3, 801d8a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801d896:	7b5a      	ldrb	r2, [r3, #13]
 801d898:	7a9b      	ldrb	r3, [r3, #10]
 801d89a:	0052      	lsls	r2, r2, #1
 801d89c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d8a0:	4313      	orrs	r3, r2
 801d8a2:	bf0c      	ite	eq
 801d8a4:	2301      	moveq	r3, #1
 801d8a6:	2300      	movne	r3, #0
 801d8a8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d8ac:	e7d9      	b.n	801d862 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801d8ae:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d8b2:	b29b      	uxth	r3, r3
 801d8b4:	2b7f      	cmp	r3, #127	; 0x7f
 801d8b6:	d804      	bhi.n	801d8c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801d8b8:	4639      	mov	r1, r7
 801d8ba:	4620      	mov	r0, r4
 801d8bc:	f7ff fca6 	bl	801d20c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d8c0:	e7e6      	b.n	801d890 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801d8c2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	d0e3      	beq.n	801d892 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801d8ca:	f640 1302 	movw	r3, #2306	; 0x902
 801d8ce:	429d      	cmp	r5, r3
 801d8d0:	d1df      	bne.n	801d892 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801d8d2:	4601      	mov	r1, r0
 801d8d4:	4620      	mov	r0, r4
 801d8d6:	f7ff fc69 	bl	801d1ac <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d8da:	e7d9      	b.n	801d890 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801d8dc:	0802db84 	.word	0x0802db84
 801d8e0:	0803180f 	.word	0x0803180f
 801d8e4:	0802dc56 	.word	0x0802dc56

0801d8e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d8e8:	b510      	push	{r4, lr}
 801d8ea:	4604      	mov	r4, r0
 801d8ec:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801d8f0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d8f2:	b9d9      	cbnz	r1, 801d92c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801d8f4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d8f6:	2b0a      	cmp	r3, #10
 801d8f8:	d037      	beq.n	801d96a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801d8fa:	4620      	mov	r0, r4
 801d8fc:	f7ff fc04 	bl	801d108 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d900:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d902:	2b09      	cmp	r3, #9
 801d904:	d906      	bls.n	801d914 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801d906:	4b19      	ldr	r3, [pc, #100]	; (801d96c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801d908:	f44f 7182 	mov.w	r1, #260	; 0x104
 801d90c:	4a18      	ldr	r2, [pc, #96]	; (801d970 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801d90e:	4819      	ldr	r0, [pc, #100]	; (801d974 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801d910:	f00c fea0 	bl	802a654 <__assert_func>
 801d914:	1c5a      	adds	r2, r3, #1
 801d916:	8722      	strh	r2, [r4, #56]	; 0x38
 801d918:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d91a:	4413      	add	r3, r2
 801d91c:	b29b      	uxth	r3, r3
 801d91e:	2b09      	cmp	r3, #9
 801d920:	bf88      	it	hi
 801d922:	3b0a      	subhi	r3, #10
 801d924:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d928:	8458      	strh	r0, [r3, #34]	; 0x22
 801d92a:	e7e3      	b.n	801d8f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801d92c:	2b0a      	cmp	r3, #10
 801d92e:	d01c      	beq.n	801d96a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801d930:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801d932:	3901      	subs	r1, #1
 801d934:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d938:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801d93a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801d93e:	1c51      	adds	r1, r2, #1
 801d940:	b289      	uxth	r1, r1
 801d942:	2901      	cmp	r1, #1
 801d944:	bf8a      	itet	hi
 801d946:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801d94a:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801d94c:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801d94e:	2b09      	cmp	r3, #9
 801d950:	d8d9      	bhi.n	801d906 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801d952:	1c5a      	adds	r2, r3, #1
 801d954:	8722      	strh	r2, [r4, #56]	; 0x38
 801d956:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d958:	4413      	add	r3, r2
 801d95a:	b29b      	uxth	r3, r3
 801d95c:	2b09      	cmp	r3, #9
 801d95e:	bf88      	it	hi
 801d960:	3b0a      	subhi	r3, #10
 801d962:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d966:	8458      	strh	r0, [r3, #34]	; 0x22
 801d968:	e7c0      	b.n	801d8ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d96a:	bd10      	pop	{r4, pc}
 801d96c:	080315e0 	.word	0x080315e0
 801d970:	08031965 	.word	0x08031965
 801d974:	0802dc56 	.word	0x0802dc56

0801d978 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d978:	b538      	push	{r3, r4, r5, lr}
 801d97a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801d97c:	4604      	mov	r4, r0
 801d97e:	b92a      	cbnz	r2, 801d98c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801d980:	4b13      	ldr	r3, [pc, #76]	; (801d9d0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801d982:	21d5      	movs	r1, #213	; 0xd5
 801d984:	4a13      	ldr	r2, [pc, #76]	; (801d9d4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801d986:	4814      	ldr	r0, [pc, #80]	; (801d9d8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801d988:	f00c fe64 	bl	802a654 <__assert_func>
 801d98c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d98e:	3a01      	subs	r2, #1
 801d990:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801d994:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801d996:	8702      	strh	r2, [r0, #56]	; 0x38
 801d998:	1c5a      	adds	r2, r3, #1
 801d99a:	b292      	uxth	r2, r2
 801d99c:	2a09      	cmp	r2, #9
 801d99e:	bf8a      	itet	hi
 801d9a0:	3b09      	subhi	r3, #9
 801d9a2:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801d9a4:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801d9a6:	f7ff ff9f 	bl	801d8e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d9aa:	8c23      	ldrh	r3, [r4, #32]
 801d9ac:	2b01      	cmp	r3, #1
 801d9ae:	bf9c      	itt	ls
 801d9b0:	3301      	addls	r3, #1
 801d9b2:	8423      	strhls	r3, [r4, #32]
 801d9b4:	8be3      	ldrh	r3, [r4, #30]
 801d9b6:	b90b      	cbnz	r3, 801d9bc <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801d9b8:	2302      	movs	r3, #2
 801d9ba:	83e3      	strh	r3, [r4, #30]
 801d9bc:	8be3      	ldrh	r3, [r4, #30]
 801d9be:	4628      	mov	r0, r5
 801d9c0:	3b01      	subs	r3, #1
 801d9c2:	b29b      	uxth	r3, r3
 801d9c4:	83e3      	strh	r3, [r4, #30]
 801d9c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d9ca:	8365      	strh	r5, [r4, #26]
 801d9cc:	bd38      	pop	{r3, r4, r5, pc}
 801d9ce:	bf00      	nop
 801d9d0:	0802db84 	.word	0x0802db84
 801d9d4:	080318ba 	.word	0x080318ba
 801d9d8:	0802dc56 	.word	0x0802dc56

0801d9dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d9dc:	428a      	cmp	r2, r1
 801d9de:	b538      	push	{r3, r4, r5, lr}
 801d9e0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801d9e2:	d90c      	bls.n	801d9fe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801d9e4:	b92c      	cbnz	r4, 801d9f2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801d9e6:	4b1c      	ldr	r3, [pc, #112]	; (801da58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801d9e8:	21e1      	movs	r1, #225	; 0xe1
 801d9ea:	4a1c      	ldr	r2, [pc, #112]	; (801da5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801d9ec:	481c      	ldr	r0, [pc, #112]	; (801da60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801d9ee:	f00c fe31 	bl	802a654 <__assert_func>
 801d9f2:	3c01      	subs	r4, #1
 801d9f4:	4b1b      	ldr	r3, [pc, #108]	; (801da64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801d9f6:	4a1c      	ldr	r2, [pc, #112]	; (801da68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801d9f8:	21c5      	movs	r1, #197	; 0xc5
 801d9fa:	8704      	strh	r4, [r0, #56]	; 0x38
 801d9fc:	e7f6      	b.n	801d9ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d9fe:	428c      	cmp	r4, r1
 801da00:	d203      	bcs.n	801da0a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801da02:	4b1a      	ldr	r3, [pc, #104]	; (801da6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801da04:	21cb      	movs	r1, #203	; 0xcb
 801da06:	4a1a      	ldr	r2, [pc, #104]	; (801da70 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801da08:	e7f0      	b.n	801d9ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801da0a:	1a64      	subs	r4, r4, r1
 801da0c:	250a      	movs	r5, #10
 801da0e:	8704      	strh	r4, [r0, #56]	; 0x38
 801da10:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801da12:	4421      	add	r1, r4
 801da14:	b289      	uxth	r1, r1
 801da16:	2909      	cmp	r1, #9
 801da18:	bf88      	it	hi
 801da1a:	390a      	subhi	r1, #10
 801da1c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801da1e:	b1ba      	cbz	r2, 801da50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801da20:	3a01      	subs	r2, #1
 801da22:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801da24:	b292      	uxth	r2, r2
 801da26:	2909      	cmp	r1, #9
 801da28:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801da2c:	d903      	bls.n	801da36 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801da2e:	4b11      	ldr	r3, [pc, #68]	; (801da74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801da30:	21e6      	movs	r1, #230	; 0xe6
 801da32:	4a11      	ldr	r2, [pc, #68]	; (801da78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801da34:	e7da      	b.n	801d9ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801da36:	3101      	adds	r1, #1
 801da38:	8701      	strh	r1, [r0, #56]	; 0x38
 801da3a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801da3c:	b901      	cbnz	r1, 801da40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801da3e:	86c5      	strh	r5, [r0, #54]	; 0x36
 801da40:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801da42:	3901      	subs	r1, #1
 801da44:	b289      	uxth	r1, r1
 801da46:	86c1      	strh	r1, [r0, #54]	; 0x36
 801da48:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801da4c:	844c      	strh	r4, [r1, #34]	; 0x22
 801da4e:	e7e6      	b.n	801da1e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801da50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da54:	f7ff bf48 	b.w	801d8e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801da58:	0802db84 	.word	0x0802db84
 801da5c:	08031693 	.word	0x08031693
 801da60:	0802dc56 	.word	0x0802dc56
 801da64:	0802dc82 	.word	0x0802dc82
 801da68:	0803173d 	.word	0x0803173d
 801da6c:	080315ec 	.word	0x080315ec
 801da70:	08031a14 	.word	0x08031a14
 801da74:	080315f8 	.word	0x080315f8
 801da78:	0803160b 	.word	0x0803160b

0801da7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801da7c:	3a01      	subs	r2, #1
 801da7e:	b570      	push	{r4, r5, r6, lr}
 801da80:	b292      	uxth	r2, r2
 801da82:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801da86:	42b2      	cmp	r2, r6
 801da88:	d019      	beq.n	801dabe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801da8a:	8c04      	ldrh	r4, [r0, #32]
 801da8c:	f831 5b02 	ldrh.w	r5, [r1], #2
 801da90:	4294      	cmp	r4, r2
 801da92:	d805      	bhi.n	801daa0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801da94:	4b19      	ldr	r3, [pc, #100]	; (801dafc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801da96:	4a1a      	ldr	r2, [pc, #104]	; (801db00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801da98:	21c5      	movs	r1, #197	; 0xc5
 801da9a:	481a      	ldr	r0, [pc, #104]	; (801db04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801da9c:	f00c fdda 	bl	802a654 <__assert_func>
 801daa0:	8bc4      	ldrh	r4, [r0, #30]
 801daa2:	4414      	add	r4, r2
 801daa4:	3a01      	subs	r2, #1
 801daa6:	b2a4      	uxth	r4, r4
 801daa8:	b292      	uxth	r2, r2
 801daaa:	2c01      	cmp	r4, #1
 801daac:	bf88      	it	hi
 801daae:	3c02      	subhi	r4, #2
 801dab0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801dab4:	8b64      	ldrh	r4, [r4, #26]
 801dab6:	42ac      	cmp	r4, r5
 801dab8:	d0e5      	beq.n	801da86 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801daba:	2000      	movs	r0, #0
 801dabc:	bd70      	pop	{r4, r5, r6, pc}
 801dabe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dac2:	2400      	movs	r4, #0
 801dac4:	4413      	add	r3, r2
 801dac6:	b2a2      	uxth	r2, r4
 801dac8:	429a      	cmp	r2, r3
 801daca:	da14      	bge.n	801daf6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801dacc:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801dace:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801dad2:	4296      	cmp	r6, r2
 801dad4:	d802      	bhi.n	801dadc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801dad6:	4b09      	ldr	r3, [pc, #36]	; (801dafc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801dad8:	4a0b      	ldr	r2, [pc, #44]	; (801db08 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801dada:	e7dd      	b.n	801da98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801dadc:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801dade:	3401      	adds	r4, #1
 801dae0:	4432      	add	r2, r6
 801dae2:	b292      	uxth	r2, r2
 801dae4:	2a09      	cmp	r2, #9
 801dae6:	bf88      	it	hi
 801dae8:	3a0a      	subhi	r2, #10
 801daea:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801daee:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801daf0:	42aa      	cmp	r2, r5
 801daf2:	d0e8      	beq.n	801dac6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801daf4:	e7e1      	b.n	801daba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801daf6:	2001      	movs	r0, #1
 801daf8:	e7e0      	b.n	801dabc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801dafa:	bf00      	nop
 801dafc:	0802dc82 	.word	0x0802dc82
 801db00:	08031a98 	.word	0x08031a98
 801db04:	0802dc56 	.word	0x0802dc56
 801db08:	0803173d 	.word	0x0803173d

0801db0c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801db0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db10:	4605      	mov	r5, r0
 801db12:	4616      	mov	r6, r2
 801db14:	1c8c      	adds	r4, r1, #2
 801db16:	8809      	ldrh	r1, [r1, #0]
 801db18:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801db1c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801db20:	42b3      	cmp	r3, r6
 801db22:	d124      	bne.n	801db6e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801db24:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801db28:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801db2c:	f001 070f 	and.w	r7, r1, #15
 801db30:	4652      	mov	r2, sl
 801db32:	f8cd 8000 	str.w	r8, [sp]
 801db36:	464b      	mov	r3, r9
 801db38:	4621      	mov	r1, r4
 801db3a:	4628      	mov	r0, r5
 801db3c:	f7ff ff9e 	bl	801da7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801db40:	4683      	mov	fp, r0
 801db42:	b168      	cbz	r0, 801db60 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801db44:	eb0a 0109 	add.w	r1, sl, r9
 801db48:	463a      	mov	r2, r7
 801db4a:	4628      	mov	r0, r5
 801db4c:	4441      	add	r1, r8
 801db4e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801db52:	4649      	mov	r1, r9
 801db54:	f7ff ff42 	bl	801d9dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801db58:	4658      	mov	r0, fp
 801db5a:	b003      	add	sp, #12
 801db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db60:	eb07 010a 	add.w	r1, r7, sl
 801db64:	4449      	add	r1, r9
 801db66:	4441      	add	r1, r8
 801db68:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801db6c:	e7d2      	b.n	801db14 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801db6e:	f04f 0b00 	mov.w	fp, #0
 801db72:	e7f1      	b.n	801db58 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801db74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801db74:	b570      	push	{r4, r5, r6, lr}
 801db76:	8810      	ldrh	r0, [r2, #0]
 801db78:	4298      	cmp	r0, r3
 801db7a:	d817      	bhi.n	801dbac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801db7c:	1e48      	subs	r0, r1, #1
 801db7e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801db82:	4298      	cmp	r0, r3
 801db84:	d312      	bcc.n	801dbac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801db86:	2400      	movs	r4, #0
 801db88:	428c      	cmp	r4, r1
 801db8a:	d20f      	bcs.n	801dbac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801db8c:	1860      	adds	r0, r4, r1
 801db8e:	1040      	asrs	r0, r0, #1
 801db90:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801db94:	0085      	lsls	r5, r0, #2
 801db96:	42b3      	cmp	r3, r6
 801db98:	d902      	bls.n	801dba0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801db9a:	3001      	adds	r0, #1
 801db9c:	b284      	uxth	r4, r0
 801db9e:	e7f3      	b.n	801db88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801dba0:	d201      	bcs.n	801dba6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801dba2:	b281      	uxth	r1, r0
 801dba4:	e7f0      	b.n	801db88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801dba6:	442a      	add	r2, r5
 801dba8:	8850      	ldrh	r0, [r2, #2]
 801dbaa:	bd70      	pop	{r4, r5, r6, pc}
 801dbac:	2000      	movs	r0, #0
 801dbae:	e7fc      	b.n	801dbaa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801dbb0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801dbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbb4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801dbb6:	4604      	mov	r4, r0
 801dbb8:	260b      	movs	r6, #11
 801dbba:	886f      	ldrh	r7, [r5, #2]
 801dbbc:	087f      	lsrs	r7, r7, #1
 801dbbe:	3e01      	subs	r6, #1
 801dbc0:	d01b      	beq.n	801dbfa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801dbc2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801dbc4:	b92b      	cbnz	r3, 801dbd2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801dbc6:	4b0e      	ldr	r3, [pc, #56]	; (801dc00 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801dbc8:	21c0      	movs	r1, #192	; 0xc0
 801dbca:	4a0e      	ldr	r2, [pc, #56]	; (801dc04 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801dbcc:	480e      	ldr	r0, [pc, #56]	; (801dc08 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801dbce:	f00c fd41 	bl	802a654 <__assert_func>
 801dbd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801dbd4:	462a      	mov	r2, r5
 801dbd6:	4639      	mov	r1, r7
 801dbd8:	4620      	mov	r0, r4
 801dbda:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dbde:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801dbe2:	4643      	mov	r3, r8
 801dbe4:	f7ff ffc6 	bl	801db74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801dbe8:	b138      	cbz	r0, 801dbfa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801dbea:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801dbee:	4642      	mov	r2, r8
 801dbf0:	4620      	mov	r0, r4
 801dbf2:	f7ff ff8b 	bl	801db0c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801dbf6:	2800      	cmp	r0, #0
 801dbf8:	d1e1      	bne.n	801dbbe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801dbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbfe:	bf00      	nop
 801dc00:	0802db84 	.word	0x0802db84
 801dc04:	0803180f 	.word	0x0803180f
 801dc08:	0802dc56 	.word	0x0802dc56

0801dc0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801dc0c:	b570      	push	{r4, r5, r6, lr}
 801dc0e:	694a      	ldr	r2, [r1, #20]
 801dc10:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801dc12:	684b      	ldr	r3, [r1, #4]
 801dc14:	1b54      	subs	r4, r2, r5
 801dc16:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801dc18:	f000 8106 	beq.w	801de28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801dc1c:	1b9b      	subs	r3, r3, r6
 801dc1e:	d003      	beq.n	801dc28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801dc20:	4363      	muls	r3, r4
 801dc22:	2210      	movs	r2, #16
 801dc24:	fb93 f3f2 	sdiv	r3, r3, r2
 801dc28:	680c      	ldr	r4, [r1, #0]
 801dc2a:	698a      	ldr	r2, [r1, #24]
 801dc2c:	1b65      	subs	r5, r4, r5
 801dc2e:	f000 80fd 	beq.w	801de2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801dc32:	1b92      	subs	r2, r2, r6
 801dc34:	d003      	beq.n	801dc3e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801dc36:	436a      	muls	r2, r5
 801dc38:	2410      	movs	r4, #16
 801dc3a:	fb92 f2f4 	sdiv	r2, r2, r4
 801dc3e:	1a9b      	subs	r3, r3, r2
 801dc40:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801de68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801dc44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dc48:	460a      	mov	r2, r1
 801dc4a:	ee07 3a90 	vmov	s15, r3
 801dc4e:	f100 040c 	add.w	r4, r0, #12
 801dc52:	4603      	mov	r3, r0
 801dc54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc58:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dc5c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801dc60:	eeb1 6a43 	vneg.f32	s12, s6
 801dc64:	edd2 7a02 	vldr	s15, [r2, #8]
 801dc68:	3214      	adds	r2, #20
 801dc6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801dc6e:	ece3 6a01 	vstmia	r3!, {s13}
 801dc72:	429c      	cmp	r4, r3
 801dc74:	ed52 7a02 	vldr	s15, [r2, #-8]
 801dc78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dc7c:	edc3 7a02 	vstr	s15, [r3, #8]
 801dc80:	ed52 7a01 	vldr	s15, [r2, #-4]
 801dc84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dc88:	edc3 7a05 	vstr	s15, [r3, #20]
 801dc8c:	d1ea      	bne.n	801dc64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801dc8e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801dc90:	698b      	ldr	r3, [r1, #24]
 801dc92:	edd0 4a02 	vldr	s9, [r0, #8]
 801dc96:	1a9b      	subs	r3, r3, r2
 801dc98:	edd0 3a00 	vldr	s7, [r0]
 801dc9c:	edd0 6a01 	vldr	s13, [r0, #4]
 801dca0:	ee07 3a90 	vmov	s15, r3
 801dca4:	684b      	ldr	r3, [r1, #4]
 801dca6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801dcaa:	ed90 5a05 	vldr	s10, [r0, #20]
 801dcae:	1a9b      	subs	r3, r3, r2
 801dcb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dcb4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801dcb8:	ed90 2a03 	vldr	s4, [r0, #12]
 801dcbc:	ee07 3a10 	vmov	s14, r3
 801dcc0:	edd0 5a04 	vldr	s11, [r0, #16]
 801dcc4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dcc8:	ed90 1a07 	vldr	s2, [r0, #28]
 801dccc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dcd0:	edd0 2a06 	vldr	s5, [r0, #24]
 801dcd4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801dcd8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801dcdc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dce0:	ee32 5a45 	vsub.f32	s10, s4, s10
 801dce4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dce8:	ee67 7a83 	vmul.f32	s15, s15, s6
 801dcec:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801dcf0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dcf2:	694a      	ldr	r2, [r1, #20]
 801dcf4:	1b13      	subs	r3, r2, r4
 801dcf6:	ee07 3a10 	vmov	s14, r3
 801dcfa:	680b      	ldr	r3, [r1, #0]
 801dcfc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd00:	1b1b      	subs	r3, r3, r4
 801dd02:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd06:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801dd0a:	ee07 3a10 	vmov	s14, r3
 801dd0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd12:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd16:	eee6 4a87 	vfma.f32	s9, s13, s14
 801dd1a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801dd1e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801dd22:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801dd24:	698b      	ldr	r3, [r1, #24]
 801dd26:	1a9b      	subs	r3, r3, r2
 801dd28:	ee06 3a90 	vmov	s13, r3
 801dd2c:	684b      	ldr	r3, [r1, #4]
 801dd2e:	1a9b      	subs	r3, r3, r2
 801dd30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801dd34:	ee07 3a10 	vmov	s14, r3
 801dd38:	ee66 6a84 	vmul.f32	s13, s13, s8
 801dd3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd40:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801dd44:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd48:	eee5 6a87 	vfma.f32	s13, s11, s14
 801dd4c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801dd50:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801dd54:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dd56:	694a      	ldr	r2, [r1, #20]
 801dd58:	1b13      	subs	r3, r2, r4
 801dd5a:	ee07 3a10 	vmov	s14, r3
 801dd5e:	680b      	ldr	r3, [r1, #0]
 801dd60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd64:	1b1b      	subs	r3, r3, r4
 801dd66:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd6a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801dd6e:	ee07 3a10 	vmov	s14, r3
 801dd72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd76:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd7a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801dd7e:	edd0 5a08 	vldr	s11, [r0, #32]
 801dd82:	ee31 1a65 	vsub.f32	s2, s2, s11
 801dd86:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801dd8a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801dd8e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801dd92:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801dd94:	698b      	ldr	r3, [r1, #24]
 801dd96:	1a9b      	subs	r3, r3, r2
 801dd98:	ee07 3a10 	vmov	s14, r3
 801dd9c:	684b      	ldr	r3, [r1, #4]
 801dd9e:	1a9b      	subs	r3, r3, r2
 801dda0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dda4:	ee01 3a90 	vmov	s3, r3
 801dda8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ddac:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ddb0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801ddb4:	ee61 1a84 	vmul.f32	s3, s3, s8
 801ddb8:	eea1 7a21 	vfma.f32	s14, s2, s3
 801ddbc:	ee27 7a03 	vmul.f32	s14, s14, s6
 801ddc0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801ddc4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ddc6:	694a      	ldr	r2, [r1, #20]
 801ddc8:	1b13      	subs	r3, r2, r4
 801ddca:	ee03 3a10 	vmov	s6, r3
 801ddce:	680b      	ldr	r3, [r1, #0]
 801ddd0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801ddd4:	1b1b      	subs	r3, r3, r4
 801ddd6:	ee23 3a04 	vmul.f32	s6, s6, s8
 801ddda:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801ddde:	ee03 3a10 	vmov	s6, r3
 801dde2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801dde6:	ee23 4a04 	vmul.f32	s8, s6, s8
 801ddea:	eee1 5a04 	vfma.f32	s11, s2, s8
 801ddee:	ee25 6a86 	vmul.f32	s12, s11, s12
 801ddf2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801ddf6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801ddfa:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801ddfe:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801de02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de06:	dd13      	ble.n	801de30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801de08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801de0c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801de10:	63c3      	str	r3, [r0, #60]	; 0x3c
 801de12:	eee3 7a87 	vfma.f32	s15, s7, s14
 801de16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801de1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de1e:	dd15      	ble.n	801de4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801de20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801de24:	6403      	str	r3, [r0, #64]	; 0x40
 801de26:	bd70      	pop	{r4, r5, r6, pc}
 801de28:	4623      	mov	r3, r4
 801de2a:	e6fd      	b.n	801dc28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801de2c:	462a      	mov	r2, r5
 801de2e:	e706      	b.n	801dc3e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801de30:	d502      	bpl.n	801de38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801de32:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801de36:	e7e9      	b.n	801de0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801de38:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801de3c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801de40:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801de44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de48:	dade      	bge.n	801de08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801de4a:	e7f2      	b.n	801de32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801de4c:	d502      	bpl.n	801de54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801de4e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801de52:	e7e7      	b.n	801de24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801de54:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801de58:	eee3 4a86 	vfma.f32	s9, s7, s12
 801de5c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801de60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de64:	dadc      	bge.n	801de20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801de66:	e7f2      	b.n	801de4e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801de68:	3d800000 	.word	0x3d800000

0801de6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801de6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de70:	2714      	movs	r7, #20
 801de72:	435f      	muls	r7, r3
 801de74:	eb02 0c07 	add.w	ip, r2, r7
 801de78:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801de7c:	f115 0e0f 	adds.w	lr, r5, #15
 801de80:	d433      	bmi.n	801deea <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x7e>
 801de82:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801de86:	9c08      	ldr	r4, [sp, #32]
 801de88:	2614      	movs	r6, #20
 801de8a:	f8c0 e014 	str.w	lr, [r0, #20]
 801de8e:	4366      	muls	r6, r4
 801de90:	eb02 0806 	add.w	r8, r2, r6
 801de94:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801de98:	f115 040f 	adds.w	r4, r5, #15
 801de9c:	d431      	bmi.n	801df02 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x96>
 801de9e:	1124      	asrs	r4, r4, #4
 801dea0:	eba4 040e 	sub.w	r4, r4, lr
 801dea4:	6184      	str	r4, [r0, #24]
 801dea6:	2c00      	cmp	r4, #0
 801dea8:	f000 80aa 	beq.w	801e000 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x194>
 801deac:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801deb0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801deb4:	5995      	ldr	r5, [r2, r6]
 801deb6:	eba4 0809 	sub.w	r8, r4, r9
 801deba:	59d4      	ldr	r4, [r2, r7]
 801debc:	eba5 0a04 	sub.w	sl, r5, r4
 801dec0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801dec4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801dec8:	2e00      	cmp	r6, #0
 801deca:	fb0e fe05 	mul.w	lr, lr, r5
 801dece:	fb0a ee19 	mls	lr, sl, r9, lr
 801ded2:	fb08 e404 	mla	r4, r8, r4, lr
 801ded6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801deda:	4434      	add	r4, r6
 801dedc:	dc1d      	bgt.n	801df1a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xae>
 801dede:	4b5b      	ldr	r3, [pc, #364]	; (801e04c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e0>)
 801dee0:	21f7      	movs	r1, #247	; 0xf7
 801dee2:	4a5b      	ldr	r2, [pc, #364]	; (801e050 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e4>)
 801dee4:	485b      	ldr	r0, [pc, #364]	; (801e054 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e8>)
 801dee6:	f00c fbb5 	bl	802a654 <__assert_func>
 801deea:	2410      	movs	r4, #16
 801deec:	f1c5 0501 	rsb	r5, r5, #1
 801def0:	fb9e fef4 	sdiv	lr, lr, r4
 801def4:	f015 050f 	ands.w	r5, r5, #15
 801def8:	bf18      	it	ne
 801defa:	2501      	movne	r5, #1
 801defc:	ebae 0e05 	sub.w	lr, lr, r5
 801df00:	e7c1      	b.n	801de86 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1a>
 801df02:	f04f 0910 	mov.w	r9, #16
 801df06:	f1c5 0501 	rsb	r5, r5, #1
 801df0a:	fb94 f4f9 	sdiv	r4, r4, r9
 801df0e:	f015 050f 	ands.w	r5, r5, #15
 801df12:	bf18      	it	ne
 801df14:	2501      	movne	r5, #1
 801df16:	1b64      	subs	r4, r4, r5
 801df18:	e7c2      	b.n	801dea0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x34>
 801df1a:	2c00      	cmp	r4, #0
 801df1c:	db72      	blt.n	801e004 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x198>
 801df1e:	fb94 fef6 	sdiv	lr, r4, r6
 801df22:	fb06 441e 	mls	r4, r6, lr, r4
 801df26:	f8c0 e000 	str.w	lr, [r0]
 801df2a:	6104      	str	r4, [r0, #16]
 801df2c:	2d00      	cmp	r5, #0
 801df2e:	db7b      	blt.n	801e028 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1bc>
 801df30:	fb95 f4f6 	sdiv	r4, r5, r6
 801df34:	fb06 5514 	mls	r5, r6, r4, r5
 801df38:	6044      	str	r4, [r0, #4]
 801df3a:	6085      	str	r5, [r0, #8]
 801df3c:	60c6      	str	r6, [r0, #12]
 801df3e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801df42:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801df46:	6945      	ldr	r5, [r0, #20]
 801df48:	59d2      	ldr	r2, [r2, r7]
 801df4a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801df4e:	eddf 6a42 	vldr	s13, [pc, #264]	; 801e058 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1ec>
 801df52:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801df56:	ee07 4a10 	vmov	s14, r4
 801df5a:	6804      	ldr	r4, [r0, #0]
 801df5c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801df60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801df64:	ee07 2a90 	vmov	s15, r2
 801df68:	ee27 7a26 	vmul.f32	s14, s14, s13
 801df6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801df70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801df74:	edd3 6a00 	vldr	s13, [r3]
 801df78:	eee6 6a07 	vfma.f32	s13, s12, s14
 801df7c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801df80:	eee6 6a27 	vfma.f32	s13, s12, s15
 801df84:	edc0 6a07 	vstr	s13, [r0, #28]
 801df88:	edd0 6a01 	vldr	s13, [r0, #4]
 801df8c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801df90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801df94:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801df98:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801df9c:	ed80 6a08 	vstr	s12, [r0, #32]
 801dfa0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801dfa2:	6242      	str	r2, [r0, #36]	; 0x24
 801dfa4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801dfa8:	ed93 6a03 	vldr	s12, [r3, #12]
 801dfac:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dfb0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801dfb4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801dfb8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801dfbc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801dfc0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801dfc4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801dfc8:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801dfcc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801dfce:	6302      	str	r2, [r0, #48]	; 0x30
 801dfd0:	ed93 6a06 	vldr	s12, [r3, #24]
 801dfd4:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801dfd8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dfdc:	eeb0 7a46 	vmov.f32	s14, s12
 801dfe0:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801dfe4:	eea6 7a27 	vfma.f32	s14, s12, s15
 801dfe8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801dfec:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801dff0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801dff4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dff8:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801dffc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801dffe:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e004:	4264      	negs	r4, r4
 801e006:	fb94 fef6 	sdiv	lr, r4, r6
 801e00a:	f1ce 0800 	rsb	r8, lr, #0
 801e00e:	fb06 441e 	mls	r4, r6, lr, r4
 801e012:	f8c0 8000 	str.w	r8, [r0]
 801e016:	6104      	str	r4, [r0, #16]
 801e018:	2c00      	cmp	r4, #0
 801e01a:	d087      	beq.n	801df2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xc0>
 801e01c:	ea6f 0e0e 	mvn.w	lr, lr
 801e020:	1b34      	subs	r4, r6, r4
 801e022:	f8c0 e000 	str.w	lr, [r0]
 801e026:	e780      	b.n	801df2a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xbe>
 801e028:	426d      	negs	r5, r5
 801e02a:	fb95 f4f6 	sdiv	r4, r5, r6
 801e02e:	f1c4 0e00 	rsb	lr, r4, #0
 801e032:	fb06 5514 	mls	r5, r6, r4, r5
 801e036:	f8c0 e004 	str.w	lr, [r0, #4]
 801e03a:	6085      	str	r5, [r0, #8]
 801e03c:	2d00      	cmp	r5, #0
 801e03e:	f43f af7d 	beq.w	801df3c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xd0>
 801e042:	43e4      	mvns	r4, r4
 801e044:	1b75      	subs	r5, r6, r5
 801e046:	6044      	str	r4, [r0, #4]
 801e048:	e777      	b.n	801df3a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xce>
 801e04a:	bf00      	nop
 801e04c:	08031b69 	.word	0x08031b69
 801e050:	08031ba8 	.word	0x08031ba8
 801e054:	08031b79 	.word	0x08031b79
 801e058:	3d800000 	.word	0x3d800000

0801e05c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e05c:	4b01      	ldr	r3, [pc, #4]	; (801e064 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e05e:	6018      	str	r0, [r3, #0]
 801e060:	4770      	bx	lr
 801e062:	bf00      	nop
 801e064:	20015400 	.word	0x20015400

0801e068 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801e068:	4b06      	ldr	r3, [pc, #24]	; (801e084 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801e06a:	881a      	ldrh	r2, [r3, #0]
 801e06c:	4282      	cmp	r2, r0
 801e06e:	d807      	bhi.n	801e080 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801e070:	4b05      	ldr	r3, [pc, #20]	; (801e088 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801e072:	881b      	ldrh	r3, [r3, #0]
 801e074:	4413      	add	r3, r2
 801e076:	4298      	cmp	r0, r3
 801e078:	bfac      	ite	ge
 801e07a:	2000      	movge	r0, #0
 801e07c:	2001      	movlt	r0, #1
 801e07e:	4770      	bx	lr
 801e080:	2000      	movs	r0, #0
 801e082:	4770      	bx	lr
 801e084:	20015420 	.word	0x20015420
 801e088:	20015424 	.word	0x20015424

0801e08c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e08c:	b508      	push	{r3, lr}
 801e08e:	4601      	mov	r1, r0
 801e090:	f7ff ffea 	bl	801e068 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e094:	b118      	cbz	r0, 801e09e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801e096:	4b02      	ldr	r3, [pc, #8]	; (801e0a0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801e098:	681b      	ldr	r3, [r3, #0]
 801e09a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e09e:	bd08      	pop	{r3, pc}
 801e0a0:	20015404 	.word	0x20015404

0801e0a4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0a6:	4c24      	ldr	r4, [pc, #144]	; (801e138 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801e0a8:	6823      	ldr	r3, [r4, #0]
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d042      	beq.n	801e134 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e0ae:	4a23      	ldr	r2, [pc, #140]	; (801e13c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801e0b0:	4d23      	ldr	r5, [pc, #140]	; (801e140 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801e0b2:	8811      	ldrh	r1, [r2, #0]
 801e0b4:	f8b5 c000 	ldrh.w	ip, [r5]
 801e0b8:	4822      	ldr	r0, [pc, #136]	; (801e144 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801e0ba:	4461      	add	r1, ip
 801e0bc:	1c4a      	adds	r2, r1, #1
 801e0be:	008f      	lsls	r7, r1, #2
 801e0c0:	f022 0201 	bic.w	r2, r2, #1
 801e0c4:	19de      	adds	r6, r3, r7
 801e0c6:	0412      	lsls	r2, r2, #16
 801e0c8:	6006      	str	r6, [r0, #0]
 801e0ca:	4e1f      	ldr	r6, [pc, #124]	; (801e148 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801e0cc:	0c12      	lsrs	r2, r2, #16
 801e0ce:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801e0d2:	19da      	adds	r2, r3, r7
 801e0d4:	6032      	str	r2, [r6, #0]
 801e0d6:	220e      	movs	r2, #14
 801e0d8:	fb02 f20c 	mul.w	r2, r2, ip
 801e0dc:	3203      	adds	r2, #3
 801e0de:	f022 0203 	bic.w	r2, r2, #3
 801e0e2:	443a      	add	r2, r7
 801e0e4:	4f19      	ldr	r7, [pc, #100]	; (801e14c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e0e6:	4413      	add	r3, r2
 801e0e8:	603b      	str	r3, [r7, #0]
 801e0ea:	2300      	movs	r3, #0
 801e0ec:	4f18      	ldr	r7, [pc, #96]	; (801e150 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e0ee:	469c      	mov	ip, r3
 801e0f0:	803b      	strh	r3, [r7, #0]
 801e0f2:	4f18      	ldr	r7, [pc, #96]	; (801e154 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e0f4:	683f      	ldr	r7, [r7, #0]
 801e0f6:	1aba      	subs	r2, r7, r2
 801e0f8:	4f17      	ldr	r7, [pc, #92]	; (801e158 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e0fa:	603a      	str	r2, [r7, #0]
 801e0fc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801e100:	4a16      	ldr	r2, [pc, #88]	; (801e15c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e102:	8013      	strh	r3, [r2, #0]
 801e104:	428b      	cmp	r3, r1
 801e106:	d10d      	bne.n	801e124 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801e108:	882d      	ldrh	r5, [r5, #0]
 801e10a:	2300      	movs	r3, #0
 801e10c:	6830      	ldr	r0, [r6, #0]
 801e10e:	240e      	movs	r4, #14
 801e110:	429d      	cmp	r5, r3
 801e112:	d90f      	bls.n	801e134 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e114:	fb04 0203 	mla	r2, r4, r3, r0
 801e118:	3301      	adds	r3, #1
 801e11a:	7b11      	ldrb	r1, [r2, #12]
 801e11c:	f36f 1145 	bfc	r1, #5, #1
 801e120:	7311      	strb	r1, [r2, #12]
 801e122:	e7f5      	b.n	801e110 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801e124:	6822      	ldr	r2, [r4, #0]
 801e126:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e12a:	6802      	ldr	r2, [r0, #0]
 801e12c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801e130:	3301      	adds	r3, #1
 801e132:	e7e7      	b.n	801e104 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801e134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e136:	bf00      	nop
 801e138:	20015404 	.word	0x20015404
 801e13c:	20015420 	.word	0x20015420
 801e140:	20015424 	.word	0x20015424
 801e144:	20015418 	.word	0x20015418
 801e148:	20015408 	.word	0x20015408
 801e14c:	20015410 	.word	0x20015410
 801e150:	20015422 	.word	0x20015422
 801e154:	2001540c 	.word	0x2001540c
 801e158:	2001541c 	.word	0x2001541c
 801e15c:	20015414 	.word	0x20015414

0801e160 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e160:	4b10      	ldr	r3, [pc, #64]	; (801e1a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801e162:	b510      	push	{r4, lr}
 801e164:	681b      	ldr	r3, [r3, #0]
 801e166:	b9db      	cbnz	r3, 801e1a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e168:	b1d1      	cbz	r1, 801e1a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e16a:	4b0f      	ldr	r3, [pc, #60]	; (801e1a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801e16c:	240e      	movs	r4, #14
 801e16e:	801a      	strh	r2, [r3, #0]
 801e170:	b292      	uxth	r2, r2
 801e172:	4b0e      	ldr	r3, [pc, #56]	; (801e1ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801e174:	881b      	ldrh	r3, [r3, #0]
 801e176:	4413      	add	r3, r2
 801e178:	4362      	muls	r2, r4
 801e17a:	2406      	movs	r4, #6
 801e17c:	fb04 2203 	mla	r2, r4, r3, r2
 801e180:	428a      	cmp	r2, r1
 801e182:	d305      	bcc.n	801e190 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801e184:	4b0a      	ldr	r3, [pc, #40]	; (801e1b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801e186:	2134      	movs	r1, #52	; 0x34
 801e188:	4a0a      	ldr	r2, [pc, #40]	; (801e1b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801e18a:	480b      	ldr	r0, [pc, #44]	; (801e1b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801e18c:	f00c fa62 	bl	802a654 <__assert_func>
 801e190:	4b0a      	ldr	r3, [pc, #40]	; (801e1bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801e192:	6019      	str	r1, [r3, #0]
 801e194:	4b0a      	ldr	r3, [pc, #40]	; (801e1c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801e196:	6018      	str	r0, [r3, #0]
 801e198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e19c:	f7ff bf82 	b.w	801e0a4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e1a0:	bd10      	pop	{r4, pc}
 801e1a2:	bf00      	nop
 801e1a4:	20015410 	.word	0x20015410
 801e1a8:	20015424 	.word	0x20015424
 801e1ac:	20015420 	.word	0x20015420
 801e1b0:	08031c46 	.word	0x08031c46
 801e1b4:	08031c9f 	.word	0x08031c9f
 801e1b8:	08031c21 	.word	0x08031c21
 801e1bc:	2001540c 	.word	0x2001540c
 801e1c0:	20015404 	.word	0x20015404

0801e1c4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e1c4:	b470      	push	{r4, r5, r6}
 801e1c6:	4c07      	ldr	r4, [pc, #28]	; (801e1e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e1c8:	4605      	mov	r5, r0
 801e1ca:	4610      	mov	r0, r2
 801e1cc:	9a03      	ldr	r2, [sp, #12]
 801e1ce:	6826      	ldr	r6, [r4, #0]
 801e1d0:	b936      	cbnz	r6, 801e1e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e1d2:	6025      	str	r5, [r4, #0]
 801e1d4:	4c04      	ldr	r4, [pc, #16]	; (801e1e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e1d6:	8021      	strh	r1, [r4, #0]
 801e1d8:	4619      	mov	r1, r3
 801e1da:	bc70      	pop	{r4, r5, r6}
 801e1dc:	f7ff bfc0 	b.w	801e160 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e1e0:	bc70      	pop	{r4, r5, r6}
 801e1e2:	4770      	bx	lr
 801e1e4:	20015428 	.word	0x20015428
 801e1e8:	20015420 	.word	0x20015420

0801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e1ec:	b508      	push	{r3, lr}
 801e1ee:	4b17      	ldr	r3, [pc, #92]	; (801e24c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e1f0:	6819      	ldr	r1, [r3, #0]
 801e1f2:	b931      	cbnz	r1, 801e202 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801e1f4:	4b16      	ldr	r3, [pc, #88]	; (801e250 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e1f6:	f240 4184 	movw	r1, #1156	; 0x484
 801e1fa:	4a16      	ldr	r2, [pc, #88]	; (801e254 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801e1fc:	4816      	ldr	r0, [pc, #88]	; (801e258 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801e1fe:	f00c fa29 	bl	802a654 <__assert_func>
 801e202:	4a16      	ldr	r2, [pc, #88]	; (801e25c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801e204:	8803      	ldrh	r3, [r0, #0]
 801e206:	8812      	ldrh	r2, [r2, #0]
 801e208:	4293      	cmp	r3, r2
 801e20a:	d204      	bcs.n	801e216 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801e20c:	2214      	movs	r2, #20
 801e20e:	fb02 1303 	mla	r3, r2, r3, r1
 801e212:	8918      	ldrh	r0, [r3, #8]
 801e214:	bd08      	pop	{r3, pc}
 801e216:	4912      	ldr	r1, [pc, #72]	; (801e260 <_ZNK8touchgfx6Bitmap8getWidthEv+0x74>)
 801e218:	8809      	ldrh	r1, [r1, #0]
 801e21a:	4411      	add	r1, r2
 801e21c:	428b      	cmp	r3, r1
 801e21e:	da06      	bge.n	801e22e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801e220:	1a9b      	subs	r3, r3, r2
 801e222:	4a10      	ldr	r2, [pc, #64]	; (801e264 <_ZNK8touchgfx6Bitmap8getWidthEv+0x78>)
 801e224:	210e      	movs	r1, #14
 801e226:	6812      	ldr	r2, [r2, #0]
 801e228:	fb01 2303 	mla	r3, r1, r3, r2
 801e22c:	e7f1      	b.n	801e212 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801e22e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e232:	4293      	cmp	r3, r2
 801e234:	d107      	bne.n	801e246 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5a>
 801e236:	4b0c      	ldr	r3, [pc, #48]	; (801e268 <_ZNK8touchgfx6Bitmap8getWidthEv+0x7c>)
 801e238:	781b      	ldrb	r3, [r3, #0]
 801e23a:	b913      	cbnz	r3, 801e242 <_ZNK8touchgfx6Bitmap8getWidthEv+0x56>
 801e23c:	4b0b      	ldr	r3, [pc, #44]	; (801e26c <_ZNK8touchgfx6Bitmap8getWidthEv+0x80>)
 801e23e:	8818      	ldrh	r0, [r3, #0]
 801e240:	e7e8      	b.n	801e214 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801e242:	4b0b      	ldr	r3, [pc, #44]	; (801e270 <_ZNK8touchgfx6Bitmap8getWidthEv+0x84>)
 801e244:	e7fb      	b.n	801e23e <_ZNK8touchgfx6Bitmap8getWidthEv+0x52>
 801e246:	2000      	movs	r0, #0
 801e248:	e7e4      	b.n	801e214 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801e24a:	bf00      	nop
 801e24c:	20015428 	.word	0x20015428
 801e250:	08030372 	.word	0x08030372
 801e254:	08031d4c 	.word	0x08031d4c
 801e258:	08031c21 	.word	0x08031c21
 801e25c:	20015420 	.word	0x20015420
 801e260:	20015424 	.word	0x20015424
 801e264:	20015408 	.word	0x20015408
 801e268:	20015398 	.word	0x20015398
 801e26c:	2001539a 	.word	0x2001539a
 801e270:	2001539c 	.word	0x2001539c

0801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e274:	b508      	push	{r3, lr}
 801e276:	4b17      	ldr	r3, [pc, #92]	; (801e2d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e278:	6819      	ldr	r1, [r3, #0]
 801e27a:	b931      	cbnz	r1, 801e28a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801e27c:	4b16      	ldr	r3, [pc, #88]	; (801e2d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e27e:	f44f 6193 	mov.w	r1, #1176	; 0x498
 801e282:	4a16      	ldr	r2, [pc, #88]	; (801e2dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801e284:	4816      	ldr	r0, [pc, #88]	; (801e2e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801e286:	f00c f9e5 	bl	802a654 <__assert_func>
 801e28a:	4a16      	ldr	r2, [pc, #88]	; (801e2e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801e28c:	8803      	ldrh	r3, [r0, #0]
 801e28e:	8812      	ldrh	r2, [r2, #0]
 801e290:	4293      	cmp	r3, r2
 801e292:	d204      	bcs.n	801e29e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801e294:	2214      	movs	r2, #20
 801e296:	fb02 1303 	mla	r3, r2, r3, r1
 801e29a:	8958      	ldrh	r0, [r3, #10]
 801e29c:	bd08      	pop	{r3, pc}
 801e29e:	4912      	ldr	r1, [pc, #72]	; (801e2e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x74>)
 801e2a0:	8809      	ldrh	r1, [r1, #0]
 801e2a2:	4411      	add	r1, r2
 801e2a4:	428b      	cmp	r3, r1
 801e2a6:	da06      	bge.n	801e2b6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801e2a8:	1a9b      	subs	r3, r3, r2
 801e2aa:	4a10      	ldr	r2, [pc, #64]	; (801e2ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x78>)
 801e2ac:	210e      	movs	r1, #14
 801e2ae:	6812      	ldr	r2, [r2, #0]
 801e2b0:	fb01 2303 	mla	r3, r1, r3, r2
 801e2b4:	e7f1      	b.n	801e29a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801e2b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e2ba:	4293      	cmp	r3, r2
 801e2bc:	d107      	bne.n	801e2ce <_ZNK8touchgfx6Bitmap9getHeightEv+0x5a>
 801e2be:	4b0c      	ldr	r3, [pc, #48]	; (801e2f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x7c>)
 801e2c0:	781b      	ldrb	r3, [r3, #0]
 801e2c2:	b913      	cbnz	r3, 801e2ca <_ZNK8touchgfx6Bitmap9getHeightEv+0x56>
 801e2c4:	4b0b      	ldr	r3, [pc, #44]	; (801e2f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x80>)
 801e2c6:	8818      	ldrh	r0, [r3, #0]
 801e2c8:	e7e8      	b.n	801e29c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801e2ca:	4b0b      	ldr	r3, [pc, #44]	; (801e2f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x84>)
 801e2cc:	e7fb      	b.n	801e2c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x52>
 801e2ce:	2000      	movs	r0, #0
 801e2d0:	e7e4      	b.n	801e29c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801e2d2:	bf00      	nop
 801e2d4:	20015428 	.word	0x20015428
 801e2d8:	08030372 	.word	0x08030372
 801e2dc:	08031d78 	.word	0x08031d78
 801e2e0:	08031c21 	.word	0x08031c21
 801e2e4:	20015420 	.word	0x20015420
 801e2e8:	20015424 	.word	0x20015424
 801e2ec:	20015408 	.word	0x20015408
 801e2f0:	20015398 	.word	0x20015398
 801e2f4:	2001539c 	.word	0x2001539c
 801e2f8:	2001539a 	.word	0x2001539a

0801e2fc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e2fc:	4b23      	ldr	r3, [pc, #140]	; (801e38c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e2fe:	b510      	push	{r4, lr}
 801e300:	681c      	ldr	r4, [r3, #0]
 801e302:	b934      	cbnz	r4, 801e312 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801e304:	4b22      	ldr	r3, [pc, #136]	; (801e390 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e306:	f240 41ac 	movw	r1, #1196	; 0x4ac
 801e30a:	4a22      	ldr	r2, [pc, #136]	; (801e394 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801e30c:	4822      	ldr	r0, [pc, #136]	; (801e398 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801e30e:	f00c f9a1 	bl	802a654 <__assert_func>
 801e312:	4a22      	ldr	r2, [pc, #136]	; (801e39c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e314:	880b      	ldrh	r3, [r1, #0]
 801e316:	8812      	ldrh	r2, [r2, #0]
 801e318:	4293      	cmp	r3, r2
 801e31a:	d211      	bcs.n	801e340 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801e31c:	2214      	movs	r2, #20
 801e31e:	fb02 4303 	mla	r3, r2, r3, r4
 801e322:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e326:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e32a:	8a1a      	ldrh	r2, [r3, #16]
 801e32c:	8a5b      	ldrh	r3, [r3, #18]
 801e32e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e332:	8004      	strh	r4, [r0, #0]
 801e334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e338:	8041      	strh	r1, [r0, #2]
 801e33a:	8082      	strh	r2, [r0, #4]
 801e33c:	80c3      	strh	r3, [r0, #6]
 801e33e:	e00e      	b.n	801e35e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e340:	4917      	ldr	r1, [pc, #92]	; (801e3a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801e342:	8809      	ldrh	r1, [r1, #0]
 801e344:	4411      	add	r1, r2
 801e346:	428b      	cmp	r3, r1
 801e348:	da0a      	bge.n	801e360 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801e34a:	1a9b      	subs	r3, r3, r2
 801e34c:	4a15      	ldr	r2, [pc, #84]	; (801e3a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801e34e:	210e      	movs	r1, #14
 801e350:	6812      	ldr	r2, [r2, #0]
 801e352:	fb01 2303 	mla	r3, r1, r3, r2
 801e356:	681a      	ldr	r2, [r3, #0]
 801e358:	6002      	str	r2, [r0, #0]
 801e35a:	685a      	ldr	r2, [r3, #4]
 801e35c:	6042      	str	r2, [r0, #4]
 801e35e:	bd10      	pop	{r4, pc}
 801e360:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e364:	4293      	cmp	r3, r2
 801e366:	d10b      	bne.n	801e380 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801e368:	4b0f      	ldr	r3, [pc, #60]	; (801e3a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801e36a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e36e:	4b0f      	ldr	r3, [pc, #60]	; (801e3ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801e370:	8081      	strh	r1, [r0, #4]
 801e372:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e376:	2300      	movs	r3, #0
 801e378:	80c2      	strh	r2, [r0, #6]
 801e37a:	8003      	strh	r3, [r0, #0]
 801e37c:	8043      	strh	r3, [r0, #2]
 801e37e:	e7ee      	b.n	801e35e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e380:	2300      	movs	r3, #0
 801e382:	8003      	strh	r3, [r0, #0]
 801e384:	8043      	strh	r3, [r0, #2]
 801e386:	8083      	strh	r3, [r0, #4]
 801e388:	e7d8      	b.n	801e33c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801e38a:	bf00      	nop
 801e38c:	20015428 	.word	0x20015428
 801e390:	08030372 	.word	0x08030372
 801e394:	08031ce5 	.word	0x08031ce5
 801e398:	08031c21 	.word	0x08031c21
 801e39c:	20015420 	.word	0x20015420
 801e3a0:	20015424 	.word	0x20015424
 801e3a4:	20015408 	.word	0x20015408
 801e3a8:	20015394 	.word	0x20015394
 801e3ac:	20015396 	.word	0x20015396

0801e3b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e3b0:	4b18      	ldr	r3, [pc, #96]	; (801e414 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	b34b      	cbz	r3, 801e40a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e3b6:	4a18      	ldr	r2, [pc, #96]	; (801e418 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e3b8:	8800      	ldrh	r0, [r0, #0]
 801e3ba:	8812      	ldrh	r2, [r2, #0]
 801e3bc:	4290      	cmp	r0, r2
 801e3be:	d211      	bcs.n	801e3e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801e3c0:	2214      	movs	r2, #20
 801e3c2:	fb02 3300 	mla	r3, r2, r0, r3
 801e3c6:	8a1a      	ldrh	r2, [r3, #16]
 801e3c8:	8919      	ldrh	r1, [r3, #8]
 801e3ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e3ce:	428a      	cmp	r2, r1
 801e3d0:	db1d      	blt.n	801e40e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e3d2:	8a58      	ldrh	r0, [r3, #18]
 801e3d4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e3d8:	895b      	ldrh	r3, [r3, #10]
 801e3da:	4298      	cmp	r0, r3
 801e3dc:	bfac      	ite	ge
 801e3de:	2000      	movge	r0, #0
 801e3e0:	2001      	movlt	r0, #1
 801e3e2:	4770      	bx	lr
 801e3e4:	4b0d      	ldr	r3, [pc, #52]	; (801e41c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e3e6:	881b      	ldrh	r3, [r3, #0]
 801e3e8:	4413      	add	r3, r2
 801e3ea:	4298      	cmp	r0, r3
 801e3ec:	da0d      	bge.n	801e40a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e3ee:	4b0c      	ldr	r3, [pc, #48]	; (801e420 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801e3f0:	1a80      	subs	r0, r0, r2
 801e3f2:	220e      	movs	r2, #14
 801e3f4:	681b      	ldr	r3, [r3, #0]
 801e3f6:	fb02 3300 	mla	r3, r2, r0, r3
 801e3fa:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e3fe:	891a      	ldrh	r2, [r3, #8]
 801e400:	4291      	cmp	r1, r2
 801e402:	db04      	blt.n	801e40e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e404:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e408:	e7e6      	b.n	801e3d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801e40a:	2000      	movs	r0, #0
 801e40c:	4770      	bx	lr
 801e40e:	2001      	movs	r0, #1
 801e410:	4770      	bx	lr
 801e412:	bf00      	nop
 801e414:	20015428 	.word	0x20015428
 801e418:	20015420 	.word	0x20015420
 801e41c:	20015424 	.word	0x20015424
 801e420:	20015408 	.word	0x20015408

0801e424 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e424:	b508      	push	{r3, lr}
 801e426:	4b12      	ldr	r3, [pc, #72]	; (801e470 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e428:	6819      	ldr	r1, [r3, #0]
 801e42a:	b931      	cbnz	r1, 801e43a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e42c:	4b11      	ldr	r3, [pc, #68]	; (801e474 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e42e:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 801e432:	4a11      	ldr	r2, [pc, #68]	; (801e478 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e434:	4811      	ldr	r0, [pc, #68]	; (801e47c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e436:	f00c f90d 	bl	802a654 <__assert_func>
 801e43a:	8803      	ldrh	r3, [r0, #0]
 801e43c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e440:	4293      	cmp	r3, r2
 801e442:	d012      	beq.n	801e46a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e444:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e448:	4293      	cmp	r3, r2
 801e44a:	d103      	bne.n	801e454 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801e44c:	4b0c      	ldr	r3, [pc, #48]	; (801e480 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801e452:	bd08      	pop	{r3, pc}
 801e454:	4a0b      	ldr	r2, [pc, #44]	; (801e484 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801e456:	6812      	ldr	r2, [r2, #0]
 801e458:	b11a      	cbz	r2, 801e462 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801e45a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e45e:	2800      	cmp	r0, #0
 801e460:	d1f7      	bne.n	801e452 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e462:	2214      	movs	r2, #20
 801e464:	4353      	muls	r3, r2
 801e466:	58c8      	ldr	r0, [r1, r3]
 801e468:	e7f3      	b.n	801e452 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e46a:	2000      	movs	r0, #0
 801e46c:	e7f1      	b.n	801e452 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e46e:	bf00      	nop
 801e470:	20015428 	.word	0x20015428
 801e474:	08030372 	.word	0x08030372
 801e478:	08031d1b 	.word	0x08031d1b
 801e47c:	08031c21 	.word	0x08031c21
 801e480:	200153a0 	.word	0x200153a0
 801e484:	20015404 	.word	0x20015404

0801e488 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e488:	8802      	ldrh	r2, [r0, #0]
 801e48a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801e48e:	429a      	cmp	r2, r3
 801e490:	d845      	bhi.n	801e51e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e492:	4b24      	ldr	r3, [pc, #144]	; (801e524 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e494:	8818      	ldrh	r0, [r3, #0]
 801e496:	4282      	cmp	r2, r0
 801e498:	d221      	bcs.n	801e4de <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801e49a:	4b23      	ldr	r3, [pc, #140]	; (801e528 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e49c:	6819      	ldr	r1, [r3, #0]
 801e49e:	2314      	movs	r3, #20
 801e4a0:	fb03 1302 	mla	r3, r3, r2, r1
 801e4a4:	6858      	ldr	r0, [r3, #4]
 801e4a6:	2800      	cmp	r0, #0
 801e4a8:	d03a      	beq.n	801e520 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e4aa:	4920      	ldr	r1, [pc, #128]	; (801e52c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e4ac:	6809      	ldr	r1, [r1, #0]
 801e4ae:	2900      	cmp	r1, #0
 801e4b0:	d036      	beq.n	801e520 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e4b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e4b6:	2900      	cmp	r1, #0
 801e4b8:	d032      	beq.n	801e520 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e4ba:	891a      	ldrh	r2, [r3, #8]
 801e4bc:	8958      	ldrh	r0, [r3, #10]
 801e4be:	4350      	muls	r0, r2
 801e4c0:	7c5a      	ldrb	r2, [r3, #17]
 801e4c2:	7cdb      	ldrb	r3, [r3, #19]
 801e4c4:	0952      	lsrs	r2, r2, #5
 801e4c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e4ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e4ce:	2b0b      	cmp	r3, #11
 801e4d0:	bf18      	it	ne
 801e4d2:	0040      	lslne	r0, r0, #1
 801e4d4:	3003      	adds	r0, #3
 801e4d6:	f020 0003 	bic.w	r0, r0, #3
 801e4da:	4408      	add	r0, r1
 801e4dc:	4770      	bx	lr
 801e4de:	4b14      	ldr	r3, [pc, #80]	; (801e530 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801e4e0:	881b      	ldrh	r3, [r3, #0]
 801e4e2:	4403      	add	r3, r0
 801e4e4:	429a      	cmp	r2, r3
 801e4e6:	da1a      	bge.n	801e51e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e4e8:	4b12      	ldr	r3, [pc, #72]	; (801e534 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801e4ea:	1a10      	subs	r0, r2, r0
 801e4ec:	210e      	movs	r1, #14
 801e4ee:	681b      	ldr	r3, [r3, #0]
 801e4f0:	fb01 3000 	mla	r0, r1, r0, r3
 801e4f4:	7b03      	ldrb	r3, [r0, #12]
 801e4f6:	f003 031f 	and.w	r3, r3, #31
 801e4fa:	2b0b      	cmp	r3, #11
 801e4fc:	d10b      	bne.n	801e516 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e4fe:	8903      	ldrh	r3, [r0, #8]
 801e500:	8940      	ldrh	r0, [r0, #10]
 801e502:	4358      	muls	r0, r3
 801e504:	4b09      	ldr	r3, [pc, #36]	; (801e52c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e506:	3003      	adds	r0, #3
 801e508:	6819      	ldr	r1, [r3, #0]
 801e50a:	f020 0303 	bic.w	r3, r0, #3
 801e50e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e512:	4418      	add	r0, r3
 801e514:	4770      	bx	lr
 801e516:	2b0d      	cmp	r3, #13
 801e518:	d101      	bne.n	801e51e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e51a:	300d      	adds	r0, #13
 801e51c:	4770      	bx	lr
 801e51e:	2000      	movs	r0, #0
 801e520:	4770      	bx	lr
 801e522:	bf00      	nop
 801e524:	20015420 	.word	0x20015420
 801e528:	20015428 	.word	0x20015428
 801e52c:	20015404 	.word	0x20015404
 801e530:	20015424 	.word	0x20015424
 801e534:	20015408 	.word	0x20015408

0801e538 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e538:	4b17      	ldr	r3, [pc, #92]	; (801e598 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801e53a:	b510      	push	{r4, lr}
 801e53c:	6819      	ldr	r1, [r3, #0]
 801e53e:	8803      	ldrh	r3, [r0, #0]
 801e540:	b1e9      	cbz	r1, 801e57e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801e542:	4a16      	ldr	r2, [pc, #88]	; (801e59c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801e544:	8812      	ldrh	r2, [r2, #0]
 801e546:	429a      	cmp	r2, r3
 801e548:	d90a      	bls.n	801e560 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801e54a:	2214      	movs	r2, #20
 801e54c:	fb02 1303 	mla	r3, r2, r3, r1
 801e550:	7c58      	ldrb	r0, [r3, #17]
 801e552:	0942      	lsrs	r2, r0, #5
 801e554:	7cd8      	ldrb	r0, [r3, #19]
 801e556:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801e55a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801e55e:	bd10      	pop	{r4, pc}
 801e560:	490f      	ldr	r1, [pc, #60]	; (801e5a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801e562:	8809      	ldrh	r1, [r1, #0]
 801e564:	4411      	add	r1, r2
 801e566:	428b      	cmp	r3, r1
 801e568:	da09      	bge.n	801e57e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801e56a:	1a9b      	subs	r3, r3, r2
 801e56c:	4a0d      	ldr	r2, [pc, #52]	; (801e5a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801e56e:	210e      	movs	r1, #14
 801e570:	6812      	ldr	r2, [r2, #0]
 801e572:	fb01 2303 	mla	r3, r1, r3, r2
 801e576:	7b18      	ldrb	r0, [r3, #12]
 801e578:	f000 001f 	and.w	r0, r0, #31
 801e57c:	e7ef      	b.n	801e55e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e57e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e582:	4293      	cmp	r3, r2
 801e584:	d106      	bne.n	801e594 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801e586:	f7f9 fd85 	bl	8018094 <_ZN8touchgfx3HAL3lcdEv>
 801e58a:	6803      	ldr	r3, [r0, #0]
 801e58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e592:	4718      	bx	r3
 801e594:	2000      	movs	r0, #0
 801e596:	e7e2      	b.n	801e55e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e598:	20015428 	.word	0x20015428
 801e59c:	20015420 	.word	0x20015420
 801e5a0:	20015424 	.word	0x20015424
 801e5a4:	20015408 	.word	0x20015408

0801e5a8 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801e5a8:	2010      	movs	r0, #16
 801e5aa:	4770      	bx	lr

0801e5ac <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	4770      	bx	lr

0801e5b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e5b0:	2bff      	cmp	r3, #255	; 0xff
 801e5b2:	d050      	beq.n	801e656 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e5b4:	2a0b      	cmp	r2, #11
 801e5b6:	d04a      	beq.n	801e64e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e5b8:	d80e      	bhi.n	801e5d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e5ba:	2a03      	cmp	r2, #3
 801e5bc:	d03f      	beq.n	801e63e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801e5be:	d804      	bhi.n	801e5ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e5c0:	2a01      	cmp	r2, #1
 801e5c2:	d03e      	beq.n	801e642 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e5c4:	d93f      	bls.n	801e646 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e5c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e5c8:	4770      	bx	lr
 801e5ca:	2a09      	cmp	r2, #9
 801e5cc:	d03f      	beq.n	801e64e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e5ce:	d83c      	bhi.n	801e64a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e5d0:	2a08      	cmp	r2, #8
 801e5d2:	d03a      	beq.n	801e64a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e5d4:	2000      	movs	r0, #0
 801e5d6:	4770      	bx	lr
 801e5d8:	2a2f      	cmp	r2, #47	; 0x2f
 801e5da:	d024      	beq.n	801e626 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801e5dc:	d80d      	bhi.n	801e5fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801e5de:	2a2d      	cmp	r2, #45	; 0x2d
 801e5e0:	d014      	beq.n	801e60c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801e5e2:	d826      	bhi.n	801e632 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801e5e4:	2a2c      	cmp	r2, #44	; 0x2c
 801e5e6:	d1f5      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e5e8:	684b      	ldr	r3, [r1, #4]
 801e5ea:	781b      	ldrb	r3, [r3, #0]
 801e5ec:	2b01      	cmp	r3, #1
 801e5ee:	d018      	beq.n	801e622 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801e5f0:	d323      	bcc.n	801e63a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801e5f2:	2b02      	cmp	r3, #2
 801e5f4:	d1ee      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e5f6:	6880      	ldr	r0, [r0, #8]
 801e5f8:	4770      	bx	lr
 801e5fa:	2a31      	cmp	r2, #49	; 0x31
 801e5fc:	d004      	beq.n	801e608 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801e5fe:	d328      	bcc.n	801e652 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e600:	2a32      	cmp	r2, #50	; 0x32
 801e602:	d026      	beq.n	801e652 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e604:	2a33      	cmp	r2, #51	; 0x33
 801e606:	d1e5      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e608:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801e60a:	4770      	bx	lr
 801e60c:	684b      	ldr	r3, [r1, #4]
 801e60e:	781b      	ldrb	r3, [r3, #0]
 801e610:	2b01      	cmp	r3, #1
 801e612:	d004      	beq.n	801e61e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e614:	d30b      	bcc.n	801e62e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e616:	2b02      	cmp	r3, #2
 801e618:	d1dc      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e61a:	6900      	ldr	r0, [r0, #16]
 801e61c:	4770      	bx	lr
 801e61e:	6a00      	ldr	r0, [r0, #32]
 801e620:	4770      	bx	lr
 801e622:	6980      	ldr	r0, [r0, #24]
 801e624:	4770      	bx	lr
 801e626:	684b      	ldr	r3, [r1, #4]
 801e628:	781b      	ldrb	r3, [r3, #0]
 801e62a:	2b00      	cmp	r3, #0
 801e62c:	d1d2      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e62e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e630:	4770      	bx	lr
 801e632:	684b      	ldr	r3, [r1, #4]
 801e634:	781b      	ldrb	r3, [r3, #0]
 801e636:	2b00      	cmp	r3, #0
 801e638:	d1cc      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e63a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e63c:	4770      	bx	lr
 801e63e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e640:	4770      	bx	lr
 801e642:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e644:	4770      	bx	lr
 801e646:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e648:	4770      	bx	lr
 801e64a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e64c:	4770      	bx	lr
 801e64e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e650:	4770      	bx	lr
 801e652:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e654:	4770      	bx	lr
 801e656:	2a0b      	cmp	r2, #11
 801e658:	d049      	beq.n	801e6ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e65a:	d80e      	bhi.n	801e67a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801e65c:	2a03      	cmp	r2, #3
 801e65e:	d040      	beq.n	801e6e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e660:	d804      	bhi.n	801e66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801e662:	2a01      	cmp	r2, #1
 801e664:	d03f      	beq.n	801e6e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e666:	d940      	bls.n	801e6ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e668:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e66a:	4770      	bx	lr
 801e66c:	2a09      	cmp	r2, #9
 801e66e:	d03e      	beq.n	801e6ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e670:	d801      	bhi.n	801e676 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801e672:	2a08      	cmp	r2, #8
 801e674:	d1ae      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e676:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e678:	4770      	bx	lr
 801e67a:	2a2f      	cmp	r2, #47	; 0x2f
 801e67c:	d024      	beq.n	801e6c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e67e:	d80d      	bhi.n	801e69c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e680:	2a2d      	cmp	r2, #45	; 0x2d
 801e682:	d014      	beq.n	801e6ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801e684:	d826      	bhi.n	801e6d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801e686:	2a2c      	cmp	r2, #44	; 0x2c
 801e688:	d1a4      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e68a:	684b      	ldr	r3, [r1, #4]
 801e68c:	781b      	ldrb	r3, [r3, #0]
 801e68e:	2b01      	cmp	r3, #1
 801e690:	d018      	beq.n	801e6c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801e692:	d324      	bcc.n	801e6de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e694:	2b02      	cmp	r3, #2
 801e696:	d19d      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e698:	68c0      	ldr	r0, [r0, #12]
 801e69a:	4770      	bx	lr
 801e69c:	2a31      	cmp	r2, #49	; 0x31
 801e69e:	d004      	beq.n	801e6aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801e6a0:	d327      	bcc.n	801e6f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e6a2:	2a32      	cmp	r2, #50	; 0x32
 801e6a4:	d025      	beq.n	801e6f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e6a6:	2a33      	cmp	r2, #51	; 0x33
 801e6a8:	d194      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e6aa:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e6ac:	4770      	bx	lr
 801e6ae:	684b      	ldr	r3, [r1, #4]
 801e6b0:	781b      	ldrb	r3, [r3, #0]
 801e6b2:	2b01      	cmp	r3, #1
 801e6b4:	d004      	beq.n	801e6c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801e6b6:	d30b      	bcc.n	801e6d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801e6b8:	2b02      	cmp	r3, #2
 801e6ba:	d18b      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e6bc:	6940      	ldr	r0, [r0, #20]
 801e6be:	4770      	bx	lr
 801e6c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e6c2:	4770      	bx	lr
 801e6c4:	69c0      	ldr	r0, [r0, #28]
 801e6c6:	4770      	bx	lr
 801e6c8:	684b      	ldr	r3, [r1, #4]
 801e6ca:	781b      	ldrb	r3, [r3, #0]
 801e6cc:	2b00      	cmp	r3, #0
 801e6ce:	d181      	bne.n	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e6d0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e6d2:	4770      	bx	lr
 801e6d4:	684b      	ldr	r3, [r1, #4]
 801e6d6:	781b      	ldrb	r3, [r3, #0]
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	f47f af7b 	bne.w	801e5d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e6de:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e6e0:	4770      	bx	lr
 801e6e2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e6e4:	4770      	bx	lr
 801e6e6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e6e8:	4770      	bx	lr
 801e6ea:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e6ec:	4770      	bx	lr
 801e6ee:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e6f0:	4770      	bx	lr
 801e6f2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e6f4:	4770      	bx	lr

0801e6f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e6f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6fa:	b087      	sub	sp, #28
 801e6fc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e6fe:	9205      	str	r2, [sp, #20]
 801e700:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e704:	9101      	str	r1, [sp, #4]
 801e706:	9202      	str	r2, [sp, #8]
 801e708:	6841      	ldr	r1, [r0, #4]
 801e70a:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e70e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e712:	fb01 2404 	mla	r4, r1, r4, r2
 801e716:	6802      	ldr	r2, [r0, #0]
 801e718:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e71c:	f8de 2000 	ldr.w	r2, [lr]
 801e720:	9203      	str	r2, [sp, #12]
 801e722:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e726:	3204      	adds	r2, #4
 801e728:	9204      	str	r2, [sp, #16]
 801e72a:	9a02      	ldr	r2, [sp, #8]
 801e72c:	43d6      	mvns	r6, r2
 801e72e:	b2f6      	uxtb	r6, r6
 801e730:	9a01      	ldr	r2, [sp, #4]
 801e732:	2a00      	cmp	r2, #0
 801e734:	dc03      	bgt.n	801e73e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e736:	9a05      	ldr	r2, [sp, #20]
 801e738:	2a00      	cmp	r2, #0
 801e73a:	f340 8129 	ble.w	801e990 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e73e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e740:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e744:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e748:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e74a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e74e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e752:	2b00      	cmp	r3, #0
 801e754:	dd0e      	ble.n	801e774 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e756:	1408      	asrs	r0, r1, #16
 801e758:	d405      	bmi.n	801e766 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e75a:	4560      	cmp	r0, ip
 801e75c:	da03      	bge.n	801e766 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e75e:	1410      	asrs	r0, r2, #16
 801e760:	d401      	bmi.n	801e766 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e762:	42b8      	cmp	r0, r7
 801e764:	db07      	blt.n	801e776 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e766:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e768:	3b01      	subs	r3, #1
 801e76a:	3402      	adds	r4, #2
 801e76c:	4401      	add	r1, r0
 801e76e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e770:	4402      	add	r2, r0
 801e772:	e7ee      	b.n	801e752 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e774:	d071      	beq.n	801e85a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e776:	1e58      	subs	r0, r3, #1
 801e778:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e77a:	fb05 1500 	mla	r5, r5, r0, r1
 801e77e:	142d      	asrs	r5, r5, #16
 801e780:	d45f      	bmi.n	801e842 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e782:	4565      	cmp	r5, ip
 801e784:	da5d      	bge.n	801e842 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e786:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e788:	fb05 2000 	mla	r0, r5, r0, r2
 801e78c:	1400      	asrs	r0, r0, #16
 801e78e:	d458      	bmi.n	801e842 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e790:	42b8      	cmp	r0, r7
 801e792:	da56      	bge.n	801e842 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e794:	4699      	mov	r9, r3
 801e796:	46a2      	mov	sl, r4
 801e798:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e79c:	f1b9 0f00 	cmp.w	r9, #0
 801e7a0:	dd57      	ble.n	801e852 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e7a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e7a6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e7aa:	9803      	ldr	r0, [sp, #12]
 801e7ac:	140d      	asrs	r5, r1, #16
 801e7ae:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801e7b2:	fb07 000c 	mla	r0, r7, ip, r0
 801e7b6:	5d40      	ldrb	r0, [r0, r5]
 801e7b8:	9d04      	ldr	r5, [sp, #16]
 801e7ba:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e7be:	f8ba 5000 	ldrh.w	r5, [sl]
 801e7c2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e7c6:	122f      	asrs	r7, r5, #8
 801e7c8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e7cc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e7d0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e7d4:	00ed      	lsls	r5, r5, #3
 801e7d6:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e7da:	fb17 f706 	smulbb	r7, r7, r6
 801e7de:	b2ed      	uxtb	r5, r5
 801e7e0:	fb18 f806 	smulbb	r8, r8, r6
 801e7e4:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e7e8:	10c7      	asrs	r7, r0, #3
 801e7ea:	fb15 f506 	smulbb	r5, r5, r6
 801e7ee:	00c0      	lsls	r0, r0, #3
 801e7f0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e7f4:	fa1f fc8c 	uxth.w	ip, ip
 801e7f8:	b2c0      	uxtb	r0, r0
 801e7fa:	fb07 870b 	mla	r7, r7, fp, r8
 801e7fe:	fb00 500b 	mla	r0, r0, fp, r5
 801e802:	f10c 0501 	add.w	r5, ip, #1
 801e806:	b2bf      	uxth	r7, r7
 801e808:	b280      	uxth	r0, r0
 801e80a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e80e:	f107 0801 	add.w	r8, r7, #1
 801e812:	1c45      	adds	r5, r0, #1
 801e814:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e818:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e81c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e820:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e822:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e826:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e82a:	4401      	add	r1, r0
 801e82c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e830:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e832:	ea45 0c0c 	orr.w	ip, r5, ip
 801e836:	4402      	add	r2, r0
 801e838:	ea4c 0c08 	orr.w	ip, ip, r8
 801e83c:	f82a cb02 	strh.w	ip, [sl], #2
 801e840:	e7ac      	b.n	801e79c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e842:	f04f 0800 	mov.w	r8, #0
 801e846:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e84a:	eb03 0008 	add.w	r0, r3, r8
 801e84e:	2800      	cmp	r0, #0
 801e850:	dc41      	bgt.n	801e8d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e852:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e856:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e85a:	9b01      	ldr	r3, [sp, #4]
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	f340 8097 	ble.w	801e990 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e866:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e868:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e86c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e870:	eef0 6a62 	vmov.f32	s13, s5
 801e874:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e878:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e87c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e880:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e884:	eef0 6a43 	vmov.f32	s13, s6
 801e888:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e88c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e890:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e894:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e898:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e89c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e8a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e8a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e8a8:	ee12 2a90 	vmov	r2, s5
 801e8ac:	eef0 2a47 	vmov.f32	s5, s14
 801e8b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8b4:	ee13 2a10 	vmov	r2, s6
 801e8b8:	9313      	str	r3, [sp, #76]	; 0x4c
 801e8ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e8bc:	eeb0 3a67 	vmov.f32	s6, s15
 801e8c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8c4:	9314      	str	r3, [sp, #80]	; 0x50
 801e8c6:	9b01      	ldr	r3, [sp, #4]
 801e8c8:	9a05      	ldr	r2, [sp, #20]
 801e8ca:	3b01      	subs	r3, #1
 801e8cc:	9301      	str	r3, [sp, #4]
 801e8ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e8d0:	bf08      	it	eq
 801e8d2:	4613      	moveq	r3, r2
 801e8d4:	e72c      	b.n	801e730 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e8d6:	140f      	asrs	r7, r1, #16
 801e8d8:	d453      	bmi.n	801e982 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e8da:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e8de:	42bd      	cmp	r5, r7
 801e8e0:	dd4f      	ble.n	801e982 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e8e2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e8e6:	d44c      	bmi.n	801e982 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e8e8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e8ec:	4560      	cmp	r0, ip
 801e8ee:	dd48      	ble.n	801e982 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e8f0:	9803      	ldr	r0, [sp, #12]
 801e8f2:	b22d      	sxth	r5, r5
 801e8f4:	fb0c 0505 	mla	r5, ip, r5, r0
 801e8f8:	5de8      	ldrb	r0, [r5, r7]
 801e8fa:	9d04      	ldr	r5, [sp, #16]
 801e8fc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e900:	f06f 0501 	mvn.w	r5, #1
 801e904:	fb05 fb08 	mul.w	fp, r5, r8
 801e908:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e90c:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e910:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e914:	122f      	asrs	r7, r5, #8
 801e916:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e91a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e91e:	00ed      	lsls	r5, r5, #3
 801e920:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e924:	fb17 f706 	smulbb	r7, r7, r6
 801e928:	b2ed      	uxtb	r5, r5
 801e92a:	fb19 f906 	smulbb	r9, r9, r6
 801e92e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e932:	10c7      	asrs	r7, r0, #3
 801e934:	fb15 f506 	smulbb	r5, r5, r6
 801e938:	00c0      	lsls	r0, r0, #3
 801e93a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e93e:	fa1f fc8c 	uxth.w	ip, ip
 801e942:	b2c0      	uxtb	r0, r0
 801e944:	fb07 970a 	mla	r7, r7, sl, r9
 801e948:	fb00 500a 	mla	r0, r0, sl, r5
 801e94c:	f10c 0501 	add.w	r5, ip, #1
 801e950:	b2bf      	uxth	r7, r7
 801e952:	b280      	uxth	r0, r0
 801e954:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e958:	f107 0901 	add.w	r9, r7, #1
 801e95c:	1c45      	adds	r5, r0, #1
 801e95e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e962:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e966:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e96a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e96e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e972:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e976:	ea45 0c0c 	orr.w	ip, r5, ip
 801e97a:	ea4c 0c09 	orr.w	ip, ip, r9
 801e97e:	f824 c00b 	strh.w	ip, [r4, fp]
 801e982:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e984:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801e988:	4401      	add	r1, r0
 801e98a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e98c:	4402      	add	r2, r0
 801e98e:	e75c      	b.n	801e84a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e990:	b007      	add	sp, #28
 801e992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e996 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e99a:	b085      	sub	sp, #20
 801e99c:	4693      	mov	fp, r2
 801e99e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e9a2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e9a4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e9a6:	6870      	ldr	r0, [r6, #4]
 801e9a8:	9100      	str	r1, [sp, #0]
 801e9aa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e9ae:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e9b2:	fb00 2404 	mla	r4, r0, r4, r2
 801e9b6:	6832      	ldr	r2, [r6, #0]
 801e9b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e9bc:	682a      	ldr	r2, [r5, #0]
 801e9be:	9201      	str	r2, [sp, #4]
 801e9c0:	686a      	ldr	r2, [r5, #4]
 801e9c2:	3204      	adds	r2, #4
 801e9c4:	9202      	str	r2, [sp, #8]
 801e9c6:	9a00      	ldr	r2, [sp, #0]
 801e9c8:	2a00      	cmp	r2, #0
 801e9ca:	dc03      	bgt.n	801e9d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e9cc:	f1bb 0f00 	cmp.w	fp, #0
 801e9d0:	f340 80a0 	ble.w	801eb14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e9d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e9d6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e9da:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e9de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e9e0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e9e4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	dd0c      	ble.n	801ea06 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e9ec:	1406      	asrs	r6, r0, #16
 801e9ee:	d405      	bmi.n	801e9fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e9f0:	454e      	cmp	r6, r9
 801e9f2:	da03      	bge.n	801e9fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e9f4:	1416      	asrs	r6, r2, #16
 801e9f6:	d401      	bmi.n	801e9fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e9f8:	4546      	cmp	r6, r8
 801e9fa:	db05      	blt.n	801ea08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e9fc:	4470      	add	r0, lr
 801e9fe:	4462      	add	r2, ip
 801ea00:	3b01      	subs	r3, #1
 801ea02:	3402      	adds	r4, #2
 801ea04:	e7f0      	b.n	801e9e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ea06:	d00f      	beq.n	801ea28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ea08:	1e5e      	subs	r6, r3, #1
 801ea0a:	fb0e 0706 	mla	r7, lr, r6, r0
 801ea0e:	143f      	asrs	r7, r7, #16
 801ea10:	d541      	bpl.n	801ea96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801ea12:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ea16:	4698      	mov	r8, r3
 801ea18:	9603      	str	r6, [sp, #12]
 801ea1a:	f1b8 0f00 	cmp.w	r8, #0
 801ea1e:	dc59      	bgt.n	801ead4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ea20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea24:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ea28:	9b00      	ldr	r3, [sp, #0]
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	dd72      	ble.n	801eb14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801ea2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea38:	eeb0 6a62 	vmov.f32	s12, s5
 801ea3c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ea40:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea48:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ea4c:	eeb0 6a43 	vmov.f32	s12, s6
 801ea50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea54:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ea58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ea5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea60:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ea64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ea68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ea6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ea70:	ee12 2a90 	vmov	r2, s5
 801ea74:	eef0 2a47 	vmov.f32	s5, s14
 801ea78:	fb92 fef3 	sdiv	lr, r2, r3
 801ea7c:	ee13 2a10 	vmov	r2, s6
 801ea80:	eeb0 3a67 	vmov.f32	s6, s15
 801ea84:	fb92 fcf3 	sdiv	ip, r2, r3
 801ea88:	9b00      	ldr	r3, [sp, #0]
 801ea8a:	3b01      	subs	r3, #1
 801ea8c:	9300      	str	r3, [sp, #0]
 801ea8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea90:	bf08      	it	eq
 801ea92:	465b      	moveq	r3, fp
 801ea94:	e797      	b.n	801e9c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ea96:	454f      	cmp	r7, r9
 801ea98:	dabb      	bge.n	801ea12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ea9a:	fb0c 2606 	mla	r6, ip, r6, r2
 801ea9e:	1436      	asrs	r6, r6, #16
 801eaa0:	d4b7      	bmi.n	801ea12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eaa2:	4546      	cmp	r6, r8
 801eaa4:	dab5      	bge.n	801ea12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eaa6:	461e      	mov	r6, r3
 801eaa8:	46a0      	mov	r8, r4
 801eaaa:	2e00      	cmp	r6, #0
 801eaac:	ddb8      	ble.n	801ea20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eaae:	1417      	asrs	r7, r2, #16
 801eab0:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801eab4:	9901      	ldr	r1, [sp, #4]
 801eab6:	ea4f 4920 	mov.w	r9, r0, asr #16
 801eaba:	4462      	add	r2, ip
 801eabc:	4470      	add	r0, lr
 801eabe:	fb0a 1707 	mla	r7, sl, r7, r1
 801eac2:	9902      	ldr	r1, [sp, #8]
 801eac4:	3e01      	subs	r6, #1
 801eac6:	f817 7009 	ldrb.w	r7, [r7, r9]
 801eaca:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801eace:	f828 7b02 	strh.w	r7, [r8], #2
 801ead2:	e7ea      	b.n	801eaaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ead4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ead8:	d417      	bmi.n	801eb0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801eada:	68ae      	ldr	r6, [r5, #8]
 801eadc:	454e      	cmp	r6, r9
 801eade:	dd14      	ble.n	801eb0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801eae0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801eae4:	d411      	bmi.n	801eb0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801eae6:	68ef      	ldr	r7, [r5, #12]
 801eae8:	4557      	cmp	r7, sl
 801eaea:	dd0e      	ble.n	801eb0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801eaec:	9f01      	ldr	r7, [sp, #4]
 801eaee:	b236      	sxth	r6, r6
 801eaf0:	f06f 0101 	mvn.w	r1, #1
 801eaf4:	fb0a 7606 	mla	r6, sl, r6, r7
 801eaf8:	9f02      	ldr	r7, [sp, #8]
 801eafa:	f816 6009 	ldrb.w	r6, [r6, r9]
 801eafe:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801eb02:	fb01 f608 	mul.w	r6, r1, r8
 801eb06:	9903      	ldr	r1, [sp, #12]
 801eb08:	538f      	strh	r7, [r1, r6]
 801eb0a:	4470      	add	r0, lr
 801eb0c:	4462      	add	r2, ip
 801eb0e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801eb12:	e782      	b.n	801ea1a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eb14:	b005      	add	sp, #20
 801eb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb1e:	b087      	sub	sp, #28
 801eb20:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801eb22:	9205      	str	r2, [sp, #20]
 801eb24:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801eb28:	9102      	str	r1, [sp, #8]
 801eb2a:	9203      	str	r2, [sp, #12]
 801eb2c:	6861      	ldr	r1, [r4, #4]
 801eb2e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801eb32:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801eb36:	fb01 2000 	mla	r0, r1, r0, r2
 801eb3a:	6822      	ldr	r2, [r4, #0]
 801eb3c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801eb40:	9200      	str	r2, [sp, #0]
 801eb42:	f8dc 2000 	ldr.w	r2, [ip]
 801eb46:	9204      	str	r2, [sp, #16]
 801eb48:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801eb4c:	3204      	adds	r2, #4
 801eb4e:	9201      	str	r2, [sp, #4]
 801eb50:	9a03      	ldr	r2, [sp, #12]
 801eb52:	43d5      	mvns	r5, r2
 801eb54:	b2ed      	uxtb	r5, r5
 801eb56:	9a02      	ldr	r2, [sp, #8]
 801eb58:	2a00      	cmp	r2, #0
 801eb5a:	dc03      	bgt.n	801eb64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801eb5c:	9a05      	ldr	r2, [sp, #20]
 801eb5e:	2a00      	cmp	r2, #0
 801eb60:	f340 812c 	ble.w	801edbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801eb64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eb66:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801eb6a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801eb6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eb70:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801eb74:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eb78:	2b00      	cmp	r3, #0
 801eb7a:	dd10      	ble.n	801eb9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eb7c:	140c      	asrs	r4, r1, #16
 801eb7e:	d405      	bmi.n	801eb8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eb80:	4574      	cmp	r4, lr
 801eb82:	da03      	bge.n	801eb8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eb84:	1414      	asrs	r4, r2, #16
 801eb86:	d401      	bmi.n	801eb8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eb88:	42bc      	cmp	r4, r7
 801eb8a:	db09      	blt.n	801eba0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801eb8c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eb8e:	3b01      	subs	r3, #1
 801eb90:	9800      	ldr	r0, [sp, #0]
 801eb92:	4421      	add	r1, r4
 801eb94:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eb96:	3002      	adds	r0, #2
 801eb98:	4422      	add	r2, r4
 801eb9a:	9000      	str	r0, [sp, #0]
 801eb9c:	e7ec      	b.n	801eb78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801eb9e:	d071      	beq.n	801ec84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801eba0:	1e5c      	subs	r4, r3, #1
 801eba2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801eba4:	fb06 1604 	mla	r6, r6, r4, r1
 801eba8:	1436      	asrs	r6, r6, #16
 801ebaa:	d45d      	bmi.n	801ec68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ebac:	4576      	cmp	r6, lr
 801ebae:	da5b      	bge.n	801ec68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ebb0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ebb2:	fb06 2404 	mla	r4, r6, r4, r2
 801ebb6:	1424      	asrs	r4, r4, #16
 801ebb8:	d456      	bmi.n	801ec68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ebba:	42bc      	cmp	r4, r7
 801ebbc:	da54      	bge.n	801ec68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ebbe:	4698      	mov	r8, r3
 801ebc0:	f8dd 9000 	ldr.w	r9, [sp]
 801ebc4:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801ebc8:	f1b8 0f00 	cmp.w	r8, #0
 801ebcc:	dd54      	ble.n	801ec78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ebce:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801ebd2:	1414      	asrs	r4, r2, #16
 801ebd4:	9804      	ldr	r0, [sp, #16]
 801ebd6:	140e      	asrs	r6, r1, #16
 801ebd8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801ebdc:	fb07 0404 	mla	r4, r7, r4, r0
 801ebe0:	9801      	ldr	r0, [sp, #4]
 801ebe2:	f814 e006 	ldrb.w	lr, [r4, r6]
 801ebe6:	f8b9 4000 	ldrh.w	r4, [r9]
 801ebea:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ebee:	1227      	asrs	r7, r4, #8
 801ebf0:	eb00 0b0e 	add.w	fp, r0, lr
 801ebf4:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801ebf8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ebfc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ebfe:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801ec02:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ec06:	4401      	add	r1, r0
 801ec08:	fb16 f60a 	smulbb	r6, r6, sl
 801ec0c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ec0e:	fb1b fb0a 	smulbb	fp, fp, sl
 801ec12:	fb07 6705 	mla	r7, r7, r5, r6
 801ec16:	10e6      	asrs	r6, r4, #3
 801ec18:	00e4      	lsls	r4, r4, #3
 801ec1a:	4402      	add	r2, r0
 801ec1c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ec20:	b2bf      	uxth	r7, r7
 801ec22:	b2e4      	uxtb	r4, r4
 801ec24:	fb06 b605 	mla	r6, r6, r5, fp
 801ec28:	fb14 f405 	smulbb	r4, r4, r5
 801ec2c:	b2b6      	uxth	r6, r6
 801ec2e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801ec32:	1c7c      	adds	r4, r7, #1
 801ec34:	f106 0b01 	add.w	fp, r6, #1
 801ec38:	fa1f fe8e 	uxth.w	lr, lr
 801ec3c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ec40:	f10e 0401 	add.w	r4, lr, #1
 801ec44:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ec48:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ec4c:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801ec50:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ec54:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ec58:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ec5c:	4327      	orrs	r7, r4
 801ec5e:	ea47 070b 	orr.w	r7, r7, fp
 801ec62:	f829 7b02 	strh.w	r7, [r9], #2
 801ec66:	e7af      	b.n	801ebc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ec68:	f04f 0e00 	mov.w	lr, #0
 801ec6c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801ec70:	eb03 040e 	add.w	r4, r3, lr
 801ec74:	2c00      	cmp	r4, #0
 801ec76:	dc43      	bgt.n	801ed00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ec78:	9a00      	ldr	r2, [sp, #0]
 801ec7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec7e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ec82:	9300      	str	r3, [sp, #0]
 801ec84:	9b02      	ldr	r3, [sp, #8]
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	f340 8098 	ble.w	801edbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801ec8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ec90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec92:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec9a:	eef0 6a62 	vmov.f32	s13, s5
 801ec9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eca2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eca6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ecaa:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801ecae:	eef0 6a43 	vmov.f32	s13, s6
 801ecb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ecb6:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801ecba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ecbe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ecc2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ecc6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ecca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ecce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ecd2:	ee12 2a90 	vmov	r2, s5
 801ecd6:	eef0 2a47 	vmov.f32	s5, s14
 801ecda:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecde:	ee13 2a10 	vmov	r2, s6
 801ece2:	9313      	str	r3, [sp, #76]	; 0x4c
 801ece4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ece6:	eeb0 3a67 	vmov.f32	s6, s15
 801ecea:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecee:	9314      	str	r3, [sp, #80]	; 0x50
 801ecf0:	9b02      	ldr	r3, [sp, #8]
 801ecf2:	9a05      	ldr	r2, [sp, #20]
 801ecf4:	3b01      	subs	r3, #1
 801ecf6:	9302      	str	r3, [sp, #8]
 801ecf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ecfa:	bf08      	it	eq
 801ecfc:	4613      	moveq	r3, r2
 801ecfe:	e72a      	b.n	801eb56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ed00:	140f      	asrs	r7, r1, #16
 801ed02:	d454      	bmi.n	801edae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ed04:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ed08:	42be      	cmp	r6, r7
 801ed0a:	dd50      	ble.n	801edae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ed0c:	ea5f 4822 	movs.w	r8, r2, asr #16
 801ed10:	d44d      	bmi.n	801edae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ed12:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801ed16:	4544      	cmp	r4, r8
 801ed18:	dd49      	ble.n	801edae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ed1a:	9c04      	ldr	r4, [sp, #16]
 801ed1c:	b236      	sxth	r6, r6
 801ed1e:	f06f 0001 	mvn.w	r0, #1
 801ed22:	fb08 4606 	mla	r6, r8, r6, r4
 801ed26:	9c01      	ldr	r4, [sp, #4]
 801ed28:	fb00 fa0e 	mul.w	sl, r0, lr
 801ed2c:	9800      	ldr	r0, [sp, #0]
 801ed2e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801ed32:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ed36:	eb04 0b08 	add.w	fp, r4, r8
 801ed3a:	f830 400a 	ldrh.w	r4, [r0, sl]
 801ed3e:	9801      	ldr	r0, [sp, #4]
 801ed40:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801ed44:	1227      	asrs	r7, r4, #8
 801ed46:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ed4a:	fb16 f609 	smulbb	r6, r6, r9
 801ed4e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ed52:	f810 8008 	ldrb.w	r8, [r0, r8]
 801ed56:	fb1b fb09 	smulbb	fp, fp, r9
 801ed5a:	fb07 6705 	mla	r7, r7, r5, r6
 801ed5e:	10e6      	asrs	r6, r4, #3
 801ed60:	00e4      	lsls	r4, r4, #3
 801ed62:	9800      	ldr	r0, [sp, #0]
 801ed64:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ed68:	b2bf      	uxth	r7, r7
 801ed6a:	b2e4      	uxtb	r4, r4
 801ed6c:	fb06 b605 	mla	r6, r6, r5, fp
 801ed70:	fb14 f405 	smulbb	r4, r4, r5
 801ed74:	b2b6      	uxth	r6, r6
 801ed76:	fb08 4809 	mla	r8, r8, r9, r4
 801ed7a:	1c7c      	adds	r4, r7, #1
 801ed7c:	f106 0b01 	add.w	fp, r6, #1
 801ed80:	fa1f f888 	uxth.w	r8, r8
 801ed84:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ed88:	f108 0401 	add.w	r4, r8, #1
 801ed8c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ed90:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ed94:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801ed98:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ed9c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801eda0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801eda4:	4327      	orrs	r7, r4
 801eda6:	ea47 070b 	orr.w	r7, r7, fp
 801edaa:	f820 700a 	strh.w	r7, [r0, sl]
 801edae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801edb0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 801edb4:	4401      	add	r1, r0
 801edb6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801edb8:	4402      	add	r2, r0
 801edba:	e759      	b.n	801ec70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801edbc:	b007      	add	sp, #28
 801edbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801edc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801edc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edc8:	b085      	sub	sp, #20
 801edca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801edce:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801edd0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801edd2:	9203      	str	r2, [sp, #12]
 801edd4:	6870      	ldr	r0, [r6, #4]
 801edd6:	686f      	ldr	r7, [r5, #4]
 801edd8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801eddc:	3704      	adds	r7, #4
 801edde:	9101      	str	r1, [sp, #4]
 801ede0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ede4:	fb00 2404 	mla	r4, r0, r4, r2
 801ede8:	6832      	ldr	r2, [r6, #0]
 801edea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801edee:	682a      	ldr	r2, [r5, #0]
 801edf0:	9202      	str	r2, [sp, #8]
 801edf2:	9a01      	ldr	r2, [sp, #4]
 801edf4:	2a00      	cmp	r2, #0
 801edf6:	dc03      	bgt.n	801ee00 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801edf8:	9a03      	ldr	r2, [sp, #12]
 801edfa:	2a00      	cmp	r2, #0
 801edfc:	f340 80cc 	ble.w	801ef98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801ee00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ee02:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ee06:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ee0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ee0c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ee10:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	dd0d      	ble.n	801ee34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ee18:	1406      	asrs	r6, r0, #16
 801ee1a:	d405      	bmi.n	801ee28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ee1c:	454e      	cmp	r6, r9
 801ee1e:	da03      	bge.n	801ee28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ee20:	1416      	asrs	r6, r2, #16
 801ee22:	d401      	bmi.n	801ee28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ee24:	4546      	cmp	r6, r8
 801ee26:	db06      	blt.n	801ee36 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ee28:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ee2a:	4460      	add	r0, ip
 801ee2c:	3b01      	subs	r3, #1
 801ee2e:	3402      	adds	r4, #2
 801ee30:	4432      	add	r2, r6
 801ee32:	e7ef      	b.n	801ee14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ee34:	d00f      	beq.n	801ee56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ee36:	1e5e      	subs	r6, r3, #1
 801ee38:	fb0c 0e06 	mla	lr, ip, r6, r0
 801ee3c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801ee40:	d543      	bpl.n	801eeca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801ee42:	4698      	mov	r8, r3
 801ee44:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801ee48:	f1b8 0f00 	cmp.w	r8, #0
 801ee4c:	dc71      	bgt.n	801ef32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801ee4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee52:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ee56:	9b01      	ldr	r3, [sp, #4]
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	f340 809d 	ble.w	801ef98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801ee5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee68:	eeb0 6a62 	vmov.f32	s12, s5
 801ee6c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ee70:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee78:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ee7c:	eeb0 6a43 	vmov.f32	s12, s6
 801ee80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee84:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ee88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee90:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eea0:	ee12 2a90 	vmov	r2, s5
 801eea4:	eef0 2a47 	vmov.f32	s5, s14
 801eea8:	fb92 fcf3 	sdiv	ip, r2, r3
 801eeac:	ee13 2a10 	vmov	r2, s6
 801eeb0:	eeb0 3a67 	vmov.f32	s6, s15
 801eeb4:	fb92 f3f3 	sdiv	r3, r2, r3
 801eeb8:	9312      	str	r3, [sp, #72]	; 0x48
 801eeba:	9b01      	ldr	r3, [sp, #4]
 801eebc:	9a03      	ldr	r2, [sp, #12]
 801eebe:	3b01      	subs	r3, #1
 801eec0:	9301      	str	r3, [sp, #4]
 801eec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eec4:	bf08      	it	eq
 801eec6:	4613      	moveq	r3, r2
 801eec8:	e793      	b.n	801edf2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801eeca:	45ce      	cmp	lr, r9
 801eecc:	dab9      	bge.n	801ee42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801eece:	9912      	ldr	r1, [sp, #72]	; 0x48
 801eed0:	fb01 2606 	mla	r6, r1, r6, r2
 801eed4:	1436      	asrs	r6, r6, #16
 801eed6:	d4b4      	bmi.n	801ee42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801eed8:	4546      	cmp	r6, r8
 801eeda:	dab2      	bge.n	801ee42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801eedc:	4698      	mov	r8, r3
 801eede:	46a2      	mov	sl, r4
 801eee0:	f1b8 0f00 	cmp.w	r8, #0
 801eee4:	ddb3      	ble.n	801ee4e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eee6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801eeea:	1416      	asrs	r6, r2, #16
 801eeec:	9902      	ldr	r1, [sp, #8]
 801eeee:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801eef2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801eef6:	4460      	add	r0, ip
 801eef8:	fb09 1606 	mla	r6, r9, r6, r1
 801eefc:	4928      	ldr	r1, [pc, #160]	; (801efa0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801eefe:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801ef02:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ef06:	eb07 0b0e 	add.w	fp, r7, lr
 801ef0a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801ef0e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ef12:	00f6      	lsls	r6, r6, #3
 801ef14:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801ef18:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ef1a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ef1e:	440a      	add	r2, r1
 801ef20:	ea49 0606 	orr.w	r6, r9, r6
 801ef24:	f817 900e 	ldrb.w	r9, [r7, lr]
 801ef28:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801ef2c:	f82a 6b02 	strh.w	r6, [sl], #2
 801ef30:	e7d6      	b.n	801eee0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ef32:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ef36:	d429      	bmi.n	801ef8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ef38:	68ae      	ldr	r6, [r5, #8]
 801ef3a:	454e      	cmp	r6, r9
 801ef3c:	dd26      	ble.n	801ef8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ef3e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801ef42:	d423      	bmi.n	801ef8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ef44:	68e9      	ldr	r1, [r5, #12]
 801ef46:	4559      	cmp	r1, fp
 801ef48:	dd20      	ble.n	801ef8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ef4a:	fa0f fe86 	sxth.w	lr, r6
 801ef4e:	9902      	ldr	r1, [sp, #8]
 801ef50:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801ef54:	f06f 0101 	mvn.w	r1, #1
 801ef58:	f81e e009 	ldrb.w	lr, [lr, r9]
 801ef5c:	fb01 f908 	mul.w	r9, r1, r8
 801ef60:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801ef64:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ef68:	eb07 060e 	add.w	r6, r7, lr
 801ef6c:	f896 b002 	ldrb.w	fp, [r6, #2]
 801ef70:	7876      	ldrb	r6, [r6, #1]
 801ef72:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801ef76:	00f6      	lsls	r6, r6, #3
 801ef78:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ef7c:	ea4b 0606 	orr.w	r6, fp, r6
 801ef80:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801ef84:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801ef88:	f82a 6009 	strh.w	r6, [sl, r9]
 801ef8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ef8e:	4460      	add	r0, ip
 801ef90:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801ef94:	440a      	add	r2, r1
 801ef96:	e757      	b.n	801ee48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ef98:	b005      	add	sp, #20
 801ef9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef9e:	bf00      	nop
 801efa0:	fffff800 	.word	0xfffff800

0801efa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801efa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efa8:	b087      	sub	sp, #28
 801efaa:	468b      	mov	fp, r1
 801efac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801efb0:	9815      	ldr	r0, [sp, #84]	; 0x54
 801efb2:	9204      	str	r2, [sp, #16]
 801efb4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801efb8:	6841      	ldr	r1, [r0, #4]
 801efba:	9205      	str	r2, [sp, #20]
 801efbc:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801efc0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801efc4:	fb01 2404 	mla	r4, r1, r4, r2
 801efc8:	6802      	ldr	r2, [r0, #0]
 801efca:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801efce:	f8dc 2000 	ldr.w	r2, [ip]
 801efd2:	9201      	str	r2, [sp, #4]
 801efd4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801efd8:	3204      	adds	r2, #4
 801efda:	9202      	str	r2, [sp, #8]
 801efdc:	f1bb 0f00 	cmp.w	fp, #0
 801efe0:	dc03      	bgt.n	801efea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801efe2:	9a04      	ldr	r2, [sp, #16]
 801efe4:	2a00      	cmp	r2, #0
 801efe6:	f340 8138 	ble.w	801f25a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801efea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801efec:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801eff0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801eff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eff6:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801effa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801effe:	2b00      	cmp	r3, #0
 801f000:	dd0e      	ble.n	801f020 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f002:	1402      	asrs	r2, r0, #16
 801f004:	d405      	bmi.n	801f012 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f006:	42ba      	cmp	r2, r7
 801f008:	da03      	bge.n	801f012 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f00a:	140a      	asrs	r2, r1, #16
 801f00c:	d401      	bmi.n	801f012 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f00e:	42b2      	cmp	r2, r6
 801f010:	db07      	blt.n	801f022 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f012:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f014:	3b01      	subs	r3, #1
 801f016:	3402      	adds	r4, #2
 801f018:	4410      	add	r0, r2
 801f01a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f01c:	4411      	add	r1, r2
 801f01e:	e7ee      	b.n	801effe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f020:	d019      	beq.n	801f056 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f022:	1e5a      	subs	r2, r3, #1
 801f024:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f026:	fb05 0502 	mla	r5, r5, r2, r0
 801f02a:	142d      	asrs	r5, r5, #16
 801f02c:	d409      	bmi.n	801f042 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f02e:	42bd      	cmp	r5, r7
 801f030:	da07      	bge.n	801f042 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f032:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f034:	fb05 1202 	mla	r2, r5, r2, r1
 801f038:	1412      	asrs	r2, r2, #16
 801f03a:	d402      	bmi.n	801f042 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f03c:	42b2      	cmp	r2, r6
 801f03e:	f2c0 80ac 	blt.w	801f19a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f042:	f04f 0e00 	mov.w	lr, #0
 801f046:	eb03 020e 	add.w	r2, r3, lr
 801f04a:	2a00      	cmp	r2, #0
 801f04c:	dc3e      	bgt.n	801f0cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f04e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f052:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f056:	f1bb 0f00 	cmp.w	fp, #0
 801f05a:	f340 80fe 	ble.w	801f25a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f05e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f062:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f064:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f068:	f1bb 0b01 	subs.w	fp, fp, #1
 801f06c:	eeb0 6a62 	vmov.f32	s12, s5
 801f070:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f074:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f078:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f07c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f080:	eeb0 6a43 	vmov.f32	s12, s6
 801f084:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f088:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f08c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f090:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f094:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f098:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f09c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0a4:	ee12 2a90 	vmov	r2, s5
 801f0a8:	eef0 2a47 	vmov.f32	s5, s14
 801f0ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0b0:	ee13 2a10 	vmov	r2, s6
 801f0b4:	9313      	str	r3, [sp, #76]	; 0x4c
 801f0b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f0b8:	eeb0 3a67 	vmov.f32	s6, s15
 801f0bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0c0:	9a04      	ldr	r2, [sp, #16]
 801f0c2:	9314      	str	r3, [sp, #80]	; 0x50
 801f0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f0c6:	bf08      	it	eq
 801f0c8:	4613      	moveq	r3, r2
 801f0ca:	e787      	b.n	801efdc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f0cc:	1406      	asrs	r6, r0, #16
 801f0ce:	d45d      	bmi.n	801f18c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f0d0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801f0d4:	42b5      	cmp	r5, r6
 801f0d6:	dd59      	ble.n	801f18c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f0d8:	140f      	asrs	r7, r1, #16
 801f0da:	d457      	bmi.n	801f18c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f0dc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f0e0:	42ba      	cmp	r2, r7
 801f0e2:	dd53      	ble.n	801f18c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f0e4:	9a01      	ldr	r2, [sp, #4]
 801f0e6:	b22d      	sxth	r5, r5
 801f0e8:	fb07 2505 	mla	r5, r7, r5, r2
 801f0ec:	5daa      	ldrb	r2, [r5, r6]
 801f0ee:	9d02      	ldr	r5, [sp, #8]
 801f0f0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f0f4:	0e2e      	lsrs	r6, r5, #24
 801f0f6:	d049      	beq.n	801f18c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f0f8:	f06f 0201 	mvn.w	r2, #1
 801f0fc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f100:	fb02 f20e 	mul.w	r2, r2, lr
 801f104:	f834 8002 	ldrh.w	r8, [r4, r2]
 801f108:	9203      	str	r2, [sp, #12]
 801f10a:	9a05      	ldr	r2, [sp, #20]
 801f10c:	ea4f 2728 	mov.w	r7, r8, asr #8
 801f110:	4356      	muls	r6, r2
 801f112:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f116:	1c72      	adds	r2, r6, #1
 801f118:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f11c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f120:	b2ed      	uxtb	r5, r5
 801f122:	1212      	asrs	r2, r2, #8
 801f124:	fa1f f982 	uxth.w	r9, r2
 801f128:	43d2      	mvns	r2, r2
 801f12a:	fb16 f609 	smulbb	r6, r6, r9
 801f12e:	b2d2      	uxtb	r2, r2
 801f130:	fb15 f509 	smulbb	r5, r5, r9
 801f134:	fb07 6702 	mla	r7, r7, r2, r6
 801f138:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f13c:	fb1a fa09 	smulbb	sl, sl, r9
 801f140:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f144:	b2bf      	uxth	r7, r7
 801f146:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f14a:	fa5f f888 	uxtb.w	r8, r8
 801f14e:	fb06 a602 	mla	r6, r6, r2, sl
 801f152:	fb08 5502 	mla	r5, r8, r2, r5
 801f156:	1c7a      	adds	r2, r7, #1
 801f158:	b2b6      	uxth	r6, r6
 801f15a:	b2ad      	uxth	r5, r5
 801f15c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f160:	9a03      	ldr	r2, [sp, #12]
 801f162:	f105 0a01 	add.w	sl, r5, #1
 801f166:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f16a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f16e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f172:	ea4a 0707 	orr.w	r7, sl, r7
 801f176:	f106 0a01 	add.w	sl, r6, #1
 801f17a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f17e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f182:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f186:	ea47 070a 	orr.w	r7, r7, sl
 801f18a:	52a7      	strh	r7, [r4, r2]
 801f18c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f18e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 801f192:	4410      	add	r0, r2
 801f194:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f196:	4411      	add	r1, r2
 801f198:	e755      	b.n	801f046 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f19a:	f04f 0800 	mov.w	r8, #0
 801f19e:	eba3 0208 	sub.w	r2, r3, r8
 801f1a2:	2a00      	cmp	r2, #0
 801f1a4:	f77f af53 	ble.w	801f04e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f1a8:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801f1ac:	140a      	asrs	r2, r1, #16
 801f1ae:	9f01      	ldr	r7, [sp, #4]
 801f1b0:	1405      	asrs	r5, r0, #16
 801f1b2:	fb06 7202 	mla	r2, r6, r2, r7
 801f1b6:	5d52      	ldrb	r2, [r2, r5]
 801f1b8:	9d02      	ldr	r5, [sp, #8]
 801f1ba:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f1be:	0e2e      	lsrs	r6, r5, #24
 801f1c0:	d044      	beq.n	801f24c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f1c2:	9a05      	ldr	r2, [sp, #20]
 801f1c4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f1c8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801f1cc:	4356      	muls	r6, r2
 801f1ce:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f1d2:	1c72      	adds	r2, r6, #1
 801f1d4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f1d8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f1dc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f1e0:	b2ed      	uxtb	r5, r5
 801f1e2:	1212      	asrs	r2, r2, #8
 801f1e4:	fa1f f982 	uxth.w	r9, r2
 801f1e8:	43d2      	mvns	r2, r2
 801f1ea:	fb16 f609 	smulbb	r6, r6, r9
 801f1ee:	b2d2      	uxtb	r2, r2
 801f1f0:	fb15 f509 	smulbb	r5, r5, r9
 801f1f4:	fb07 6702 	mla	r7, r7, r2, r6
 801f1f8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f1fc:	fb1a fa09 	smulbb	sl, sl, r9
 801f200:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f204:	b2bf      	uxth	r7, r7
 801f206:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f20a:	fa5f fe8e 	uxtb.w	lr, lr
 801f20e:	fb06 a602 	mla	r6, r6, r2, sl
 801f212:	fb0e 5502 	mla	r5, lr, r2, r5
 801f216:	1c7a      	adds	r2, r7, #1
 801f218:	b2b6      	uxth	r6, r6
 801f21a:	b2ad      	uxth	r5, r5
 801f21c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f220:	f105 0a01 	add.w	sl, r5, #1
 801f224:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f228:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f22c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f230:	ea4a 0707 	orr.w	r7, sl, r7
 801f234:	f106 0a01 	add.w	sl, r6, #1
 801f238:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f23c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f240:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f244:	ea47 070a 	orr.w	r7, r7, sl
 801f248:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f24c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f24e:	f108 0801 	add.w	r8, r8, #1
 801f252:	4410      	add	r0, r2
 801f254:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f256:	4411      	add	r1, r2
 801f258:	e7a1      	b.n	801f19e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f25a:	b007      	add	sp, #28
 801f25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f260 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f264:	b085      	sub	sp, #20
 801f266:	468b      	mov	fp, r1
 801f268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f26c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f26e:	9203      	str	r2, [sp, #12]
 801f270:	6841      	ldr	r1, [r0, #4]
 801f272:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f276:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f27a:	fb01 2404 	mla	r4, r1, r4, r2
 801f27e:	6802      	ldr	r2, [r0, #0]
 801f280:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f284:	f8de 2000 	ldr.w	r2, [lr]
 801f288:	9200      	str	r2, [sp, #0]
 801f28a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f28e:	3204      	adds	r2, #4
 801f290:	9201      	str	r2, [sp, #4]
 801f292:	f1bb 0f00 	cmp.w	fp, #0
 801f296:	dc03      	bgt.n	801f2a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f298:	9a03      	ldr	r2, [sp, #12]
 801f29a:	2a00      	cmp	r2, #0
 801f29c:	f340 8153 	ble.w	801f546 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f2a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f2a2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f2a6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f2aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f2ac:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f2b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f2b4:	2b00      	cmp	r3, #0
 801f2b6:	dd0e      	ble.n	801f2d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f2b8:	1408      	asrs	r0, r1, #16
 801f2ba:	d405      	bmi.n	801f2c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f2bc:	42b8      	cmp	r0, r7
 801f2be:	da03      	bge.n	801f2c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f2c0:	1410      	asrs	r0, r2, #16
 801f2c2:	d401      	bmi.n	801f2c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f2c4:	42b0      	cmp	r0, r6
 801f2c6:	db07      	blt.n	801f2d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f2c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f2ca:	3b01      	subs	r3, #1
 801f2cc:	3402      	adds	r4, #2
 801f2ce:	4401      	add	r1, r0
 801f2d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f2d2:	4402      	add	r2, r0
 801f2d4:	e7ee      	b.n	801f2b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f2d6:	d017      	beq.n	801f308 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f2d8:	1e58      	subs	r0, r3, #1
 801f2da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f2dc:	fb05 1500 	mla	r5, r5, r0, r1
 801f2e0:	142d      	asrs	r5, r5, #16
 801f2e2:	d409      	bmi.n	801f2f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f2e4:	42bd      	cmp	r5, r7
 801f2e6:	da07      	bge.n	801f2f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f2e8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f2ea:	fb05 2000 	mla	r0, r5, r0, r2
 801f2ee:	1400      	asrs	r0, r0, #16
 801f2f0:	d402      	bmi.n	801f2f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f2f2:	42b0      	cmp	r0, r6
 801f2f4:	f2c0 80bc 	blt.w	801f470 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f2f8:	2600      	movs	r6, #0
 801f2fa:	1998      	adds	r0, r3, r6
 801f2fc:	2800      	cmp	r0, #0
 801f2fe:	dc3e      	bgt.n	801f37e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f300:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f304:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f308:	f1bb 0f00 	cmp.w	fp, #0
 801f30c:	f340 811b 	ble.w	801f546 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f310:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f316:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f31a:	f1bb 0b01 	subs.w	fp, fp, #1
 801f31e:	eeb0 6a62 	vmov.f32	s12, s5
 801f322:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f326:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f32a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f32e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f332:	eeb0 6a43 	vmov.f32	s12, s6
 801f336:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f33a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f33e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f342:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f346:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f34a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f34e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f352:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f356:	ee12 2a90 	vmov	r2, s5
 801f35a:	eef0 2a47 	vmov.f32	s5, s14
 801f35e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f362:	ee13 2a10 	vmov	r2, s6
 801f366:	9311      	str	r3, [sp, #68]	; 0x44
 801f368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f36a:	eeb0 3a67 	vmov.f32	s6, s15
 801f36e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f372:	9a03      	ldr	r2, [sp, #12]
 801f374:	9312      	str	r3, [sp, #72]	; 0x48
 801f376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f378:	bf08      	it	eq
 801f37a:	4613      	moveq	r3, r2
 801f37c:	e789      	b.n	801f292 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f37e:	140f      	asrs	r7, r1, #16
 801f380:	d426      	bmi.n	801f3d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f382:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f386:	42bd      	cmp	r5, r7
 801f388:	dd22      	ble.n	801f3d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f38a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f38e:	d41f      	bmi.n	801f3d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f390:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f394:	4560      	cmp	r0, ip
 801f396:	dd1b      	ble.n	801f3d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f398:	9800      	ldr	r0, [sp, #0]
 801f39a:	b22d      	sxth	r5, r5
 801f39c:	fb0c 0505 	mla	r5, ip, r5, r0
 801f3a0:	5de8      	ldrb	r0, [r5, r7]
 801f3a2:	9d01      	ldr	r5, [sp, #4]
 801f3a4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801f3a8:	0e07      	lsrs	r7, r0, #24
 801f3aa:	2fff      	cmp	r7, #255	; 0xff
 801f3ac:	d116      	bne.n	801f3dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f3ae:	f06f 0501 	mvn.w	r5, #1
 801f3b2:	fb05 f706 	mul.w	r7, r5, r6
 801f3b6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801f3ba:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801f3be:	0945      	lsrs	r5, r0, #5
 801f3c0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f3c4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f3c8:	ea4c 0505 	orr.w	r5, ip, r5
 801f3cc:	4305      	orrs	r5, r0
 801f3ce:	53e5      	strh	r5, [r4, r7]
 801f3d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f3d2:	3e01      	subs	r6, #1
 801f3d4:	4401      	add	r1, r0
 801f3d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f3d8:	4402      	add	r2, r0
 801f3da:	e78e      	b.n	801f2fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f3dc:	b2fd      	uxtb	r5, r7
 801f3de:	2f00      	cmp	r7, #0
 801f3e0:	d0f6      	beq.n	801f3d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f3e2:	f06f 0701 	mvn.w	r7, #1
 801f3e6:	fa1f f985 	uxth.w	r9, r5
 801f3ea:	43ed      	mvns	r5, r5
 801f3ec:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f3f0:	4377      	muls	r7, r6
 801f3f2:	fb1a fa09 	smulbb	sl, sl, r9
 801f3f6:	b2ed      	uxtb	r5, r5
 801f3f8:	f834 8007 	ldrh.w	r8, [r4, r7]
 801f3fc:	9702      	str	r7, [sp, #8]
 801f3fe:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801f402:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f406:	fb17 f709 	smulbb	r7, r7, r9
 801f40a:	b2c0      	uxtb	r0, r0
 801f40c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f410:	fb10 f009 	smulbb	r0, r0, r9
 801f414:	fb0c 7c05 	mla	ip, ip, r5, r7
 801f418:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801f41c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f420:	fa1f fc8c 	uxth.w	ip, ip
 801f424:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f428:	fa5f f888 	uxtb.w	r8, r8
 801f42c:	fb07 a705 	mla	r7, r7, r5, sl
 801f430:	fb08 0005 	mla	r0, r8, r5, r0
 801f434:	f10c 0501 	add.w	r5, ip, #1
 801f438:	b2bf      	uxth	r7, r7
 801f43a:	b280      	uxth	r0, r0
 801f43c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f440:	f100 0a01 	add.w	sl, r0, #1
 801f444:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f448:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801f44c:	9802      	ldr	r0, [sp, #8]
 801f44e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f452:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f456:	f107 0a01 	add.w	sl, r7, #1
 801f45a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f45e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f462:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f466:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f46a:	f824 c000 	strh.w	ip, [r4, r0]
 801f46e:	e7af      	b.n	801f3d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f470:	f04f 0800 	mov.w	r8, #0
 801f474:	eba3 0008 	sub.w	r0, r3, r8
 801f478:	2800      	cmp	r0, #0
 801f47a:	f77f af41 	ble.w	801f300 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f47e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f482:	1410      	asrs	r0, r2, #16
 801f484:	9f00      	ldr	r7, [sp, #0]
 801f486:	140d      	asrs	r5, r1, #16
 801f488:	fb06 7000 	mla	r0, r6, r0, r7
 801f48c:	5d40      	ldrb	r0, [r0, r5]
 801f48e:	9d01      	ldr	r5, [sp, #4]
 801f490:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801f494:	0e2e      	lsrs	r6, r5, #24
 801f496:	2eff      	cmp	r6, #255	; 0xff
 801f498:	d112      	bne.n	801f4c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801f49a:	482c      	ldr	r0, [pc, #176]	; (801f54c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801f49c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801f4a0:	0968      	lsrs	r0, r5, #5
 801f4a2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f4a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f4aa:	4330      	orrs	r0, r6
 801f4ac:	4328      	orrs	r0, r5
 801f4ae:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801f4b2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f4b4:	f108 0801 	add.w	r8, r8, #1
 801f4b8:	4401      	add	r1, r0
 801f4ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f4bc:	4402      	add	r2, r0
 801f4be:	e7d9      	b.n	801f474 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f4c0:	b2f0      	uxtb	r0, r6
 801f4c2:	2e00      	cmp	r6, #0
 801f4c4:	d0f5      	beq.n	801f4b2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f4c6:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801f4ca:	fa1f f980 	uxth.w	r9, r0
 801f4ce:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f4d2:	43c0      	mvns	r0, r0
 801f4d4:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f4d8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f4dc:	fb16 f609 	smulbb	r6, r6, r9
 801f4e0:	b2c0      	uxtb	r0, r0
 801f4e2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f4e6:	b2ed      	uxtb	r5, r5
 801f4e8:	fb1a fa09 	smulbb	sl, sl, r9
 801f4ec:	fb07 6700 	mla	r7, r7, r0, r6
 801f4f0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f4f4:	fb15 f509 	smulbb	r5, r5, r9
 801f4f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f4fc:	b2bf      	uxth	r7, r7
 801f4fe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f502:	fa5f fc8c 	uxtb.w	ip, ip
 801f506:	fb06 a600 	mla	r6, r6, r0, sl
 801f50a:	fb0c 5500 	mla	r5, ip, r0, r5
 801f50e:	1c78      	adds	r0, r7, #1
 801f510:	b2b6      	uxth	r6, r6
 801f512:	b2ad      	uxth	r5, r5
 801f514:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801f518:	f105 0a01 	add.w	sl, r5, #1
 801f51c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f520:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f524:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f528:	ea4a 0707 	orr.w	r7, sl, r7
 801f52c:	f106 0a01 	add.w	sl, r6, #1
 801f530:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f534:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f538:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f53c:	ea47 070a 	orr.w	r7, r7, sl
 801f540:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f544:	e7b5      	b.n	801f4b2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f546:	b005      	add	sp, #20
 801f548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f54c:	fffff800 	.word	0xfffff800

0801f550 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f554:	b087      	sub	sp, #28
 801f556:	468b      	mov	fp, r1
 801f558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f55c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f55e:	9204      	str	r2, [sp, #16]
 801f560:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f564:	6861      	ldr	r1, [r4, #4]
 801f566:	9205      	str	r2, [sp, #20]
 801f568:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f56c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f570:	fb01 2000 	mla	r0, r1, r0, r2
 801f574:	6822      	ldr	r2, [r4, #0]
 801f576:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f57a:	f8de 2000 	ldr.w	r2, [lr]
 801f57e:	9201      	str	r2, [sp, #4]
 801f580:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f584:	9202      	str	r2, [sp, #8]
 801f586:	f1bb 0f00 	cmp.w	fp, #0
 801f58a:	dc03      	bgt.n	801f594 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f58c:	9a04      	ldr	r2, [sp, #16]
 801f58e:	2a00      	cmp	r2, #0
 801f590:	f340 8142 	ble.w	801f818 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f594:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f596:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f59a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f59e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f5a0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f5a4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	dd0e      	ble.n	801f5ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f5ac:	140c      	asrs	r4, r1, #16
 801f5ae:	d405      	bmi.n	801f5bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f5b0:	42bc      	cmp	r4, r7
 801f5b2:	da03      	bge.n	801f5bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f5b4:	1414      	asrs	r4, r2, #16
 801f5b6:	d401      	bmi.n	801f5bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f5b8:	42b4      	cmp	r4, r6
 801f5ba:	db07      	blt.n	801f5cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f5bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f5be:	3b01      	subs	r3, #1
 801f5c0:	3002      	adds	r0, #2
 801f5c2:	4421      	add	r1, r4
 801f5c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f5c6:	4422      	add	r2, r4
 801f5c8:	e7ee      	b.n	801f5a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f5ca:	d019      	beq.n	801f600 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f5cc:	1e5c      	subs	r4, r3, #1
 801f5ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f5d0:	fb05 1504 	mla	r5, r5, r4, r1
 801f5d4:	142d      	asrs	r5, r5, #16
 801f5d6:	d409      	bmi.n	801f5ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f5d8:	42bd      	cmp	r5, r7
 801f5da:	da07      	bge.n	801f5ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f5dc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f5de:	fb05 2404 	mla	r4, r5, r4, r2
 801f5e2:	1424      	asrs	r4, r4, #16
 801f5e4:	d402      	bmi.n	801f5ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f5e6:	42b4      	cmp	r4, r6
 801f5e8:	f2c0 80b1 	blt.w	801f74e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f5ec:	f04f 0800 	mov.w	r8, #0
 801f5f0:	eb03 0408 	add.w	r4, r3, r8
 801f5f4:	2c00      	cmp	r4, #0
 801f5f6:	dc3e      	bgt.n	801f676 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f5f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f5fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f600:	f1bb 0f00 	cmp.w	fp, #0
 801f604:	f340 8108 	ble.w	801f818 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f608:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f60c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f60e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f612:	f1bb 0b01 	subs.w	fp, fp, #1
 801f616:	eeb0 6a62 	vmov.f32	s12, s5
 801f61a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f61e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f622:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f626:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f62a:	eeb0 6a43 	vmov.f32	s12, s6
 801f62e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f632:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f636:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f63a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f63e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f642:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f646:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f64a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f64e:	ee12 2a90 	vmov	r2, s5
 801f652:	eef0 2a47 	vmov.f32	s5, s14
 801f656:	fb92 f3f3 	sdiv	r3, r2, r3
 801f65a:	ee13 2a10 	vmov	r2, s6
 801f65e:	9313      	str	r3, [sp, #76]	; 0x4c
 801f660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f662:	eeb0 3a67 	vmov.f32	s6, s15
 801f666:	fb92 f3f3 	sdiv	r3, r2, r3
 801f66a:	9a04      	ldr	r2, [sp, #16]
 801f66c:	9314      	str	r3, [sp, #80]	; 0x50
 801f66e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f670:	bf08      	it	eq
 801f672:	4613      	moveq	r3, r2
 801f674:	e787      	b.n	801f586 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f676:	140e      	asrs	r6, r1, #16
 801f678:	d462      	bmi.n	801f740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f67a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f67e:	42b5      	cmp	r5, r6
 801f680:	dd5e      	ble.n	801f740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f682:	1417      	asrs	r7, r2, #16
 801f684:	d45c      	bmi.n	801f740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f686:	f8de 400c 	ldr.w	r4, [lr, #12]
 801f68a:	42bc      	cmp	r4, r7
 801f68c:	dd58      	ble.n	801f740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f68e:	b22d      	sxth	r5, r5
 801f690:	9c02      	ldr	r4, [sp, #8]
 801f692:	fb07 6505 	mla	r5, r7, r5, r6
 801f696:	5d66      	ldrb	r6, [r4, r5]
 801f698:	2e00      	cmp	r6, #0
 801f69a:	d051      	beq.n	801f740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f69c:	9c01      	ldr	r4, [sp, #4]
 801f69e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801f6a2:	f06f 0401 	mvn.w	r4, #1
 801f6a6:	fb04 f408 	mul.w	r4, r4, r8
 801f6aa:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f6ae:	5b05      	ldrh	r5, [r0, r4]
 801f6b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f6b4:	9403      	str	r4, [sp, #12]
 801f6b6:	9c05      	ldr	r4, [sp, #20]
 801f6b8:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f6bc:	4366      	muls	r6, r4
 801f6be:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f6c2:	1c74      	adds	r4, r6, #1
 801f6c4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f6c8:	122e      	asrs	r6, r5, #8
 801f6ca:	1224      	asrs	r4, r4, #8
 801f6cc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f6d0:	00ed      	lsls	r5, r5, #3
 801f6d2:	b2a7      	uxth	r7, r4
 801f6d4:	43e4      	mvns	r4, r4
 801f6d6:	b2ed      	uxtb	r5, r5
 801f6d8:	b2e4      	uxtb	r4, r4
 801f6da:	fb16 f604 	smulbb	r6, r6, r4
 801f6de:	fb15 f504 	smulbb	r5, r5, r4
 801f6e2:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f6e6:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f6ea:	fb1a fa04 	smulbb	sl, sl, r4
 801f6ee:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f6f2:	fa1f fc8c 	uxth.w	ip, ip
 801f6f6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f6fa:	fa5f f989 	uxtb.w	r9, r9
 801f6fe:	fb06 a607 	mla	r6, r6, r7, sl
 801f702:	f10c 0401 	add.w	r4, ip, #1
 801f706:	fb09 5507 	mla	r5, r9, r7, r5
 801f70a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f70e:	9c03      	ldr	r4, [sp, #12]
 801f710:	b2ad      	uxth	r5, r5
 801f712:	b2b6      	uxth	r6, r6
 801f714:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f718:	f105 0a01 	add.w	sl, r5, #1
 801f71c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f720:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f724:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f728:	f106 0a01 	add.w	sl, r6, #1
 801f72c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f730:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f734:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f738:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f73c:	f820 c004 	strh.w	ip, [r0, r4]
 801f740:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f742:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801f746:	4421      	add	r1, r4
 801f748:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f74a:	4422      	add	r2, r4
 801f74c:	e750      	b.n	801f5f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f74e:	f04f 0900 	mov.w	r9, #0
 801f752:	eba3 0409 	sub.w	r4, r3, r9
 801f756:	2c00      	cmp	r4, #0
 801f758:	f77f af4e 	ble.w	801f5f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f75c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f760:	140d      	asrs	r5, r1, #16
 801f762:	1414      	asrs	r4, r2, #16
 801f764:	fb06 5404 	mla	r4, r6, r4, r5
 801f768:	9d02      	ldr	r5, [sp, #8]
 801f76a:	5d2e      	ldrb	r6, [r5, r4]
 801f76c:	2e00      	cmp	r6, #0
 801f76e:	d04c      	beq.n	801f80a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f770:	9d01      	ldr	r5, [sp, #4]
 801f772:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f776:	9c05      	ldr	r4, [sp, #20]
 801f778:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f77c:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f780:	4366      	muls	r6, r4
 801f782:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f786:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f78a:	1c74      	adds	r4, r6, #1
 801f78c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f790:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f794:	122e      	asrs	r6, r5, #8
 801f796:	1224      	asrs	r4, r4, #8
 801f798:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f79c:	00ed      	lsls	r5, r5, #3
 801f79e:	b2a7      	uxth	r7, r4
 801f7a0:	43e4      	mvns	r4, r4
 801f7a2:	b2ed      	uxtb	r5, r5
 801f7a4:	b2e4      	uxtb	r4, r4
 801f7a6:	fb16 f604 	smulbb	r6, r6, r4
 801f7aa:	fb15 f504 	smulbb	r5, r5, r4
 801f7ae:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f7b2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f7b6:	fb1a fa04 	smulbb	sl, sl, r4
 801f7ba:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f7be:	fa1f fc8c 	uxth.w	ip, ip
 801f7c2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f7c6:	fa5f f888 	uxtb.w	r8, r8
 801f7ca:	fb06 a607 	mla	r6, r6, r7, sl
 801f7ce:	f10c 0401 	add.w	r4, ip, #1
 801f7d2:	fb08 5507 	mla	r5, r8, r7, r5
 801f7d6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f7da:	b2ad      	uxth	r5, r5
 801f7dc:	b2b6      	uxth	r6, r6
 801f7de:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f7e2:	f105 0a01 	add.w	sl, r5, #1
 801f7e6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f7ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f7ee:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f7f2:	f106 0a01 	add.w	sl, r6, #1
 801f7f6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f7fa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f7fe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f802:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f806:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f80a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f80c:	f109 0901 	add.w	r9, r9, #1
 801f810:	4421      	add	r1, r4
 801f812:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f814:	4422      	add	r2, r4
 801f816:	e79c      	b.n	801f752 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f818:	b007      	add	sp, #28
 801f81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f81e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f81e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f822:	b085      	sub	sp, #20
 801f824:	468b      	mov	fp, r1
 801f826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f82a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f82c:	9203      	str	r2, [sp, #12]
 801f82e:	6861      	ldr	r1, [r4, #4]
 801f830:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f834:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f838:	fb01 2000 	mla	r0, r1, r0, r2
 801f83c:	6822      	ldr	r2, [r4, #0]
 801f83e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f842:	f8d8 2000 	ldr.w	r2, [r8]
 801f846:	9200      	str	r2, [sp, #0]
 801f848:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f84c:	9201      	str	r2, [sp, #4]
 801f84e:	f1bb 0f00 	cmp.w	fp, #0
 801f852:	dc03      	bgt.n	801f85c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f854:	9a03      	ldr	r2, [sp, #12]
 801f856:	2a00      	cmp	r2, #0
 801f858:	f340 8146 	ble.w	801fae8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f85c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f85e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f862:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f866:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f868:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f86c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f870:	2b00      	cmp	r3, #0
 801f872:	dd0e      	ble.n	801f892 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f874:	140c      	asrs	r4, r1, #16
 801f876:	d405      	bmi.n	801f884 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f878:	42bc      	cmp	r4, r7
 801f87a:	da03      	bge.n	801f884 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f87c:	1414      	asrs	r4, r2, #16
 801f87e:	d401      	bmi.n	801f884 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f880:	42b4      	cmp	r4, r6
 801f882:	db07      	blt.n	801f894 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f884:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f886:	3b01      	subs	r3, #1
 801f888:	3002      	adds	r0, #2
 801f88a:	4421      	add	r1, r4
 801f88c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f88e:	4422      	add	r2, r4
 801f890:	e7ee      	b.n	801f870 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f892:	d017      	beq.n	801f8c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f894:	1e5c      	subs	r4, r3, #1
 801f896:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f898:	fb05 1504 	mla	r5, r5, r4, r1
 801f89c:	142d      	asrs	r5, r5, #16
 801f89e:	d409      	bmi.n	801f8b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f8a0:	42bd      	cmp	r5, r7
 801f8a2:	da07      	bge.n	801f8b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f8a4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f8a6:	fb05 2404 	mla	r4, r5, r4, r2
 801f8aa:	1424      	asrs	r4, r4, #16
 801f8ac:	d402      	bmi.n	801f8b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f8ae:	42b4      	cmp	r4, r6
 801f8b0:	f2c0 80b3 	blt.w	801fa1a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f8b4:	2600      	movs	r6, #0
 801f8b6:	199c      	adds	r4, r3, r6
 801f8b8:	2c00      	cmp	r4, #0
 801f8ba:	dc3e      	bgt.n	801f93a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f8bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f8c4:	f1bb 0f00 	cmp.w	fp, #0
 801f8c8:	f340 810e 	ble.w	801fae8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f8cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f8d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f8d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f8d6:	f1bb 0b01 	subs.w	fp, fp, #1
 801f8da:	eeb0 6a62 	vmov.f32	s12, s5
 801f8de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f8e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f8e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f8ea:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f8ee:	eeb0 6a43 	vmov.f32	s12, s6
 801f8f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f8f6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f8fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f8fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f902:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f906:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f90a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f90e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f912:	ee12 2a90 	vmov	r2, s5
 801f916:	eef0 2a47 	vmov.f32	s5, s14
 801f91a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f91e:	ee13 2a10 	vmov	r2, s6
 801f922:	9311      	str	r3, [sp, #68]	; 0x44
 801f924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f926:	eeb0 3a67 	vmov.f32	s6, s15
 801f92a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f92e:	9a03      	ldr	r2, [sp, #12]
 801f930:	9312      	str	r3, [sp, #72]	; 0x48
 801f932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f934:	bf08      	it	eq
 801f936:	4613      	moveq	r3, r2
 801f938:	e789      	b.n	801f84e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f93a:	140f      	asrs	r7, r1, #16
 801f93c:	d418      	bmi.n	801f970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f93e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f942:	42bd      	cmp	r5, r7
 801f944:	dd14      	ble.n	801f970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f946:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f94a:	d411      	bmi.n	801f970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f94c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f950:	4564      	cmp	r4, ip
 801f952:	dd0d      	ble.n	801f970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f954:	b22d      	sxth	r5, r5
 801f956:	9c01      	ldr	r4, [sp, #4]
 801f958:	fb0c 7505 	mla	r5, ip, r5, r7
 801f95c:	5d64      	ldrb	r4, [r4, r5]
 801f95e:	2cff      	cmp	r4, #255	; 0xff
 801f960:	d10c      	bne.n	801f97c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f962:	9c00      	ldr	r4, [sp, #0]
 801f964:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f968:	f06f 0401 	mvn.w	r4, #1
 801f96c:	4374      	muls	r4, r6
 801f96e:	5305      	strh	r5, [r0, r4]
 801f970:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f972:	3e01      	subs	r6, #1
 801f974:	4421      	add	r1, r4
 801f976:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f978:	4422      	add	r2, r4
 801f97a:	e79c      	b.n	801f8b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f97c:	2c00      	cmp	r4, #0
 801f97e:	d0f7      	beq.n	801f970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f980:	9f00      	ldr	r7, [sp, #0]
 801f982:	fa1f fc84 	uxth.w	ip, r4
 801f986:	43e4      	mvns	r4, r4
 801f988:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f98c:	f06f 0501 	mvn.w	r5, #1
 801f990:	b2e4      	uxtb	r4, r4
 801f992:	4375      	muls	r5, r6
 801f994:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f998:	9502      	str	r5, [sp, #8]
 801f99a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f99e:	5b45      	ldrh	r5, [r0, r5]
 801f9a0:	122f      	asrs	r7, r5, #8
 801f9a2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f9a6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f9aa:	00ed      	lsls	r5, r5, #3
 801f9ac:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f9b0:	fb17 f704 	smulbb	r7, r7, r4
 801f9b4:	b2ed      	uxtb	r5, r5
 801f9b6:	fb1a fa04 	smulbb	sl, sl, r4
 801f9ba:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f9be:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f9c2:	fb15 f504 	smulbb	r5, r5, r4
 801f9c6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f9ca:	fa1f fe8e 	uxth.w	lr, lr
 801f9ce:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f9d2:	fa5f f989 	uxtb.w	r9, r9
 801f9d6:	fb07 a70c 	mla	r7, r7, ip, sl
 801f9da:	f10e 0401 	add.w	r4, lr, #1
 801f9de:	fb09 550c 	mla	r5, r9, ip, r5
 801f9e2:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f9e6:	9c02      	ldr	r4, [sp, #8]
 801f9e8:	b2ad      	uxth	r5, r5
 801f9ea:	b2bf      	uxth	r7, r7
 801f9ec:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f9f0:	f105 0a01 	add.w	sl, r5, #1
 801f9f4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f9f8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f9fc:	ea4a 0e0e 	orr.w	lr, sl, lr
 801fa00:	f107 0a01 	add.w	sl, r7, #1
 801fa04:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fa08:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fa0c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fa10:	ea4e 0e0a 	orr.w	lr, lr, sl
 801fa14:	f820 e004 	strh.w	lr, [r0, r4]
 801fa18:	e7aa      	b.n	801f970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fa1a:	f04f 0900 	mov.w	r9, #0
 801fa1e:	eba3 0409 	sub.w	r4, r3, r9
 801fa22:	2c00      	cmp	r4, #0
 801fa24:	f77f af4a 	ble.w	801f8bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fa28:	1414      	asrs	r4, r2, #16
 801fa2a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801fa2e:	140d      	asrs	r5, r1, #16
 801fa30:	fb06 5504 	mla	r5, r6, r4, r5
 801fa34:	9c01      	ldr	r4, [sp, #4]
 801fa36:	5d64      	ldrb	r4, [r4, r5]
 801fa38:	2cff      	cmp	r4, #255	; 0xff
 801fa3a:	d10b      	bne.n	801fa54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801fa3c:	9c00      	ldr	r4, [sp, #0]
 801fa3e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801fa42:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801fa46:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fa48:	f109 0901 	add.w	r9, r9, #1
 801fa4c:	4421      	add	r1, r4
 801fa4e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fa50:	4422      	add	r2, r4
 801fa52:	e7e4      	b.n	801fa1e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801fa54:	2c00      	cmp	r4, #0
 801fa56:	d0f6      	beq.n	801fa46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801fa58:	9e00      	ldr	r6, [sp, #0]
 801fa5a:	b2a7      	uxth	r7, r4
 801fa5c:	43e4      	mvns	r4, r4
 801fa5e:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801fa62:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801fa66:	b2e4      	uxtb	r4, r4
 801fa68:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fa6c:	122e      	asrs	r6, r5, #8
 801fa6e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fa72:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fa76:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fa7a:	00ed      	lsls	r5, r5, #3
 801fa7c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801fa80:	fb16 f604 	smulbb	r6, r6, r4
 801fa84:	b2ed      	uxtb	r5, r5
 801fa86:	fb1a fa04 	smulbb	sl, sl, r4
 801fa8a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801fa8e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801fa92:	fb15 f504 	smulbb	r5, r5, r4
 801fa96:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fa9a:	fa1f fc8c 	uxth.w	ip, ip
 801fa9e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801faa2:	fa5f fe8e 	uxtb.w	lr, lr
 801faa6:	fb06 a607 	mla	r6, r6, r7, sl
 801faaa:	f10c 0401 	add.w	r4, ip, #1
 801faae:	fb0e 5507 	mla	r5, lr, r7, r5
 801fab2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801fab6:	b2ad      	uxth	r5, r5
 801fab8:	b2b6      	uxth	r6, r6
 801faba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fabe:	f105 0a01 	add.w	sl, r5, #1
 801fac2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fac6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801faca:	ea4a 0c0c 	orr.w	ip, sl, ip
 801face:	f106 0a01 	add.w	sl, r6, #1
 801fad2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fad6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fada:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fade:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fae2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801fae6:	e7ae      	b.n	801fa46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801fae8:	b005      	add	sp, #20
 801faea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801faee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801faee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faf2:	b085      	sub	sp, #20
 801faf4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801faf6:	9203      	str	r2, [sp, #12]
 801faf8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801fafc:	9100      	str	r1, [sp, #0]
 801fafe:	9201      	str	r2, [sp, #4]
 801fb00:	6841      	ldr	r1, [r0, #4]
 801fb02:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801fb06:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fb0a:	fb01 2404 	mla	r4, r1, r4, r2
 801fb0e:	6802      	ldr	r2, [r0, #0]
 801fb10:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fb14:	f8de 2000 	ldr.w	r2, [lr]
 801fb18:	9202      	str	r2, [sp, #8]
 801fb1a:	9a01      	ldr	r2, [sp, #4]
 801fb1c:	43d6      	mvns	r6, r2
 801fb1e:	b2f6      	uxtb	r6, r6
 801fb20:	9a00      	ldr	r2, [sp, #0]
 801fb22:	2a00      	cmp	r2, #0
 801fb24:	dc03      	bgt.n	801fb2e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801fb26:	9a03      	ldr	r2, [sp, #12]
 801fb28:	2a00      	cmp	r2, #0
 801fb2a:	f340 8124 	ble.w	801fd76 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fb2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fb30:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801fb34:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fb38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fb3a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801fb3e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	dd0e      	ble.n	801fb64 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fb46:	1408      	asrs	r0, r1, #16
 801fb48:	d405      	bmi.n	801fb56 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fb4a:	4560      	cmp	r0, ip
 801fb4c:	da03      	bge.n	801fb56 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fb4e:	1410      	asrs	r0, r2, #16
 801fb50:	d401      	bmi.n	801fb56 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fb52:	42b8      	cmp	r0, r7
 801fb54:	db07      	blt.n	801fb66 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fb56:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fb58:	3b01      	subs	r3, #1
 801fb5a:	3402      	adds	r4, #2
 801fb5c:	4401      	add	r1, r0
 801fb5e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fb60:	4402      	add	r2, r0
 801fb62:	e7ee      	b.n	801fb42 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801fb64:	d06e      	beq.n	801fc44 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801fb66:	1e58      	subs	r0, r3, #1
 801fb68:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fb6a:	fb05 1500 	mla	r5, r5, r0, r1
 801fb6e:	142d      	asrs	r5, r5, #16
 801fb70:	d45c      	bmi.n	801fc2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fb72:	4565      	cmp	r5, ip
 801fb74:	da5a      	bge.n	801fc2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fb76:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fb78:	fb05 2000 	mla	r0, r5, r0, r2
 801fb7c:	1400      	asrs	r0, r0, #16
 801fb7e:	d455      	bmi.n	801fc2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fb80:	42b8      	cmp	r0, r7
 801fb82:	da53      	bge.n	801fc2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fb84:	4699      	mov	r9, r3
 801fb86:	46a2      	mov	sl, r4
 801fb88:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801fb8c:	f1b9 0f00 	cmp.w	r9, #0
 801fb90:	dd54      	ble.n	801fc3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fb92:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fb96:	140d      	asrs	r5, r1, #16
 801fb98:	1410      	asrs	r0, r2, #16
 801fb9a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801fb9e:	fb07 5000 	mla	r0, r7, r0, r5
 801fba2:	9d02      	ldr	r5, [sp, #8]
 801fba4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801fba8:	f8ba 5000 	ldrh.w	r5, [sl]
 801fbac:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801fbb0:	122f      	asrs	r7, r5, #8
 801fbb2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801fbb6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fbba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fbbe:	00ed      	lsls	r5, r5, #3
 801fbc0:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801fbc4:	fb17 f706 	smulbb	r7, r7, r6
 801fbc8:	b2ed      	uxtb	r5, r5
 801fbca:	fb18 f806 	smulbb	r8, r8, r6
 801fbce:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801fbd2:	10c7      	asrs	r7, r0, #3
 801fbd4:	fb15 f506 	smulbb	r5, r5, r6
 801fbd8:	00c0      	lsls	r0, r0, #3
 801fbda:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fbde:	fa1f fc8c 	uxth.w	ip, ip
 801fbe2:	b2c0      	uxtb	r0, r0
 801fbe4:	fb07 870b 	mla	r7, r7, fp, r8
 801fbe8:	fb00 500b 	mla	r0, r0, fp, r5
 801fbec:	f10c 0501 	add.w	r5, ip, #1
 801fbf0:	b2bf      	uxth	r7, r7
 801fbf2:	b280      	uxth	r0, r0
 801fbf4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fbf8:	f107 0801 	add.w	r8, r7, #1
 801fbfc:	1c45      	adds	r5, r0, #1
 801fbfe:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801fc02:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fc06:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fc0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fc0c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801fc10:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fc14:	4401      	add	r1, r0
 801fc16:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801fc1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fc1c:	ea45 0c0c 	orr.w	ip, r5, ip
 801fc20:	4402      	add	r2, r0
 801fc22:	ea4c 0c08 	orr.w	ip, ip, r8
 801fc26:	f82a cb02 	strh.w	ip, [sl], #2
 801fc2a:	e7af      	b.n	801fb8c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fc2c:	f04f 0800 	mov.w	r8, #0
 801fc30:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801fc34:	eb03 0008 	add.w	r0, r3, r8
 801fc38:	2800      	cmp	r0, #0
 801fc3a:	dc41      	bgt.n	801fcc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801fc3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc40:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fc44:	9b00      	ldr	r3, [sp, #0]
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	f340 8095 	ble.w	801fd76 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fc4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fc50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc52:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc56:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc5a:	eef0 6a62 	vmov.f32	s13, s5
 801fc5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fc62:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc6a:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801fc6e:	eef0 6a43 	vmov.f32	s13, s6
 801fc72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc76:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801fc7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc82:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc92:	ee12 2a90 	vmov	r2, s5
 801fc96:	eef0 2a47 	vmov.f32	s5, s14
 801fc9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc9e:	ee13 2a10 	vmov	r2, s6
 801fca2:	9311      	str	r3, [sp, #68]	; 0x44
 801fca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fca6:	eeb0 3a67 	vmov.f32	s6, s15
 801fcaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcae:	9312      	str	r3, [sp, #72]	; 0x48
 801fcb0:	9b00      	ldr	r3, [sp, #0]
 801fcb2:	9a03      	ldr	r2, [sp, #12]
 801fcb4:	3b01      	subs	r3, #1
 801fcb6:	9300      	str	r3, [sp, #0]
 801fcb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcba:	bf08      	it	eq
 801fcbc:	4613      	moveq	r3, r2
 801fcbe:	e72f      	b.n	801fb20 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fcc0:	140f      	asrs	r7, r1, #16
 801fcc2:	d451      	bmi.n	801fd68 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fcc4:	f8de 5008 	ldr.w	r5, [lr, #8]
 801fcc8:	42bd      	cmp	r5, r7
 801fcca:	dd4d      	ble.n	801fd68 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fccc:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fcd0:	d44a      	bmi.n	801fd68 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fcd2:	f8de 000c 	ldr.w	r0, [lr, #12]
 801fcd6:	4560      	cmp	r0, ip
 801fcd8:	dd46      	ble.n	801fd68 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fcda:	b22d      	sxth	r5, r5
 801fcdc:	9802      	ldr	r0, [sp, #8]
 801fcde:	fb0c 7505 	mla	r5, ip, r5, r7
 801fce2:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801fce6:	f06f 0501 	mvn.w	r5, #1
 801fcea:	fb05 fb08 	mul.w	fp, r5, r8
 801fcee:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801fcf2:	f834 500b 	ldrh.w	r5, [r4, fp]
 801fcf6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fcfa:	122f      	asrs	r7, r5, #8
 801fcfc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801fd00:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fd04:	00ed      	lsls	r5, r5, #3
 801fd06:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801fd0a:	fb17 f706 	smulbb	r7, r7, r6
 801fd0e:	b2ed      	uxtb	r5, r5
 801fd10:	fb19 f906 	smulbb	r9, r9, r6
 801fd14:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801fd18:	10c7      	asrs	r7, r0, #3
 801fd1a:	fb15 f506 	smulbb	r5, r5, r6
 801fd1e:	00c0      	lsls	r0, r0, #3
 801fd20:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fd24:	fa1f fc8c 	uxth.w	ip, ip
 801fd28:	b2c0      	uxtb	r0, r0
 801fd2a:	fb07 970a 	mla	r7, r7, sl, r9
 801fd2e:	fb00 500a 	mla	r0, r0, sl, r5
 801fd32:	f10c 0501 	add.w	r5, ip, #1
 801fd36:	b2bf      	uxth	r7, r7
 801fd38:	b280      	uxth	r0, r0
 801fd3a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fd3e:	f107 0901 	add.w	r9, r7, #1
 801fd42:	1c45      	adds	r5, r0, #1
 801fd44:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801fd48:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fd4c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fd50:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801fd54:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fd58:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fd5c:	ea45 0c0c 	orr.w	ip, r5, ip
 801fd60:	ea4c 0c09 	orr.w	ip, ip, r9
 801fd64:	f824 c00b 	strh.w	ip, [r4, fp]
 801fd68:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fd6a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801fd6e:	4401      	add	r1, r0
 801fd70:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fd72:	4402      	add	r2, r0
 801fd74:	e75e      	b.n	801fc34 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801fd76:	b005      	add	sp, #20
 801fd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd7c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd80:	b085      	sub	sp, #20
 801fd82:	4693      	mov	fp, r2
 801fd84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fd88:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fd8a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801fd8c:	6870      	ldr	r0, [r6, #4]
 801fd8e:	9101      	str	r1, [sp, #4]
 801fd90:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fd94:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801fd98:	fb00 2404 	mla	r4, r0, r4, r2
 801fd9c:	6832      	ldr	r2, [r6, #0]
 801fd9e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fda2:	682a      	ldr	r2, [r5, #0]
 801fda4:	9202      	str	r2, [sp, #8]
 801fda6:	9a01      	ldr	r2, [sp, #4]
 801fda8:	2a00      	cmp	r2, #0
 801fdaa:	dc03      	bgt.n	801fdb4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fdac:	f1bb 0f00 	cmp.w	fp, #0
 801fdb0:	f340 809a 	ble.w	801fee8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801fdb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fdb6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801fdba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fdbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fdc0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801fdc4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fdc8:	2b00      	cmp	r3, #0
 801fdca:	dd0c      	ble.n	801fde6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801fdcc:	1406      	asrs	r6, r0, #16
 801fdce:	d405      	bmi.n	801fddc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fdd0:	454e      	cmp	r6, r9
 801fdd2:	da03      	bge.n	801fddc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fdd4:	1416      	asrs	r6, r2, #16
 801fdd6:	d401      	bmi.n	801fddc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fdd8:	4546      	cmp	r6, r8
 801fdda:	db05      	blt.n	801fde8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fddc:	4470      	add	r0, lr
 801fdde:	4462      	add	r2, ip
 801fde0:	3b01      	subs	r3, #1
 801fde2:	3402      	adds	r4, #2
 801fde4:	e7f0      	b.n	801fdc8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fde6:	d00f      	beq.n	801fe08 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fde8:	1e5e      	subs	r6, r3, #1
 801fdea:	fb0e 0706 	mla	r7, lr, r6, r0
 801fdee:	143f      	asrs	r7, r7, #16
 801fdf0:	d541      	bpl.n	801fe76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801fdf2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801fdf6:	4698      	mov	r8, r3
 801fdf8:	9603      	str	r6, [sp, #12]
 801fdfa:	f1b8 0f00 	cmp.w	r8, #0
 801fdfe:	dc56      	bgt.n	801feae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801fe00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe04:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fe08:	9b01      	ldr	r3, [sp, #4]
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	dd6c      	ble.n	801fee8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801fe0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe18:	eeb0 6a62 	vmov.f32	s12, s5
 801fe1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fe20:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe28:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fe2c:	eeb0 6a43 	vmov.f32	s12, s6
 801fe30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe34:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fe38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe40:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe50:	ee12 2a90 	vmov	r2, s5
 801fe54:	eef0 2a47 	vmov.f32	s5, s14
 801fe58:	fb92 fef3 	sdiv	lr, r2, r3
 801fe5c:	ee13 2a10 	vmov	r2, s6
 801fe60:	eeb0 3a67 	vmov.f32	s6, s15
 801fe64:	fb92 fcf3 	sdiv	ip, r2, r3
 801fe68:	9b01      	ldr	r3, [sp, #4]
 801fe6a:	3b01      	subs	r3, #1
 801fe6c:	9301      	str	r3, [sp, #4]
 801fe6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe70:	bf08      	it	eq
 801fe72:	465b      	moveq	r3, fp
 801fe74:	e797      	b.n	801fda6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fe76:	454f      	cmp	r7, r9
 801fe78:	dabb      	bge.n	801fdf2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fe7a:	fb0c 2606 	mla	r6, ip, r6, r2
 801fe7e:	1436      	asrs	r6, r6, #16
 801fe80:	d4b7      	bmi.n	801fdf2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fe82:	4546      	cmp	r6, r8
 801fe84:	dab5      	bge.n	801fdf2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fe86:	461e      	mov	r6, r3
 801fe88:	46a0      	mov	r8, r4
 801fe8a:	2e00      	cmp	r6, #0
 801fe8c:	ddb8      	ble.n	801fe00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fe8e:	1417      	asrs	r7, r2, #16
 801fe90:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801fe94:	ea4f 4920 	mov.w	r9, r0, asr #16
 801fe98:	9902      	ldr	r1, [sp, #8]
 801fe9a:	4470      	add	r0, lr
 801fe9c:	4462      	add	r2, ip
 801fe9e:	fb0a 9707 	mla	r7, sl, r7, r9
 801fea2:	3e01      	subs	r6, #1
 801fea4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801fea8:	f828 7b02 	strh.w	r7, [r8], #2
 801feac:	e7ed      	b.n	801fe8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801feae:	ea5f 4920 	movs.w	r9, r0, asr #16
 801feb2:	d414      	bmi.n	801fede <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801feb4:	68ae      	ldr	r6, [r5, #8]
 801feb6:	454e      	cmp	r6, r9
 801feb8:	dd11      	ble.n	801fede <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801feba:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801febe:	d40e      	bmi.n	801fede <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801fec0:	68ef      	ldr	r7, [r5, #12]
 801fec2:	4557      	cmp	r7, sl
 801fec4:	dd0b      	ble.n	801fede <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801fec6:	b236      	sxth	r6, r6
 801fec8:	f06f 0101 	mvn.w	r1, #1
 801fecc:	9f02      	ldr	r7, [sp, #8]
 801fece:	fb0a 9606 	mla	r6, sl, r6, r9
 801fed2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801fed6:	fb01 f608 	mul.w	r6, r1, r8
 801feda:	9903      	ldr	r1, [sp, #12]
 801fedc:	538f      	strh	r7, [r1, r6]
 801fede:	4470      	add	r0, lr
 801fee0:	4462      	add	r2, ip
 801fee2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801fee6:	e788      	b.n	801fdfa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fee8:	b005      	add	sp, #20
 801feea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801feee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801feee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fef2:	b087      	sub	sp, #28
 801fef4:	468b      	mov	fp, r1
 801fef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fefa:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fefc:	9203      	str	r2, [sp, #12]
 801fefe:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ff02:	6841      	ldr	r1, [r0, #4]
 801ff04:	9204      	str	r2, [sp, #16]
 801ff06:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801ff0a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801ff0e:	fb01 2505 	mla	r5, r1, r5, r2
 801ff12:	6802      	ldr	r2, [r0, #0]
 801ff14:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801ff18:	f8d9 2000 	ldr.w	r2, [r9]
 801ff1c:	9201      	str	r2, [sp, #4]
 801ff1e:	f1bb 0f00 	cmp.w	fp, #0
 801ff22:	dc03      	bgt.n	801ff2c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ff24:	9a03      	ldr	r2, [sp, #12]
 801ff26:	2a00      	cmp	r2, #0
 801ff28:	f340 8158 	ble.w	80201dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801ff2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ff2e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ff32:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ff36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ff38:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ff3c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ff40:	2b00      	cmp	r3, #0
 801ff42:	dd0e      	ble.n	801ff62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ff44:	1402      	asrs	r2, r0, #16
 801ff46:	d405      	bmi.n	801ff54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ff48:	42ba      	cmp	r2, r7
 801ff4a:	da03      	bge.n	801ff54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ff4c:	140a      	asrs	r2, r1, #16
 801ff4e:	d401      	bmi.n	801ff54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ff50:	42b2      	cmp	r2, r6
 801ff52:	db07      	blt.n	801ff64 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ff54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ff56:	3b01      	subs	r3, #1
 801ff58:	3502      	adds	r5, #2
 801ff5a:	4410      	add	r0, r2
 801ff5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ff5e:	4411      	add	r1, r2
 801ff60:	e7ee      	b.n	801ff40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ff62:	d017      	beq.n	801ff94 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ff64:	1e5a      	subs	r2, r3, #1
 801ff66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ff68:	fb04 0402 	mla	r4, r4, r2, r0
 801ff6c:	1424      	asrs	r4, r4, #16
 801ff6e:	d409      	bmi.n	801ff84 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ff70:	42bc      	cmp	r4, r7
 801ff72:	da07      	bge.n	801ff84 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ff74:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ff76:	fb04 1202 	mla	r2, r4, r2, r1
 801ff7a:	1412      	asrs	r2, r2, #16
 801ff7c:	d402      	bmi.n	801ff84 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ff7e:	42b2      	cmp	r2, r6
 801ff80:	f2c0 80bf 	blt.w	8020102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ff84:	2700      	movs	r7, #0
 801ff86:	19da      	adds	r2, r3, r7
 801ff88:	2a00      	cmp	r2, #0
 801ff8a:	dc3e      	bgt.n	802000a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ff8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff90:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801ff94:	f1bb 0f00 	cmp.w	fp, #0
 801ff98:	f340 8120 	ble.w	80201dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801ff9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ffa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ffa2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ffa6:	f1bb 0b01 	subs.w	fp, fp, #1
 801ffaa:	eeb0 6a62 	vmov.f32	s12, s5
 801ffae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ffb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ffb6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ffba:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ffbe:	eeb0 6a43 	vmov.f32	s12, s6
 801ffc2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ffc6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ffca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ffce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ffd2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ffd6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ffda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ffde:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ffe2:	ee12 2a90 	vmov	r2, s5
 801ffe6:	eef0 2a47 	vmov.f32	s5, s14
 801ffea:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffee:	ee13 2a10 	vmov	r2, s6
 801fff2:	9313      	str	r3, [sp, #76]	; 0x4c
 801fff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fff6:	eeb0 3a67 	vmov.f32	s6, s15
 801fffa:	fb92 f3f3 	sdiv	r3, r2, r3
 801fffe:	9a03      	ldr	r2, [sp, #12]
 8020000:	9314      	str	r3, [sp, #80]	; 0x50
 8020002:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020004:	bf08      	it	eq
 8020006:	4613      	moveq	r3, r2
 8020008:	e789      	b.n	801ff1e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 802000a:	1406      	asrs	r6, r0, #16
 802000c:	d42d      	bmi.n	802006a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802000e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8020012:	42b4      	cmp	r4, r6
 8020014:	dd29      	ble.n	802006a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020016:	ea5f 4c21 	movs.w	ip, r1, asr #16
 802001a:	d426      	bmi.n	802006a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802001c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020020:	4562      	cmp	r2, ip
 8020022:	dd22      	ble.n	802006a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020024:	b224      	sxth	r4, r4
 8020026:	9a01      	ldr	r2, [sp, #4]
 8020028:	fb0c 6404 	mla	r4, ip, r4, r6
 802002c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8020030:	0e22      	lsrs	r2, r4, #24
 8020032:	d01a      	beq.n	802006a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020034:	9e04      	ldr	r6, [sp, #16]
 8020036:	4372      	muls	r2, r6
 8020038:	1c56      	adds	r6, r2, #1
 802003a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802003e:	0a26      	lsrs	r6, r4, #8
 8020040:	1212      	asrs	r2, r2, #8
 8020042:	9605      	str	r6, [sp, #20]
 8020044:	2aff      	cmp	r2, #255	; 0xff
 8020046:	d116      	bne.n	8020076 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020048:	f06f 0201 	mvn.w	r2, #1
 802004c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020050:	fb02 fc07 	mul.w	ip, r2, r7
 8020054:	0962      	lsrs	r2, r4, #5
 8020056:	f026 0607 	bic.w	r6, r6, #7
 802005a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802005e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020062:	4316      	orrs	r6, r2
 8020064:	4326      	orrs	r6, r4
 8020066:	f825 600c 	strh.w	r6, [r5, ip]
 802006a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802006c:	3f01      	subs	r7, #1
 802006e:	4410      	add	r0, r2
 8020070:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020072:	4411      	add	r1, r2
 8020074:	e787      	b.n	801ff86 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020076:	f06f 0601 	mvn.w	r6, #1
 802007a:	fa1f fa82 	uxth.w	sl, r2
 802007e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8020082:	43d2      	mvns	r2, r2
 8020084:	437e      	muls	r6, r7
 8020086:	b2e4      	uxtb	r4, r4
 8020088:	fb1c fc0a 	smulbb	ip, ip, sl
 802008c:	b2d2      	uxtb	r2, r2
 802008e:	f835 8006 	ldrh.w	r8, [r5, r6]
 8020092:	fb14 f40a 	smulbb	r4, r4, sl
 8020096:	9602      	str	r6, [sp, #8]
 8020098:	ea4f 2e28 	mov.w	lr, r8, asr #8
 802009c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80200a0:	fb16 f60a 	smulbb	r6, r6, sl
 80200a4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80200a8:	fb0e ce02 	mla	lr, lr, r2, ip
 80200ac:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80200b0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80200b4:	fa1f fe8e 	uxth.w	lr, lr
 80200b8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80200bc:	fa5f f888 	uxtb.w	r8, r8
 80200c0:	fb0c 6c02 	mla	ip, ip, r2, r6
 80200c4:	fb08 4402 	mla	r4, r8, r2, r4
 80200c8:	f10e 0201 	add.w	r2, lr, #1
 80200cc:	fa1f fc8c 	uxth.w	ip, ip
 80200d0:	b2a4      	uxth	r4, r4
 80200d2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80200d6:	9a02      	ldr	r2, [sp, #8]
 80200d8:	1c66      	adds	r6, r4, #1
 80200da:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80200de:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80200e2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80200e6:	ea46 0e0e 	orr.w	lr, r6, lr
 80200ea:	f10c 0601 	add.w	r6, ip, #1
 80200ee:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80200f2:	0976      	lsrs	r6, r6, #5
 80200f4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80200f8:	ea4e 0e06 	orr.w	lr, lr, r6
 80200fc:	f825 e002 	strh.w	lr, [r5, r2]
 8020100:	e7b3      	b.n	802006a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020102:	f04f 0800 	mov.w	r8, #0
 8020106:	eba3 0208 	sub.w	r2, r3, r8
 802010a:	2a00      	cmp	r2, #0
 802010c:	f77f af3e 	ble.w	801ff8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020110:	1404      	asrs	r4, r0, #16
 8020112:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8020116:	140a      	asrs	r2, r1, #16
 8020118:	fb06 4202 	mla	r2, r6, r2, r4
 802011c:	9c01      	ldr	r4, [sp, #4]
 802011e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8020122:	0e22      	lsrs	r2, r4, #24
 8020124:	d015      	beq.n	8020152 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020126:	9e04      	ldr	r6, [sp, #16]
 8020128:	4372      	muls	r2, r6
 802012a:	1c56      	adds	r6, r2, #1
 802012c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020130:	0a26      	lsrs	r6, r4, #8
 8020132:	1212      	asrs	r2, r2, #8
 8020134:	2aff      	cmp	r2, #255	; 0xff
 8020136:	d113      	bne.n	8020160 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020138:	0962      	lsrs	r2, r4, #5
 802013a:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802013e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020142:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020146:	f026 0607 	bic.w	r6, r6, #7
 802014a:	4316      	orrs	r6, r2
 802014c:	4326      	orrs	r6, r4
 802014e:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8020152:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020154:	f108 0801 	add.w	r8, r8, #1
 8020158:	4410      	add	r0, r2
 802015a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802015c:	4411      	add	r1, r2
 802015e:	e7d2      	b.n	8020106 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020160:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8020164:	fa1f fa82 	uxth.w	sl, r2
 8020168:	f3c4 4707 	ubfx	r7, r4, #16, #8
 802016c:	43d2      	mvns	r2, r2
 802016e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020172:	fb17 f70a 	smulbb	r7, r7, sl
 8020176:	b2d2      	uxtb	r2, r2
 8020178:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802017c:	b2e4      	uxtb	r4, r4
 802017e:	b2f6      	uxtb	r6, r6
 8020180:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020184:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020188:	fb14 f40a 	smulbb	r4, r4, sl
 802018c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020190:	fa1f fc8c 	uxth.w	ip, ip
 8020194:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020198:	fb16 f60a 	smulbb	r6, r6, sl
 802019c:	fa5f fe8e 	uxtb.w	lr, lr
 80201a0:	fb0e 4402 	mla	r4, lr, r2, r4
 80201a4:	fb07 6702 	mla	r7, r7, r2, r6
 80201a8:	f10c 0201 	add.w	r2, ip, #1
 80201ac:	b2a4      	uxth	r4, r4
 80201ae:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80201b2:	1c66      	adds	r6, r4, #1
 80201b4:	b2bf      	uxth	r7, r7
 80201b6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80201ba:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80201be:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80201c2:	ea46 0c0c 	orr.w	ip, r6, ip
 80201c6:	1c7e      	adds	r6, r7, #1
 80201c8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80201cc:	0976      	lsrs	r6, r6, #5
 80201ce:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80201d2:	ea4c 0c06 	orr.w	ip, ip, r6
 80201d6:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 80201da:	e7ba      	b.n	8020152 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80201dc:	b007      	add	sp, #28
 80201de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080201e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201e8:	b085      	sub	sp, #20
 80201ea:	468b      	mov	fp, r1
 80201ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80201f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80201f2:	9203      	str	r2, [sp, #12]
 80201f4:	6841      	ldr	r1, [r0, #4]
 80201f6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80201fa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80201fe:	fb01 2404 	mla	r4, r1, r4, r2
 8020202:	6802      	ldr	r2, [r0, #0]
 8020204:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020208:	f8d8 2000 	ldr.w	r2, [r8]
 802020c:	9201      	str	r2, [sp, #4]
 802020e:	f1bb 0f00 	cmp.w	fp, #0
 8020212:	dc03      	bgt.n	802021c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020214:	9a03      	ldr	r2, [sp, #12]
 8020216:	2a00      	cmp	r2, #0
 8020218:	f340 814f 	ble.w	80204ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802021c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802021e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020222:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020226:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020228:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 802022c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020230:	2b00      	cmp	r3, #0
 8020232:	dd0e      	ble.n	8020252 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020234:	1408      	asrs	r0, r1, #16
 8020236:	d405      	bmi.n	8020244 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020238:	42b8      	cmp	r0, r7
 802023a:	da03      	bge.n	8020244 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802023c:	1410      	asrs	r0, r2, #16
 802023e:	d401      	bmi.n	8020244 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020240:	42b0      	cmp	r0, r6
 8020242:	db07      	blt.n	8020254 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020244:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020246:	3b01      	subs	r3, #1
 8020248:	3402      	adds	r4, #2
 802024a:	4401      	add	r1, r0
 802024c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802024e:	4402      	add	r2, r0
 8020250:	e7ee      	b.n	8020230 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020252:	d017      	beq.n	8020284 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020254:	1e58      	subs	r0, r3, #1
 8020256:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020258:	fb05 1500 	mla	r5, r5, r0, r1
 802025c:	142d      	asrs	r5, r5, #16
 802025e:	d409      	bmi.n	8020274 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020260:	42bd      	cmp	r5, r7
 8020262:	da07      	bge.n	8020274 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020264:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020266:	fb05 2000 	mla	r0, r5, r0, r2
 802026a:	1400      	asrs	r0, r0, #16
 802026c:	d402      	bmi.n	8020274 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802026e:	42b0      	cmp	r0, r6
 8020270:	f2c0 80ba 	blt.w	80203e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020274:	2600      	movs	r6, #0
 8020276:	1998      	adds	r0, r3, r6
 8020278:	2800      	cmp	r0, #0
 802027a:	dc3e      	bgt.n	80202fa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802027c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020280:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020284:	f1bb 0f00 	cmp.w	fp, #0
 8020288:	f340 8117 	ble.w	80204ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802028c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020292:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020296:	f1bb 0b01 	subs.w	fp, fp, #1
 802029a:	eeb0 6a62 	vmov.f32	s12, s5
 802029e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80202a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80202a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80202aa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80202ae:	eeb0 6a43 	vmov.f32	s12, s6
 80202b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80202b6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80202ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202d2:	ee12 2a90 	vmov	r2, s5
 80202d6:	eef0 2a47 	vmov.f32	s5, s14
 80202da:	fb92 f3f3 	sdiv	r3, r2, r3
 80202de:	ee13 2a10 	vmov	r2, s6
 80202e2:	9311      	str	r3, [sp, #68]	; 0x44
 80202e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80202e6:	eeb0 3a67 	vmov.f32	s6, s15
 80202ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80202ee:	9a03      	ldr	r2, [sp, #12]
 80202f0:	9312      	str	r3, [sp, #72]	; 0x48
 80202f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80202f4:	bf08      	it	eq
 80202f6:	4613      	moveq	r3, r2
 80202f8:	e789      	b.n	802020e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80202fa:	140f      	asrs	r7, r1, #16
 80202fc:	d424      	bmi.n	8020348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80202fe:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8020302:	42bd      	cmp	r5, r7
 8020304:	dd20      	ble.n	8020348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020306:	ea5f 4c22 	movs.w	ip, r2, asr #16
 802030a:	d41d      	bmi.n	8020348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802030c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8020310:	4560      	cmp	r0, ip
 8020312:	dd19      	ble.n	8020348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020314:	b22d      	sxth	r5, r5
 8020316:	9801      	ldr	r0, [sp, #4]
 8020318:	fb0c 7505 	mla	r5, ip, r5, r7
 802031c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8020320:	0e07      	lsrs	r7, r0, #24
 8020322:	2fff      	cmp	r7, #255	; 0xff
 8020324:	d116      	bne.n	8020354 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020326:	f06f 0501 	mvn.w	r5, #1
 802032a:	fb05 f706 	mul.w	r7, r5, r6
 802032e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8020332:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020336:	0945      	lsrs	r5, r0, #5
 8020338:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802033c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020340:	ea4c 0505 	orr.w	r5, ip, r5
 8020344:	4305      	orrs	r5, r0
 8020346:	53e5      	strh	r5, [r4, r7]
 8020348:	9811      	ldr	r0, [sp, #68]	; 0x44
 802034a:	3e01      	subs	r6, #1
 802034c:	4401      	add	r1, r0
 802034e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020350:	4402      	add	r2, r0
 8020352:	e790      	b.n	8020276 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020354:	b2fd      	uxtb	r5, r7
 8020356:	2f00      	cmp	r7, #0
 8020358:	d0f6      	beq.n	8020348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802035a:	f06f 0701 	mvn.w	r7, #1
 802035e:	fa1f f985 	uxth.w	r9, r5
 8020362:	43ed      	mvns	r5, r5
 8020364:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020368:	4377      	muls	r7, r6
 802036a:	fb1a fa09 	smulbb	sl, sl, r9
 802036e:	b2ed      	uxtb	r5, r5
 8020370:	f834 e007 	ldrh.w	lr, [r4, r7]
 8020374:	9702      	str	r7, [sp, #8]
 8020376:	f3c0 4707 	ubfx	r7, r0, #16, #8
 802037a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802037e:	fb17 f709 	smulbb	r7, r7, r9
 8020382:	b2c0      	uxtb	r0, r0
 8020384:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020388:	fb10 f009 	smulbb	r0, r0, r9
 802038c:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020390:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020394:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020398:	fa1f fc8c 	uxth.w	ip, ip
 802039c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80203a0:	fa5f fe8e 	uxtb.w	lr, lr
 80203a4:	fb07 a705 	mla	r7, r7, r5, sl
 80203a8:	fb0e 0005 	mla	r0, lr, r5, r0
 80203ac:	f10c 0501 	add.w	r5, ip, #1
 80203b0:	b2bf      	uxth	r7, r7
 80203b2:	b280      	uxth	r0, r0
 80203b4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80203b8:	f100 0a01 	add.w	sl, r0, #1
 80203bc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80203c0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80203c4:	9802      	ldr	r0, [sp, #8]
 80203c6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80203ca:	ea4a 0c0c 	orr.w	ip, sl, ip
 80203ce:	f107 0a01 	add.w	sl, r7, #1
 80203d2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80203d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80203da:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80203de:	ea4c 0c0a 	orr.w	ip, ip, sl
 80203e2:	f824 c000 	strh.w	ip, [r4, r0]
 80203e6:	e7af      	b.n	8020348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80203e8:	f04f 0e00 	mov.w	lr, #0
 80203ec:	eba3 000e 	sub.w	r0, r3, lr
 80203f0:	2800      	cmp	r0, #0
 80203f2:	f77f af43 	ble.w	802027c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80203f6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80203fa:	140d      	asrs	r5, r1, #16
 80203fc:	1410      	asrs	r0, r2, #16
 80203fe:	fb06 5000 	mla	r0, r6, r0, r5
 8020402:	9d01      	ldr	r5, [sp, #4]
 8020404:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020408:	0e2e      	lsrs	r6, r5, #24
 802040a:	2eff      	cmp	r6, #255	; 0xff
 802040c:	d112      	bne.n	8020434 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802040e:	482c      	ldr	r0, [pc, #176]	; (80204c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8020410:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020414:	0968      	lsrs	r0, r5, #5
 8020416:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802041a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802041e:	4330      	orrs	r0, r6
 8020420:	4328      	orrs	r0, r5
 8020422:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8020426:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020428:	f10e 0e01 	add.w	lr, lr, #1
 802042c:	4401      	add	r1, r0
 802042e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020430:	4402      	add	r2, r0
 8020432:	e7db      	b.n	80203ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020434:	b2f0      	uxtb	r0, r6
 8020436:	2e00      	cmp	r6, #0
 8020438:	d0f5      	beq.n	8020426 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802043a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 802043e:	fa1f f980 	uxth.w	r9, r0
 8020442:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020446:	43c0      	mvns	r0, r0
 8020448:	ea4f 272c 	mov.w	r7, ip, asr #8
 802044c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020450:	fb16 f609 	smulbb	r6, r6, r9
 8020454:	b2c0      	uxtb	r0, r0
 8020456:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802045a:	b2ed      	uxtb	r5, r5
 802045c:	fb1a fa09 	smulbb	sl, sl, r9
 8020460:	fb07 6700 	mla	r7, r7, r0, r6
 8020464:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020468:	fb15 f509 	smulbb	r5, r5, r9
 802046c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020470:	b2bf      	uxth	r7, r7
 8020472:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020476:	fa5f fc8c 	uxtb.w	ip, ip
 802047a:	fb06 a600 	mla	r6, r6, r0, sl
 802047e:	fb0c 5500 	mla	r5, ip, r0, r5
 8020482:	1c78      	adds	r0, r7, #1
 8020484:	b2b6      	uxth	r6, r6
 8020486:	b2ad      	uxth	r5, r5
 8020488:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 802048c:	f105 0a01 	add.w	sl, r5, #1
 8020490:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020494:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020498:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802049c:	ea4a 0707 	orr.w	r7, sl, r7
 80204a0:	f106 0a01 	add.w	sl, r6, #1
 80204a4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80204a8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80204ac:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80204b0:	ea47 070a 	orr.w	r7, r7, sl
 80204b4:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80204b8:	e7b5      	b.n	8020426 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80204ba:	b005      	add	sp, #20
 80204bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204c0:	fffff800 	.word	0xfffff800

080204c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80204c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204c8:	b087      	sub	sp, #28
 80204ca:	468b      	mov	fp, r1
 80204cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80204d0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80204d2:	9203      	str	r2, [sp, #12]
 80204d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80204d8:	6841      	ldr	r1, [r0, #4]
 80204da:	9204      	str	r2, [sp, #16]
 80204dc:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80204e0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80204e4:	fb01 2404 	mla	r4, r1, r4, r2
 80204e8:	6802      	ldr	r2, [r0, #0]
 80204ea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80204ee:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80204f2:	3201      	adds	r2, #1
 80204f4:	f022 0201 	bic.w	r2, r2, #1
 80204f8:	9200      	str	r2, [sp, #0]
 80204fa:	f8d9 2000 	ldr.w	r2, [r9]
 80204fe:	9201      	str	r2, [sp, #4]
 8020500:	f1bb 0f00 	cmp.w	fp, #0
 8020504:	dc03      	bgt.n	802050e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020506:	9a03      	ldr	r2, [sp, #12]
 8020508:	2a00      	cmp	r2, #0
 802050a:	f340 816a 	ble.w	80207e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802050e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020510:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8020514:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020518:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802051a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 802051e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020522:	2b00      	cmp	r3, #0
 8020524:	dd0e      	ble.n	8020544 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020526:	1402      	asrs	r2, r0, #16
 8020528:	d405      	bmi.n	8020536 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802052a:	42ba      	cmp	r2, r7
 802052c:	da03      	bge.n	8020536 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802052e:	140a      	asrs	r2, r1, #16
 8020530:	d401      	bmi.n	8020536 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020532:	42b2      	cmp	r2, r6
 8020534:	db07      	blt.n	8020546 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020536:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020538:	3b01      	subs	r3, #1
 802053a:	3402      	adds	r4, #2
 802053c:	4410      	add	r0, r2
 802053e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020540:	4411      	add	r1, r2
 8020542:	e7ee      	b.n	8020522 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020544:	d017      	beq.n	8020576 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020546:	1e5a      	subs	r2, r3, #1
 8020548:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802054a:	fb05 0502 	mla	r5, r5, r2, r0
 802054e:	142d      	asrs	r5, r5, #16
 8020550:	d409      	bmi.n	8020566 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020552:	42bd      	cmp	r5, r7
 8020554:	da07      	bge.n	8020566 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020556:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020558:	fb05 1202 	mla	r2, r5, r2, r1
 802055c:	1412      	asrs	r2, r2, #16
 802055e:	d402      	bmi.n	8020566 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020560:	42b2      	cmp	r2, r6
 8020562:	f2c0 80c8 	blt.w	80206f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020566:	2700      	movs	r7, #0
 8020568:	19da      	adds	r2, r3, r7
 802056a:	2a00      	cmp	r2, #0
 802056c:	dc3e      	bgt.n	80205ec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802056e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020572:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020576:	f1bb 0f00 	cmp.w	fp, #0
 802057a:	f340 8132 	ble.w	80207e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802057e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020582:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020584:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020588:	f1bb 0b01 	subs.w	fp, fp, #1
 802058c:	eeb0 6a62 	vmov.f32	s12, s5
 8020590:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020594:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020598:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802059c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80205a0:	eeb0 6a43 	vmov.f32	s12, s6
 80205a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80205a8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80205ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80205b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80205b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80205b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80205bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80205c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80205c4:	ee12 2a90 	vmov	r2, s5
 80205c8:	eef0 2a47 	vmov.f32	s5, s14
 80205cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80205d0:	ee13 2a10 	vmov	r2, s6
 80205d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80205d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80205d8:	eeb0 3a67 	vmov.f32	s6, s15
 80205dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80205e0:	9a03      	ldr	r2, [sp, #12]
 80205e2:	9314      	str	r3, [sp, #80]	; 0x50
 80205e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80205e6:	bf08      	it	eq
 80205e8:	4613      	moveq	r3, r2
 80205ea:	e789      	b.n	8020500 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80205ec:	1405      	asrs	r5, r0, #16
 80205ee:	d436      	bmi.n	802065e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80205f0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80205f4:	42aa      	cmp	r2, r5
 80205f6:	dd32      	ble.n	802065e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80205f8:	140e      	asrs	r6, r1, #16
 80205fa:	d430      	bmi.n	802065e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80205fc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020600:	42b2      	cmp	r2, r6
 8020602:	dd2c      	ble.n	802065e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020604:	9a00      	ldr	r2, [sp, #0]
 8020606:	fb06 5502 	mla	r5, r6, r2, r5
 802060a:	9e01      	ldr	r6, [sp, #4]
 802060c:	086a      	lsrs	r2, r5, #1
 802060e:	5cb2      	ldrb	r2, [r6, r2]
 8020610:	07ee      	lsls	r6, r5, #31
 8020612:	bf54      	ite	pl
 8020614:	f002 020f 	andpl.w	r2, r2, #15
 8020618:	1112      	asrmi	r2, r2, #4
 802061a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802061e:	b2d2      	uxtb	r2, r2
 8020620:	b1ea      	cbz	r2, 802065e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020622:	9d04      	ldr	r5, [sp, #16]
 8020624:	436a      	muls	r2, r5
 8020626:	1c55      	adds	r5, r2, #1
 8020628:	eb05 2222 	add.w	r2, r5, r2, asr #8
 802062c:	4d6e      	ldr	r5, [pc, #440]	; (80207e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802062e:	1212      	asrs	r2, r2, #8
 8020630:	682d      	ldr	r5, [r5, #0]
 8020632:	2aff      	cmp	r2, #255	; 0xff
 8020634:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8020638:	9605      	str	r6, [sp, #20]
 802063a:	d116      	bne.n	802066a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802063c:	f06f 0201 	mvn.w	r2, #1
 8020640:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020644:	fb02 fc07 	mul.w	ip, r2, r7
 8020648:	096a      	lsrs	r2, r5, #5
 802064a:	f026 0607 	bic.w	r6, r6, #7
 802064e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020652:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020656:	4316      	orrs	r6, r2
 8020658:	432e      	orrs	r6, r5
 802065a:	f824 600c 	strh.w	r6, [r4, ip]
 802065e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020660:	3f01      	subs	r7, #1
 8020662:	4410      	add	r0, r2
 8020664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020666:	4411      	add	r1, r2
 8020668:	e77e      	b.n	8020568 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802066a:	f06f 0601 	mvn.w	r6, #1
 802066e:	fa1f fa82 	uxth.w	sl, r2
 8020672:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8020676:	43d2      	mvns	r2, r2
 8020678:	437e      	muls	r6, r7
 802067a:	b2ed      	uxtb	r5, r5
 802067c:	fb1c fc0a 	smulbb	ip, ip, sl
 8020680:	b2d2      	uxtb	r2, r2
 8020682:	f834 8006 	ldrh.w	r8, [r4, r6]
 8020686:	fb15 f50a 	smulbb	r5, r5, sl
 802068a:	9602      	str	r6, [sp, #8]
 802068c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020690:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020694:	fb16 f60a 	smulbb	r6, r6, sl
 8020698:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802069c:	fb0e ce02 	mla	lr, lr, r2, ip
 80206a0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80206a4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80206a8:	fa1f fe8e 	uxth.w	lr, lr
 80206ac:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80206b0:	fa5f f888 	uxtb.w	r8, r8
 80206b4:	fb0c 6c02 	mla	ip, ip, r2, r6
 80206b8:	fb08 5502 	mla	r5, r8, r2, r5
 80206bc:	f10e 0201 	add.w	r2, lr, #1
 80206c0:	fa1f fc8c 	uxth.w	ip, ip
 80206c4:	b2ad      	uxth	r5, r5
 80206c6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80206ca:	9a02      	ldr	r2, [sp, #8]
 80206cc:	1c6e      	adds	r6, r5, #1
 80206ce:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80206d2:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80206d6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80206da:	ea46 0e0e 	orr.w	lr, r6, lr
 80206de:	f10c 0601 	add.w	r6, ip, #1
 80206e2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80206e6:	0976      	lsrs	r6, r6, #5
 80206e8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80206ec:	ea4e 0e06 	orr.w	lr, lr, r6
 80206f0:	f824 e002 	strh.w	lr, [r4, r2]
 80206f4:	e7b3      	b.n	802065e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80206f6:	f04f 0800 	mov.w	r8, #0
 80206fa:	eba3 0208 	sub.w	r2, r3, r8
 80206fe:	2a00      	cmp	r2, #0
 8020700:	f77f af35 	ble.w	802056e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020704:	1402      	asrs	r2, r0, #16
 8020706:	9e00      	ldr	r6, [sp, #0]
 8020708:	140d      	asrs	r5, r1, #16
 802070a:	fb06 2505 	mla	r5, r6, r5, r2
 802070e:	9e01      	ldr	r6, [sp, #4]
 8020710:	086a      	lsrs	r2, r5, #1
 8020712:	07ed      	lsls	r5, r5, #31
 8020714:	5cb2      	ldrb	r2, [r6, r2]
 8020716:	bf54      	ite	pl
 8020718:	f002 020f 	andpl.w	r2, r2, #15
 802071c:	1112      	asrmi	r2, r2, #4
 802071e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020722:	b2d2      	uxtb	r2, r2
 8020724:	b1c2      	cbz	r2, 8020758 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020726:	9d04      	ldr	r5, [sp, #16]
 8020728:	436a      	muls	r2, r5
 802072a:	1c55      	adds	r5, r2, #1
 802072c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020730:	4d2d      	ldr	r5, [pc, #180]	; (80207e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020732:	1212      	asrs	r2, r2, #8
 8020734:	682e      	ldr	r6, [r5, #0]
 8020736:	2aff      	cmp	r2, #255	; 0xff
 8020738:	ea4f 2516 	mov.w	r5, r6, lsr #8
 802073c:	d113      	bne.n	8020766 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802073e:	0972      	lsrs	r2, r6, #5
 8020740:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8020744:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020748:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802074c:	f025 0507 	bic.w	r5, r5, #7
 8020750:	4315      	orrs	r5, r2
 8020752:	4335      	orrs	r5, r6
 8020754:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8020758:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802075a:	f108 0801 	add.w	r8, r8, #1
 802075e:	4410      	add	r0, r2
 8020760:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020762:	4411      	add	r1, r2
 8020764:	e7c9      	b.n	80206fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020766:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 802076a:	fa1f fa82 	uxth.w	sl, r2
 802076e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8020772:	43d2      	mvns	r2, r2
 8020774:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020778:	fb17 f70a 	smulbb	r7, r7, sl
 802077c:	b2d2      	uxtb	r2, r2
 802077e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020782:	b2f6      	uxtb	r6, r6
 8020784:	b2ed      	uxtb	r5, r5
 8020786:	fb0c 7c02 	mla	ip, ip, r2, r7
 802078a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 802078e:	fb16 f60a 	smulbb	r6, r6, sl
 8020792:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020796:	fa1f fc8c 	uxth.w	ip, ip
 802079a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802079e:	fb15 f50a 	smulbb	r5, r5, sl
 80207a2:	fa5f fe8e 	uxtb.w	lr, lr
 80207a6:	fb0e 6602 	mla	r6, lr, r2, r6
 80207aa:	fb07 5702 	mla	r7, r7, r2, r5
 80207ae:	f10c 0201 	add.w	r2, ip, #1
 80207b2:	b2b6      	uxth	r6, r6
 80207b4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80207b8:	1c75      	adds	r5, r6, #1
 80207ba:	b2bf      	uxth	r7, r7
 80207bc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80207c0:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80207c4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80207c8:	ea45 0c0c 	orr.w	ip, r5, ip
 80207cc:	1c7d      	adds	r5, r7, #1
 80207ce:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80207d2:	096d      	lsrs	r5, r5, #5
 80207d4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80207d8:	ea4c 0c05 	orr.w	ip, ip, r5
 80207dc:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80207e0:	e7ba      	b.n	8020758 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80207e2:	b007      	add	sp, #28
 80207e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207e8:	200153a8 	.word	0x200153a8

080207ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207f0:	b087      	sub	sp, #28
 80207f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80207f6:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8020b00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80207fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80207fc:	9101      	str	r1, [sp, #4]
 80207fe:	9205      	str	r2, [sp, #20]
 8020800:	6841      	ldr	r1, [r0, #4]
 8020802:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8020806:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802080a:	fb01 2404 	mla	r4, r1, r4, r2
 802080e:	6802      	ldr	r2, [r0, #0]
 8020810:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020814:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020818:	3201      	adds	r2, #1
 802081a:	f022 0201 	bic.w	r2, r2, #1
 802081e:	9202      	str	r2, [sp, #8]
 8020820:	f8db 2000 	ldr.w	r2, [fp]
 8020824:	9203      	str	r2, [sp, #12]
 8020826:	9a01      	ldr	r2, [sp, #4]
 8020828:	2a00      	cmp	r2, #0
 802082a:	dc03      	bgt.n	8020834 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802082c:	9a05      	ldr	r2, [sp, #20]
 802082e:	2a00      	cmp	r2, #0
 8020830:	f340 8162 	ble.w	8020af8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020834:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020836:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 802083a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802083e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020840:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8020844:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020848:	2b00      	cmp	r3, #0
 802084a:	dd0e      	ble.n	802086a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802084c:	1402      	asrs	r2, r0, #16
 802084e:	d405      	bmi.n	802085c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020850:	42ba      	cmp	r2, r7
 8020852:	da03      	bge.n	802085c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020854:	140a      	asrs	r2, r1, #16
 8020856:	d401      	bmi.n	802085c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020858:	42b2      	cmp	r2, r6
 802085a:	db07      	blt.n	802086c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802085c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802085e:	3b01      	subs	r3, #1
 8020860:	3402      	adds	r4, #2
 8020862:	4410      	add	r0, r2
 8020864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020866:	4411      	add	r1, r2
 8020868:	e7ee      	b.n	8020848 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802086a:	d017      	beq.n	802089c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802086c:	1e5a      	subs	r2, r3, #1
 802086e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020870:	fb05 0502 	mla	r5, r5, r2, r0
 8020874:	142d      	asrs	r5, r5, #16
 8020876:	d409      	bmi.n	802088c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020878:	42bd      	cmp	r5, r7
 802087a:	da07      	bge.n	802088c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802087c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802087e:	fb05 1202 	mla	r2, r5, r2, r1
 8020882:	1412      	asrs	r2, r2, #16
 8020884:	d402      	bmi.n	802088c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020886:	42b2      	cmp	r2, r6
 8020888:	f2c0 80c3 	blt.w	8020a12 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802088c:	2500      	movs	r5, #0
 802088e:	195a      	adds	r2, r3, r5
 8020890:	2a00      	cmp	r2, #0
 8020892:	dc3f      	bgt.n	8020914 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020894:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020898:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802089c:	9b01      	ldr	r3, [sp, #4]
 802089e:	2b00      	cmp	r3, #0
 80208a0:	f340 812a 	ble.w	8020af8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80208a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80208a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80208aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80208ae:	eeb0 6a62 	vmov.f32	s12, s5
 80208b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80208b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80208ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80208be:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80208c2:	eeb0 6a43 	vmov.f32	s12, s6
 80208c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80208ca:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80208ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80208d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80208d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80208da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80208de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80208e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80208e6:	ee12 2a90 	vmov	r2, s5
 80208ea:	eef0 2a47 	vmov.f32	s5, s14
 80208ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80208f2:	ee13 2a10 	vmov	r2, s6
 80208f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80208f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80208fa:	eeb0 3a67 	vmov.f32	s6, s15
 80208fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8020902:	9314      	str	r3, [sp, #80]	; 0x50
 8020904:	9b01      	ldr	r3, [sp, #4]
 8020906:	9a05      	ldr	r2, [sp, #20]
 8020908:	3b01      	subs	r3, #1
 802090a:	9301      	str	r3, [sp, #4]
 802090c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802090e:	bf08      	it	eq
 8020910:	4613      	moveq	r3, r2
 8020912:	e788      	b.n	8020826 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020914:	1406      	asrs	r6, r0, #16
 8020916:	d42c      	bmi.n	8020972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020918:	f8db 2008 	ldr.w	r2, [fp, #8]
 802091c:	42b2      	cmp	r2, r6
 802091e:	dd28      	ble.n	8020972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020920:	140f      	asrs	r7, r1, #16
 8020922:	d426      	bmi.n	8020972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020924:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020928:	42ba      	cmp	r2, r7
 802092a:	dd22      	ble.n	8020972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802092c:	9a02      	ldr	r2, [sp, #8]
 802092e:	fb07 6602 	mla	r6, r7, r2, r6
 8020932:	9f03      	ldr	r7, [sp, #12]
 8020934:	0872      	lsrs	r2, r6, #1
 8020936:	07f6      	lsls	r6, r6, #31
 8020938:	5cba      	ldrb	r2, [r7, r2]
 802093a:	bf54      	ite	pl
 802093c:	f002 020f 	andpl.w	r2, r2, #15
 8020940:	1112      	asrmi	r2, r2, #4
 8020942:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020946:	b2d2      	uxtb	r2, r2
 8020948:	2aff      	cmp	r2, #255	; 0xff
 802094a:	d118      	bne.n	802097e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 802094c:	f06f 0601 	mvn.w	r6, #1
 8020950:	f8d8 2000 	ldr.w	r2, [r8]
 8020954:	fb06 f705 	mul.w	r7, r6, r5
 8020958:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 802095c:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8020960:	0956      	lsrs	r6, r2, #5
 8020962:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020966:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802096a:	ea4c 0606 	orr.w	r6, ip, r6
 802096e:	4316      	orrs	r6, r2
 8020970:	53e6      	strh	r6, [r4, r7]
 8020972:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020974:	3d01      	subs	r5, #1
 8020976:	4410      	add	r0, r2
 8020978:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802097a:	4411      	add	r1, r2
 802097c:	e787      	b.n	802088e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802097e:	2a00      	cmp	r2, #0
 8020980:	d0f7      	beq.n	8020972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020982:	f06f 0601 	mvn.w	r6, #1
 8020986:	f8d8 c000 	ldr.w	ip, [r8]
 802098a:	fa1f f982 	uxth.w	r9, r2
 802098e:	43d2      	mvns	r2, r2
 8020990:	436e      	muls	r6, r5
 8020992:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8020996:	b2d2      	uxtb	r2, r2
 8020998:	f834 e006 	ldrh.w	lr, [r4, r6]
 802099c:	fb1a fa09 	smulbb	sl, sl, r9
 80209a0:	9604      	str	r6, [sp, #16]
 80209a2:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80209a6:	ea4f 272e 	mov.w	r7, lr, asr #8
 80209aa:	fb16 f609 	smulbb	r6, r6, r9
 80209ae:	fa5f fc8c 	uxtb.w	ip, ip
 80209b2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80209b6:	fb1c fc09 	smulbb	ip, ip, r9
 80209ba:	fb07 6702 	mla	r7, r7, r2, r6
 80209be:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80209c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80209c6:	b2bf      	uxth	r7, r7
 80209c8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80209cc:	fa5f fe8e 	uxtb.w	lr, lr
 80209d0:	fb06 a602 	mla	r6, r6, r2, sl
 80209d4:	fb0e cc02 	mla	ip, lr, r2, ip
 80209d8:	1c7a      	adds	r2, r7, #1
 80209da:	b2b6      	uxth	r6, r6
 80209dc:	fa1f fc8c 	uxth.w	ip, ip
 80209e0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80209e4:	9a04      	ldr	r2, [sp, #16]
 80209e6:	f10c 0a01 	add.w	sl, ip, #1
 80209ea:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80209ee:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80209f2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80209f6:	ea4a 0707 	orr.w	r7, sl, r7
 80209fa:	f106 0a01 	add.w	sl, r6, #1
 80209fe:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020a02:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020a06:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020a0a:	ea47 070a 	orr.w	r7, r7, sl
 8020a0e:	52a7      	strh	r7, [r4, r2]
 8020a10:	e7af      	b.n	8020972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020a12:	f04f 0e00 	mov.w	lr, #0
 8020a16:	eba3 020e 	sub.w	r2, r3, lr
 8020a1a:	2a00      	cmp	r2, #0
 8020a1c:	f77f af3a 	ble.w	8020894 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020a20:	1402      	asrs	r2, r0, #16
 8020a22:	9e02      	ldr	r6, [sp, #8]
 8020a24:	140d      	asrs	r5, r1, #16
 8020a26:	fb06 2505 	mla	r5, r6, r5, r2
 8020a2a:	9e03      	ldr	r6, [sp, #12]
 8020a2c:	086a      	lsrs	r2, r5, #1
 8020a2e:	07ed      	lsls	r5, r5, #31
 8020a30:	5cb2      	ldrb	r2, [r6, r2]
 8020a32:	bf54      	ite	pl
 8020a34:	f002 020f 	andpl.w	r2, r2, #15
 8020a38:	1112      	asrmi	r2, r2, #4
 8020a3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020a3e:	b2d2      	uxtb	r2, r2
 8020a40:	2aff      	cmp	r2, #255	; 0xff
 8020a42:	d115      	bne.n	8020a70 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020a44:	f8d8 5000 	ldr.w	r5, [r8]
 8020a48:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8020a4c:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8020a50:	096a      	lsrs	r2, r5, #5
 8020a52:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020a56:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020a5a:	4332      	orrs	r2, r6
 8020a5c:	432a      	orrs	r2, r5
 8020a5e:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8020a62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020a64:	f10e 0e01 	add.w	lr, lr, #1
 8020a68:	4410      	add	r0, r2
 8020a6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020a6c:	4411      	add	r1, r2
 8020a6e:	e7d2      	b.n	8020a16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020a70:	2a00      	cmp	r2, #0
 8020a72:	d0f6      	beq.n	8020a62 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020a74:	f8d8 7000 	ldr.w	r7, [r8]
 8020a78:	fa1f f982 	uxth.w	r9, r2
 8020a7c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020a80:	43d2      	mvns	r2, r2
 8020a82:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8020a86:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020a8a:	ea4f 262c 	mov.w	r6, ip, asr #8
 8020a8e:	fb15 f509 	smulbb	r5, r5, r9
 8020a92:	b2d2      	uxtb	r2, r2
 8020a94:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020a98:	b2ff      	uxtb	r7, r7
 8020a9a:	fb1a fa09 	smulbb	sl, sl, r9
 8020a9e:	fb06 5602 	mla	r6, r6, r2, r5
 8020aa2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020aa6:	fb17 f709 	smulbb	r7, r7, r9
 8020aaa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020aae:	b2b6      	uxth	r6, r6
 8020ab0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020ab4:	fa5f fc8c 	uxtb.w	ip, ip
 8020ab8:	fb05 a502 	mla	r5, r5, r2, sl
 8020abc:	fb0c 7702 	mla	r7, ip, r2, r7
 8020ac0:	1c72      	adds	r2, r6, #1
 8020ac2:	b2ad      	uxth	r5, r5
 8020ac4:	b2bf      	uxth	r7, r7
 8020ac6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020aca:	f107 0a01 	add.w	sl, r7, #1
 8020ace:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020ad2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020ad6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020ada:	ea4a 0606 	orr.w	r6, sl, r6
 8020ade:	f105 0a01 	add.w	sl, r5, #1
 8020ae2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020ae6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020aea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020aee:	ea46 060a 	orr.w	r6, r6, sl
 8020af2:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8020af6:	e7b4      	b.n	8020a62 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020af8:	b007      	add	sp, #28
 8020afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020afe:	bf00      	nop
 8020b00:	200153a8 	.word	0x200153a8

08020b04 <_ZN8touchgfx8LCD16bppD1Ev>:
 8020b04:	4770      	bx	lr

08020b06 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020b06:	4770      	bx	lr

08020b08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020b08:	4770      	bx	lr

08020b0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020b0a:	4770      	bx	lr

08020b0c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020b0c:	4770      	bx	lr

08020b0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020b0e:	4770      	bx	lr

08020b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020b10:	4770      	bx	lr

08020b12 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020b12:	4770      	bx	lr

08020b14 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020b14:	4770      	bx	lr

08020b16 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020b16:	4770      	bx	lr

08020b18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020b18:	4770      	bx	lr

08020b1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020b1a:	4770      	bx	lr

08020b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020b1c:	4770      	bx	lr

08020b1e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020b1e:	4770      	bx	lr

08020b20 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020b20:	4770      	bx	lr

08020b22 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020b22:	4770      	bx	lr

08020b24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020b24:	4770      	bx	lr

08020b26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020b26:	4770      	bx	lr

08020b28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020b28:	4770      	bx	lr

08020b2a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020b2a:	4770      	bx	lr

08020b2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020b2c:	4770      	bx	lr

08020b2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020b2e:	4770      	bx	lr

08020b30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020b30:	4770      	bx	lr

08020b32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020b32:	4770      	bx	lr

08020b34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020b34:	4770      	bx	lr

08020b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020b36:	4770      	bx	lr

08020b38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020b38:	4770      	bx	lr

08020b3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020b3a:	4770      	bx	lr

08020b3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020b3c:	4770      	bx	lr
	...

08020b40 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b44:	4692      	mov	sl, r2
 8020b46:	4a22      	ldr	r2, [pc, #136]	; (8020bd0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x90>)
 8020b48:	b088      	sub	sp, #32
 8020b4a:	4605      	mov	r5, r0
 8020b4c:	6812      	ldr	r2, [r2, #0]
 8020b4e:	4689      	mov	r9, r1
 8020b50:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8020b54:	2a02      	cmp	r2, #2
 8020b56:	d106      	bne.n	8020b66 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8020b58:	4b1e      	ldr	r3, [pc, #120]	; (8020bd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x94>)
 8020b5a:	f44f 7158 	mov.w	r1, #864	; 0x360
 8020b5e:	4a1e      	ldr	r2, [pc, #120]	; (8020bd8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 8020b60:	481e      	ldr	r0, [pc, #120]	; (8020bdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x9c>)
 8020b62:	f009 fd77 	bl	802a654 <__assert_func>
 8020b66:	ac08      	add	r4, sp, #32
 8020b68:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8020b6c:	4620      	mov	r0, r4
 8020b6e:	f7fd fce3 	bl	801e538 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020b72:	682b      	ldr	r3, [r5, #0]
 8020b74:	4606      	mov	r6, r0
 8020b76:	4628      	mov	r0, r5
 8020b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020b7a:	4798      	blx	r3
 8020b7c:	4286      	cmp	r6, r0
 8020b7e:	d004      	beq.n	8020b8a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020b80:	4b17      	ldr	r3, [pc, #92]	; (8020be0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 8020b82:	f240 3162 	movw	r1, #866	; 0x362
 8020b86:	4a14      	ldr	r2, [pc, #80]	; (8020bd8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 8020b88:	e7ea      	b.n	8020b60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020b8a:	4620      	mov	r0, r4
 8020b8c:	f7fd fc4a 	bl	801e424 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020b90:	4606      	mov	r6, r0
 8020b92:	b920      	cbnz	r0, 8020b9e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8020b94:	4b13      	ldr	r3, [pc, #76]	; (8020be4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa4>)
 8020b96:	f44f 7159 	mov.w	r1, #868	; 0x364
 8020b9a:	4a0f      	ldr	r2, [pc, #60]	; (8020bd8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 8020b9c:	e7e0      	b.n	8020b60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020b9e:	682b      	ldr	r3, [r5, #0]
 8020ba0:	4620      	mov	r0, r4
 8020ba2:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8020ba6:	f7fd fb21 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020baa:	4607      	mov	r7, r0
 8020bac:	4620      	mov	r0, r4
 8020bae:	f7fd fb61 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020bb2:	4653      	mov	r3, sl
 8020bb4:	b200      	sxth	r0, r0
 8020bb6:	464a      	mov	r2, r9
 8020bb8:	b23f      	sxth	r7, r7
 8020bba:	4629      	mov	r1, r5
 8020bbc:	9002      	str	r0, [sp, #8]
 8020bbe:	a806      	add	r0, sp, #24
 8020bc0:	e9cd 6700 	strd	r6, r7, [sp]
 8020bc4:	47c0      	blx	r8
 8020bc6:	4630      	mov	r0, r6
 8020bc8:	b008      	add	sp, #32
 8020bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bce:	bf00      	nop
 8020bd0:	200153a0 	.word	0x200153a0
 8020bd4:	08031f42 	.word	0x08031f42
 8020bd8:	0803283f 	.word	0x0803283f
 8020bdc:	08031ff4 	.word	0x08031ff4
 8020be0:	08032026 	.word	0x08032026
 8020be4:	0803207b 	.word	0x0803207b

08020be8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8020be8:	b508      	push	{r3, lr}
 8020bea:	4b06      	ldr	r3, [pc, #24]	; (8020c04 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8020bec:	8818      	ldrh	r0, [r3, #0]
 8020bee:	b928      	cbnz	r0, 8020bfc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8020bf0:	4b05      	ldr	r3, [pc, #20]	; (8020c08 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8020bf2:	2153      	movs	r1, #83	; 0x53
 8020bf4:	4a05      	ldr	r2, [pc, #20]	; (8020c0c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8020bf6:	4806      	ldr	r0, [pc, #24]	; (8020c10 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8020bf8:	f009 fd2c 	bl	802a654 <__assert_func>
 8020bfc:	0040      	lsls	r0, r0, #1
 8020bfe:	b280      	uxth	r0, r0
 8020c00:	bd08      	pop	{r3, pc}
 8020c02:	bf00      	nop
 8020c04:	2001539a 	.word	0x2001539a
 8020c08:	080320ea 	.word	0x080320ea
 8020c0c:	080326fc 	.word	0x080326fc
 8020c10:	0803212c 	.word	0x0803212c

08020c14 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8020c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020c18:	2300      	movs	r3, #0
 8020c1a:	9300      	str	r3, [sp, #0]
 8020c1c:	4b3d      	ldr	r3, [pc, #244]	; (8020d14 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8020c1e:	781b      	ldrb	r3, [r3, #0]
 8020c20:	2b00      	cmp	r3, #0
 8020c22:	d137      	bne.n	8020c94 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8020c24:	4a3c      	ldr	r2, [pc, #240]	; (8020d18 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020c26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8020c2a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8020c2e:	2b00      	cmp	r3, #0
 8020c30:	d132      	bne.n	8020c98 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8020c32:	4b3a      	ldr	r3, [pc, #232]	; (8020d1c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020c38:	ac02      	add	r4, sp, #8
 8020c3a:	6808      	ldr	r0, [r1, #0]
 8020c3c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020c40:	ab02      	add	r3, sp, #8
 8020c42:	6849      	ldr	r1, [r1, #4]
 8020c44:	4d36      	ldr	r5, [pc, #216]	; (8020d20 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8020c46:	c303      	stmia	r3!, {r0, r1}
 8020c48:	4669      	mov	r1, sp
 8020c4a:	4620      	mov	r0, r4
 8020c4c:	f7fa fb88 	bl	801b360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020c50:	4668      	mov	r0, sp
 8020c52:	f7fa fb5d 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020c56:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8020c5a:	f8bd 2000 	ldrh.w	r2, [sp]
 8020c5e:	462f      	mov	r7, r5
 8020c60:	6828      	ldr	r0, [r5, #0]
 8020c62:	4413      	add	r3, r2
 8020c64:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020c68:	f8ad 3008 	strh.w	r3, [sp, #8]
 8020c6c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020c70:	4413      	add	r3, r2
 8020c72:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020c76:	6803      	ldr	r3, [r0, #0]
 8020c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c7a:	4798      	blx	r3
 8020c7c:	f010 0f01 	tst.w	r0, #1
 8020c80:	d00c      	beq.n	8020c9c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8020c82:	6828      	ldr	r0, [r5, #0]
 8020c84:	6803      	ldr	r3, [r0, #0]
 8020c86:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020c8c:	4798      	blx	r3
 8020c8e:	b004      	add	sp, #16
 8020c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c94:	4a21      	ldr	r2, [pc, #132]	; (8020d1c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020c96:	e7c6      	b.n	8020c26 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8020c98:	4b1f      	ldr	r3, [pc, #124]	; (8020d18 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020c9a:	e7cb      	b.n	8020c34 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8020c9c:	6838      	ldr	r0, [r7, #0]
 8020c9e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8020ca2:	6803      	ldr	r3, [r0, #0]
 8020ca4:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8020ca8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8020cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cae:	4798      	blx	r3
 8020cb0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020cb4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020cb8:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8020cbc:	fb16 3602 	smlabb	r6, r6, r2, r3
 8020cc0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8020cc4:	6838      	ldr	r0, [r7, #0]
 8020cc6:	6803      	ldr	r3, [r0, #0]
 8020cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020cca:	4798      	blx	r3
 8020ccc:	4a12      	ldr	r2, [pc, #72]	; (8020d18 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020cce:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8020cd2:	8813      	ldrh	r3, [r2, #0]
 8020cd4:	4691      	mov	r9, r2
 8020cd6:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8020cda:	435d      	muls	r5, r3
 8020cdc:	fb03 1404 	mla	r4, r3, r4, r1
 8020ce0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020ce4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020ce8:	6838      	ldr	r0, [r7, #0]
 8020cea:	42ac      	cmp	r4, r5
 8020cec:	6803      	ldr	r3, [r0, #0]
 8020cee:	d20e      	bcs.n	8020d0e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8020cf0:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8020cf4:	4632      	mov	r2, r6
 8020cf6:	4643      	mov	r3, r8
 8020cf8:	4621      	mov	r1, r4
 8020cfa:	47d0      	blx	sl
 8020cfc:	f8b9 3000 	ldrh.w	r3, [r9]
 8020d00:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020d04:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8020d08:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020d0c:	e7ec      	b.n	8020ce8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8020d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d10:	4798      	blx	r3
 8020d12:	e7bc      	b.n	8020c8e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8020d14:	20015398 	.word	0x20015398
 8020d18:	2001539a 	.word	0x2001539a
 8020d1c:	2001539c 	.word	0x2001539c
 8020d20:	200153a0 	.word	0x200153a0

08020d24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d28:	b08b      	sub	sp, #44	; 0x2c
 8020d2a:	460f      	mov	r7, r1
 8020d2c:	4616      	mov	r6, r2
 8020d2e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8020d32:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020d36:	f1bb 0f00 	cmp.w	fp, #0
 8020d3a:	d049      	beq.n	8020dd0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020d3c:	6810      	ldr	r0, [r2, #0]
 8020d3e:	ad06      	add	r5, sp, #24
 8020d40:	6851      	ldr	r1, [r2, #4]
 8020d42:	c503      	stmia	r5!, {r0, r1}
 8020d44:	6818      	ldr	r0, [r3, #0]
 8020d46:	ad08      	add	r5, sp, #32
 8020d48:	6859      	ldr	r1, [r3, #4]
 8020d4a:	c503      	stmia	r5!, {r0, r1}
 8020d4c:	a806      	add	r0, sp, #24
 8020d4e:	f7fa fadf 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d52:	4631      	mov	r1, r6
 8020d54:	a808      	add	r0, sp, #32
 8020d56:	f7fa fb03 	bl	801b360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020d5a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020d5e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020d62:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020d66:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8020d6a:	fb16 2103 	smlabb	r1, r6, r3, r2
 8020d6e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020d72:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8020d76:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020d7a:	4f5f      	ldr	r7, [pc, #380]	; (8020ef8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8020d7c:	440a      	add	r2, r1
 8020d7e:	6838      	ldr	r0, [r7, #0]
 8020d80:	46b9      	mov	r9, r7
 8020d82:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020d86:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020d8a:	4413      	add	r3, r2
 8020d8c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020d90:	6803      	ldr	r3, [r0, #0]
 8020d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d94:	4798      	blx	r3
 8020d96:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020d9a:	d01c      	beq.n	8020dd6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8020d9c:	f010 0f04 	tst.w	r0, #4
 8020da0:	d01d      	beq.n	8020dde <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020da2:	f8d9 0000 	ldr.w	r0, [r9]
 8020da6:	2700      	movs	r7, #0
 8020da8:	b2ad      	uxth	r5, r5
 8020daa:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020dae:	6801      	ldr	r1, [r0, #0]
 8020db0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020db4:	f8cd b00c 	str.w	fp, [sp, #12]
 8020db8:	9501      	str	r5, [sp, #4]
 8020dba:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8020dbe:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8020dc2:	9402      	str	r4, [sp, #8]
 8020dc4:	fa1f f488 	uxth.w	r4, r8
 8020dc8:	9400      	str	r4, [sp, #0]
 8020dca:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8020dcc:	4631      	mov	r1, r6
 8020dce:	47a0      	blx	r4
 8020dd0:	b00b      	add	sp, #44	; 0x2c
 8020dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dd6:	b914      	cbnz	r4, 8020dde <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020dd8:	f010 0f01 	tst.w	r0, #1
 8020ddc:	e7e0      	b.n	8020da0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8020dde:	f8d9 0000 	ldr.w	r0, [r9]
 8020de2:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8020de6:	6803      	ldr	r3, [r0, #0]
 8020de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020dea:	4798      	blx	r3
 8020dec:	4b43      	ldr	r3, [pc, #268]	; (8020efc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8020dee:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8020df2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020df6:	881a      	ldrh	r2, [r3, #0]
 8020df8:	469a      	mov	sl, r3
 8020dfa:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020dfe:	fb05 f502 	mul.w	r5, r5, r2
 8020e02:	fb02 1404 	mla	r4, r2, r4, r1
 8020e06:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020e0a:	d059      	beq.n	8020ec0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8020e0c:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8020e10:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020e14:	fa1f f28b 	uxth.w	r2, fp
 8020e18:	469e      	mov	lr, r3
 8020e1a:	fa1f f989 	uxth.w	r9, r9
 8020e1e:	42ac      	cmp	r4, r5
 8020e20:	d264      	bcs.n	8020eec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8020e22:	eb04 0a07 	add.w	sl, r4, r7
 8020e26:	4554      	cmp	r4, sl
 8020e28:	d23d      	bcs.n	8020ea6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8020e2a:	8821      	ldrh	r1, [r4, #0]
 8020e2c:	f836 3b02 	ldrh.w	r3, [r6], #2
 8020e30:	1208      	asrs	r0, r1, #8
 8020e32:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020e36:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020e3a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8020e3e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020e42:	00c9      	lsls	r1, r1, #3
 8020e44:	fb10 f009 	smulbb	r0, r0, r9
 8020e48:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020e4c:	b2c9      	uxtb	r1, r1
 8020e4e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020e52:	10d8      	asrs	r0, r3, #3
 8020e54:	fb1b fb09 	smulbb	fp, fp, r9
 8020e58:	00db      	lsls	r3, r3, #3
 8020e5a:	fa1f fc8c 	uxth.w	ip, ip
 8020e5e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020e62:	fb11 f109 	smulbb	r1, r1, r9
 8020e66:	b2db      	uxtb	r3, r3
 8020e68:	fb00 b002 	mla	r0, r0, r2, fp
 8020e6c:	f10c 0b01 	add.w	fp, ip, #1
 8020e70:	fb03 1302 	mla	r3, r3, r2, r1
 8020e74:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020e78:	b29b      	uxth	r3, r3
 8020e7a:	b280      	uxth	r0, r0
 8020e7c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8020e80:	f103 0c01 	add.w	ip, r3, #1
 8020e84:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020e88:	1c43      	adds	r3, r0, #1
 8020e8a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020e8e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020e92:	0940      	lsrs	r0, r0, #5
 8020e94:	ea4c 0c0b 	orr.w	ip, ip, fp
 8020e98:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020e9c:	ea4c 0c00 	orr.w	ip, ip, r0
 8020ea0:	f824 cb02 	strh.w	ip, [r4], #2
 8020ea4:	e7bf      	b.n	8020e26 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8020ea6:	f8be 3000 	ldrh.w	r3, [lr]
 8020eaa:	eba3 0308 	sub.w	r3, r3, r8
 8020eae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020eb2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020eb6:	eba3 0308 	sub.w	r3, r3, r8
 8020eba:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020ebe:	e7ae      	b.n	8020e1e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8020ec0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020ec4:	f8d9 0000 	ldr.w	r0, [r9]
 8020ec8:	42ac      	cmp	r4, r5
 8020eca:	6803      	ldr	r3, [r0, #0]
 8020ecc:	d20e      	bcs.n	8020eec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8020ece:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8020ed2:	4632      	mov	r2, r6
 8020ed4:	463b      	mov	r3, r7
 8020ed6:	4621      	mov	r1, r4
 8020ed8:	47c0      	blx	r8
 8020eda:	f8ba 3000 	ldrh.w	r3, [sl]
 8020ede:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020ee2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020ee6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020eea:	e7eb      	b.n	8020ec4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8020eec:	4b02      	ldr	r3, [pc, #8]	; (8020ef8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8020eee:	6818      	ldr	r0, [r3, #0]
 8020ef0:	6803      	ldr	r3, [r0, #0]
 8020ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020ef4:	4798      	blx	r3
 8020ef6:	e76b      	b.n	8020dd0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020ef8:	200153a0 	.word	0x200153a0
 8020efc:	2001539a 	.word	0x2001539a

08020f00 <_ZN8touchgfx8LCD16bppD0Ev>:
 8020f00:	b510      	push	{r4, lr}
 8020f02:	4604      	mov	r4, r0
 8020f04:	2178      	movs	r1, #120	; 0x78
 8020f06:	f009 fb76 	bl	802a5f6 <_ZdlPvj>
 8020f0a:	4620      	mov	r0, r4
 8020f0c:	bd10      	pop	{r4, pc}

08020f0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020f0e:	b510      	push	{r4, lr}
 8020f10:	4604      	mov	r4, r0
 8020f12:	2104      	movs	r1, #4
 8020f14:	f009 fb6f 	bl	802a5f6 <_ZdlPvj>
 8020f18:	4620      	mov	r0, r4
 8020f1a:	bd10      	pop	{r4, pc}

08020f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020f1c:	b510      	push	{r4, lr}
 8020f1e:	4604      	mov	r4, r0
 8020f20:	2104      	movs	r1, #4
 8020f22:	f009 fb68 	bl	802a5f6 <_ZdlPvj>
 8020f26:	4620      	mov	r0, r4
 8020f28:	bd10      	pop	{r4, pc}

08020f2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020f2a:	b510      	push	{r4, lr}
 8020f2c:	4604      	mov	r4, r0
 8020f2e:	2104      	movs	r1, #4
 8020f30:	f009 fb61 	bl	802a5f6 <_ZdlPvj>
 8020f34:	4620      	mov	r0, r4
 8020f36:	bd10      	pop	{r4, pc}

08020f38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020f38:	b510      	push	{r4, lr}
 8020f3a:	4604      	mov	r4, r0
 8020f3c:	2104      	movs	r1, #4
 8020f3e:	f009 fb5a 	bl	802a5f6 <_ZdlPvj>
 8020f42:	4620      	mov	r0, r4
 8020f44:	bd10      	pop	{r4, pc}

08020f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020f46:	b510      	push	{r4, lr}
 8020f48:	4604      	mov	r4, r0
 8020f4a:	2104      	movs	r1, #4
 8020f4c:	f009 fb53 	bl	802a5f6 <_ZdlPvj>
 8020f50:	4620      	mov	r0, r4
 8020f52:	bd10      	pop	{r4, pc}

08020f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020f54:	b510      	push	{r4, lr}
 8020f56:	4604      	mov	r4, r0
 8020f58:	2104      	movs	r1, #4
 8020f5a:	f009 fb4c 	bl	802a5f6 <_ZdlPvj>
 8020f5e:	4620      	mov	r0, r4
 8020f60:	bd10      	pop	{r4, pc}

08020f62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020f62:	b510      	push	{r4, lr}
 8020f64:	4604      	mov	r4, r0
 8020f66:	2104      	movs	r1, #4
 8020f68:	f009 fb45 	bl	802a5f6 <_ZdlPvj>
 8020f6c:	4620      	mov	r0, r4
 8020f6e:	bd10      	pop	{r4, pc}

08020f70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020f70:	b510      	push	{r4, lr}
 8020f72:	4604      	mov	r4, r0
 8020f74:	2104      	movs	r1, #4
 8020f76:	f009 fb3e 	bl	802a5f6 <_ZdlPvj>
 8020f7a:	4620      	mov	r0, r4
 8020f7c:	bd10      	pop	{r4, pc}

08020f7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020f7e:	b510      	push	{r4, lr}
 8020f80:	4604      	mov	r4, r0
 8020f82:	2104      	movs	r1, #4
 8020f84:	f009 fb37 	bl	802a5f6 <_ZdlPvj>
 8020f88:	4620      	mov	r0, r4
 8020f8a:	bd10      	pop	{r4, pc}

08020f8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020f8c:	b510      	push	{r4, lr}
 8020f8e:	4604      	mov	r4, r0
 8020f90:	2104      	movs	r1, #4
 8020f92:	f009 fb30 	bl	802a5f6 <_ZdlPvj>
 8020f96:	4620      	mov	r0, r4
 8020f98:	bd10      	pop	{r4, pc}

08020f9a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020f9a:	b510      	push	{r4, lr}
 8020f9c:	4604      	mov	r4, r0
 8020f9e:	2104      	movs	r1, #4
 8020fa0:	f009 fb29 	bl	802a5f6 <_ZdlPvj>
 8020fa4:	4620      	mov	r0, r4
 8020fa6:	bd10      	pop	{r4, pc}

08020fa8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020fa8:	b510      	push	{r4, lr}
 8020faa:	4604      	mov	r4, r0
 8020fac:	2104      	movs	r1, #4
 8020fae:	f009 fb22 	bl	802a5f6 <_ZdlPvj>
 8020fb2:	4620      	mov	r0, r4
 8020fb4:	bd10      	pop	{r4, pc}

08020fb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020fb6:	b510      	push	{r4, lr}
 8020fb8:	4604      	mov	r4, r0
 8020fba:	2104      	movs	r1, #4
 8020fbc:	f009 fb1b 	bl	802a5f6 <_ZdlPvj>
 8020fc0:	4620      	mov	r0, r4
 8020fc2:	bd10      	pop	{r4, pc}

08020fc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020fc4:	b510      	push	{r4, lr}
 8020fc6:	4604      	mov	r4, r0
 8020fc8:	2104      	movs	r1, #4
 8020fca:	f009 fb14 	bl	802a5f6 <_ZdlPvj>
 8020fce:	4620      	mov	r0, r4
 8020fd0:	bd10      	pop	{r4, pc}

08020fd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020fd2:	b510      	push	{r4, lr}
 8020fd4:	4604      	mov	r4, r0
 8020fd6:	2104      	movs	r1, #4
 8020fd8:	f009 fb0d 	bl	802a5f6 <_ZdlPvj>
 8020fdc:	4620      	mov	r0, r4
 8020fde:	bd10      	pop	{r4, pc}

08020fe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020fe0:	b510      	push	{r4, lr}
 8020fe2:	4604      	mov	r4, r0
 8020fe4:	2104      	movs	r1, #4
 8020fe6:	f009 fb06 	bl	802a5f6 <_ZdlPvj>
 8020fea:	4620      	mov	r0, r4
 8020fec:	bd10      	pop	{r4, pc}

08020fee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020fee:	b510      	push	{r4, lr}
 8020ff0:	4604      	mov	r4, r0
 8020ff2:	2104      	movs	r1, #4
 8020ff4:	f009 faff 	bl	802a5f6 <_ZdlPvj>
 8020ff8:	4620      	mov	r0, r4
 8020ffa:	bd10      	pop	{r4, pc}

08020ffc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020ffc:	b510      	push	{r4, lr}
 8020ffe:	4604      	mov	r4, r0
 8021000:	2104      	movs	r1, #4
 8021002:	f009 faf8 	bl	802a5f6 <_ZdlPvj>
 8021006:	4620      	mov	r0, r4
 8021008:	bd10      	pop	{r4, pc}

0802100a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802100a:	b510      	push	{r4, lr}
 802100c:	4604      	mov	r4, r0
 802100e:	2104      	movs	r1, #4
 8021010:	f009 faf1 	bl	802a5f6 <_ZdlPvj>
 8021014:	4620      	mov	r0, r4
 8021016:	bd10      	pop	{r4, pc}

08021018 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021018:	b510      	push	{r4, lr}
 802101a:	4604      	mov	r4, r0
 802101c:	2104      	movs	r1, #4
 802101e:	f009 faea 	bl	802a5f6 <_ZdlPvj>
 8021022:	4620      	mov	r0, r4
 8021024:	bd10      	pop	{r4, pc}

08021026 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021026:	b510      	push	{r4, lr}
 8021028:	4604      	mov	r4, r0
 802102a:	2104      	movs	r1, #4
 802102c:	f009 fae3 	bl	802a5f6 <_ZdlPvj>
 8021030:	4620      	mov	r0, r4
 8021032:	bd10      	pop	{r4, pc}

08021034 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021034:	b510      	push	{r4, lr}
 8021036:	4604      	mov	r4, r0
 8021038:	2104      	movs	r1, #4
 802103a:	f009 fadc 	bl	802a5f6 <_ZdlPvj>
 802103e:	4620      	mov	r0, r4
 8021040:	bd10      	pop	{r4, pc}

08021042 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021042:	b510      	push	{r4, lr}
 8021044:	4604      	mov	r4, r0
 8021046:	2104      	movs	r1, #4
 8021048:	f009 fad5 	bl	802a5f6 <_ZdlPvj>
 802104c:	4620      	mov	r0, r4
 802104e:	bd10      	pop	{r4, pc}

08021050 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021050:	b510      	push	{r4, lr}
 8021052:	4604      	mov	r4, r0
 8021054:	2104      	movs	r1, #4
 8021056:	f009 face 	bl	802a5f6 <_ZdlPvj>
 802105a:	4620      	mov	r0, r4
 802105c:	bd10      	pop	{r4, pc}

0802105e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 802105e:	b510      	push	{r4, lr}
 8021060:	4604      	mov	r4, r0
 8021062:	2104      	movs	r1, #4
 8021064:	f009 fac7 	bl	802a5f6 <_ZdlPvj>
 8021068:	4620      	mov	r0, r4
 802106a:	bd10      	pop	{r4, pc}

0802106c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802106c:	b510      	push	{r4, lr}
 802106e:	4604      	mov	r4, r0
 8021070:	2104      	movs	r1, #4
 8021072:	f009 fac0 	bl	802a5f6 <_ZdlPvj>
 8021076:	4620      	mov	r0, r4
 8021078:	bd10      	pop	{r4, pc}

0802107a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 802107a:	b510      	push	{r4, lr}
 802107c:	4604      	mov	r4, r0
 802107e:	2104      	movs	r1, #4
 8021080:	f009 fab9 	bl	802a5f6 <_ZdlPvj>
 8021084:	4620      	mov	r0, r4
 8021086:	bd10      	pop	{r4, pc}

08021088 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021088:	b510      	push	{r4, lr}
 802108a:	4604      	mov	r4, r0
 802108c:	2104      	movs	r1, #4
 802108e:	f009 fab2 	bl	802a5f6 <_ZdlPvj>
 8021092:	4620      	mov	r0, r4
 8021094:	bd10      	pop	{r4, pc}
	...

08021098 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021098:	b5f0      	push	{r4, r5, r6, r7, lr}
 802109a:	4606      	mov	r6, r0
 802109c:	b087      	sub	sp, #28
 802109e:	460c      	mov	r4, r1
 80210a0:	4617      	mov	r7, r2
 80210a2:	461d      	mov	r5, r3
 80210a4:	b333      	cbz	r3, 80210f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80210a6:	4608      	mov	r0, r1
 80210a8:	f7f6 f8ab 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 80210ac:	bb10      	cbnz	r0, 80210f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80210ae:	6820      	ldr	r0, [r4, #0]
 80210b0:	ab04      	add	r3, sp, #16
 80210b2:	6861      	ldr	r1, [r4, #4]
 80210b4:	4c1b      	ldr	r4, [pc, #108]	; (8021124 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80210b6:	c303      	stmia	r3!, {r0, r1}
 80210b8:	a804      	add	r0, sp, #16
 80210ba:	f7fa f929 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210be:	6820      	ldr	r0, [r4, #0]
 80210c0:	6803      	ldr	r3, [r0, #0]
 80210c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80210c4:	4798      	blx	r3
 80210c6:	2dff      	cmp	r5, #255	; 0xff
 80210c8:	d016      	beq.n	80210f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80210ca:	f010 0f08 	tst.w	r0, #8
 80210ce:	6820      	ldr	r0, [r4, #0]
 80210d0:	d015      	beq.n	80210fe <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80210d2:	2400      	movs	r4, #0
 80210d4:	6801      	ldr	r1, [r0, #0]
 80210d6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80210da:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80210de:	e9cd 5402 	strd	r5, r4, [sp, #8]
 80210e2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80210e6:	9401      	str	r4, [sp, #4]
 80210e8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80210ec:	9400      	str	r4, [sp, #0]
 80210ee:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80210f0:	4639      	mov	r1, r7
 80210f2:	47a0      	blx	r4
 80210f4:	b007      	add	sp, #28
 80210f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210f8:	f010 0f02 	tst.w	r0, #2
 80210fc:	e7e7      	b.n	80210ce <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 80210fe:	6803      	ldr	r3, [r0, #0]
 8021100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021102:	4798      	blx	r3
 8021104:	4b08      	ldr	r3, [pc, #32]	; (8021128 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021106:	4601      	mov	r1, r0
 8021108:	4630      	mov	r0, r6
 802110a:	881a      	ldrh	r2, [r3, #0]
 802110c:	6833      	ldr	r3, [r6, #0]
 802110e:	e9cd 7500 	strd	r7, r5, [sp]
 8021112:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8021114:	ab04      	add	r3, sp, #16
 8021116:	47a8      	blx	r5
 8021118:	6820      	ldr	r0, [r4, #0]
 802111a:	6803      	ldr	r3, [r0, #0]
 802111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802111e:	4798      	blx	r3
 8021120:	e7e8      	b.n	80210f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021122:	bf00      	nop
 8021124:	200153a0 	.word	0x200153a0
 8021128:	2001539a 	.word	0x2001539a

0802112c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 802112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021130:	4690      	mov	r8, r2
 8021132:	4a8d      	ldr	r2, [pc, #564]	; (8021368 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>)
 8021134:	b091      	sub	sp, #68	; 0x44
 8021136:	4606      	mov	r6, r0
 8021138:	6812      	ldr	r2, [r2, #0]
 802113a:	460d      	mov	r5, r1
 802113c:	461c      	mov	r4, r3
 802113e:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
 8021142:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8021146:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 802114a:	2a02      	cmp	r2, #2
 802114c:	d106      	bne.n	802115c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x30>
 802114e:	4b87      	ldr	r3, [pc, #540]	; (802136c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x240>)
 8021150:	f240 316b 	movw	r1, #875	; 0x36b
 8021154:	4a86      	ldr	r2, [pc, #536]	; (8021370 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x244>)
 8021156:	4887      	ldr	r0, [pc, #540]	; (8021374 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>)
 8021158:	f009 fa7c 	bl	802a654 <__assert_func>
 802115c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802115e:	b923      	cbnz	r3, 802116a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e>
 8021160:	4b85      	ldr	r3, [pc, #532]	; (8021378 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x24c>)
 8021162:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8021166:	4a82      	ldr	r2, [pc, #520]	; (8021370 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x244>)
 8021168:	e7f5      	b.n	8021156 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x2a>
 802116a:	f9b4 1000 	ldrsh.w	r1, [r4]
 802116e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8021172:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021176:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 802117a:	4648      	mov	r0, r9
 802117c:	4621      	mov	r1, r4
 802117e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8021182:	f8ad b02c 	strh.w	fp, [sp, #44]	; 0x2c
 8021186:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 802118a:	f7f5 fff7 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 802118e:	4641      	mov	r1, r8
 8021190:	4648      	mov	r0, r9
 8021192:	f7f5 fff3 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 8021196:	4a79      	ldr	r2, [pc, #484]	; (802137c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 8021198:	f8b2 c000 	ldrh.w	ip, [r2]
 802119c:	4a78      	ldr	r2, [pc, #480]	; (8021380 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x254>)
 802119e:	fa0f f18c 	sxth.w	r1, ip
 80211a2:	8810      	ldrh	r0, [r2, #0]
 80211a4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80211a8:	fa0f fe80 	sxth.w	lr, r0
 80211ac:	2a00      	cmp	r2, #0
 80211ae:	da07      	bge.n	80211c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 80211b0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
 80211b4:	4442      	add	r2, r8
 80211b6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80211ba:	2200      	movs	r2, #0
 80211bc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80211c0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80211c4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80211c8:	1a89      	subs	r1, r1, r2
 80211ca:	4588      	cmp	r8, r1
 80211cc:	bfc4      	itt	gt
 80211ce:	ebac 0102 	subgt.w	r1, ip, r2
 80211d2:	f8ad 102c 	strhgt.w	r1, [sp, #44]	; 0x2c
 80211d6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80211da:	2900      	cmp	r1, #0
 80211dc:	da07      	bge.n	80211ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xc2>
 80211de:	f8bd 802e 	ldrh.w	r8, [sp, #46]	; 0x2e
 80211e2:	4441      	add	r1, r8
 80211e4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80211e8:	2100      	movs	r1, #0
 80211ea:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 80211ee:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80211f2:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
 80211f6:	ebae 0e0a 	sub.w	lr, lr, sl
 80211fa:	4571      	cmp	r1, lr
 80211fc:	bfc4      	itt	gt
 80211fe:	eba0 010a 	subgt.w	r1, r0, sl
 8021202:	f8ad 102e 	strhgt.w	r1, [sp, #46]	; 0x2e
 8021206:	495f      	ldr	r1, [pc, #380]	; (8021384 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x258>)
 8021208:	7809      	ldrb	r1, [r1, #0]
 802120a:	b9a9      	cbnz	r1, 8021238 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x10c>
 802120c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8021210:	45e0      	cmp	r8, ip
 8021212:	bf14      	ite	ne
 8021214:	2300      	movne	r3, #0
 8021216:	2301      	moveq	r3, #1
 8021218:	4648      	mov	r0, r9
 802121a:	9202      	str	r2, [sp, #8]
 802121c:	9305      	str	r3, [sp, #20]
 802121e:	f7f5 fff0 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021222:	9a02      	ldr	r2, [sp, #8]
 8021224:	b160      	cbz	r0, 8021240 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x114>
 8021226:	2300      	movs	r3, #0
 8021228:	8033      	strh	r3, [r6, #0]
 802122a:	8073      	strh	r3, [r6, #2]
 802122c:	80b3      	strh	r3, [r6, #4]
 802122e:	4630      	mov	r0, r6
 8021230:	80f3      	strh	r3, [r6, #6]
 8021232:	b011      	add	sp, #68	; 0x44
 8021234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021238:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 802123c:	4580      	cmp	r8, r0
 802123e:	e7e8      	b.n	8021212 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe6>
 8021240:	8821      	ldrh	r1, [r4, #0]
 8021242:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8021246:	1a52      	subs	r2, r2, r1
 8021248:	900e      	str	r0, [sp, #56]	; 0x38
 802124a:	9304      	str	r3, [sp, #16]
 802124c:	a90e      	add	r1, sp, #56	; 0x38
 802124e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8021252:	a80c      	add	r0, sp, #48	; 0x30
 8021254:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8021258:	9306      	str	r3, [sp, #24]
 802125a:	b213      	sxth	r3, r2
 802125c:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
 8021260:	9302      	str	r3, [sp, #8]
 8021262:	8863      	ldrh	r3, [r4, #2]
 8021264:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8021368 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>
 8021268:	ebaa 0a03 	sub.w	sl, sl, r3
 802126c:	fa0f f38a 	sxth.w	r3, sl
 8021270:	9303      	str	r3, [sp, #12]
 8021272:	9b02      	ldr	r3, [sp, #8]
 8021274:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8021278:	9b03      	ldr	r3, [sp, #12]
 802127a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802127e:	9b04      	ldr	r3, [sp, #16]
 8021280:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8021284:	9b06      	ldr	r3, [sp, #24]
 8021286:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 802128a:	f7fa f869 	bl	801b360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802128e:	4648      	mov	r0, r9
 8021290:	f7fa f83e 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021294:	a80e      	add	r0, sp, #56	; 0x38
 8021296:	f7fa f83b 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802129a:	4b3b      	ldr	r3, [pc, #236]	; (8021388 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25c>)
 802129c:	4628      	mov	r0, r5
 802129e:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 80212a2:	881b      	ldrh	r3, [r3, #0]
 80212a4:	9307      	str	r3, [sp, #28]
 80212a6:	682b      	ldr	r3, [r5, #0]
 80212a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80212aa:	4798      	blx	r3
 80212ac:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80212b0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80212b4:	4682      	mov	sl, r0
 80212b6:	f8d8 0000 	ldr.w	r0, [r8]
 80212ba:	fb17 2303 	smlabb	r3, r7, r3, r2
 80212be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80212c0:	eb02 0443 	add.w	r4, r2, r3, lsl #1
 80212c4:	6803      	ldr	r3, [r0, #0]
 80212c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80212c8:	4798      	blx	r3
 80212ca:	9009      	str	r0, [sp, #36]	; 0x24
 80212cc:	f8d8 0000 	ldr.w	r0, [r8]
 80212d0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80212d4:	6802      	ldr	r2, [r0, #0]
 80212d6:	9308      	str	r3, [sp, #32]
 80212d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80212da:	f9bd 502a 	ldrsh.w	r5, [sp, #42]	; 0x2a
 80212de:	4790      	blx	r2
 80212e0:	f010 0f01 	tst.w	r0, #1
 80212e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212e6:	d011      	beq.n	802130c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e0>
 80212e8:	f8d8 0000 	ldr.w	r0, [r8]
 80212ec:	6803      	ldr	r3, [r0, #0]
 80212ee:	f8cd b000 	str.w	fp, [sp]
 80212f2:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80212f4:	4623      	mov	r3, r4
 80212f6:	e899 0006 	ldmia.w	r9, {r1, r2}
 80212fa:	47a8      	blx	r5
 80212fc:	9b02      	ldr	r3, [sp, #8]
 80212fe:	8033      	strh	r3, [r6, #0]
 8021300:	9b03      	ldr	r3, [sp, #12]
 8021302:	8073      	strh	r3, [r6, #2]
 8021304:	9b04      	ldr	r3, [sp, #16]
 8021306:	80b3      	strh	r3, [r6, #4]
 8021308:	9b06      	ldr	r3, [sp, #24]
 802130a:	e790      	b.n	802122e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x102>
 802130c:	9a08      	ldr	r2, [sp, #32]
 802130e:	fb0a f505 	mul.w	r5, sl, r5
 8021312:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 8021316:	9a05      	ldr	r2, [sp, #20]
 8021318:	441d      	add	r5, r3
 802131a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 802131e:	b162      	cbz	r2, 802133a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x20e>
 8021320:	9a07      	ldr	r2, [sp, #28]
 8021322:	4297      	cmp	r7, r2
 8021324:	d109      	bne.n	802133a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x20e>
 8021326:	f8d8 0000 	ldr.w	r0, [r8]
 802132a:	fb03 f30a 	mul.w	r3, r3, sl
 802132e:	4621      	mov	r1, r4
 8021330:	6802      	ldr	r2, [r0, #0]
 8021332:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8021334:	462a      	mov	r2, r5
 8021336:	47b8      	blx	r7
 8021338:	e7e0      	b.n	80212fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 802133a:	437b      	muls	r3, r7
 802133c:	f8df b028 	ldr.w	fp, [pc, #40]	; 8021368 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>
 8021340:	007f      	lsls	r7, r7, #1
 8021342:	eb04 0843 	add.w	r8, r4, r3, lsl #1
 8021346:	4544      	cmp	r4, r8
 8021348:	d2d8      	bcs.n	80212fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 802134a:	f8db 0000 	ldr.w	r0, [fp]
 802134e:	4621      	mov	r1, r4
 8021350:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021354:	443c      	add	r4, r7
 8021356:	6802      	ldr	r2, [r0, #0]
 8021358:	005b      	lsls	r3, r3, #1
 802135a:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 802135e:	462a      	mov	r2, r5
 8021360:	47c8      	blx	r9
 8021362:	4455      	add	r5, sl
 8021364:	e7ef      	b.n	8021346 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 8021366:	bf00      	nop
 8021368:	200153a0 	.word	0x200153a0
 802136c:	08031f42 	.word	0x08031f42
 8021370:	080327ac 	.word	0x080327ac
 8021374:	08031ff4 	.word	0x08031ff4
 8021378:	08031ef4 	.word	0x08031ef4
 802137c:	20015394 	.word	0x20015394
 8021380:	20015396 	.word	0x20015396
 8021384:	20015398 	.word	0x20015398
 8021388:	2001539a 	.word	0x2001539a

0802138c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 802138c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021390:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8021394:	4688      	mov	r8, r1
 8021396:	4614      	mov	r4, r2
 8021398:	461d      	mov	r5, r3
 802139a:	9e08      	ldr	r6, [sp, #32]
 802139c:	2f00      	cmp	r7, #0
 802139e:	f000 80b4 	beq.w	802150a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 80213a2:	4618      	mov	r0, r3
 80213a4:	f7f5 ff2d 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 80213a8:	2800      	cmp	r0, #0
 80213aa:	f040 80ae 	bne.w	802150a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 80213ae:	f9b5 1000 	ldrsh.w	r1, [r5]
 80213b2:	2fff      	cmp	r7, #255	; 0xff
 80213b4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80213b8:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80213bc:	fb04 1303 	mla	r3, r4, r3, r1
 80213c0:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 80213c4:	eba4 0200 	sub.w	r2, r4, r0
 80213c8:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 80213cc:	fb04 f505 	mul.w	r5, r4, r5
 80213d0:	ea4f 2816 	mov.w	r8, r6, lsr #8
 80213d4:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80213d8:	d04b      	beq.n	8021472 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 80213da:	b2bc      	uxth	r4, r7
 80213dc:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 80213e0:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80213e4:	fa5f f788 	uxtb.w	r7, r8
 80213e8:	b2f3      	uxtb	r3, r6
 80213ea:	0040      	lsls	r0, r0, #1
 80213ec:	fb0e fe04 	mul.w	lr, lr, r4
 80213f0:	4367      	muls	r7, r4
 80213f2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80213f6:	4363      	muls	r3, r4
 80213f8:	fa1f fc8c 	uxth.w	ip, ip
 80213fc:	42a9      	cmp	r1, r5
 80213fe:	f080 8084 	bcs.w	802150a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021402:	eb01 0900 	add.w	r9, r1, r0
 8021406:	4549      	cmp	r1, r9
 8021408:	d231      	bcs.n	802146e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 802140a:	880a      	ldrh	r2, [r1, #0]
 802140c:	1214      	asrs	r4, r2, #8
 802140e:	10d6      	asrs	r6, r2, #3
 8021410:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021414:	00d2      	lsls	r2, r2, #3
 8021416:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802141a:	b2d2      	uxtb	r2, r2
 802141c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021420:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021424:	fb14 f40c 	smulbb	r4, r4, ip
 8021428:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802142c:	fb12 f20c 	smulbb	r2, r2, ip
 8021430:	fb16 f60c 	smulbb	r6, r6, ip
 8021434:	4474      	add	r4, lr
 8021436:	441a      	add	r2, r3
 8021438:	b2a4      	uxth	r4, r4
 802143a:	443e      	add	r6, r7
 802143c:	b292      	uxth	r2, r2
 802143e:	f104 0a01 	add.w	sl, r4, #1
 8021442:	b2b6      	uxth	r6, r6
 8021444:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021448:	f102 0a01 	add.w	sl, r2, #1
 802144c:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8021450:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021454:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021458:	4322      	orrs	r2, r4
 802145a:	1c74      	adds	r4, r6, #1
 802145c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021460:	0976      	lsrs	r6, r6, #5
 8021462:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021466:	4332      	orrs	r2, r6
 8021468:	f821 2b02 	strh.w	r2, [r1], #2
 802146c:	e7cb      	b.n	8021406 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 802146e:	4441      	add	r1, r8
 8021470:	e7c4      	b.n	80213fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8021472:	0973      	lsrs	r3, r6, #5
 8021474:	4f26      	ldr	r7, [pc, #152]	; (8021510 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8021476:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 802147a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802147e:	ea08 0707 	and.w	r7, r8, r7
 8021482:	433b      	orrs	r3, r7
 8021484:	4333      	orrs	r3, r6
 8021486:	07e6      	lsls	r6, r4, #31
 8021488:	b29b      	uxth	r3, r3
 802148a:	d50b      	bpl.n	80214a4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 802148c:	0040      	lsls	r0, r0, #1
 802148e:	0052      	lsls	r2, r2, #1
 8021490:	42a9      	cmp	r1, r5
 8021492:	d23a      	bcs.n	802150a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021494:	180c      	adds	r4, r1, r0
 8021496:	42a1      	cmp	r1, r4
 8021498:	d202      	bcs.n	80214a0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 802149a:	f821 3b02 	strh.w	r3, [r1], #2
 802149e:	e7fa      	b.n	8021496 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 80214a0:	4411      	add	r1, r2
 80214a2:	e7f5      	b.n	8021490 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 80214a4:	078f      	lsls	r7, r1, #30
 80214a6:	d008      	beq.n	80214ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 80214a8:	0066      	lsls	r6, r4, #1
 80214aa:	460a      	mov	r2, r1
 80214ac:	42aa      	cmp	r2, r5
 80214ae:	d202      	bcs.n	80214b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80214b0:	8013      	strh	r3, [r2, #0]
 80214b2:	4432      	add	r2, r6
 80214b4:	e7fa      	b.n	80214ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 80214b6:	3102      	adds	r1, #2
 80214b8:	3801      	subs	r0, #1
 80214ba:	07c6      	lsls	r6, r0, #31
 80214bc:	d50b      	bpl.n	80214d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 80214be:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 80214c2:	0066      	lsls	r6, r4, #1
 80214c4:	3a01      	subs	r2, #1
 80214c6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80214ca:	42aa      	cmp	r2, r5
 80214cc:	d202      	bcs.n	80214d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 80214ce:	8013      	strh	r3, [r2, #0]
 80214d0:	4432      	add	r2, r6
 80214d2:	e7fa      	b.n	80214ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 80214d4:	3801      	subs	r0, #1
 80214d6:	b1c0      	cbz	r0, 802150a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 80214d8:	1040      	asrs	r0, r0, #1
 80214da:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80214de:	0080      	lsls	r0, r0, #2
 80214e0:	0064      	lsls	r4, r4, #1
 80214e2:	42a9      	cmp	r1, r5
 80214e4:	d211      	bcs.n	802150a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 80214e6:	078a      	lsls	r2, r1, #30
 80214e8:	d006      	beq.n	80214f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80214ea:	4b0a      	ldr	r3, [pc, #40]	; (8021514 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 80214ec:	f240 4137 	movw	r1, #1079	; 0x437
 80214f0:	4a09      	ldr	r2, [pc, #36]	; (8021518 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 80214f2:	480a      	ldr	r0, [pc, #40]	; (802151c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 80214f4:	f009 f8ae 	bl	802a654 <__assert_func>
 80214f8:	180e      	adds	r6, r1, r0
 80214fa:	460a      	mov	r2, r1
 80214fc:	42b2      	cmp	r2, r6
 80214fe:	d202      	bcs.n	8021506 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8021500:	f842 3b04 	str.w	r3, [r2], #4
 8021504:	e7fa      	b.n	80214fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 8021506:	4421      	add	r1, r4
 8021508:	e7eb      	b.n	80214e2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 802150a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802150e:	bf00      	nop
 8021510:	00fff800 	.word	0x00fff800
 8021514:	08031da5 	.word	0x08031da5
 8021518:	080323f8 	.word	0x080323f8
 802151c:	08031ff4 	.word	0x08031ff4

08021520 <_ZN8touchgfx8LCD16bppC1Ev>:
 8021520:	2200      	movs	r2, #0
 8021522:	4910      	ldr	r1, [pc, #64]	; (8021564 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8021524:	6042      	str	r2, [r0, #4]
 8021526:	6001      	str	r1, [r0, #0]
 8021528:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802152c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021530:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8021534:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8021538:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 802153c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8021540:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8021544:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8021548:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 802154c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8021550:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8021554:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8021558:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 802155c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8021560:	4770      	bx	lr
 8021562:	bf00      	nop
 8021564:	080323a8 	.word	0x080323a8

08021568 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802156c:	b08d      	sub	sp, #52	; 0x34
 802156e:	460d      	mov	r5, r1
 8021570:	4604      	mov	r4, r0
 8021572:	4699      	mov	r9, r3
 8021574:	6808      	ldr	r0, [r1, #0]
 8021576:	ab08      	add	r3, sp, #32
 8021578:	6849      	ldr	r1, [r1, #4]
 802157a:	c303      	stmia	r3!, {r0, r1}
 802157c:	6810      	ldr	r0, [r2, #0]
 802157e:	ab0a      	add	r3, sp, #40	; 0x28
 8021580:	6851      	ldr	r1, [r2, #4]
 8021582:	c303      	stmia	r3!, {r0, r1}
 8021584:	a808      	add	r0, sp, #32
 8021586:	f7f9 fec3 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802158a:	4629      	mov	r1, r5
 802158c:	a80a      	add	r0, sp, #40	; 0x28
 802158e:	4d67      	ldr	r5, [pc, #412]	; (802172c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021590:	f7f9 fee6 	bl	801b360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021594:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8021598:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 802159c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80215a0:	6828      	ldr	r0, [r5, #0]
 80215a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80215a6:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80215aa:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80215ae:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80215b2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80215b6:	440a      	add	r2, r1
 80215b8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80215bc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80215c0:	4413      	add	r3, r2
 80215c2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80215c6:	6803      	ldr	r3, [r0, #0]
 80215c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80215ca:	4798      	blx	r3
 80215cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80215d0:	d119      	bne.n	8021606 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80215d2:	f010 0f20 	tst.w	r0, #32
 80215d6:	6828      	ldr	r0, [r5, #0]
 80215d8:	d018      	beq.n	802160c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80215da:	2500      	movs	r5, #0
 80215dc:	6801      	ldr	r1, [r0, #0]
 80215de:	b2b6      	uxth	r6, r6
 80215e0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80215e4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80215e8:	9601      	str	r6, [sp, #4]
 80215ea:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80215ee:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80215f2:	9502      	str	r5, [sp, #8]
 80215f4:	fa1f f588 	uxth.w	r5, r8
 80215f8:	9500      	str	r5, [sp, #0]
 80215fa:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80215fc:	4621      	mov	r1, r4
 80215fe:	47a8      	blx	r5
 8021600:	b00d      	add	sp, #52	; 0x34
 8021602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021606:	f010 0f40 	tst.w	r0, #64	; 0x40
 802160a:	e7e4      	b.n	80215d6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 802160c:	6803      	ldr	r3, [r0, #0]
 802160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021610:	4798      	blx	r3
 8021612:	4947      	ldr	r1, [pc, #284]	; (8021730 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8021614:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8021618:	880b      	ldrh	r3, [r1, #0]
 802161a:	468a      	mov	sl, r1
 802161c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8021620:	fb03 5202 	mla	r2, r3, r2, r5
 8021624:	4373      	muls	r3, r6
 8021626:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802162a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802162e:	9307      	str	r3, [sp, #28]
 8021630:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021634:	9306      	str	r3, [sp, #24]
 8021636:	9b07      	ldr	r3, [sp, #28]
 8021638:	4298      	cmp	r0, r3
 802163a:	d270      	bcs.n	802171e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 802163c:	9b06      	ldr	r3, [sp, #24]
 802163e:	4621      	mov	r1, r4
 8021640:	eb00 0b03 	add.w	fp, r0, r3
 8021644:	4558      	cmp	r0, fp
 8021646:	d25d      	bcs.n	8021704 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8021648:	f851 4b04 	ldr.w	r4, [r1], #4
 802164c:	0e23      	lsrs	r3, r4, #24
 802164e:	d014      	beq.n	802167a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021650:	2bff      	cmp	r3, #255	; 0xff
 8021652:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8021656:	d112      	bne.n	802167e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021658:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802165c:	d10f      	bne.n	802167e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 802165e:	0963      	lsrs	r3, r4, #5
 8021660:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8021664:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021668:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802166c:	f02c 0c07 	bic.w	ip, ip, #7
 8021670:	ea43 0c0c 	orr.w	ip, r3, ip
 8021674:	ea4c 0404 	orr.w	r4, ip, r4
 8021678:	8004      	strh	r4, [r0, #0]
 802167a:	3002      	adds	r0, #2
 802167c:	e7e2      	b.n	8021644 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 802167e:	fb09 f303 	mul.w	r3, r9, r3
 8021682:	8807      	ldrh	r7, [r0, #0]
 8021684:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8021688:	fa5f fc8c 	uxtb.w	ip, ip
 802168c:	1c5a      	adds	r2, r3, #1
 802168e:	123e      	asrs	r6, r7, #8
 8021690:	10fd      	asrs	r5, r7, #3
 8021692:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8021696:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802169a:	00ff      	lsls	r7, r7, #3
 802169c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80216a0:	1212      	asrs	r2, r2, #8
 80216a2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80216a6:	b293      	uxth	r3, r2
 80216a8:	43d2      	mvns	r2, r2
 80216aa:	b2ff      	uxtb	r7, r7
 80216ac:	fb1e fe03 	smulbb	lr, lr, r3
 80216b0:	b2d2      	uxtb	r2, r2
 80216b2:	fb1c fc03 	smulbb	ip, ip, r3
 80216b6:	b2e4      	uxtb	r4, r4
 80216b8:	fb06 e602 	mla	r6, r6, r2, lr
 80216bc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80216c0:	fb14 f403 	smulbb	r4, r4, r3
 80216c4:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80216c8:	b2b6      	uxth	r6, r6
 80216ca:	fb05 c502 	mla	r5, r5, r2, ip
 80216ce:	fb07 4702 	mla	r7, r7, r2, r4
 80216d2:	f106 0e01 	add.w	lr, r6, #1
 80216d6:	b2ad      	uxth	r5, r5
 80216d8:	b2bf      	uxth	r7, r7
 80216da:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80216de:	f105 0c01 	add.w	ip, r5, #1
 80216e2:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 80216e6:	1c7e      	adds	r6, r7, #1
 80216e8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80216ec:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80216f0:	096d      	lsrs	r5, r5, #5
 80216f2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80216f6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80216fa:	ea46 060e 	orr.w	r6, r6, lr
 80216fe:	432e      	orrs	r6, r5
 8021700:	8006      	strh	r6, [r0, #0]
 8021702:	e7ba      	b.n	802167a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021704:	f8ba 3000 	ldrh.w	r3, [sl]
 8021708:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 802170c:	eba3 0308 	sub.w	r3, r3, r8
 8021710:	eba4 0408 	sub.w	r4, r4, r8
 8021714:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021718:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 802171c:	e78b      	b.n	8021636 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 802171e:	4b03      	ldr	r3, [pc, #12]	; (802172c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021720:	6818      	ldr	r0, [r3, #0]
 8021722:	6803      	ldr	r3, [r0, #0]
 8021724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021726:	4798      	blx	r3
 8021728:	e76a      	b.n	8021600 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 802172a:	bf00      	nop
 802172c:	200153a0 	.word	0x200153a0
 8021730:	2001539a 	.word	0x2001539a

08021734 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8021734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021738:	b085      	sub	sp, #20
 802173a:	6810      	ldr	r0, [r2, #0]
 802173c:	460c      	mov	r4, r1
 802173e:	6851      	ldr	r1, [r2, #4]
 8021740:	466d      	mov	r5, sp
 8021742:	4616      	mov	r6, r2
 8021744:	c503      	stmia	r5!, {r0, r1}
 8021746:	6818      	ldr	r0, [r3, #0]
 8021748:	6859      	ldr	r1, [r3, #4]
 802174a:	c503      	stmia	r5!, {r0, r1}
 802174c:	4668      	mov	r0, sp
 802174e:	4d2e      	ldr	r5, [pc, #184]	; (8021808 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8021750:	f7f9 fdde 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021754:	4631      	mov	r1, r6
 8021756:	a802      	add	r0, sp, #8
 8021758:	4e2c      	ldr	r6, [pc, #176]	; (802180c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 802175a:	f7f9 fe01 	bl	801b360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802175e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8021762:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021766:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802176a:	6828      	ldr	r0, [r5, #0]
 802176c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021770:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8021774:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8021778:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802177c:	f8bd 1000 	ldrh.w	r1, [sp]
 8021780:	440a      	add	r2, r1
 8021782:	f8ad 2008 	strh.w	r2, [sp, #8]
 8021786:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802178a:	4413      	add	r3, r2
 802178c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021790:	6803      	ldr	r3, [r0, #0]
 8021792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021794:	4798      	blx	r3
 8021796:	8833      	ldrh	r3, [r6, #0]
 8021798:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802179c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 80217a0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80217a4:	f8df e068 	ldr.w	lr, [pc, #104]	; 8021810 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 80217a8:	fb03 1202 	mla	r2, r3, r2, r1
 80217ac:	fb08 f303 	mul.w	r3, r8, r3
 80217b0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80217b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80217b8:	4298      	cmp	r0, r3
 80217ba:	d21d      	bcs.n	80217f8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 80217bc:	eb00 080c 	add.w	r8, r0, ip
 80217c0:	4540      	cmp	r0, r8
 80217c2:	d20f      	bcs.n	80217e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80217c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80217c8:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80217cc:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80217d0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80217d4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80217d8:	ea42 0209 	orr.w	r2, r2, r9
 80217dc:	430a      	orrs	r2, r1
 80217de:	f820 2b02 	strh.w	r2, [r0], #2
 80217e2:	e7ed      	b.n	80217c0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80217e4:	8832      	ldrh	r2, [r6, #0]
 80217e6:	1bd2      	subs	r2, r2, r7
 80217e8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80217ec:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80217f0:	1bd2      	subs	r2, r2, r7
 80217f2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80217f6:	e7df      	b.n	80217b8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80217f8:	6828      	ldr	r0, [r5, #0]
 80217fa:	6803      	ldr	r3, [r0, #0]
 80217fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80217fe:	4798      	blx	r3
 8021800:	b005      	add	sp, #20
 8021802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021806:	bf00      	nop
 8021808:	200153a0 	.word	0x200153a0
 802180c:	2001539a 	.word	0x2001539a
 8021810:	fffff800 	.word	0xfffff800

08021814 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8021814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021818:	b08e      	sub	sp, #56	; 0x38
 802181a:	460e      	mov	r6, r1
 802181c:	4604      	mov	r4, r0
 802181e:	461d      	mov	r5, r3
 8021820:	6808      	ldr	r0, [r1, #0]
 8021822:	ab0a      	add	r3, sp, #40	; 0x28
 8021824:	6849      	ldr	r1, [r1, #4]
 8021826:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80219fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 802182a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8021a00 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 802182e:	c303      	stmia	r3!, {r0, r1}
 8021830:	6810      	ldr	r0, [r2, #0]
 8021832:	ab0c      	add	r3, sp, #48	; 0x30
 8021834:	6851      	ldr	r1, [r2, #4]
 8021836:	c303      	stmia	r3!, {r0, r1}
 8021838:	a80a      	add	r0, sp, #40	; 0x28
 802183a:	f7f9 fd69 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802183e:	4631      	mov	r1, r6
 8021840:	a80c      	add	r0, sp, #48	; 0x30
 8021842:	f7f9 fd8d 	bl	801b360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021846:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802184a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 802184e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021852:	f8d8 0000 	ldr.w	r0, [r8]
 8021856:	fb11 2103 	smlabb	r1, r1, r3, r2
 802185a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 802185e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8021862:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021866:	440c      	add	r4, r1
 8021868:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 802186c:	440a      	add	r2, r1
 802186e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8021872:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8021876:	4413      	add	r3, r2
 8021878:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802187c:	6803      	ldr	r3, [r0, #0]
 802187e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021880:	4798      	blx	r3
 8021882:	2dff      	cmp	r5, #255	; 0xff
 8021884:	d124      	bne.n	80218d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8021886:	f010 0f01 	tst.w	r0, #1
 802188a:	f8d8 0000 	ldr.w	r0, [r8]
 802188e:	d022      	beq.n	80218d6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8021890:	2100      	movs	r1, #0
 8021892:	f04f 0e01 	mov.w	lr, #1
 8021896:	f8d0 c000 	ldr.w	ip, [r0]
 802189a:	b2b6      	uxth	r6, r6
 802189c:	f8cd e018 	str.w	lr, [sp, #24]
 80218a0:	b2bf      	uxth	r7, r7
 80218a2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80218a6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80218aa:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80218ae:	f8b9 e000 	ldrh.w	lr, [r9]
 80218b2:	9503      	str	r5, [sp, #12]
 80218b4:	9601      	str	r6, [sp, #4]
 80218b6:	9700      	str	r7, [sp, #0]
 80218b8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80218bc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80218c0:	9102      	str	r1, [sp, #8]
 80218c2:	4621      	mov	r1, r4
 80218c4:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80218c8:	47a8      	blx	r5
 80218ca:	b00e      	add	sp, #56	; 0x38
 80218cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80218d0:	f010 0f04 	tst.w	r0, #4
 80218d4:	e7d9      	b.n	802188a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80218d6:	6803      	ldr	r3, [r0, #0]
 80218d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80218da:	4798      	blx	r3
 80218dc:	f8b9 3000 	ldrh.w	r3, [r9]
 80218e0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80218e4:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80218e8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80218ec:	435e      	muls	r6, r3
 80218ee:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80218f2:	2dff      	cmp	r5, #255	; 0xff
 80218f4:	fb03 1202 	mla	r2, r3, r2, r1
 80218f8:	ebac 0c07 	sub.w	ip, ip, r7
 80218fc:	eba3 0707 	sub.w	r7, r3, r7
 8021900:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021904:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021908:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 802190c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8021910:	d049      	beq.n	80219a6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8021912:	43eb      	mvns	r3, r5
 8021914:	fa1f f985 	uxth.w	r9, r5
 8021918:	b2db      	uxtb	r3, r3
 802191a:	42b0      	cmp	r0, r6
 802191c:	d266      	bcs.n	80219ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802191e:	eb00 0a0e 	add.w	sl, r0, lr
 8021922:	4550      	cmp	r0, sl
 8021924:	4621      	mov	r1, r4
 8021926:	f104 0403 	add.w	r4, r4, #3
 802192a:	d25b      	bcs.n	80219e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 802192c:	8802      	ldrh	r2, [r0, #0]
 802192e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8021932:	ea4f 2822 	mov.w	r8, r2, asr #8
 8021936:	fb11 f109 	smulbb	r1, r1, r9
 802193a:	10d5      	asrs	r5, r2, #3
 802193c:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8021940:	00d2      	lsls	r2, r2, #3
 8021942:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021946:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802194a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802194e:	fb08 1803 	mla	r8, r8, r3, r1
 8021952:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8021956:	b2d2      	uxtb	r2, r2
 8021958:	fb11 f109 	smulbb	r1, r1, r9
 802195c:	fa1f f888 	uxth.w	r8, r8
 8021960:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021964:	fb05 1503 	mla	r5, r5, r3, r1
 8021968:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802196c:	fb11 f109 	smulbb	r1, r1, r9
 8021970:	b2ad      	uxth	r5, r5
 8021972:	fb02 1203 	mla	r2, r2, r3, r1
 8021976:	f108 0101 	add.w	r1, r8, #1
 802197a:	b292      	uxth	r2, r2
 802197c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021980:	1c51      	adds	r1, r2, #1
 8021982:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8021986:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802198a:	1c69      	adds	r1, r5, #1
 802198c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021990:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021994:	096d      	lsrs	r5, r5, #5
 8021996:	ea42 0208 	orr.w	r2, r2, r8
 802199a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802199e:	432a      	orrs	r2, r5
 80219a0:	f820 2b02 	strh.w	r2, [r0], #2
 80219a4:	e7bd      	b.n	8021922 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 80219a6:	4a14      	ldr	r2, [pc, #80]	; (80219f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 80219a8:	42b0      	cmp	r0, r6
 80219aa:	d21f      	bcs.n	80219ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80219ac:	eb00 050e 	add.w	r5, r0, lr
 80219b0:	42a8      	cmp	r0, r5
 80219b2:	4621      	mov	r1, r4
 80219b4:	f104 0403 	add.w	r4, r4, #3
 80219b8:	d210      	bcs.n	80219dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80219ba:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80219be:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80219c2:	00db      	lsls	r3, r3, #3
 80219c4:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80219c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80219cc:	430b      	orrs	r3, r1
 80219ce:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80219d2:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80219d6:	f820 3b02 	strh.w	r3, [r0], #2
 80219da:	e7e9      	b.n	80219b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80219dc:	4438      	add	r0, r7
 80219de:	eb01 040c 	add.w	r4, r1, ip
 80219e2:	e7e1      	b.n	80219a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80219e4:	4438      	add	r0, r7
 80219e6:	eb01 040c 	add.w	r4, r1, ip
 80219ea:	e796      	b.n	802191a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80219ec:	4b03      	ldr	r3, [pc, #12]	; (80219fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80219ee:	6818      	ldr	r0, [r3, #0]
 80219f0:	6803      	ldr	r3, [r0, #0]
 80219f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219f4:	4798      	blx	r3
 80219f6:	e768      	b.n	80218ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80219f8:	fffff800 	.word	0xfffff800
 80219fc:	200153a0 	.word	0x200153a0
 8021a00:	2001539a 	.word	0x2001539a

08021a04 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021a04:	b570      	push	{r4, r5, r6, lr}
 8021a06:	9c04      	ldr	r4, [sp, #16]
 8021a08:	4605      	mov	r5, r0
 8021a0a:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8021a0e:	4608      	mov	r0, r1
 8021a10:	4619      	mov	r1, r3
 8021a12:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021a16:	2a0d      	cmp	r2, #13
 8021a18:	d825      	bhi.n	8021a66 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8021a1a:	e8df f002 	tbb	[pc, r2]
 8021a1e:	1807      	.short	0x1807
 8021a20:	1d1d1d13 	.word	0x1d1d1d13
 8021a24:	1d1d1d1d 	.word	0x1d1d1d1d
 8021a28:	1d1d1d1d 	.word	0x1d1d1d1d
 8021a2c:	682a      	ldr	r2, [r5, #0]
 8021a2e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8021a32:	68d6      	ldr	r6, [r2, #12]
 8021a34:	4623      	mov	r3, r4
 8021a36:	460a      	mov	r2, r1
 8021a38:	4601      	mov	r1, r0
 8021a3a:	46b4      	mov	ip, r6
 8021a3c:	4628      	mov	r0, r5
 8021a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021a42:	4760      	bx	ip
 8021a44:	4622      	mov	r2, r4
 8021a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021a4a:	f7ff bd8d 	b.w	8021568 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021a4e:	4622      	mov	r2, r4
 8021a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021a54:	f7ff bede 	b.w	8021814 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8021a58:	4b03      	ldr	r3, [pc, #12]	; (8021a68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8021a5a:	f240 3159 	movw	r1, #857	; 0x359
 8021a5e:	4a03      	ldr	r2, [pc, #12]	; (8021a6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8021a60:	4803      	ldr	r0, [pc, #12]	; (8021a70 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8021a62:	f008 fdf7 	bl	802a654 <__assert_func>
 8021a66:	bd70      	pop	{r4, r5, r6, pc}
 8021a68:	080320b9 	.word	0x080320b9
 8021a6c:	080328c5 	.word	0x080328c5
 8021a70:	08031ff4 	.word	0x08031ff4

08021a74 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a78:	b093      	sub	sp, #76	; 0x4c
 8021a7a:	880e      	ldrh	r6, [r1, #0]
 8021a7c:	4681      	mov	r9, r0
 8021a7e:	4688      	mov	r8, r1
 8021a80:	4615      	mov	r5, r2
 8021a82:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8021a86:	b136      	cbz	r6, 8021a96 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8021a88:	4b70      	ldr	r3, [pc, #448]	; (8021c4c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8021a8a:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8021a8e:	4a70      	ldr	r2, [pc, #448]	; (8021c50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8021a90:	4870      	ldr	r0, [pc, #448]	; (8021c54 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8021a92:	f008 fddf 	bl	802a654 <__assert_func>
 8021a96:	6810      	ldr	r0, [r2, #0]
 8021a98:	ac0e      	add	r4, sp, #56	; 0x38
 8021a9a:	6851      	ldr	r1, [r2, #4]
 8021a9c:	4f6e      	ldr	r7, [pc, #440]	; (8021c58 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8021a9e:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8021c5c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8021aa2:	c403      	stmia	r4!, {r0, r1}
 8021aa4:	6818      	ldr	r0, [r3, #0]
 8021aa6:	ac10      	add	r4, sp, #64	; 0x40
 8021aa8:	6859      	ldr	r1, [r3, #4]
 8021aaa:	c403      	stmia	r4!, {r0, r1}
 8021aac:	a80e      	add	r0, sp, #56	; 0x38
 8021aae:	f7f9 fc2f 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ab2:	4629      	mov	r1, r5
 8021ab4:	a810      	add	r0, sp, #64	; 0x40
 8021ab6:	f7f9 fc53 	bl	801b360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021aba:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021abe:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8021ac2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021ac6:	6838      	ldr	r0, [r7, #0]
 8021ac8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021acc:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8021ad0:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8021ad4:	4489      	add	r9, r1
 8021ad6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021ada:	440a      	add	r2, r1
 8021adc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021ae0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021ae4:	4413      	add	r3, r2
 8021ae6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021aea:	6803      	ldr	r3, [r0, #0]
 8021aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021aee:	4798      	blx	r3
 8021af0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021af4:	6838      	ldr	r0, [r7, #0]
 8021af6:	d01d      	beq.n	8021b34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8021af8:	210b      	movs	r1, #11
 8021afa:	6802      	ldr	r2, [r0, #0]
 8021afc:	b2a4      	uxth	r4, r4
 8021afe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8021b02:	9107      	str	r1, [sp, #28]
 8021b04:	b2ad      	uxth	r5, r5
 8021b06:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8021b0a:	f8bb 1000 	ldrh.w	r1, [fp]
 8021b0e:	9502      	str	r5, [sp, #8]
 8021b10:	9106      	str	r1, [sp, #24]
 8021b12:	2101      	movs	r1, #1
 8021b14:	9401      	str	r4, [sp, #4]
 8021b16:	e9cd a104 	strd	sl, r1, [sp, #16]
 8021b1a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021b1e:	9103      	str	r1, [sp, #12]
 8021b20:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8021b24:	9100      	str	r1, [sp, #0]
 8021b26:	4649      	mov	r1, r9
 8021b28:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8021b2a:	4642      	mov	r2, r8
 8021b2c:	47a0      	blx	r4
 8021b2e:	b013      	add	sp, #76	; 0x4c
 8021b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b34:	6803      	ldr	r3, [r0, #0]
 8021b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b38:	4798      	blx	r3
 8021b3a:	f8bb 3000 	ldrh.w	r3, [fp]
 8021b3e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8021b42:	f04f 0e04 	mov.w	lr, #4
 8021b46:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8021b4a:	435d      	muls	r5, r3
 8021b4c:	fb03 1202 	mla	r2, r3, r2, r1
 8021b50:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021b54:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8021b58:	920c      	str	r2, [sp, #48]	; 0x30
 8021b5a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021b5e:	1b12      	subs	r2, r2, r4
 8021b60:	920d      	str	r2, [sp, #52]	; 0x34
 8021b62:	0062      	lsls	r2, r4, #1
 8021b64:	1b1c      	subs	r4, r3, r4
 8021b66:	920a      	str	r2, [sp, #40]	; 0x28
 8021b68:	0063      	lsls	r3, r4, #1
 8021b6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8021b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b6e:	4298      	cmp	r0, r3
 8021b70:	d266      	bcs.n	8021c40 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8021b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b74:	eb00 0b03 	add.w	fp, r0, r3
 8021b78:	4558      	cmp	r0, fp
 8021b7a:	d25c      	bcs.n	8021c36 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 8021b7c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8021b80:	fb1e e303 	smlabb	r3, lr, r3, lr
 8021b84:	f858 2003 	ldr.w	r2, [r8, r3]
 8021b88:	0e11      	lsrs	r1, r2, #24
 8021b8a:	d012      	beq.n	8021bb2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8021b8c:	29ff      	cmp	r1, #255	; 0xff
 8021b8e:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8021b92:	d110      	bne.n	8021bb6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8021b94:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021b98:	d10d      	bne.n	8021bb6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8021b9a:	0953      	lsrs	r3, r2, #5
 8021b9c:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8021ba0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021ba4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021ba8:	f027 0707 	bic.w	r7, r7, #7
 8021bac:	431f      	orrs	r7, r3
 8021bae:	433a      	orrs	r2, r7
 8021bb0:	8002      	strh	r2, [r0, #0]
 8021bb2:	3002      	adds	r0, #2
 8021bb4:	e7e0      	b.n	8021b78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 8021bb6:	fb0a f101 	mul.w	r1, sl, r1
 8021bba:	8806      	ldrh	r6, [r0, #0]
 8021bbc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8021bc0:	b2d2      	uxtb	r2, r2
 8021bc2:	1c4b      	adds	r3, r1, #1
 8021bc4:	1235      	asrs	r5, r6, #8
 8021bc6:	10f4      	asrs	r4, r6, #3
 8021bc8:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8021bcc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021bd0:	00f6      	lsls	r6, r6, #3
 8021bd2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021bd6:	121b      	asrs	r3, r3, #8
 8021bd8:	b2f6      	uxtb	r6, r6
 8021bda:	b299      	uxth	r1, r3
 8021bdc:	43db      	mvns	r3, r3
 8021bde:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021be2:	fb1c fc01 	smulbb	ip, ip, r1
 8021be6:	b2db      	uxtb	r3, r3
 8021be8:	fb12 f201 	smulbb	r2, r2, r1
 8021bec:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021bf0:	fb05 c503 	mla	r5, r5, r3, ip
 8021bf4:	b2ff      	uxtb	r7, r7
 8021bf6:	fb06 2203 	mla	r2, r6, r3, r2
 8021bfa:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8021bfe:	fb17 f701 	smulbb	r7, r7, r1
 8021c02:	b2ad      	uxth	r5, r5
 8021c04:	b292      	uxth	r2, r2
 8021c06:	fb04 7403 	mla	r4, r4, r3, r7
 8021c0a:	f105 0c01 	add.w	ip, r5, #1
 8021c0e:	1c57      	adds	r7, r2, #1
 8021c10:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021c14:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021c18:	b2a4      	uxth	r4, r4
 8021c1a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021c1e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021c22:	433d      	orrs	r5, r7
 8021c24:	1c67      	adds	r7, r4, #1
 8021c26:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8021c2a:	0964      	lsrs	r4, r4, #5
 8021c2c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021c30:	4325      	orrs	r5, r4
 8021c32:	8005      	strh	r5, [r0, #0]
 8021c34:	e7bd      	b.n	8021bb2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8021c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021c38:	4418      	add	r0, r3
 8021c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021c3c:	4499      	add	r9, r3
 8021c3e:	e795      	b.n	8021b6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 8021c40:	4b05      	ldr	r3, [pc, #20]	; (8021c58 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8021c42:	6818      	ldr	r0, [r3, #0]
 8021c44:	6803      	ldr	r3, [r0, #0]
 8021c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c48:	4798      	blx	r3
 8021c4a:	e770      	b.n	8021b2e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 8021c4c:	08031ea4 	.word	0x08031ea4
 8021c50:	08032603 	.word	0x08032603
 8021c54:	08031ff4 	.word	0x08031ff4
 8021c58:	200153a0 	.word	0x200153a0
 8021c5c:	2001539a 	.word	0x2001539a

08021c60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8021c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c64:	4614      	mov	r4, r2
 8021c66:	880a      	ldrh	r2, [r1, #0]
 8021c68:	b087      	sub	sp, #28
 8021c6a:	4680      	mov	r8, r0
 8021c6c:	2a02      	cmp	r2, #2
 8021c6e:	460d      	mov	r5, r1
 8021c70:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8021c74:	d006      	beq.n	8021c84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8021c76:	4b63      	ldr	r3, [pc, #396]	; (8021e04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 8021c78:	f240 11dd 	movw	r1, #477	; 0x1dd
 8021c7c:	4a62      	ldr	r2, [pc, #392]	; (8021e08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8021c7e:	4863      	ldr	r0, [pc, #396]	; (8021e0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 8021c80:	f008 fce8 	bl	802a654 <__assert_func>
 8021c84:	2e00      	cmp	r6, #0
 8021c86:	f000 80b9 	beq.w	8021dfc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 8021c8a:	6820      	ldr	r0, [r4, #0]
 8021c8c:	af02      	add	r7, sp, #8
 8021c8e:	6861      	ldr	r1, [r4, #4]
 8021c90:	c703      	stmia	r7!, {r0, r1}
 8021c92:	6818      	ldr	r0, [r3, #0]
 8021c94:	af04      	add	r7, sp, #16
 8021c96:	6859      	ldr	r1, [r3, #4]
 8021c98:	c703      	stmia	r7!, {r0, r1}
 8021c9a:	a802      	add	r0, sp, #8
 8021c9c:	f7f9 fb38 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ca0:	4621      	mov	r1, r4
 8021ca2:	a804      	add	r0, sp, #16
 8021ca4:	f7f9 fb5c 	bl	801b360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021ca8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021cac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021cb0:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8021cb4:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8021cb8:	fb14 2103 	smlabb	r1, r4, r3, r2
 8021cbc:	eb08 0401 	add.w	r4, r8, r1
 8021cc0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021cc4:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021cc8:	440a      	add	r2, r1
 8021cca:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8021cce:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021cd2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021cd6:	4413      	add	r3, r2
 8021cd8:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021cdc:	4b4c      	ldr	r3, [pc, #304]	; (8021e10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021cde:	6818      	ldr	r0, [r3, #0]
 8021ce0:	6803      	ldr	r3, [r0, #0]
 8021ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021ce4:	4798      	blx	r3
 8021ce6:	4b4b      	ldr	r3, [pc, #300]	; (8021e14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8021ce8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021cec:	2eff      	cmp	r6, #255	; 0xff
 8021cee:	881a      	ldrh	r2, [r3, #0]
 8021cf0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8021cf4:	fb02 c101 	mla	r1, r2, r1, ip
 8021cf8:	fb02 f207 	mul.w	r2, r2, r7
 8021cfc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021d00:	f105 0104 	add.w	r1, r5, #4
 8021d04:	461d      	mov	r5, r3
 8021d06:	d05a      	beq.n	8021dbe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 8021d08:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8021d0c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021d10:	b2b6      	uxth	r6, r6
 8021d12:	9301      	str	r3, [sp, #4]
 8021d14:	fa1f fe8e 	uxth.w	lr, lr
 8021d18:	4282      	cmp	r2, r0
 8021d1a:	d96a      	bls.n	8021df2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8021d1c:	eb00 0b0a 	add.w	fp, r0, sl
 8021d20:	4583      	cmp	fp, r0
 8021d22:	d940      	bls.n	8021da6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 8021d24:	8805      	ldrh	r5, [r0, #0]
 8021d26:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021d2a:	122f      	asrs	r7, r5, #8
 8021d2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021d30:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8021d34:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021d38:	00ed      	lsls	r5, r5, #3
 8021d3a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021d3e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8021d42:	fb17 f70e 	smulbb	r7, r7, lr
 8021d46:	b2ed      	uxtb	r5, r5
 8021d48:	fb19 f90e 	smulbb	r9, r9, lr
 8021d4c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021d50:	fb15 f50e 	smulbb	r5, r5, lr
 8021d54:	fb0c 7c06 	mla	ip, ip, r6, r7
 8021d58:	10df      	asrs	r7, r3, #3
 8021d5a:	00db      	lsls	r3, r3, #3
 8021d5c:	fa1f fc8c 	uxth.w	ip, ip
 8021d60:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021d64:	b2db      	uxtb	r3, r3
 8021d66:	fb07 9706 	mla	r7, r7, r6, r9
 8021d6a:	f10c 0901 	add.w	r9, ip, #1
 8021d6e:	fb03 5306 	mla	r3, r3, r6, r5
 8021d72:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8021d76:	b29b      	uxth	r3, r3
 8021d78:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8021d7c:	b2bf      	uxth	r7, r7
 8021d7e:	f103 0c01 	add.w	ip, r3, #1
 8021d82:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021d86:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021d8a:	ea4c 0c09 	orr.w	ip, ip, r9
 8021d8e:	f107 0901 	add.w	r9, r7, #1
 8021d92:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8021d96:	097f      	lsrs	r7, r7, #5
 8021d98:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021d9c:	ea4c 0c07 	orr.w	ip, ip, r7
 8021da0:	f820 cb02 	strh.w	ip, [r0], #2
 8021da4:	e7bc      	b.n	8021d20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8021da6:	9b01      	ldr	r3, [sp, #4]
 8021da8:	881b      	ldrh	r3, [r3, #0]
 8021daa:	eba3 0308 	sub.w	r3, r3, r8
 8021dae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021db2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021db6:	eba3 0308 	sub.w	r3, r3, r8
 8021dba:	441c      	add	r4, r3
 8021dbc:	e7ac      	b.n	8021d18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 8021dbe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021dc2:	4282      	cmp	r2, r0
 8021dc4:	d915      	bls.n	8021df2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8021dc6:	eb00 060a 	add.w	r6, r0, sl
 8021dca:	4286      	cmp	r6, r0
 8021dcc:	d906      	bls.n	8021ddc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8021dce:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021dd2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021dd6:	f820 3b02 	strh.w	r3, [r0], #2
 8021dda:	e7f6      	b.n	8021dca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8021ddc:	882b      	ldrh	r3, [r5, #0]
 8021dde:	eba3 0308 	sub.w	r3, r3, r8
 8021de2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021de6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021dea:	eba3 0308 	sub.w	r3, r3, r8
 8021dee:	441c      	add	r4, r3
 8021df0:	e7e7      	b.n	8021dc2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 8021df2:	4b07      	ldr	r3, [pc, #28]	; (8021e10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021df4:	6818      	ldr	r0, [r3, #0]
 8021df6:	6803      	ldr	r3, [r0, #0]
 8021df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021dfa:	4798      	blx	r3
 8021dfc:	b007      	add	sp, #28
 8021dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e02:	bf00      	nop
 8021e04:	08031dd4 	.word	0x08031dd4
 8021e08:	0803246d 	.word	0x0803246d
 8021e0c:	08031ff4 	.word	0x08031ff4
 8021e10:	200153a0 	.word	0x200153a0
 8021e14:	2001539a 	.word	0x2001539a

08021e18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e1c:	f8b1 9000 	ldrh.w	r9, [r1]
 8021e20:	b091      	sub	sp, #68	; 0x44
 8021e22:	4604      	mov	r4, r0
 8021e24:	460f      	mov	r7, r1
 8021e26:	f1b9 0f01 	cmp.w	r9, #1
 8021e2a:	4690      	mov	r8, r2
 8021e2c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8021e30:	d006      	beq.n	8021e40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 8021e32:	4b84      	ldr	r3, [pc, #528]	; (8022044 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 8021e34:	f240 212b 	movw	r1, #555	; 0x22b
 8021e38:	4a83      	ldr	r2, [pc, #524]	; (8022048 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 8021e3a:	4884      	ldr	r0, [pc, #528]	; (802204c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 8021e3c:	f008 fc0a 	bl	802a654 <__assert_func>
 8021e40:	2d00      	cmp	r5, #0
 8021e42:	d04f      	beq.n	8021ee4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8021e44:	6810      	ldr	r0, [r2, #0]
 8021e46:	ae0c      	add	r6, sp, #48	; 0x30
 8021e48:	6851      	ldr	r1, [r2, #4]
 8021e4a:	f8df b208 	ldr.w	fp, [pc, #520]	; 8022054 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 8021e4e:	c603      	stmia	r6!, {r0, r1}
 8021e50:	6818      	ldr	r0, [r3, #0]
 8021e52:	ae0e      	add	r6, sp, #56	; 0x38
 8021e54:	6859      	ldr	r1, [r3, #4]
 8021e56:	c603      	stmia	r6!, {r0, r1}
 8021e58:	a80c      	add	r0, sp, #48	; 0x30
 8021e5a:	f7f9 fa59 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021e5e:	4641      	mov	r1, r8
 8021e60:	a80e      	add	r0, sp, #56	; 0x38
 8021e62:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8022058 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 8021e66:	f7f9 fa7b 	bl	801b360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021e6a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021e6e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021e72:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021e76:	f8db 0000 	ldr.w	r0, [fp]
 8021e7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021e7e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8021e82:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8021e86:	440c      	add	r4, r1
 8021e88:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021e8c:	440a      	add	r2, r1
 8021e8e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021e92:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8021e96:	4413      	add	r3, r2
 8021e98:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021e9c:	6803      	ldr	r3, [r0, #0]
 8021e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021ea0:	4798      	blx	r3
 8021ea2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021ea6:	f8db 0000 	ldr.w	r0, [fp]
 8021eaa:	d01e      	beq.n	8021eea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8021eac:	2200      	movs	r2, #0
 8021eae:	6801      	ldr	r1, [r0, #0]
 8021eb0:	b2b6      	uxth	r6, r6
 8021eb2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021eb6:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8021eba:	220b      	movs	r2, #11
 8021ebc:	9207      	str	r2, [sp, #28]
 8021ebe:	f8b8 2000 	ldrh.w	r2, [r8]
 8021ec2:	9504      	str	r5, [sp, #16]
 8021ec4:	9601      	str	r6, [sp, #4]
 8021ec6:	e9cd 9205 	strd	r9, r2, [sp, #20]
 8021eca:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021ece:	9203      	str	r2, [sp, #12]
 8021ed0:	fa1f f28a 	uxth.w	r2, sl
 8021ed4:	9202      	str	r2, [sp, #8]
 8021ed6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021eda:	9200      	str	r2, [sp, #0]
 8021edc:	463a      	mov	r2, r7
 8021ede:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8021ee0:	4621      	mov	r1, r4
 8021ee2:	47a8      	blx	r5
 8021ee4:	b011      	add	sp, #68	; 0x44
 8021ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eea:	6803      	ldr	r3, [r0, #0]
 8021eec:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8021ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021ef2:	4798      	blx	r3
 8021ef4:	f8b8 2000 	ldrh.w	r2, [r8]
 8021ef8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021efc:	2dff      	cmp	r5, #255	; 0xff
 8021efe:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8021f02:	fb0a fa02 	mul.w	sl, sl, r2
 8021f06:	fb02 1303 	mla	r3, r2, r3, r1
 8021f0a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021f0e:	d062      	beq.n	8021fd6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8021f10:	ea6f 0c05 	mvn.w	ip, r5
 8021f14:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8021f18:	b2ad      	uxth	r5, r5
 8021f1a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8021f1e:	fa5f fc8c 	uxtb.w	ip, ip
 8021f22:	930a      	str	r3, [sp, #40]	; 0x28
 8021f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f26:	4298      	cmp	r0, r3
 8021f28:	f080 8085 	bcs.w	8022036 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8021f2c:	eb00 0b09 	add.w	fp, r0, r9
 8021f30:	4558      	cmp	r0, fp
 8021f32:	d246      	bcs.n	8021fc2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8021f34:	f814 eb01 	ldrb.w	lr, [r4], #1
 8021f38:	2303      	movs	r3, #3
 8021f3a:	2204      	movs	r2, #4
 8021f3c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8021f40:	8803      	ldrh	r3, [r0, #0]
 8021f42:	eb07 0a0e 	add.w	sl, r7, lr
 8021f46:	1219      	asrs	r1, r3, #8
 8021f48:	10da      	asrs	r2, r3, #3
 8021f4a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021f4e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8021f52:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021f56:	00db      	lsls	r3, r3, #3
 8021f58:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021f5c:	fb18 f805 	smulbb	r8, r8, r5
 8021f60:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8021f64:	fb1e fe05 	smulbb	lr, lr, r5
 8021f68:	b2db      	uxtb	r3, r3
 8021f6a:	fb01 810c 	mla	r1, r1, ip, r8
 8021f6e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021f72:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021f76:	fb18 f805 	smulbb	r8, r8, r5
 8021f7a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8021f7e:	b289      	uxth	r1, r1
 8021f80:	fb02 820c 	mla	r2, r2, ip, r8
 8021f84:	fb03 e30c 	mla	r3, r3, ip, lr
 8021f88:	f101 0801 	add.w	r8, r1, #1
 8021f8c:	b292      	uxth	r2, r2
 8021f8e:	b29b      	uxth	r3, r3
 8021f90:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021f94:	f102 0801 	add.w	r8, r2, #1
 8021f98:	f103 0e01 	add.w	lr, r3, #1
 8021f9c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8021fa0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021fa4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021fa8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021fac:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021fb0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021fb4:	ea4e 0101 	orr.w	r1, lr, r1
 8021fb8:	ea41 0108 	orr.w	r1, r1, r8
 8021fbc:	f820 1b02 	strh.w	r1, [r0], #2
 8021fc0:	e7b6      	b.n	8021f30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8021fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021fc4:	881b      	ldrh	r3, [r3, #0]
 8021fc6:	1b9b      	subs	r3, r3, r6
 8021fc8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021fcc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021fd0:	1b9b      	subs	r3, r3, r6
 8021fd2:	441c      	add	r4, r3
 8021fd4:	e7a6      	b.n	8021f24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 8021fd6:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8021fda:	2203      	movs	r2, #3
 8021fdc:	2504      	movs	r5, #4
 8021fde:	491c      	ldr	r1, [pc, #112]	; (8022050 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8021fe0:	4550      	cmp	r0, sl
 8021fe2:	d228      	bcs.n	8022036 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8021fe4:	eb00 0c09 	add.w	ip, r0, r9
 8021fe8:	4560      	cmp	r0, ip
 8021fea:	4623      	mov	r3, r4
 8021fec:	d219      	bcs.n	8022022 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021fee:	f893 e000 	ldrb.w	lr, [r3]
 8021ff2:	3401      	adds	r4, #1
 8021ff4:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8021ff8:	eb07 0b0e 	add.w	fp, r7, lr
 8021ffc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022000:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022004:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022008:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 802200c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022010:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022014:	ea43 030b 	orr.w	r3, r3, fp
 8022018:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 802201c:	f820 3b02 	strh.w	r3, [r0], #2
 8022020:	e7e2      	b.n	8021fe8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8022022:	f8b8 3000 	ldrh.w	r3, [r8]
 8022026:	1b9b      	subs	r3, r3, r6
 8022028:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802202c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022030:	1b9b      	subs	r3, r3, r6
 8022032:	441c      	add	r4, r3
 8022034:	e7d4      	b.n	8021fe0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8022036:	4b07      	ldr	r3, [pc, #28]	; (8022054 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 8022038:	6818      	ldr	r0, [r3, #0]
 802203a:	6803      	ldr	r3, [r0, #0]
 802203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802203e:	4798      	blx	r3
 8022040:	e750      	b.n	8021ee4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8022042:	bf00      	nop
 8022044:	08031e22 	.word	0x08031e22
 8022048:	080324f6 	.word	0x080324f6
 802204c:	08031ff4 	.word	0x08031ff4
 8022050:	fffff800 	.word	0xfffff800
 8022054:	200153a0 	.word	0x200153a0
 8022058:	2001539a 	.word	0x2001539a

0802205c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 802205c:	b430      	push	{r4, r5}
 802205e:	780d      	ldrb	r5, [r1, #0]
 8022060:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8022064:	2d01      	cmp	r5, #1
 8022066:	d00a      	beq.n	802207e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8022068:	d305      	bcc.n	8022076 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 802206a:	2d02      	cmp	r5, #2
 802206c:	d10b      	bne.n	8022086 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 802206e:	9402      	str	r4, [sp, #8]
 8022070:	bc30      	pop	{r4, r5}
 8022072:	f7ff bdf5 	b.w	8021c60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8022076:	9402      	str	r4, [sp, #8]
 8022078:	bc30      	pop	{r4, r5}
 802207a:	f7ff bcfb 	b.w	8021a74 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802207e:	9402      	str	r4, [sp, #8]
 8022080:	bc30      	pop	{r4, r5}
 8022082:	f7ff bec9 	b.w	8021e18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022086:	bc30      	pop	{r4, r5}
 8022088:	4770      	bx	lr
	...

0802208c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 802208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022090:	b087      	sub	sp, #28
 8022092:	4604      	mov	r4, r0
 8022094:	460e      	mov	r6, r1
 8022096:	6810      	ldr	r0, [r2, #0]
 8022098:	6851      	ldr	r1, [r2, #4]
 802209a:	ad02      	add	r5, sp, #8
 802209c:	4617      	mov	r7, r2
 802209e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80220a2:	f8df 9230 	ldr.w	r9, [pc, #560]	; 80222d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80220a6:	c503      	stmia	r5!, {r0, r1}
 80220a8:	6818      	ldr	r0, [r3, #0]
 80220aa:	ad04      	add	r5, sp, #16
 80220ac:	6859      	ldr	r1, [r3, #4]
 80220ae:	c503      	stmia	r5!, {r0, r1}
 80220b0:	a802      	add	r0, sp, #8
 80220b2:	f7f9 f92d 	bl	801b310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80220b6:	4639      	mov	r1, r7
 80220b8:	a804      	add	r0, sp, #16
 80220ba:	f7f9 f951 	bl	801b360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80220be:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80220c2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80220c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80220ca:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80220ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 80220d2:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80220d6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80220da:	440e      	add	r6, r1
 80220dc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80220e0:	440a      	add	r2, r1
 80220e2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80220e6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80220ea:	4413      	add	r3, r2
 80220ec:	f8ad 3012 	strh.w	r3, [sp, #18]
 80220f0:	4b77      	ldr	r3, [pc, #476]	; (80222d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80220f2:	6818      	ldr	r0, [r3, #0]
 80220f4:	6803      	ldr	r3, [r0, #0]
 80220f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80220f8:	4798      	blx	r3
 80220fa:	f8b9 b000 	ldrh.w	fp, [r9]
 80220fe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022102:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022106:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802210a:	fb05 f50b 	mul.w	r5, r5, fp
 802210e:	fb0b 2303 	mla	r3, fp, r3, r2
 8022112:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022116:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802211a:	9300      	str	r3, [sp, #0]
 802211c:	d069      	beq.n	80221f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 802211e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8022122:	4558      	cmp	r0, fp
 8022124:	f080 80cc 	bcs.w	80222c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022128:	9b00      	ldr	r3, [sp, #0]
 802212a:	4631      	mov	r1, r6
 802212c:	18c3      	adds	r3, r0, r3
 802212e:	9301      	str	r3, [sp, #4]
 8022130:	9b01      	ldr	r3, [sp, #4]
 8022132:	4298      	cmp	r0, r3
 8022134:	d24f      	bcs.n	80221d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8022136:	f811 2b01 	ldrb.w	r2, [r1], #1
 802213a:	2a00      	cmp	r2, #0
 802213c:	d048      	beq.n	80221d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802213e:	fb0a f202 	mul.w	r2, sl, r2
 8022142:	1c53      	adds	r3, r2, #1
 8022144:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022148:	121b      	asrs	r3, r3, #8
 802214a:	d041      	beq.n	80221d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802214c:	8802      	ldrh	r2, [r0, #0]
 802214e:	b29e      	uxth	r6, r3
 8022150:	f8b4 c000 	ldrh.w	ip, [r4]
 8022154:	43db      	mvns	r3, r3
 8022156:	1215      	asrs	r5, r2, #8
 8022158:	b2db      	uxtb	r3, r3
 802215a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802215e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022162:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8022166:	fb15 f503 	smulbb	r5, r5, r3
 802216a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802216e:	00d2      	lsls	r2, r2, #3
 8022170:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022174:	fb07 5706 	mla	r7, r7, r6, r5
 8022178:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802217c:	b2d2      	uxtb	r2, r2
 802217e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022182:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022186:	fb1e fe03 	smulbb	lr, lr, r3
 802218a:	b2bf      	uxth	r7, r7
 802218c:	fb12 f203 	smulbb	r2, r2, r3
 8022190:	fa5f fc8c 	uxtb.w	ip, ip
 8022194:	fb05 e506 	mla	r5, r5, r6, lr
 8022198:	f107 0e01 	add.w	lr, r7, #1
 802219c:	fb0c 2c06 	mla	ip, ip, r6, r2
 80221a0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80221a4:	fa1f fc8c 	uxth.w	ip, ip
 80221a8:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 80221ac:	b2ad      	uxth	r5, r5
 80221ae:	f10c 0701 	add.w	r7, ip, #1
 80221b2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80221b6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80221ba:	ea47 070e 	orr.w	r7, r7, lr
 80221be:	f105 0e01 	add.w	lr, r5, #1
 80221c2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80221c6:	096d      	lsrs	r5, r5, #5
 80221c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80221cc:	432f      	orrs	r7, r5
 80221ce:	8007      	strh	r7, [r0, #0]
 80221d0:	3002      	adds	r0, #2
 80221d2:	3402      	adds	r4, #2
 80221d4:	e7ac      	b.n	8022130 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80221d6:	f8b9 3000 	ldrh.w	r3, [r9]
 80221da:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80221de:	eba3 0308 	sub.w	r3, r3, r8
 80221e2:	eba6 0608 	sub.w	r6, r6, r8
 80221e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80221ea:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80221ee:	440e      	add	r6, r1
 80221f0:	e797      	b.n	8022122 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80221f2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80221f6:	42a8      	cmp	r0, r5
 80221f8:	d262      	bcs.n	80222c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80221fa:	9b00      	ldr	r3, [sp, #0]
 80221fc:	4631      	mov	r1, r6
 80221fe:	eb00 0b03 	add.w	fp, r0, r3
 8022202:	4558      	cmp	r0, fp
 8022204:	d24e      	bcs.n	80222a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8022206:	f811 3b01 	ldrb.w	r3, [r1], #1
 802220a:	b12b      	cbz	r3, 8022218 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 802220c:	2bff      	cmp	r3, #255	; 0xff
 802220e:	f8b4 e000 	ldrh.w	lr, [r4]
 8022212:	d104      	bne.n	802221e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8022214:	f8a0 e000 	strh.w	lr, [r0]
 8022218:	3002      	adds	r0, #2
 802221a:	3402      	adds	r4, #2
 802221c:	e7f1      	b.n	8022202 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 802221e:	8802      	ldrh	r2, [r0, #0]
 8022220:	b29f      	uxth	r7, r3
 8022222:	43db      	mvns	r3, r3
 8022224:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022228:	1216      	asrs	r6, r2, #8
 802222a:	b2db      	uxtb	r3, r3
 802222c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022230:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022234:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022238:	00d2      	lsls	r2, r2, #3
 802223a:	fb16 f603 	smulbb	r6, r6, r3
 802223e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022242:	b2d2      	uxtb	r2, r2
 8022244:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022248:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802224c:	fb1a fa03 	smulbb	sl, sl, r3
 8022250:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022254:	fa1f fc8c 	uxth.w	ip, ip
 8022258:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802225c:	fb12 f303 	smulbb	r3, r2, r3
 8022260:	fa5f fe8e 	uxtb.w	lr, lr
 8022264:	fb06 a607 	mla	r6, r6, r7, sl
 8022268:	f10c 0201 	add.w	r2, ip, #1
 802226c:	fb0e 3307 	mla	r3, lr, r7, r3
 8022270:	b2b6      	uxth	r6, r6
 8022272:	b29b      	uxth	r3, r3
 8022274:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022278:	f106 0a01 	add.w	sl, r6, #1
 802227c:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8022280:	f103 0c01 	add.w	ip, r3, #1
 8022284:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022288:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802228c:	0976      	lsrs	r6, r6, #5
 802228e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022292:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022296:	ea4c 0c02 	orr.w	ip, ip, r2
 802229a:	ea4c 0c06 	orr.w	ip, ip, r6
 802229e:	f8a0 c000 	strh.w	ip, [r0]
 80222a2:	e7b9      	b.n	8022218 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80222a4:	f8b9 3000 	ldrh.w	r3, [r9]
 80222a8:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80222ac:	eba3 0308 	sub.w	r3, r3, r8
 80222b0:	eba6 0608 	sub.w	r6, r6, r8
 80222b4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80222b8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80222bc:	440e      	add	r6, r1
 80222be:	e79a      	b.n	80221f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 80222c0:	4b03      	ldr	r3, [pc, #12]	; (80222d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80222c2:	6818      	ldr	r0, [r3, #0]
 80222c4:	6803      	ldr	r3, [r0, #0]
 80222c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80222c8:	4798      	blx	r3
 80222ca:	b007      	add	sp, #28
 80222cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222d0:	200153a0 	.word	0x200153a0
 80222d4:	2001539a 	.word	0x2001539a

080222d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80222d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222dc:	b089      	sub	sp, #36	; 0x24
 80222de:	4682      	mov	sl, r0
 80222e0:	460f      	mov	r7, r1
 80222e2:	4691      	mov	r9, r2
 80222e4:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80222e8:	4698      	mov	r8, r3
 80222ea:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80222ec:	2e00      	cmp	r6, #0
 80222ee:	d03d      	beq.n	802236c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80222f0:	4608      	mov	r0, r1
 80222f2:	f7fb ff7b 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 80222f6:	4605      	mov	r5, r0
 80222f8:	4638      	mov	r0, r7
 80222fa:	f7fb ffbb 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80222fe:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022302:	4638      	mov	r0, r7
 8022304:	f8ad 9008 	strh.w	r9, [sp, #8]
 8022308:	f8ad 500c 	strh.w	r5, [sp, #12]
 802230c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022310:	f7fc f888 	bl	801e424 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022314:	4605      	mov	r5, r0
 8022316:	4638      	mov	r0, r7
 8022318:	f7fc f8b6 	bl	801e488 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802231c:	4681      	mov	r9, r0
 802231e:	4638      	mov	r0, r7
 8022320:	f7fc f90a 	bl	801e538 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022324:	280b      	cmp	r0, #11
 8022326:	f200 816f 	bhi.w	8022608 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 802232a:	e8df f010 	tbh	[pc, r0, lsl #1]
 802232e:	00c3      	.short	0x00c3
 8022330:	000c00b4 	.word	0x000c00b4
 8022334:	016d016d 	.word	0x016d016d
 8022338:	016d016d 	.word	0x016d016d
 802233c:	016d016d 	.word	0x016d016d
 8022340:	016d016d 	.word	0x016d016d
 8022344:	00bb      	.short	0x00bb
 8022346:	4bb3      	ldr	r3, [pc, #716]	; (8022614 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8022348:	6818      	ldr	r0, [r3, #0]
 802234a:	6803      	ldr	r3, [r0, #0]
 802234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802234e:	4798      	blx	r3
 8022350:	2eff      	cmp	r6, #255	; 0xff
 8022352:	d121      	bne.n	8022398 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8022354:	0683      	lsls	r3, r0, #26
 8022356:	d41f      	bmi.n	8022398 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8022358:	4638      	mov	r0, r7
 802235a:	f7fc f829 	bl	801e3b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802235e:	b940      	cbnz	r0, 8022372 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8022360:	4623      	mov	r3, r4
 8022362:	aa02      	add	r2, sp, #8
 8022364:	4629      	mov	r1, r5
 8022366:	4650      	mov	r0, sl
 8022368:	f7ff f9e4 	bl	8021734 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 802236c:	b009      	add	sp, #36	; 0x24
 802236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022372:	f10d 0818 	add.w	r8, sp, #24
 8022376:	4639      	mov	r1, r7
 8022378:	af04      	add	r7, sp, #16
 802237a:	4640      	mov	r0, r8
 802237c:	f7fb ffbe 	bl	801e2fc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022380:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022384:	e887 0003 	stmia.w	r7, {r0, r1}
 8022388:	4638      	mov	r0, r7
 802238a:	4621      	mov	r1, r4
 802238c:	f7f4 fef6 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 8022390:	4638      	mov	r0, r7
 8022392:	f7f4 ff36 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022396:	b130      	cbz	r0, 80223a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8022398:	4633      	mov	r3, r6
 802239a:	4622      	mov	r2, r4
 802239c:	a902      	add	r1, sp, #8
 802239e:	4628      	mov	r0, r5
 80223a0:	f7ff f8e2 	bl	8021568 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80223a4:	e7e2      	b.n	802236c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80223a6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80223aa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80223ae:	4293      	cmp	r3, r2
 80223b0:	dd12      	ble.n	80223d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 80223b2:	1a9b      	subs	r3, r3, r2
 80223b4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80223b8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80223bc:	f8ad 0018 	strh.w	r0, [sp, #24]
 80223c0:	4628      	mov	r0, r5
 80223c2:	f8ad 201a 	strh.w	r2, [sp, #26]
 80223c6:	4642      	mov	r2, r8
 80223c8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80223cc:	a902      	add	r1, sp, #8
 80223ce:	f8ad 301e 	strh.w	r3, [sp, #30]
 80223d2:	4633      	mov	r3, r6
 80223d4:	f7ff f8c8 	bl	8021568 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80223d8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80223dc:	f9b4 2000 	ldrsh.w	r2, [r4]
 80223e0:	4293      	cmp	r3, r2
 80223e2:	dd12      	ble.n	802240a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 80223e4:	1a9b      	subs	r3, r3, r2
 80223e6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80223ea:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80223ee:	f8ad 2018 	strh.w	r2, [sp, #24]
 80223f2:	4642      	mov	r2, r8
 80223f4:	f8ad 001a 	strh.w	r0, [sp, #26]
 80223f8:	4628      	mov	r0, r5
 80223fa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80223fe:	23ff      	movs	r3, #255	; 0xff
 8022400:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022404:	a902      	add	r1, sp, #8
 8022406:	f7ff f8af 	bl	8021568 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802240a:	463b      	mov	r3, r7
 802240c:	aa02      	add	r2, sp, #8
 802240e:	4629      	mov	r1, r5
 8022410:	4650      	mov	r0, sl
 8022412:	f7ff f98f 	bl	8021734 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022416:	88a2      	ldrh	r2, [r4, #4]
 8022418:	8823      	ldrh	r3, [r4, #0]
 802241a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 802241e:	4413      	add	r3, r2
 8022420:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022424:	440a      	add	r2, r1
 8022426:	b29b      	uxth	r3, r3
 8022428:	b292      	uxth	r2, r2
 802242a:	b218      	sxth	r0, r3
 802242c:	b211      	sxth	r1, r2
 802242e:	4288      	cmp	r0, r1
 8022430:	dd12      	ble.n	8022458 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8022432:	1a9b      	subs	r3, r3, r2
 8022434:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022438:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 802243c:	4642      	mov	r2, r8
 802243e:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022442:	a902      	add	r1, sp, #8
 8022444:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022448:	23ff      	movs	r3, #255	; 0xff
 802244a:	f8ad 001e 	strh.w	r0, [sp, #30]
 802244e:	4628      	mov	r0, r5
 8022450:	f8ad 601a 	strh.w	r6, [sp, #26]
 8022454:	f7ff f888 	bl	8021568 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022458:	88e2      	ldrh	r2, [r4, #6]
 802245a:	8863      	ldrh	r3, [r4, #2]
 802245c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022460:	4413      	add	r3, r2
 8022462:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022466:	440a      	add	r2, r1
 8022468:	b29b      	uxth	r3, r3
 802246a:	b292      	uxth	r2, r2
 802246c:	b218      	sxth	r0, r3
 802246e:	b211      	sxth	r1, r2
 8022470:	4288      	cmp	r0, r1
 8022472:	f77f af7b 	ble.w	802236c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022476:	1a9b      	subs	r3, r3, r2
 8022478:	f9b4 6000 	ldrsh.w	r6, [r4]
 802247c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022480:	4642      	mov	r2, r8
 8022482:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022486:	23ff      	movs	r3, #255	; 0xff
 8022488:	f8ad 6018 	strh.w	r6, [sp, #24]
 802248c:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022490:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022494:	e782      	b.n	802239c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8022496:	4633      	mov	r3, r6
 8022498:	4622      	mov	r2, r4
 802249a:	a902      	add	r1, sp, #8
 802249c:	4628      	mov	r0, r5
 802249e:	f7ff f9b9 	bl	8021814 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80224a2:	e763      	b.n	802236c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80224a4:	9600      	str	r6, [sp, #0]
 80224a6:	4623      	mov	r3, r4
 80224a8:	aa02      	add	r2, sp, #8
 80224aa:	4649      	mov	r1, r9
 80224ac:	4628      	mov	r0, r5
 80224ae:	f7ff fdd5 	bl	802205c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80224b2:	e75b      	b.n	802236c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80224b4:	4638      	mov	r0, r7
 80224b6:	f7fb ff7b 	bl	801e3b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80224ba:	b950      	cbnz	r0, 80224d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 80224bc:	f8da 3000 	ldr.w	r3, [sl]
 80224c0:	aa02      	add	r2, sp, #8
 80224c2:	4629      	mov	r1, r5
 80224c4:	e9cd 6000 	strd	r6, r0, [sp]
 80224c8:	4650      	mov	r0, sl
 80224ca:	68de      	ldr	r6, [r3, #12]
 80224cc:	4623      	mov	r3, r4
 80224ce:	47b0      	blx	r6
 80224d0:	e74c      	b.n	802236c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80224d2:	f10d 0818 	add.w	r8, sp, #24
 80224d6:	4639      	mov	r1, r7
 80224d8:	af04      	add	r7, sp, #16
 80224da:	4640      	mov	r0, r8
 80224dc:	f7fb ff0e 	bl	801e2fc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80224e0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80224e4:	e887 0003 	stmia.w	r7, {r0, r1}
 80224e8:	4638      	mov	r0, r7
 80224ea:	4621      	mov	r1, r4
 80224ec:	f7f4 fe46 	bl	801717c <_ZN8touchgfx4RectaNERKS0_>
 80224f0:	4638      	mov	r0, r7
 80224f2:	f7f4 fe86 	bl	8017202 <_ZNK8touchgfx4Rect7isEmptyEv>
 80224f6:	b138      	cbz	r0, 8022508 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 80224f8:	4623      	mov	r3, r4
 80224fa:	9600      	str	r6, [sp, #0]
 80224fc:	aa02      	add	r2, sp, #8
 80224fe:	4649      	mov	r1, r9
 8022500:	4628      	mov	r0, r5
 8022502:	f7ff fdc3 	bl	802208c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022506:	e731      	b.n	802236c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022508:	f8da 3000 	ldr.w	r3, [sl]
 802250c:	aa02      	add	r2, sp, #8
 802250e:	4629      	mov	r1, r5
 8022510:	e9cd 6000 	strd	r6, r0, [sp]
 8022514:	4650      	mov	r0, sl
 8022516:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 802251a:	463b      	mov	r3, r7
 802251c:	47d8      	blx	fp
 802251e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022522:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022526:	4293      	cmp	r3, r2
 8022528:	dd13      	ble.n	8022552 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 802252a:	f9b4 0000 	ldrsh.w	r0, [r4]
 802252e:	1a9b      	subs	r3, r3, r2
 8022530:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022534:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022538:	4628      	mov	r0, r5
 802253a:	f8ad 201a 	strh.w	r2, [sp, #26]
 802253e:	aa02      	add	r2, sp, #8
 8022540:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022544:	4649      	mov	r1, r9
 8022546:	f8ad 301e 	strh.w	r3, [sp, #30]
 802254a:	4643      	mov	r3, r8
 802254c:	9600      	str	r6, [sp, #0]
 802254e:	f7ff fd9d 	bl	802208c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022552:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022556:	f9b4 2000 	ldrsh.w	r2, [r4]
 802255a:	4293      	cmp	r3, r2
 802255c:	dd13      	ble.n	8022586 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 802255e:	1a9b      	subs	r3, r3, r2
 8022560:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022564:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022568:	f8ad 2018 	strh.w	r2, [sp, #24]
 802256c:	aa02      	add	r2, sp, #8
 802256e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022572:	4628      	mov	r0, r5
 8022574:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022578:	4643      	mov	r3, r8
 802257a:	f8ad 101e 	strh.w	r1, [sp, #30]
 802257e:	4649      	mov	r1, r9
 8022580:	9600      	str	r6, [sp, #0]
 8022582:	f7ff fd83 	bl	802208c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022586:	88a2      	ldrh	r2, [r4, #4]
 8022588:	8823      	ldrh	r3, [r4, #0]
 802258a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 802258e:	4413      	add	r3, r2
 8022590:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022594:	440a      	add	r2, r1
 8022596:	b29b      	uxth	r3, r3
 8022598:	b292      	uxth	r2, r2
 802259a:	b218      	sxth	r0, r3
 802259c:	b211      	sxth	r1, r2
 802259e:	4288      	cmp	r0, r1
 80225a0:	dd13      	ble.n	80225ca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 80225a2:	1a9b      	subs	r3, r3, r2
 80225a4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80225a8:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 80225ac:	aa02      	add	r2, sp, #8
 80225ae:	f8ad 1018 	strh.w	r1, [sp, #24]
 80225b2:	4649      	mov	r1, r9
 80225b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80225b8:	4643      	mov	r3, r8
 80225ba:	f8ad 001e 	strh.w	r0, [sp, #30]
 80225be:	4628      	mov	r0, r5
 80225c0:	9600      	str	r6, [sp, #0]
 80225c2:	f8ad 701a 	strh.w	r7, [sp, #26]
 80225c6:	f7ff fd61 	bl	802208c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80225ca:	88e2      	ldrh	r2, [r4, #6]
 80225cc:	8863      	ldrh	r3, [r4, #2]
 80225ce:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80225d2:	4413      	add	r3, r2
 80225d4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80225d8:	440a      	add	r2, r1
 80225da:	b29b      	uxth	r3, r3
 80225dc:	b292      	uxth	r2, r2
 80225de:	b218      	sxth	r0, r3
 80225e0:	b211      	sxth	r1, r2
 80225e2:	4288      	cmp	r0, r1
 80225e4:	f77f aec2 	ble.w	802236c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80225e8:	f9b4 7000 	ldrsh.w	r7, [r4]
 80225ec:	1a9b      	subs	r3, r3, r2
 80225ee:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80225f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80225f6:	4643      	mov	r3, r8
 80225f8:	f8ad 7018 	strh.w	r7, [sp, #24]
 80225fc:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022600:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022604:	9600      	str	r6, [sp, #0]
 8022606:	e779      	b.n	80224fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8022608:	4b03      	ldr	r3, [pc, #12]	; (8022618 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 802260a:	21b0      	movs	r1, #176	; 0xb0
 802260c:	4a03      	ldr	r2, [pc, #12]	; (802261c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 802260e:	4804      	ldr	r0, [pc, #16]	; (8022620 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8022610:	f008 f820 	bl	802a654 <__assert_func>
 8022614:	200153a0 	.word	0x200153a0
 8022618:	08031e70 	.word	0x08031e70
 802261c:	0803257f 	.word	0x0803257f
 8022620:	08031ff4 	.word	0x08031ff4

08022624 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8022624:	b508      	push	{r3, lr}
 8022626:	b180      	cbz	r0, 802264a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8022628:	2902      	cmp	r1, #2
 802262a:	d014      	beq.n	8022656 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 802262c:	2903      	cmp	r1, #3
 802262e:	d01d      	beq.n	802266c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8022630:	2901      	cmp	r1, #1
 8022632:	d101      	bne.n	8022638 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8022634:	2001      	movs	r0, #1
 8022636:	bd08      	pop	{r3, pc}
 8022638:	4b0e      	ldr	r3, [pc, #56]	; (8022674 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 802263a:	8818      	ldrh	r0, [r3, #0]
 802263c:	b990      	cbnz	r0, 8022664 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802263e:	4b0e      	ldr	r3, [pc, #56]	; (8022678 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8022640:	2153      	movs	r1, #83	; 0x53
 8022642:	4a0e      	ldr	r2, [pc, #56]	; (802267c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8022644:	480e      	ldr	r0, [pc, #56]	; (8022680 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8022646:	f008 f805 	bl	802a654 <__assert_func>
 802264a:	2902      	cmp	r1, #2
 802264c:	d00e      	beq.n	802266c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 802264e:	2903      	cmp	r1, #3
 8022650:	d0f2      	beq.n	8022638 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8022652:	2901      	cmp	r1, #1
 8022654:	d1ee      	bne.n	8022634 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8022656:	4b07      	ldr	r3, [pc, #28]	; (8022674 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022658:	8818      	ldrh	r0, [r3, #0]
 802265a:	2800      	cmp	r0, #0
 802265c:	d0ef      	beq.n	802263e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 802265e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022662:	e7e8      	b.n	8022636 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022664:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022668:	4240      	negs	r0, r0
 802266a:	e7e4      	b.n	8022636 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 802266c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022670:	e7e1      	b.n	8022636 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022672:	bf00      	nop
 8022674:	2001539a 	.word	0x2001539a
 8022678:	080320ea 	.word	0x080320ea
 802267c:	080326fc 	.word	0x080326fc
 8022680:	0803212c 	.word	0x0803212c

08022684 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8022684:	b508      	push	{r3, lr}
 8022686:	b180      	cbz	r0, 80226aa <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8022688:	2902      	cmp	r1, #2
 802268a:	d014      	beq.n	80226b6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 802268c:	2903      	cmp	r1, #3
 802268e:	d018      	beq.n	80226c2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8022690:	2901      	cmp	r1, #1
 8022692:	d001      	beq.n	8022698 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8022694:	2001      	movs	r0, #1
 8022696:	e013      	b.n	80226c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022698:	4b0e      	ldr	r3, [pc, #56]	; (80226d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802269a:	8818      	ldrh	r0, [r3, #0]
 802269c:	b970      	cbnz	r0, 80226bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 802269e:	4b0e      	ldr	r3, [pc, #56]	; (80226d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 80226a0:	2153      	movs	r1, #83	; 0x53
 80226a2:	4a0e      	ldr	r2, [pc, #56]	; (80226dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 80226a4:	480e      	ldr	r0, [pc, #56]	; (80226e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 80226a6:	f007 ffd5 	bl	802a654 <__assert_func>
 80226aa:	2902      	cmp	r1, #2
 80226ac:	d009      	beq.n	80226c2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80226ae:	2903      	cmp	r1, #3
 80226b0:	d0f0      	beq.n	8022694 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 80226b2:	2901      	cmp	r1, #1
 80226b4:	d1f0      	bne.n	8022698 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80226b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80226ba:	e001      	b.n	80226c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80226bc:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80226c0:	bd08      	pop	{r3, pc}
 80226c2:	4b04      	ldr	r3, [pc, #16]	; (80226d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80226c4:	8818      	ldrh	r0, [r3, #0]
 80226c6:	2800      	cmp	r0, #0
 80226c8:	d0e9      	beq.n	802269e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 80226ca:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80226ce:	4240      	negs	r0, r0
 80226d0:	e7f6      	b.n	80226c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80226d2:	bf00      	nop
 80226d4:	2001539a 	.word	0x2001539a
 80226d8:	080320ea 	.word	0x080320ea
 80226dc:	080326fc 	.word	0x080326fc
 80226e0:	0803212c 	.word	0x0803212c

080226e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80226e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226e8:	b099      	sub	sp, #100	; 0x64
 80226ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80226ec:	a914      	add	r1, sp, #80	; 0x50
 80226ee:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 80226f2:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 80226f6:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 80226fa:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 80226fe:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8022702:	e881 000c 	stmia.w	r1, {r2, r3}
 8022706:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 802270a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 802270e:	930a      	str	r3, [sp, #40]	; 0x28
 8022710:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8022714:	f891 900d 	ldrb.w	r9, [r1, #13]
 8022718:	9311      	str	r3, [sp, #68]	; 0x44
 802271a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 802271e:	7988      	ldrb	r0, [r1, #6]
 8022720:	930c      	str	r3, [sp, #48]	; 0x30
 8022722:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8022726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802272a:	4303      	orrs	r3, r0
 802272c:	9309      	str	r3, [sp, #36]	; 0x24
 802272e:	f000 81a1 	beq.w	8022a74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022732:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8022736:	f409 7380 	and.w	r3, r9, #256	; 0x100
 802273a:	f891 9007 	ldrb.w	r9, [r1, #7]
 802273e:	ea59 0903 	orrs.w	r9, r9, r3
 8022742:	f000 8197 	beq.w	8022a74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022746:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802274a:	b29b      	uxth	r3, r3
 802274c:	2e00      	cmp	r6, #0
 802274e:	f000 813a 	beq.w	80229c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8022752:	1af6      	subs	r6, r6, r3
 8022754:	b2b6      	uxth	r6, r6
 8022756:	0433      	lsls	r3, r6, #16
 8022758:	d502      	bpl.n	8022760 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 802275a:	1bad      	subs	r5, r5, r6
 802275c:	2600      	movs	r6, #0
 802275e:	b22d      	sxth	r5, r5
 8022760:	f9b2 1000 	ldrsh.w	r1, [r2]
 8022764:	a814      	add	r0, sp, #80	; 0x50
 8022766:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 802276a:	428d      	cmp	r5, r1
 802276c:	b28b      	uxth	r3, r1
 802276e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8022772:	bfbf      	itttt	lt
 8022774:	18f6      	addlt	r6, r6, r3
 8022776:	1b75      	sublt	r5, r6, r5
 8022778:	b2ae      	uxthlt	r6, r5
 802277a:	460d      	movlt	r5, r1
 802277c:	8891      	ldrh	r1, [r2, #4]
 802277e:	440b      	add	r3, r1
 8022780:	4629      	mov	r1, r5
 8022782:	b21b      	sxth	r3, r3
 8022784:	9310      	str	r3, [sp, #64]	; 0x40
 8022786:	88d3      	ldrh	r3, [r2, #6]
 8022788:	8852      	ldrh	r2, [r2, #2]
 802278a:	4413      	add	r3, r2
 802278c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802278e:	b21b      	sxth	r3, r3
 8022790:	930f      	str	r3, [sp, #60]	; 0x3c
 8022792:	4bbd      	ldr	r3, [pc, #756]	; (8022a88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8022794:	f893 b000 	ldrb.w	fp, [r3]
 8022798:	f10b 3cff 	add.w	ip, fp, #4294967295	; 0xffffffff
 802279c:	f1dc 0300 	rsbs	r3, ip, #0
 80227a0:	eb43 030c 	adc.w	r3, r3, ip
 80227a4:	930e      	str	r3, [sp, #56]	; 0x38
 80227a6:	4653      	mov	r3, sl
 80227a8:	f7f8 fc36 	bl	801b018 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80227ac:	4629      	mov	r1, r5
 80227ae:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80227b2:	4653      	mov	r3, sl
 80227b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80227b6:	a814      	add	r0, sp, #80	; 0x50
 80227b8:	f7f8 fc46 	bl	801b048 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80227bc:	a918      	add	r1, sp, #96	; 0x60
 80227be:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80227c2:	a817      	add	r0, sp, #92	; 0x5c
 80227c4:	f7f8 fd62 	bl	801b28c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80227c8:	f1ba 0f00 	cmp.w	sl, #0
 80227cc:	f040 80fe 	bne.w	80229cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 80227d0:	f1bb 0f01 	cmp.w	fp, #1
 80227d4:	f040 8102 	bne.w	80229dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 80227d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80227da:	b153      	cbz	r3, 80227f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80227dc:	2408      	movs	r4, #8
 80227de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80227e0:	fb94 f3f8 	sdiv	r3, r4, r8
 80227e4:	1e5c      	subs	r4, r3, #1
 80227e6:	4414      	add	r4, r2
 80227e8:	fb94 f4f3 	sdiv	r4, r4, r3
 80227ec:	fb14 f403 	smulbb	r4, r4, r3
 80227f0:	b2a4      	uxth	r4, r4
 80227f2:	b906      	cbnz	r6, 80227f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 80227f4:	b16f      	cbz	r7, 8022812 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 80227f6:	fb07 6304 	mla	r3, r7, r4, r6
 80227fa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80227fc:	463a      	mov	r2, r7
 80227fe:	fb08 f303 	mul.w	r3, r8, r3
 8022802:	f003 0707 	and.w	r7, r3, #7
 8022806:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 802280a:	9328      	str	r3, [sp, #160]	; 0xa0
 802280c:	eba9 0302 	sub.w	r3, r9, r2
 8022810:	930d      	str	r3, [sp, #52]	; 0x34
 8022812:	4651      	mov	r1, sl
 8022814:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022816:	f7ff ff05 	bl	8022624 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 802281a:	4651      	mov	r1, sl
 802281c:	4681      	mov	r9, r0
 802281e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022820:	f7ff ff30 	bl	8022684 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022828:	4683      	mov	fp, r0
 802282a:	eba3 0a02 	sub.w	sl, r3, r2
 802282e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022830:	459a      	cmp	sl, r3
 8022832:	bfa8      	it	ge
 8022834:	469a      	movge	sl, r3
 8022836:	f1ba 0f00 	cmp.w	sl, #0
 802283a:	f340 811b 	ble.w	8022a74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802283e:	1bad      	subs	r5, r5, r6
 8022840:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022842:	1b5d      	subs	r5, r3, r5
 8022844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022846:	429d      	cmp	r5, r3
 8022848:	bfd4      	ite	le
 802284a:	ebc6 0605 	rsble	r6, r6, r5
 802284e:	ebc6 0603 	rsbgt	r6, r6, r3
 8022852:	2e00      	cmp	r6, #0
 8022854:	f340 810e 	ble.w	8022a74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022858:	1ba4      	subs	r4, r4, r6
 802285a:	fb08 f304 	mul.w	r3, r8, r4
 802285e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022862:	2b00      	cmp	r3, #0
 8022864:	f040 810b 	bne.w	8022a7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8022868:	4b88      	ldr	r3, [pc, #544]	; (8022a8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 802286a:	6818      	ldr	r0, [r3, #0]
 802286c:	6803      	ldr	r3, [r0, #0]
 802286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022870:	4798      	blx	r3
 8022872:	2301      	movs	r3, #1
 8022874:	4a86      	ldr	r2, [pc, #536]	; (8022a90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8022876:	fa03 f308 	lsl.w	r3, r3, r8
 802287a:	8811      	ldrh	r1, [r2, #0]
 802287c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8022880:	3b01      	subs	r3, #1
 8022882:	b2db      	uxtb	r3, r3
 8022884:	930e      	str	r3, [sp, #56]	; 0x38
 8022886:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 802288a:	fb01 2303 	mla	r3, r1, r3, r2
 802288e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022892:	930a      	str	r3, [sp, #40]	; 0x28
 8022894:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022896:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802289a:	9313      	str	r3, [sp, #76]	; 0x4c
 802289c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802289e:	0a19      	lsrs	r1, r3, #8
 80228a0:	b2cb      	uxtb	r3, r1
 80228a2:	9312      	str	r3, [sp, #72]	; 0x48
 80228a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80228a6:	b2db      	uxtb	r3, r3
 80228a8:	9311      	str	r3, [sp, #68]	; 0x44
 80228aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80228ac:	095a      	lsrs	r2, r3, #5
 80228ae:	4b79      	ldr	r3, [pc, #484]	; (8022a94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 80228b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80228b4:	400b      	ands	r3, r1
 80228b6:	4313      	orrs	r3, r2
 80228b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80228ba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80228be:	4313      	orrs	r3, r2
 80228c0:	b29b      	uxth	r3, r3
 80228c2:	9310      	str	r3, [sp, #64]	; 0x40
 80228c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80228c6:	781a      	ldrb	r2, [r3, #0]
 80228c8:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80228cc:	fb06 b919 	mls	r9, r6, r9, fp
 80228d0:	413a      	asrs	r2, r7
 80228d2:	fb03 fb06 	mul.w	fp, r3, r6
 80228d6:	930d      	str	r3, [sp, #52]	; 0x34
 80228d8:	b2d2      	uxtb	r2, r2
 80228da:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80228de:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
 80228e2:	f0c0 80ea 	bcc.w	8022aba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 80228e6:	46b6      	mov	lr, r6
 80228e8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80228ec:	f11e 3eff 	adds.w	lr, lr, #4294967295	; 0xffffffff
 80228f0:	f0c0 80d2 	bcc.w	8022a98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 80228f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80228f6:	4013      	ands	r3, r2
 80228f8:	d055      	beq.n	80229a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 80228fa:	20ff      	movs	r0, #255	; 0xff
 80228fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80228fe:	fb90 f1f1 	sdiv	r1, r0, r1
 8022902:	434b      	muls	r3, r1
 8022904:	2bfe      	cmp	r3, #254	; 0xfe
 8022906:	dd03      	ble.n	8022910 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8022908:	990c      	ldr	r1, [sp, #48]	; 0x30
 802290a:	4281      	cmp	r1, r0
 802290c:	f000 80b9 	beq.w	8022a82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8022910:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022912:	f8bc 4000 	ldrh.w	r4, [ip]
 8022916:	fb11 f303 	smulbb	r3, r1, r3
 802291a:	1220      	asrs	r0, r4, #8
 802291c:	b29b      	uxth	r3, r3
 802291e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022922:	1c59      	adds	r1, r3, #1
 8022924:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022928:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802292c:	10e1      	asrs	r1, r4, #3
 802292e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022932:	00e4      	lsls	r4, r4, #3
 8022934:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022938:	b29d      	uxth	r5, r3
 802293a:	43db      	mvns	r3, r3
 802293c:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8022940:	b2db      	uxtb	r3, r3
 8022942:	b2e4      	uxtb	r4, r4
 8022944:	9309      	str	r3, [sp, #36]	; 0x24
 8022946:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022948:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802294c:	fb13 f905 	smulbb	r9, r3, r5
 8022950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022952:	fb00 9003 	mla	r0, r0, r3, r9
 8022956:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022958:	fb13 f905 	smulbb	r9, r3, r5
 802295c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802295e:	b280      	uxth	r0, r0
 8022960:	fb01 9103 	mla	r1, r1, r3, r9
 8022964:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022966:	fb13 f505 	smulbb	r5, r3, r5
 802296a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802296c:	b289      	uxth	r1, r1
 802296e:	fb04 5403 	mla	r4, r4, r3, r5
 8022972:	1c43      	adds	r3, r0, #1
 8022974:	b2a4      	uxth	r4, r4
 8022976:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802297a:	f104 0901 	add.w	r9, r4, #1
 802297e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022982:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8022986:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 802298a:	ea49 0000 	orr.w	r0, r9, r0
 802298e:	f101 0901 	add.w	r9, r1, #1
 8022992:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8022996:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802299a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802299e:	ea40 0009 	orr.w	r0, r0, r9
 80229a2:	f8ac 0000 	strh.w	r0, [ip]
 80229a6:	4447      	add	r7, r8
 80229a8:	b2bf      	uxth	r7, r7
 80229aa:	2f07      	cmp	r7, #7
 80229ac:	bf89      	itett	hi
 80229ae:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80229b0:	fa42 f208 	asrls.w	r2, r2, r8
 80229b4:	2700      	movhi	r7, #0
 80229b6:	785a      	ldrbhi	r2, [r3, #1]
 80229b8:	bf8a      	itet	hi
 80229ba:	3301      	addhi	r3, #1
 80229bc:	b2d2      	uxtbls	r2, r2
 80229be:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80229c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80229c2:	449c      	add	ip, r3
 80229c4:	e792      	b.n	80228ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 80229c6:	441d      	add	r5, r3
 80229c8:	b22d      	sxth	r5, r5
 80229ca:	e6c9      	b.n	8022760 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 80229cc:	f1ba 0f01 	cmp.w	sl, #1
 80229d0:	f47f af02 	bne.w	80227d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80229d4:	f1bb 0f01 	cmp.w	fp, #1
 80229d8:	f47f aefe 	bne.w	80227d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80229dc:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8022a8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 80229e0:	f8db 0000 	ldr.w	r0, [fp]
 80229e4:	6803      	ldr	r3, [r0, #0]
 80229e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229e8:	4798      	blx	r3
 80229ea:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80229ee:	465a      	mov	r2, fp
 80229f0:	d006      	beq.n	8022a00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 80229f2:	f1b8 0f04 	cmp.w	r8, #4
 80229f6:	d140      	bne.n	8022a7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80229f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80229fa:	3300      	adds	r3, #0
 80229fc:	bf18      	it	ne
 80229fe:	2301      	movne	r3, #1
 8022a00:	0580      	lsls	r0, r0, #22
 8022a02:	d563      	bpl.n	8022acc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8022a04:	f1b8 0f08 	cmp.w	r8, #8
 8022a08:	d160      	bne.n	8022acc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8022a0a:	2b00      	cmp	r3, #0
 8022a0c:	bf0c      	ite	eq
 8022a0e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8022a12:	f44f 7180 	movne.w	r1, #256	; 0x100
 8022a16:	2e00      	cmp	r6, #0
 8022a18:	f47f aede 	bne.w	80227d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022a1c:	2f00      	cmp	r7, #0
 8022a1e:	f47f aedb 	bne.w	80227d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a24:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022a26:	18eb      	adds	r3, r5, r3
 8022a28:	4283      	cmp	r3, r0
 8022a2a:	f73f aed5 	bgt.w	80227d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a30:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022a32:	444b      	add	r3, r9
 8022a34:	4283      	cmp	r3, r0
 8022a36:	f73f aecf 	bgt.w	80227d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022a3a:	f1b8 0f08 	cmp.w	r8, #8
 8022a3e:	6810      	ldr	r0, [r2, #0]
 8022a40:	f04f 0600 	mov.w	r6, #0
 8022a44:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8022a48:	bf18      	it	ne
 8022a4a:	3401      	addne	r4, #1
 8022a4c:	6805      	ldr	r5, [r0, #0]
 8022a4e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8022a52:	bf18      	it	ne
 8022a54:	f024 0401 	bicne.w	r4, r4, #1
 8022a58:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8022a5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022a5e:	bf18      	it	ne
 8022a60:	b2a4      	uxthne	r4, r4
 8022a62:	9104      	str	r1, [sp, #16]
 8022a64:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022a66:	e9cd 4900 	strd	r4, r9, [sp]
 8022a6a:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8022a6e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022a70:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 8022a72:	47a0      	blx	r4
 8022a74:	b019      	add	sp, #100	; 0x64
 8022a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a7a:	2300      	movs	r3, #0
 8022a7c:	e7c0      	b.n	8022a00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8022a7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022a80:	e6f7      	b.n	8022872 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 8022a82:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022a84:	e78d      	b.n	80229a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 8022a86:	bf00      	nop
 8022a88:	20015398 	.word	0x20015398
 8022a8c:	200153a0 	.word	0x200153a0
 8022a90:	2001539a 	.word	0x2001539a
 8022a94:	00fff800 	.word	0x00fff800
 8022a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022a9a:	b153      	cbz	r3, 8022ab2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8022a9c:	441f      	add	r7, r3
 8022a9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022aa0:	b2bf      	uxth	r7, r7
 8022aa2:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8022aa6:	f007 0707 	and.w	r7, r7, #7
 8022aaa:	781a      	ldrb	r2, [r3, #0]
 8022aac:	9328      	str	r3, [sp, #160]	; 0xa0
 8022aae:	413a      	asrs	r2, r7
 8022ab0:	b2d2      	uxtb	r2, r2
 8022ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ab4:	445b      	add	r3, fp
 8022ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8022ab8:	e711      	b.n	80228de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8022aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022abc:	2b00      	cmp	r3, #0
 8022abe:	d1d9      	bne.n	8022a74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022ac0:	4b05      	ldr	r3, [pc, #20]	; (8022ad8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 8022ac2:	6818      	ldr	r0, [r3, #0]
 8022ac4:	6803      	ldr	r3, [r0, #0]
 8022ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ac8:	4798      	blx	r3
 8022aca:	e7d3      	b.n	8022a74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022acc:	2b00      	cmp	r3, #0
 8022ace:	f43f ae83 	beq.w	80227d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022ad2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022ad6:	e79e      	b.n	8022a16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8022ad8:	200153a0 	.word	0x200153a0

08022adc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8022adc:	b538      	push	{r3, r4, r5, lr}
 8022ade:	4c15      	ldr	r4, [pc, #84]	; (8022b34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8022ae0:	4605      	mov	r5, r0
 8022ae2:	7823      	ldrb	r3, [r4, #0]
 8022ae4:	f3bf 8f5b 	dmb	ish
 8022ae8:	07da      	lsls	r2, r3, #31
 8022aea:	d40b      	bmi.n	8022b04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022aec:	4620      	mov	r0, r4
 8022aee:	f007 fd84 	bl	802a5fa <__cxa_guard_acquire>
 8022af2:	b138      	cbz	r0, 8022b04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022af4:	4620      	mov	r0, r4
 8022af6:	f007 fd8c 	bl	802a612 <__cxa_guard_release>
 8022afa:	4a0f      	ldr	r2, [pc, #60]	; (8022b38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022afc:	490f      	ldr	r1, [pc, #60]	; (8022b3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8022afe:	4810      	ldr	r0, [pc, #64]	; (8022b40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022b00:	f007 fd74 	bl	802a5ec <__aeabi_atexit>
 8022b04:	4c0f      	ldr	r4, [pc, #60]	; (8022b44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8022b06:	7823      	ldrb	r3, [r4, #0]
 8022b08:	f3bf 8f5b 	dmb	ish
 8022b0c:	07db      	lsls	r3, r3, #31
 8022b0e:	d40b      	bmi.n	8022b28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022b10:	4620      	mov	r0, r4
 8022b12:	f007 fd72 	bl	802a5fa <__cxa_guard_acquire>
 8022b16:	b138      	cbz	r0, 8022b28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022b18:	4620      	mov	r0, r4
 8022b1a:	f007 fd7a 	bl	802a612 <__cxa_guard_release>
 8022b1e:	4a06      	ldr	r2, [pc, #24]	; (8022b38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022b20:	4909      	ldr	r1, [pc, #36]	; (8022b48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8022b22:	480a      	ldr	r0, [pc, #40]	; (8022b4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022b24:	f007 fd62 	bl	802a5ec <__aeabi_atexit>
 8022b28:	4b05      	ldr	r3, [pc, #20]	; (8022b40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022b2a:	612b      	str	r3, [r5, #16]
 8022b2c:	4b07      	ldr	r3, [pc, #28]	; (8022b4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022b2e:	616b      	str	r3, [r5, #20]
 8022b30:	bd38      	pop	{r3, r4, r5, pc}
 8022b32:	bf00      	nop
 8022b34:	2001546c 	.word	0x2001546c
 8022b38:	20000000 	.word	0x20000000
 8022b3c:	08020b39 	.word	0x08020b39
 8022b40:	20000088 	.word	0x20000088
 8022b44:	20015470 	.word	0x20015470
 8022b48:	08020b37 	.word	0x08020b37
 8022b4c:	2000008c 	.word	0x2000008c

08022b50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8022b50:	b538      	push	{r3, r4, r5, lr}
 8022b52:	4c15      	ldr	r4, [pc, #84]	; (8022ba8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8022b54:	4605      	mov	r5, r0
 8022b56:	7823      	ldrb	r3, [r4, #0]
 8022b58:	f3bf 8f5b 	dmb	ish
 8022b5c:	07da      	lsls	r2, r3, #31
 8022b5e:	d40b      	bmi.n	8022b78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022b60:	4620      	mov	r0, r4
 8022b62:	f007 fd4a 	bl	802a5fa <__cxa_guard_acquire>
 8022b66:	b138      	cbz	r0, 8022b78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022b68:	4620      	mov	r0, r4
 8022b6a:	f007 fd52 	bl	802a612 <__cxa_guard_release>
 8022b6e:	4a0f      	ldr	r2, [pc, #60]	; (8022bac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022b70:	490f      	ldr	r1, [pc, #60]	; (8022bb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8022b72:	4810      	ldr	r0, [pc, #64]	; (8022bb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022b74:	f007 fd3a 	bl	802a5ec <__aeabi_atexit>
 8022b78:	4c0f      	ldr	r4, [pc, #60]	; (8022bb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8022b7a:	7823      	ldrb	r3, [r4, #0]
 8022b7c:	f3bf 8f5b 	dmb	ish
 8022b80:	07db      	lsls	r3, r3, #31
 8022b82:	d40b      	bmi.n	8022b9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022b84:	4620      	mov	r0, r4
 8022b86:	f007 fd38 	bl	802a5fa <__cxa_guard_acquire>
 8022b8a:	b138      	cbz	r0, 8022b9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022b8c:	4620      	mov	r0, r4
 8022b8e:	f007 fd40 	bl	802a612 <__cxa_guard_release>
 8022b92:	4a06      	ldr	r2, [pc, #24]	; (8022bac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022b94:	4909      	ldr	r1, [pc, #36]	; (8022bbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8022b96:	480a      	ldr	r0, [pc, #40]	; (8022bc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022b98:	f007 fd28 	bl	802a5ec <__aeabi_atexit>
 8022b9c:	4b05      	ldr	r3, [pc, #20]	; (8022bb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022b9e:	60ab      	str	r3, [r5, #8]
 8022ba0:	4b07      	ldr	r3, [pc, #28]	; (8022bc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022ba2:	60eb      	str	r3, [r5, #12]
 8022ba4:	bd38      	pop	{r3, r4, r5, pc}
 8022ba6:	bf00      	nop
 8022ba8:	20015444 	.word	0x20015444
 8022bac:	20000000 	.word	0x20000000
 8022bb0:	08020b3d 	.word	0x08020b3d
 8022bb4:	20000060 	.word	0x20000060
 8022bb8:	20015448 	.word	0x20015448
 8022bbc:	08020b3b 	.word	0x08020b3b
 8022bc0:	20000064 	.word	0x20000064

08022bc4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8022bc4:	b510      	push	{r4, lr}
 8022bc6:	4604      	mov	r4, r0
 8022bc8:	f7ff ff88 	bl	8022adc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8022bcc:	4620      	mov	r0, r4
 8022bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022bd2:	f7ff bfbd 	b.w	8022b50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08022bd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8022bd8:	b538      	push	{r3, r4, r5, lr}
 8022bda:	4c15      	ldr	r4, [pc, #84]	; (8022c30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8022bdc:	4605      	mov	r5, r0
 8022bde:	7823      	ldrb	r3, [r4, #0]
 8022be0:	f3bf 8f5b 	dmb	ish
 8022be4:	07da      	lsls	r2, r3, #31
 8022be6:	d40b      	bmi.n	8022c00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022be8:	4620      	mov	r0, r4
 8022bea:	f007 fd06 	bl	802a5fa <__cxa_guard_acquire>
 8022bee:	b138      	cbz	r0, 8022c00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022bf0:	4620      	mov	r0, r4
 8022bf2:	f007 fd0e 	bl	802a612 <__cxa_guard_release>
 8022bf6:	4a0f      	ldr	r2, [pc, #60]	; (8022c34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022bf8:	490f      	ldr	r1, [pc, #60]	; (8022c38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8022bfa:	4810      	ldr	r0, [pc, #64]	; (8022c3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022bfc:	f007 fcf6 	bl	802a5ec <__aeabi_atexit>
 8022c00:	4c0f      	ldr	r4, [pc, #60]	; (8022c40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8022c02:	7823      	ldrb	r3, [r4, #0]
 8022c04:	f3bf 8f5b 	dmb	ish
 8022c08:	07db      	lsls	r3, r3, #31
 8022c0a:	d40b      	bmi.n	8022c24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022c0c:	4620      	mov	r0, r4
 8022c0e:	f007 fcf4 	bl	802a5fa <__cxa_guard_acquire>
 8022c12:	b138      	cbz	r0, 8022c24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022c14:	4620      	mov	r0, r4
 8022c16:	f007 fcfc 	bl	802a612 <__cxa_guard_release>
 8022c1a:	4a06      	ldr	r2, [pc, #24]	; (8022c34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022c1c:	4909      	ldr	r1, [pc, #36]	; (8022c44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022c1e:	480a      	ldr	r0, [pc, #40]	; (8022c48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022c20:	f007 fce4 	bl	802a5ec <__aeabi_atexit>
 8022c24:	4b05      	ldr	r3, [pc, #20]	; (8022c3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022c26:	622b      	str	r3, [r5, #32]
 8022c28:	4b07      	ldr	r3, [pc, #28]	; (8022c48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022c2a:	626b      	str	r3, [r5, #36]	; 0x24
 8022c2c:	bd38      	pop	{r3, r4, r5, pc}
 8022c2e:	bf00      	nop
 8022c30:	20015474 	.word	0x20015474
 8022c34:	20000000 	.word	0x20000000
 8022c38:	08020b31 	.word	0x08020b31
 8022c3c:	20000090 	.word	0x20000090
 8022c40:	20015478 	.word	0x20015478
 8022c44:	08020b2f 	.word	0x08020b2f
 8022c48:	20000094 	.word	0x20000094

08022c4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022c4c:	b538      	push	{r3, r4, r5, lr}
 8022c4e:	4c15      	ldr	r4, [pc, #84]	; (8022ca4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022c50:	4605      	mov	r5, r0
 8022c52:	7823      	ldrb	r3, [r4, #0]
 8022c54:	f3bf 8f5b 	dmb	ish
 8022c58:	07da      	lsls	r2, r3, #31
 8022c5a:	d40b      	bmi.n	8022c74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022c5c:	4620      	mov	r0, r4
 8022c5e:	f007 fccc 	bl	802a5fa <__cxa_guard_acquire>
 8022c62:	b138      	cbz	r0, 8022c74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022c64:	4620      	mov	r0, r4
 8022c66:	f007 fcd4 	bl	802a612 <__cxa_guard_release>
 8022c6a:	4a0f      	ldr	r2, [pc, #60]	; (8022ca8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022c6c:	490f      	ldr	r1, [pc, #60]	; (8022cac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8022c6e:	4810      	ldr	r0, [pc, #64]	; (8022cb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022c70:	f007 fcbc 	bl	802a5ec <__aeabi_atexit>
 8022c74:	4c0f      	ldr	r4, [pc, #60]	; (8022cb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8022c76:	7823      	ldrb	r3, [r4, #0]
 8022c78:	f3bf 8f5b 	dmb	ish
 8022c7c:	07db      	lsls	r3, r3, #31
 8022c7e:	d40b      	bmi.n	8022c98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022c80:	4620      	mov	r0, r4
 8022c82:	f007 fcba 	bl	802a5fa <__cxa_guard_acquire>
 8022c86:	b138      	cbz	r0, 8022c98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022c88:	4620      	mov	r0, r4
 8022c8a:	f007 fcc2 	bl	802a612 <__cxa_guard_release>
 8022c8e:	4a06      	ldr	r2, [pc, #24]	; (8022ca8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022c90:	4909      	ldr	r1, [pc, #36]	; (8022cb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8022c92:	480a      	ldr	r0, [pc, #40]	; (8022cbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022c94:	f007 fcaa 	bl	802a5ec <__aeabi_atexit>
 8022c98:	4b05      	ldr	r3, [pc, #20]	; (8022cb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022c9a:	61ab      	str	r3, [r5, #24]
 8022c9c:	4b07      	ldr	r3, [pc, #28]	; (8022cbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022c9e:	61eb      	str	r3, [r5, #28]
 8022ca0:	bd38      	pop	{r3, r4, r5, pc}
 8022ca2:	bf00      	nop
 8022ca4:	2001544c 	.word	0x2001544c
 8022ca8:	20000000 	.word	0x20000000
 8022cac:	08020b35 	.word	0x08020b35
 8022cb0:	20000068 	.word	0x20000068
 8022cb4:	20015450 	.word	0x20015450
 8022cb8:	08020b33 	.word	0x08020b33
 8022cbc:	2000006c 	.word	0x2000006c

08022cc0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8022cc0:	b510      	push	{r4, lr}
 8022cc2:	4604      	mov	r4, r0
 8022cc4:	f7ff ff88 	bl	8022bd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8022cc8:	4620      	mov	r0, r4
 8022cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022cce:	f7ff bfbd 	b.w	8022c4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08022cd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8022cd4:	b538      	push	{r3, r4, r5, lr}
 8022cd6:	4c15      	ldr	r4, [pc, #84]	; (8022d2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8022cd8:	4605      	mov	r5, r0
 8022cda:	7823      	ldrb	r3, [r4, #0]
 8022cdc:	f3bf 8f5b 	dmb	ish
 8022ce0:	07da      	lsls	r2, r3, #31
 8022ce2:	d40b      	bmi.n	8022cfc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022ce4:	4620      	mov	r0, r4
 8022ce6:	f007 fc88 	bl	802a5fa <__cxa_guard_acquire>
 8022cea:	b138      	cbz	r0, 8022cfc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022cec:	4620      	mov	r0, r4
 8022cee:	f007 fc90 	bl	802a612 <__cxa_guard_release>
 8022cf2:	4a0f      	ldr	r2, [pc, #60]	; (8022d30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022cf4:	490f      	ldr	r1, [pc, #60]	; (8022d34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8022cf6:	4810      	ldr	r0, [pc, #64]	; (8022d38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022cf8:	f007 fc78 	bl	802a5ec <__aeabi_atexit>
 8022cfc:	4c0f      	ldr	r4, [pc, #60]	; (8022d3c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8022cfe:	7823      	ldrb	r3, [r4, #0]
 8022d00:	f3bf 8f5b 	dmb	ish
 8022d04:	07db      	lsls	r3, r3, #31
 8022d06:	d40b      	bmi.n	8022d20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022d08:	4620      	mov	r0, r4
 8022d0a:	f007 fc76 	bl	802a5fa <__cxa_guard_acquire>
 8022d0e:	b138      	cbz	r0, 8022d20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022d10:	4620      	mov	r0, r4
 8022d12:	f007 fc7e 	bl	802a612 <__cxa_guard_release>
 8022d16:	4a06      	ldr	r2, [pc, #24]	; (8022d30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022d18:	4909      	ldr	r1, [pc, #36]	; (8022d40 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8022d1a:	480a      	ldr	r0, [pc, #40]	; (8022d44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022d1c:	f007 fc66 	bl	802a5ec <__aeabi_atexit>
 8022d20:	4b05      	ldr	r3, [pc, #20]	; (8022d38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022d22:	632b      	str	r3, [r5, #48]	; 0x30
 8022d24:	4b07      	ldr	r3, [pc, #28]	; (8022d44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022d26:	636b      	str	r3, [r5, #52]	; 0x34
 8022d28:	bd38      	pop	{r3, r4, r5, pc}
 8022d2a:	bf00      	nop
 8022d2c:	20015484 	.word	0x20015484
 8022d30:	20000000 	.word	0x20000000
 8022d34:	08020b29 	.word	0x08020b29
 8022d38:	200000a0 	.word	0x200000a0
 8022d3c:	20015488 	.word	0x20015488
 8022d40:	08020b27 	.word	0x08020b27
 8022d44:	200000a4 	.word	0x200000a4

08022d48 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022d48:	b538      	push	{r3, r4, r5, lr}
 8022d4a:	4c15      	ldr	r4, [pc, #84]	; (8022da0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022d4c:	4605      	mov	r5, r0
 8022d4e:	7823      	ldrb	r3, [r4, #0]
 8022d50:	f3bf 8f5b 	dmb	ish
 8022d54:	07da      	lsls	r2, r3, #31
 8022d56:	d40b      	bmi.n	8022d70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022d58:	4620      	mov	r0, r4
 8022d5a:	f007 fc4e 	bl	802a5fa <__cxa_guard_acquire>
 8022d5e:	b138      	cbz	r0, 8022d70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022d60:	4620      	mov	r0, r4
 8022d62:	f007 fc56 	bl	802a612 <__cxa_guard_release>
 8022d66:	4a0f      	ldr	r2, [pc, #60]	; (8022da4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022d68:	490f      	ldr	r1, [pc, #60]	; (8022da8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8022d6a:	4810      	ldr	r0, [pc, #64]	; (8022dac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022d6c:	f007 fc3e 	bl	802a5ec <__aeabi_atexit>
 8022d70:	4c0f      	ldr	r4, [pc, #60]	; (8022db0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8022d72:	7823      	ldrb	r3, [r4, #0]
 8022d74:	f3bf 8f5b 	dmb	ish
 8022d78:	07db      	lsls	r3, r3, #31
 8022d7a:	d40b      	bmi.n	8022d94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022d7c:	4620      	mov	r0, r4
 8022d7e:	f007 fc3c 	bl	802a5fa <__cxa_guard_acquire>
 8022d82:	b138      	cbz	r0, 8022d94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022d84:	4620      	mov	r0, r4
 8022d86:	f007 fc44 	bl	802a612 <__cxa_guard_release>
 8022d8a:	4a06      	ldr	r2, [pc, #24]	; (8022da4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022d8c:	4909      	ldr	r1, [pc, #36]	; (8022db4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8022d8e:	480a      	ldr	r0, [pc, #40]	; (8022db8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022d90:	f007 fc2c 	bl	802a5ec <__aeabi_atexit>
 8022d94:	4b05      	ldr	r3, [pc, #20]	; (8022dac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022d96:	62ab      	str	r3, [r5, #40]	; 0x28
 8022d98:	4b07      	ldr	r3, [pc, #28]	; (8022db8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022d9a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8022d9c:	bd38      	pop	{r3, r4, r5, pc}
 8022d9e:	bf00      	nop
 8022da0:	20015454 	.word	0x20015454
 8022da4:	20000000 	.word	0x20000000
 8022da8:	08020b2d 	.word	0x08020b2d
 8022dac:	20000070 	.word	0x20000070
 8022db0:	20015458 	.word	0x20015458
 8022db4:	08020b2b 	.word	0x08020b2b
 8022db8:	20000074 	.word	0x20000074

08022dbc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022dbc:	b510      	push	{r4, lr}
 8022dbe:	4604      	mov	r4, r0
 8022dc0:	f7ff ff88 	bl	8022cd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8022dc4:	4620      	mov	r0, r4
 8022dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022dca:	f7ff bfbd 	b.w	8022d48 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022dd0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8022dd0:	b538      	push	{r3, r4, r5, lr}
 8022dd2:	4c15      	ldr	r4, [pc, #84]	; (8022e28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8022dd4:	4605      	mov	r5, r0
 8022dd6:	7823      	ldrb	r3, [r4, #0]
 8022dd8:	f3bf 8f5b 	dmb	ish
 8022ddc:	07da      	lsls	r2, r3, #31
 8022dde:	d40b      	bmi.n	8022df8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022de0:	4620      	mov	r0, r4
 8022de2:	f007 fc0a 	bl	802a5fa <__cxa_guard_acquire>
 8022de6:	b138      	cbz	r0, 8022df8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022de8:	4620      	mov	r0, r4
 8022dea:	f007 fc12 	bl	802a612 <__cxa_guard_release>
 8022dee:	4a0f      	ldr	r2, [pc, #60]	; (8022e2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022df0:	490f      	ldr	r1, [pc, #60]	; (8022e30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8022df2:	4810      	ldr	r0, [pc, #64]	; (8022e34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022df4:	f007 fbfa 	bl	802a5ec <__aeabi_atexit>
 8022df8:	4c0f      	ldr	r4, [pc, #60]	; (8022e38 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8022dfa:	7823      	ldrb	r3, [r4, #0]
 8022dfc:	f3bf 8f5b 	dmb	ish
 8022e00:	07db      	lsls	r3, r3, #31
 8022e02:	d40b      	bmi.n	8022e1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022e04:	4620      	mov	r0, r4
 8022e06:	f007 fbf8 	bl	802a5fa <__cxa_guard_acquire>
 8022e0a:	b138      	cbz	r0, 8022e1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022e0c:	4620      	mov	r0, r4
 8022e0e:	f007 fc00 	bl	802a612 <__cxa_guard_release>
 8022e12:	4a06      	ldr	r2, [pc, #24]	; (8022e2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022e14:	4909      	ldr	r1, [pc, #36]	; (8022e3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8022e16:	480a      	ldr	r0, [pc, #40]	; (8022e40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022e18:	f007 fbe8 	bl	802a5ec <__aeabi_atexit>
 8022e1c:	4b05      	ldr	r3, [pc, #20]	; (8022e34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022e1e:	652b      	str	r3, [r5, #80]	; 0x50
 8022e20:	4b07      	ldr	r3, [pc, #28]	; (8022e40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022e22:	656b      	str	r3, [r5, #84]	; 0x54
 8022e24:	bd38      	pop	{r3, r4, r5, pc}
 8022e26:	bf00      	nop
 8022e28:	2001548c 	.word	0x2001548c
 8022e2c:	20000000 	.word	0x20000000
 8022e30:	08020b19 	.word	0x08020b19
 8022e34:	200000a8 	.word	0x200000a8
 8022e38:	20015490 	.word	0x20015490
 8022e3c:	08020b17 	.word	0x08020b17
 8022e40:	200000ac 	.word	0x200000ac

08022e44 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8022e44:	b538      	push	{r3, r4, r5, lr}
 8022e46:	4c15      	ldr	r4, [pc, #84]	; (8022e9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8022e48:	4605      	mov	r5, r0
 8022e4a:	7823      	ldrb	r3, [r4, #0]
 8022e4c:	f3bf 8f5b 	dmb	ish
 8022e50:	07da      	lsls	r2, r3, #31
 8022e52:	d40b      	bmi.n	8022e6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022e54:	4620      	mov	r0, r4
 8022e56:	f007 fbd0 	bl	802a5fa <__cxa_guard_acquire>
 8022e5a:	b138      	cbz	r0, 8022e6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022e5c:	4620      	mov	r0, r4
 8022e5e:	f007 fbd8 	bl	802a612 <__cxa_guard_release>
 8022e62:	4a0f      	ldr	r2, [pc, #60]	; (8022ea0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022e64:	490f      	ldr	r1, [pc, #60]	; (8022ea4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8022e66:	4810      	ldr	r0, [pc, #64]	; (8022ea8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022e68:	f007 fbc0 	bl	802a5ec <__aeabi_atexit>
 8022e6c:	4c0f      	ldr	r4, [pc, #60]	; (8022eac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8022e6e:	7823      	ldrb	r3, [r4, #0]
 8022e70:	f3bf 8f5b 	dmb	ish
 8022e74:	07db      	lsls	r3, r3, #31
 8022e76:	d40b      	bmi.n	8022e90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022e78:	4620      	mov	r0, r4
 8022e7a:	f007 fbbe 	bl	802a5fa <__cxa_guard_acquire>
 8022e7e:	b138      	cbz	r0, 8022e90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022e80:	4620      	mov	r0, r4
 8022e82:	f007 fbc6 	bl	802a612 <__cxa_guard_release>
 8022e86:	4a06      	ldr	r2, [pc, #24]	; (8022ea0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022e88:	4909      	ldr	r1, [pc, #36]	; (8022eb0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8022e8a:	480a      	ldr	r0, [pc, #40]	; (8022eb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022e8c:	f007 fbae 	bl	802a5ec <__aeabi_atexit>
 8022e90:	4b05      	ldr	r3, [pc, #20]	; (8022ea8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022e92:	64ab      	str	r3, [r5, #72]	; 0x48
 8022e94:	4b07      	ldr	r3, [pc, #28]	; (8022eb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022e96:	64eb      	str	r3, [r5, #76]	; 0x4c
 8022e98:	bd38      	pop	{r3, r4, r5, pc}
 8022e9a:	bf00      	nop
 8022e9c:	20015494 	.word	0x20015494
 8022ea0:	20000000 	.word	0x20000000
 8022ea4:	08020b1d 	.word	0x08020b1d
 8022ea8:	200000b0 	.word	0x200000b0
 8022eac:	20015498 	.word	0x20015498
 8022eb0:	08020b1b 	.word	0x08020b1b
 8022eb4:	200000b4 	.word	0x200000b4

08022eb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022eb8:	b538      	push	{r3, r4, r5, lr}
 8022eba:	4c15      	ldr	r4, [pc, #84]	; (8022f10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022ebc:	4605      	mov	r5, r0
 8022ebe:	7823      	ldrb	r3, [r4, #0]
 8022ec0:	f3bf 8f5b 	dmb	ish
 8022ec4:	07da      	lsls	r2, r3, #31
 8022ec6:	d40b      	bmi.n	8022ee0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022ec8:	4620      	mov	r0, r4
 8022eca:	f007 fb96 	bl	802a5fa <__cxa_guard_acquire>
 8022ece:	b138      	cbz	r0, 8022ee0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022ed0:	4620      	mov	r0, r4
 8022ed2:	f007 fb9e 	bl	802a612 <__cxa_guard_release>
 8022ed6:	4a0f      	ldr	r2, [pc, #60]	; (8022f14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022ed8:	490f      	ldr	r1, [pc, #60]	; (8022f18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8022eda:	4810      	ldr	r0, [pc, #64]	; (8022f1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022edc:	f007 fb86 	bl	802a5ec <__aeabi_atexit>
 8022ee0:	4c0f      	ldr	r4, [pc, #60]	; (8022f20 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8022ee2:	7823      	ldrb	r3, [r4, #0]
 8022ee4:	f3bf 8f5b 	dmb	ish
 8022ee8:	07db      	lsls	r3, r3, #31
 8022eea:	d40b      	bmi.n	8022f04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022eec:	4620      	mov	r0, r4
 8022eee:	f007 fb84 	bl	802a5fa <__cxa_guard_acquire>
 8022ef2:	b138      	cbz	r0, 8022f04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022ef4:	4620      	mov	r0, r4
 8022ef6:	f007 fb8c 	bl	802a612 <__cxa_guard_release>
 8022efa:	4a06      	ldr	r2, [pc, #24]	; (8022f14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022efc:	4909      	ldr	r1, [pc, #36]	; (8022f24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8022efe:	480a      	ldr	r0, [pc, #40]	; (8022f28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022f00:	f007 fb74 	bl	802a5ec <__aeabi_atexit>
 8022f04:	4b05      	ldr	r3, [pc, #20]	; (8022f1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022f06:	642b      	str	r3, [r5, #64]	; 0x40
 8022f08:	4b07      	ldr	r3, [pc, #28]	; (8022f28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022f0a:	646b      	str	r3, [r5, #68]	; 0x44
 8022f0c:	bd38      	pop	{r3, r4, r5, pc}
 8022f0e:	bf00      	nop
 8022f10:	2001545c 	.word	0x2001545c
 8022f14:	20000000 	.word	0x20000000
 8022f18:	08020b21 	.word	0x08020b21
 8022f1c:	20000078 	.word	0x20000078
 8022f20:	20015460 	.word	0x20015460
 8022f24:	08020b1f 	.word	0x08020b1f
 8022f28:	2000007c 	.word	0x2000007c

08022f2c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8022f2c:	b538      	push	{r3, r4, r5, lr}
 8022f2e:	4c15      	ldr	r4, [pc, #84]	; (8022f84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8022f30:	4605      	mov	r5, r0
 8022f32:	7823      	ldrb	r3, [r4, #0]
 8022f34:	f3bf 8f5b 	dmb	ish
 8022f38:	07da      	lsls	r2, r3, #31
 8022f3a:	d40b      	bmi.n	8022f54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022f3c:	4620      	mov	r0, r4
 8022f3e:	f007 fb5c 	bl	802a5fa <__cxa_guard_acquire>
 8022f42:	b138      	cbz	r0, 8022f54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022f44:	4620      	mov	r0, r4
 8022f46:	f007 fb64 	bl	802a612 <__cxa_guard_release>
 8022f4a:	4a0f      	ldr	r2, [pc, #60]	; (8022f88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022f4c:	490f      	ldr	r1, [pc, #60]	; (8022f8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8022f4e:	4810      	ldr	r0, [pc, #64]	; (8022f90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022f50:	f007 fb4c 	bl	802a5ec <__aeabi_atexit>
 8022f54:	4c0f      	ldr	r4, [pc, #60]	; (8022f94 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8022f56:	7823      	ldrb	r3, [r4, #0]
 8022f58:	f3bf 8f5b 	dmb	ish
 8022f5c:	07db      	lsls	r3, r3, #31
 8022f5e:	d40b      	bmi.n	8022f78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022f60:	4620      	mov	r0, r4
 8022f62:	f007 fb4a 	bl	802a5fa <__cxa_guard_acquire>
 8022f66:	b138      	cbz	r0, 8022f78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022f68:	4620      	mov	r0, r4
 8022f6a:	f007 fb52 	bl	802a612 <__cxa_guard_release>
 8022f6e:	4a06      	ldr	r2, [pc, #24]	; (8022f88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022f70:	4909      	ldr	r1, [pc, #36]	; (8022f98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8022f72:	480a      	ldr	r0, [pc, #40]	; (8022f9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022f74:	f007 fb3a 	bl	802a5ec <__aeabi_atexit>
 8022f78:	4b05      	ldr	r3, [pc, #20]	; (8022f90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022f7a:	63ab      	str	r3, [r5, #56]	; 0x38
 8022f7c:	4b07      	ldr	r3, [pc, #28]	; (8022f9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022f7e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022f80:	bd38      	pop	{r3, r4, r5, pc}
 8022f82:	bf00      	nop
 8022f84:	2001547c 	.word	0x2001547c
 8022f88:	20000000 	.word	0x20000000
 8022f8c:	08020b25 	.word	0x08020b25
 8022f90:	20000098 	.word	0x20000098
 8022f94:	20015480 	.word	0x20015480
 8022f98:	08020b23 	.word	0x08020b23
 8022f9c:	2000009c 	.word	0x2000009c

08022fa0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8022fa0:	b510      	push	{r4, lr}
 8022fa2:	4604      	mov	r4, r0
 8022fa4:	f7ff ff14 	bl	8022dd0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8022fa8:	4620      	mov	r0, r4
 8022faa:	f7ff ff85 	bl	8022eb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8022fae:	4620      	mov	r0, r4
 8022fb0:	f7ff ff48 	bl	8022e44 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8022fb4:	4620      	mov	r0, r4
 8022fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022fba:	f7ff bfb7 	b.w	8022f2c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08022fc0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022fc0:	b538      	push	{r3, r4, r5, lr}
 8022fc2:	4c15      	ldr	r4, [pc, #84]	; (8023018 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022fc4:	4605      	mov	r5, r0
 8022fc6:	7823      	ldrb	r3, [r4, #0]
 8022fc8:	f3bf 8f5b 	dmb	ish
 8022fcc:	07da      	lsls	r2, r3, #31
 8022fce:	d40b      	bmi.n	8022fe8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022fd0:	4620      	mov	r0, r4
 8022fd2:	f007 fb12 	bl	802a5fa <__cxa_guard_acquire>
 8022fd6:	b138      	cbz	r0, 8022fe8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022fd8:	4620      	mov	r0, r4
 8022fda:	f007 fb1a 	bl	802a612 <__cxa_guard_release>
 8022fde:	4a0f      	ldr	r2, [pc, #60]	; (802301c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022fe0:	490f      	ldr	r1, [pc, #60]	; (8023020 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8022fe2:	4810      	ldr	r0, [pc, #64]	; (8023024 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022fe4:	f007 fb02 	bl	802a5ec <__aeabi_atexit>
 8022fe8:	4c0f      	ldr	r4, [pc, #60]	; (8023028 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8022fea:	7823      	ldrb	r3, [r4, #0]
 8022fec:	f3bf 8f5b 	dmb	ish
 8022ff0:	07db      	lsls	r3, r3, #31
 8022ff2:	d40b      	bmi.n	802300c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022ff4:	4620      	mov	r0, r4
 8022ff6:	f007 fb00 	bl	802a5fa <__cxa_guard_acquire>
 8022ffa:	b138      	cbz	r0, 802300c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022ffc:	4620      	mov	r0, r4
 8022ffe:	f007 fb08 	bl	802a612 <__cxa_guard_release>
 8023002:	4a06      	ldr	r2, [pc, #24]	; (802301c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023004:	4909      	ldr	r1, [pc, #36]	; (802302c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023006:	480a      	ldr	r0, [pc, #40]	; (8023030 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023008:	f007 faf0 	bl	802a5ec <__aeabi_atexit>
 802300c:	4b05      	ldr	r3, [pc, #20]	; (8023024 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802300e:	662b      	str	r3, [r5, #96]	; 0x60
 8023010:	4b07      	ldr	r3, [pc, #28]	; (8023030 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023012:	666b      	str	r3, [r5, #100]	; 0x64
 8023014:	bd38      	pop	{r3, r4, r5, pc}
 8023016:	bf00      	nop
 8023018:	20015464 	.word	0x20015464
 802301c:	20000000 	.word	0x20000000
 8023020:	08020b11 	.word	0x08020b11
 8023024:	20000080 	.word	0x20000080
 8023028:	20015468 	.word	0x20015468
 802302c:	08020b0f 	.word	0x08020b0f
 8023030:	20000084 	.word	0x20000084

08023034 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023034:	b538      	push	{r3, r4, r5, lr}
 8023036:	4c15      	ldr	r4, [pc, #84]	; (802308c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023038:	4605      	mov	r5, r0
 802303a:	7823      	ldrb	r3, [r4, #0]
 802303c:	f3bf 8f5b 	dmb	ish
 8023040:	07da      	lsls	r2, r3, #31
 8023042:	d40b      	bmi.n	802305c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023044:	4620      	mov	r0, r4
 8023046:	f007 fad8 	bl	802a5fa <__cxa_guard_acquire>
 802304a:	b138      	cbz	r0, 802305c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802304c:	4620      	mov	r0, r4
 802304e:	f007 fae0 	bl	802a612 <__cxa_guard_release>
 8023052:	4a0f      	ldr	r2, [pc, #60]	; (8023090 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023054:	490f      	ldr	r1, [pc, #60]	; (8023094 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023056:	4810      	ldr	r0, [pc, #64]	; (8023098 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023058:	f007 fac8 	bl	802a5ec <__aeabi_atexit>
 802305c:	4c0f      	ldr	r4, [pc, #60]	; (802309c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802305e:	7823      	ldrb	r3, [r4, #0]
 8023060:	f3bf 8f5b 	dmb	ish
 8023064:	07db      	lsls	r3, r3, #31
 8023066:	d40b      	bmi.n	8023080 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023068:	4620      	mov	r0, r4
 802306a:	f007 fac6 	bl	802a5fa <__cxa_guard_acquire>
 802306e:	b138      	cbz	r0, 8023080 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023070:	4620      	mov	r0, r4
 8023072:	f007 face 	bl	802a612 <__cxa_guard_release>
 8023076:	4a06      	ldr	r2, [pc, #24]	; (8023090 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023078:	4909      	ldr	r1, [pc, #36]	; (80230a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802307a:	480a      	ldr	r0, [pc, #40]	; (80230a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802307c:	f007 fab6 	bl	802a5ec <__aeabi_atexit>
 8023080:	4b05      	ldr	r3, [pc, #20]	; (8023098 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023082:	65ab      	str	r3, [r5, #88]	; 0x58
 8023084:	4b07      	ldr	r3, [pc, #28]	; (80230a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023086:	65eb      	str	r3, [r5, #92]	; 0x5c
 8023088:	bd38      	pop	{r3, r4, r5, pc}
 802308a:	bf00      	nop
 802308c:	2001543c 	.word	0x2001543c
 8023090:	20000000 	.word	0x20000000
 8023094:	08020b15 	.word	0x08020b15
 8023098:	20000058 	.word	0x20000058
 802309c:	20015440 	.word	0x20015440
 80230a0:	08020b13 	.word	0x08020b13
 80230a4:	2000005c 	.word	0x2000005c

080230a8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80230a8:	b510      	push	{r4, lr}
 80230aa:	4604      	mov	r4, r0
 80230ac:	f7ff ff88 	bl	8022fc0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80230b0:	4620      	mov	r0, r4
 80230b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230b6:	f7ff bfbd 	b.w	8023034 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080230bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80230bc:	b538      	push	{r3, r4, r5, lr}
 80230be:	4c15      	ldr	r4, [pc, #84]	; (8023114 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80230c0:	4605      	mov	r5, r0
 80230c2:	7823      	ldrb	r3, [r4, #0]
 80230c4:	f3bf 8f5b 	dmb	ish
 80230c8:	07da      	lsls	r2, r3, #31
 80230ca:	d40b      	bmi.n	80230e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80230cc:	4620      	mov	r0, r4
 80230ce:	f007 fa94 	bl	802a5fa <__cxa_guard_acquire>
 80230d2:	b138      	cbz	r0, 80230e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80230d4:	4620      	mov	r0, r4
 80230d6:	f007 fa9c 	bl	802a612 <__cxa_guard_release>
 80230da:	4a0f      	ldr	r2, [pc, #60]	; (8023118 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80230dc:	490f      	ldr	r1, [pc, #60]	; (802311c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80230de:	4810      	ldr	r0, [pc, #64]	; (8023120 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80230e0:	f007 fa84 	bl	802a5ec <__aeabi_atexit>
 80230e4:	4c0f      	ldr	r4, [pc, #60]	; (8023124 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80230e6:	7823      	ldrb	r3, [r4, #0]
 80230e8:	f3bf 8f5b 	dmb	ish
 80230ec:	07db      	lsls	r3, r3, #31
 80230ee:	d40b      	bmi.n	8023108 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80230f0:	4620      	mov	r0, r4
 80230f2:	f007 fa82 	bl	802a5fa <__cxa_guard_acquire>
 80230f6:	b138      	cbz	r0, 8023108 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80230f8:	4620      	mov	r0, r4
 80230fa:	f007 fa8a 	bl	802a612 <__cxa_guard_release>
 80230fe:	4a06      	ldr	r2, [pc, #24]	; (8023118 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023100:	4909      	ldr	r1, [pc, #36]	; (8023128 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023102:	480a      	ldr	r0, [pc, #40]	; (802312c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023104:	f007 fa72 	bl	802a5ec <__aeabi_atexit>
 8023108:	4b05      	ldr	r3, [pc, #20]	; (8023120 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802310a:	672b      	str	r3, [r5, #112]	; 0x70
 802310c:	4b07      	ldr	r3, [pc, #28]	; (802312c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802310e:	676b      	str	r3, [r5, #116]	; 0x74
 8023110:	bd38      	pop	{r3, r4, r5, pc}
 8023112:	bf00      	nop
 8023114:	20015434 	.word	0x20015434
 8023118:	20000000 	.word	0x20000000
 802311c:	08020b09 	.word	0x08020b09
 8023120:	20000050 	.word	0x20000050
 8023124:	20015438 	.word	0x20015438
 8023128:	08020b07 	.word	0x08020b07
 802312c:	20000054 	.word	0x20000054

08023130 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023130:	b538      	push	{r3, r4, r5, lr}
 8023132:	4c15      	ldr	r4, [pc, #84]	; (8023188 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023134:	4605      	mov	r5, r0
 8023136:	7823      	ldrb	r3, [r4, #0]
 8023138:	f3bf 8f5b 	dmb	ish
 802313c:	07da      	lsls	r2, r3, #31
 802313e:	d40b      	bmi.n	8023158 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023140:	4620      	mov	r0, r4
 8023142:	f007 fa5a 	bl	802a5fa <__cxa_guard_acquire>
 8023146:	b138      	cbz	r0, 8023158 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023148:	4620      	mov	r0, r4
 802314a:	f007 fa62 	bl	802a612 <__cxa_guard_release>
 802314e:	4a0f      	ldr	r2, [pc, #60]	; (802318c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023150:	490f      	ldr	r1, [pc, #60]	; (8023190 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023152:	4810      	ldr	r0, [pc, #64]	; (8023194 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023154:	f007 fa4a 	bl	802a5ec <__aeabi_atexit>
 8023158:	4c0f      	ldr	r4, [pc, #60]	; (8023198 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802315a:	7823      	ldrb	r3, [r4, #0]
 802315c:	f3bf 8f5b 	dmb	ish
 8023160:	07db      	lsls	r3, r3, #31
 8023162:	d40b      	bmi.n	802317c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023164:	4620      	mov	r0, r4
 8023166:	f007 fa48 	bl	802a5fa <__cxa_guard_acquire>
 802316a:	b138      	cbz	r0, 802317c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802316c:	4620      	mov	r0, r4
 802316e:	f007 fa50 	bl	802a612 <__cxa_guard_release>
 8023172:	4a06      	ldr	r2, [pc, #24]	; (802318c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023174:	4909      	ldr	r1, [pc, #36]	; (802319c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023176:	480a      	ldr	r0, [pc, #40]	; (80231a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023178:	f007 fa38 	bl	802a5ec <__aeabi_atexit>
 802317c:	4b05      	ldr	r3, [pc, #20]	; (8023194 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802317e:	66ab      	str	r3, [r5, #104]	; 0x68
 8023180:	4b07      	ldr	r3, [pc, #28]	; (80231a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023182:	66eb      	str	r3, [r5, #108]	; 0x6c
 8023184:	bd38      	pop	{r3, r4, r5, pc}
 8023186:	bf00      	nop
 8023188:	2001542c 	.word	0x2001542c
 802318c:	20000000 	.word	0x20000000
 8023190:	08020b0d 	.word	0x08020b0d
 8023194:	20000048 	.word	0x20000048
 8023198:	20015430 	.word	0x20015430
 802319c:	08020b0b 	.word	0x08020b0b
 80231a0:	2000004c 	.word	0x2000004c

080231a4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80231a4:	b510      	push	{r4, lr}
 80231a6:	4604      	mov	r4, r0
 80231a8:	f7ff ff88 	bl	80230bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80231ac:	4620      	mov	r0, r4
 80231ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80231b2:	f7ff bfbd 	b.w	8023130 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080231b6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80231b6:	b510      	push	{r4, lr}
 80231b8:	4604      	mov	r4, r0
 80231ba:	f7ff fff3 	bl	80231a4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80231be:	4620      	mov	r0, r4
 80231c0:	f7ff ff72 	bl	80230a8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80231c4:	4620      	mov	r0, r4
 80231c6:	f7ff fdf9 	bl	8022dbc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80231ca:	4620      	mov	r0, r4
 80231cc:	f7ff fcfa 	bl	8022bc4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 80231d0:	4620      	mov	r0, r4
 80231d2:	f7ff fd75 	bl	8022cc0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 80231d6:	4620      	mov	r0, r4
 80231d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80231dc:	f7ff bee0 	b.w	8022fa0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080231e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 80231e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231e4:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 80231e8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80231ec:	f1be 0f00 	cmp.w	lr, #0
 80231f0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80231f4:	fb0e 4708 	mla	r7, lr, r8, r4
 80231f8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80231fc:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8023200:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8023204:	eb02 0a07 	add.w	sl, r2, r7
 8023208:	8808      	ldrh	r0, [r1, #0]
 802320a:	db37      	blt.n	802327c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 802320c:	45f3      	cmp	fp, lr
 802320e:	dd35      	ble.n	802327c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8023210:	2c00      	cmp	r4, #0
 8023212:	db31      	blt.n	8023278 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8023214:	45a0      	cmp	r8, r4
 8023216:	dd2f      	ble.n	8023278 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8023218:	5dd2      	ldrb	r2, [r2, r7]
 802321a:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 802321e:	1c62      	adds	r2, r4, #1
 8023220:	d42f      	bmi.n	8023282 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8023222:	4590      	cmp	r8, r2
 8023224:	dd2d      	ble.n	8023282 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8023226:	b366      	cbz	r6, 8023282 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8023228:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802322c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8023230:	f11e 0e01 	adds.w	lr, lr, #1
 8023234:	d429      	bmi.n	802328a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8023236:	45f3      	cmp	fp, lr
 8023238:	dd27      	ble.n	802328a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802323a:	f1bc 0f00 	cmp.w	ip, #0
 802323e:	f000 80a1 	beq.w	8023384 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8023242:	2c00      	cmp	r4, #0
 8023244:	db1f      	blt.n	8023286 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8023246:	45a0      	cmp	r8, r4
 8023248:	dd1d      	ble.n	8023286 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802324a:	f81a 2008 	ldrb.w	r2, [sl, r8]
 802324e:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8023252:	3401      	adds	r4, #1
 8023254:	d41c      	bmi.n	8023290 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8023256:	45a0      	cmp	r8, r4
 8023258:	dd1a      	ble.n	8023290 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 802325a:	b1de      	cbz	r6, 8023294 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 802325c:	44d0      	add	r8, sl
 802325e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023262:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8023266:	2e0f      	cmp	r6, #15
 8023268:	d915      	bls.n	8023296 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 802326a:	4b49      	ldr	r3, [pc, #292]	; (8023390 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 802326c:	f240 11db 	movw	r1, #475	; 0x1db
 8023270:	4a48      	ldr	r2, [pc, #288]	; (8023394 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8023272:	4849      	ldr	r0, [pc, #292]	; (8023398 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8023274:	f007 f9ee 	bl	802a654 <__assert_func>
 8023278:	4681      	mov	r9, r0
 802327a:	e7d0      	b.n	802321e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 802327c:	4607      	mov	r7, r0
 802327e:	4681      	mov	r9, r0
 8023280:	e7d6      	b.n	8023230 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8023282:	4607      	mov	r7, r0
 8023284:	e7d4      	b.n	8023230 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8023286:	4686      	mov	lr, r0
 8023288:	e7e3      	b.n	8023252 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 802328a:	4603      	mov	r3, r0
 802328c:	4686      	mov	lr, r0
 802328e:	e7ea      	b.n	8023266 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8023290:	4603      	mov	r3, r0
 8023292:	e7e8      	b.n	8023266 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8023294:	4603      	mov	r3, r0
 8023296:	f1bc 0f0f 	cmp.w	ip, #15
 802329a:	d8e6      	bhi.n	802326a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 802329c:	fb16 f80c 	smulbb	r8, r6, ip
 80232a0:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80232a4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80232a8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80232ac:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80232b0:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80232b4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80232b8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80232bc:	ea44 0909 	orr.w	r9, r4, r9
 80232c0:	f1cc 0410 	rsb	r4, ip, #16
 80232c4:	041a      	lsls	r2, r3, #16
 80232c6:	ea4a 0707 	orr.w	r7, sl, r7
 80232ca:	1ba4      	subs	r4, r4, r6
 80232cc:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80232d0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80232d4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80232d8:	4377      	muls	r7, r6
 80232da:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80232de:	4313      	orrs	r3, r2
 80232e0:	ea4f 420e 	mov.w	r2, lr, lsl #16
 80232e4:	fb04 7409 	mla	r4, r4, r9, r7
 80232e8:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 80232ec:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80232f0:	b2af      	uxth	r7, r5
 80232f2:	fb08 4303 	mla	r3, r8, r3, r4
 80232f6:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 80232fa:	43ed      	mvns	r5, r5
 80232fc:	10c6      	asrs	r6, r0, #3
 80232fe:	4322      	orrs	r2, r4
 8023300:	b2ed      	uxtb	r5, r5
 8023302:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023306:	fb0c 3202 	mla	r2, ip, r2, r3
 802330a:	fb16 f605 	smulbb	r6, r6, r5
 802330e:	0d53      	lsrs	r3, r2, #21
 8023310:	0952      	lsrs	r2, r2, #5
 8023312:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023316:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802331a:	431a      	orrs	r2, r3
 802331c:	b293      	uxth	r3, r2
 802331e:	1202      	asrs	r2, r0, #8
 8023320:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023324:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023328:	00dc      	lsls	r4, r3, #3
 802332a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802332e:	fb12 f205 	smulbb	r2, r2, r5
 8023332:	b2e4      	uxtb	r4, r4
 8023334:	fb0c 2c07 	mla	ip, ip, r7, r2
 8023338:	10da      	asrs	r2, r3, #3
 802333a:	00c3      	lsls	r3, r0, #3
 802333c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023340:	fa1f fc8c 	uxth.w	ip, ip
 8023344:	b2db      	uxtb	r3, r3
 8023346:	fb02 6207 	mla	r2, r2, r7, r6
 802334a:	fb13 f305 	smulbb	r3, r3, r5
 802334e:	b296      	uxth	r6, r2
 8023350:	fb04 3307 	mla	r3, r4, r7, r3
 8023354:	b29a      	uxth	r2, r3
 8023356:	f10c 0301 	add.w	r3, ip, #1
 802335a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802335e:	1c53      	adds	r3, r2, #1
 8023360:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023364:	1c72      	adds	r2, r6, #1
 8023366:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802336a:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802336e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023372:	0952      	lsrs	r2, r2, #5
 8023374:	ea43 030c 	orr.w	r3, r3, ip
 8023378:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802337c:	4313      	orrs	r3, r2
 802337e:	800b      	strh	r3, [r1, #0]
 8023380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023384:	2e0f      	cmp	r6, #15
 8023386:	f63f af70 	bhi.w	802326a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 802338a:	4603      	mov	r3, r0
 802338c:	4686      	mov	lr, r0
 802338e:	e785      	b.n	802329c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8023390:	0803215f 	.word	0x0803215f
 8023394:	08032737 	.word	0x08032737
 8023398:	0803212c 	.word	0x0803212c

0802339c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233a0:	ed2d 8b08 	vpush	{d8-d11}
 80233a4:	b099      	sub	sp, #100	; 0x64
 80233a6:	eeb0 aa40 	vmov.f32	s20, s0
 80233aa:	eef0 9a60 	vmov.f32	s19, s1
 80233ae:	9215      	str	r2, [sp, #84]	; 0x54
 80233b0:	eeb0 9a41 	vmov.f32	s18, s2
 80233b4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80233b6:	eeb0 8a62 	vmov.f32	s16, s5
 80233ba:	9309      	str	r3, [sp, #36]	; 0x24
 80233bc:	eef0 8a43 	vmov.f32	s17, s6
 80233c0:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80233c4:	eef0 ba44 	vmov.f32	s23, s8
 80233c8:	9016      	str	r0, [sp, #88]	; 0x58
 80233ca:	eeb0 ba64 	vmov.f32	s22, s9
 80233ce:	930d      	str	r3, [sp, #52]	; 0x34
 80233d0:	eef0 aa45 	vmov.f32	s21, s10
 80233d4:	6850      	ldr	r0, [r2, #4]
 80233d6:	910c      	str	r1, [sp, #48]	; 0x30
 80233d8:	6812      	ldr	r2, [r2, #0]
 80233da:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80233de:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 80233e2:	fb00 1303 	mla	r3, r0, r3, r1
 80233e6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 80233ea:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80233ec:	681b      	ldr	r3, [r3, #0]
 80233ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80233f0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80233f2:	685e      	ldr	r6, [r3, #4]
 80233f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80233f6:	3604      	adds	r6, #4
 80233f8:	43db      	mvns	r3, r3
 80233fa:	b2db      	uxtb	r3, r3
 80233fc:	930a      	str	r3, [sp, #40]	; 0x28
 80233fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023400:	2b00      	cmp	r3, #0
 8023402:	dc03      	bgt.n	802340c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023406:	2b00      	cmp	r3, #0
 8023408:	f340 8225 	ble.w	8023856 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 802340c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802340e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023412:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023416:	1e48      	subs	r0, r1, #1
 8023418:	1e57      	subs	r7, r2, #1
 802341a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802341c:	2b00      	cmp	r3, #0
 802341e:	f340 80e3 	ble.w	80235e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8023422:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8023426:	ea4f 4325 	mov.w	r3, r5, asr #16
 802342a:	d406      	bmi.n	802343a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802342c:	4584      	cmp	ip, r0
 802342e:	da04      	bge.n	802343a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023430:	2b00      	cmp	r3, #0
 8023432:	db02      	blt.n	802343a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023434:	42bb      	cmp	r3, r7
 8023436:	f2c0 80d8 	blt.w	80235ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802343a:	f11c 0c01 	adds.w	ip, ip, #1
 802343e:	f100 80c9 	bmi.w	80235d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023442:	4561      	cmp	r1, ip
 8023444:	f2c0 80c6 	blt.w	80235d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023448:	3301      	adds	r3, #1
 802344a:	f100 80c3 	bmi.w	80235d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802344e:	429a      	cmp	r2, r3
 8023450:	f2c0 80c0 	blt.w	80235d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023454:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023458:	4647      	mov	r7, r8
 802345a:	f1bb 0f00 	cmp.w	fp, #0
 802345e:	f340 80e3 	ble.w	8023628 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023462:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8023464:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023468:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802346a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802346e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023472:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023476:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802347a:	689b      	ldr	r3, [r3, #8]
 802347c:	f100 8121 	bmi.w	80236c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023480:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 8023484:	454a      	cmp	r2, r9
 8023486:	f280 811c 	bge.w	80236c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802348a:	f1bc 0f00 	cmp.w	ip, #0
 802348e:	f2c0 8118 	blt.w	80236c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023492:	f10e 39ff 	add.w	r9, lr, #4294967295	; 0xffffffff
 8023496:	45cc      	cmp	ip, r9
 8023498:	f280 8113 	bge.w	80236c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802349c:	b21b      	sxth	r3, r3
 802349e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80234a0:	fb0c 2203 	mla	r2, ip, r3, r2
 80234a4:	eb04 0902 	add.w	r9, r4, r2
 80234a8:	5ca2      	ldrb	r2, [r4, r2]
 80234aa:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80234ae:	2800      	cmp	r0, #0
 80234b0:	f000 80fe 	beq.w	80236b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80234b4:	f899 2001 	ldrb.w	r2, [r9, #1]
 80234b8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80234bc:	9211      	str	r2, [sp, #68]	; 0x44
 80234be:	b151      	cbz	r1, 80234d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80234c0:	eb09 0203 	add.w	r2, r9, r3
 80234c4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80234c8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80234cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80234ce:	7853      	ldrb	r3, [r2, #1]
 80234d0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80234d4:	9312      	str	r3, [sp, #72]	; 0x48
 80234d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80234d8:	fb10 f201 	smulbb	r2, r0, r1
 80234dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80234de:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80234e2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80234e6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80234ea:	10d2      	asrs	r2, r2, #3
 80234ec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80234f0:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80234f4:	ea4c 0c03 	orr.w	ip, ip, r3
 80234f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80234fa:	041b      	lsls	r3, r3, #16
 80234fc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023500:	4323      	orrs	r3, r4
 8023502:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023504:	4353      	muls	r3, r2
 8023506:	fb09 330c 	mla	r3, r9, ip, r3
 802350a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802350e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023512:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023516:	ea4c 0e0e 	orr.w	lr, ip, lr
 802351a:	f1c1 0c10 	rsb	ip, r1, #16
 802351e:	ebac 0c00 	sub.w	ip, ip, r0
 8023522:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023526:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802352a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802352e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023530:	0418      	lsls	r0, r3, #16
 8023532:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023536:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802353a:	4318      	orrs	r0, r3
 802353c:	fb02 c200 	mla	r2, r2, r0, ip
 8023540:	8838      	ldrh	r0, [r7, #0]
 8023542:	0d53      	lsrs	r3, r2, #21
 8023544:	0952      	lsrs	r2, r2, #5
 8023546:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802354a:	1201      	asrs	r1, r0, #8
 802354c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023550:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8023554:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023558:	00c0      	lsls	r0, r0, #3
 802355a:	431a      	orrs	r2, r3
 802355c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8023560:	fb11 f104 	smulbb	r1, r1, r4
 8023564:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023568:	b292      	uxth	r2, r2
 802356a:	fb1e fe04 	smulbb	lr, lr, r4
 802356e:	b2c0      	uxtb	r0, r0
 8023570:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8023574:	fb10 f004 	smulbb	r0, r0, r4
 8023578:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802357c:	fb0c 1c03 	mla	ip, ip, r3, r1
 8023580:	10d1      	asrs	r1, r2, #3
 8023582:	00d2      	lsls	r2, r2, #3
 8023584:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023588:	fa1f fc8c 	uxth.w	ip, ip
 802358c:	b2d2      	uxtb	r2, r2
 802358e:	fb01 e103 	mla	r1, r1, r3, lr
 8023592:	fb02 0303 	mla	r3, r2, r3, r0
 8023596:	b289      	uxth	r1, r1
 8023598:	b29a      	uxth	r2, r3
 802359a:	f10c 0301 	add.w	r3, ip, #1
 802359e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80235a2:	1c53      	adds	r3, r2, #1
 80235a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80235a8:	1c4a      	adds	r2, r1, #1
 80235aa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80235ae:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80235b2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80235b6:	0949      	lsrs	r1, r1, #5
 80235b8:	ea43 030c 	orr.w	r3, r3, ip
 80235bc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80235c0:	430b      	orrs	r3, r1
 80235c2:	803b      	strh	r3, [r7, #0]
 80235c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80235c6:	3702      	adds	r7, #2
 80235c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80235cc:	449a      	add	sl, r3
 80235ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80235d0:	441d      	add	r5, r3
 80235d2:	e742      	b.n	802345a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80235d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80235d6:	f108 0802 	add.w	r8, r8, #2
 80235da:	449a      	add	sl, r3
 80235dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80235de:	441d      	add	r5, r3
 80235e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80235e2:	3b01      	subs	r3, #1
 80235e4:	9309      	str	r3, [sp, #36]	; 0x24
 80235e6:	e718      	b.n	802341a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80235e8:	d023      	beq.n	8023632 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80235ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80235ec:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80235ee:	3b01      	subs	r3, #1
 80235f0:	fb00 a003 	mla	r0, r0, r3, sl
 80235f4:	1400      	asrs	r0, r0, #16
 80235f6:	f53f af2d 	bmi.w	8023454 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80235fa:	3901      	subs	r1, #1
 80235fc:	4288      	cmp	r0, r1
 80235fe:	f6bf af29 	bge.w	8023454 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023602:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8023604:	fb01 5303 	mla	r3, r1, r3, r5
 8023608:	141b      	asrs	r3, r3, #16
 802360a:	f53f af23 	bmi.w	8023454 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802360e:	3a01      	subs	r2, #1
 8023610:	4293      	cmp	r3, r2
 8023612:	f6bf af1f 	bge.w	8023454 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023616:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802361a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 802361e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8023622:	f1be 0f00 	cmp.w	lr, #0
 8023626:	dc6c      	bgt.n	8023702 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8023628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802362a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802362e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8023632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023634:	2b00      	cmp	r3, #0
 8023636:	f340 810e 	ble.w	8023856 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 802363a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802363e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023640:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023644:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023648:	eef0 6a48 	vmov.f32	s13, s16
 802364c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023650:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023654:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023658:	ee16 aa90 	vmov	sl, s13
 802365c:	eef0 6a68 	vmov.f32	s13, s17
 8023660:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023664:	ee16 5a90 	vmov	r5, s13
 8023668:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802366c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023670:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023674:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023678:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802367c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023680:	ee18 2a10 	vmov	r2, s16
 8023684:	eeb0 8a47 	vmov.f32	s16, s14
 8023688:	fb92 f3f3 	sdiv	r3, r2, r3
 802368c:	ee18 2a90 	vmov	r2, s17
 8023690:	932d      	str	r3, [sp, #180]	; 0xb4
 8023692:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023694:	eef0 8a67 	vmov.f32	s17, s15
 8023698:	fb92 f3f3 	sdiv	r3, r2, r3
 802369c:	932e      	str	r3, [sp, #184]	; 0xb8
 802369e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80236a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80236a2:	3b01      	subs	r3, #1
 80236a4:	930c      	str	r3, [sp, #48]	; 0x30
 80236a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80236a8:	bf08      	it	eq
 80236aa:	4613      	moveq	r3, r2
 80236ac:	9309      	str	r3, [sp, #36]	; 0x24
 80236ae:	e6a6      	b.n	80233fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80236b0:	2900      	cmp	r1, #0
 80236b2:	f43f af10 	beq.w	80234d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80236b6:	f819 3003 	ldrb.w	r3, [r9, r3]
 80236ba:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80236be:	930f      	str	r3, [sp, #60]	; 0x3c
 80236c0:	e709      	b.n	80234d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80236c2:	f112 0901 	adds.w	r9, r2, #1
 80236c6:	f53f af7d 	bmi.w	80235c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80236ca:	454b      	cmp	r3, r9
 80236cc:	f6ff af7a 	blt.w	80235c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80236d0:	f11c 0901 	adds.w	r9, ip, #1
 80236d4:	f53f af76 	bmi.w	80235c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80236d8:	45ce      	cmp	lr, r9
 80236da:	f6ff af73 	blt.w	80235c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80236de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80236e0:	b21b      	sxth	r3, r3
 80236e2:	9202      	str	r2, [sp, #8]
 80236e4:	fa0f f28e 	sxth.w	r2, lr
 80236e8:	9300      	str	r3, [sp, #0]
 80236ea:	4633      	mov	r3, r6
 80236ec:	9201      	str	r2, [sp, #4]
 80236ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80236f0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80236f4:	e9cd c003 	strd	ip, r0, [sp, #12]
 80236f8:	4639      	mov	r1, r7
 80236fa:	9816      	ldr	r0, [sp, #88]	; 0x58
 80236fc:	f7ff fd70 	bl	80231e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8023700:	e760      	b.n	80235c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023702:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023704:	ea4f 422a 	mov.w	r2, sl, asr #16
 8023708:	1429      	asrs	r1, r5, #16
 802370a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802370c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023710:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8023714:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023718:	fb03 2101 	mla	r1, r3, r1, r2
 802371c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802371e:	440a      	add	r2, r1
 8023720:	5c61      	ldrb	r1, [r4, r1]
 8023722:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8023726:	f1bc 0f00 	cmp.w	ip, #0
 802372a:	f000 808c 	beq.w	8023846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 802372e:	7857      	ldrb	r7, [r2, #1]
 8023730:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8023734:	9413      	str	r4, [sp, #76]	; 0x4c
 8023736:	b140      	cbz	r0, 802374a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023738:	18d7      	adds	r7, r2, r3
 802373a:	5cd3      	ldrb	r3, [r2, r3]
 802373c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023740:	9310      	str	r3, [sp, #64]	; 0x40
 8023742:	787b      	ldrb	r3, [r7, #1]
 8023744:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023748:	9314      	str	r3, [sp, #80]	; 0x50
 802374a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802374c:	fb1c f200 	smulbb	r2, ip, r0
 8023750:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023752:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8023756:	041f      	lsls	r7, r3, #16
 8023758:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802375c:	10d2      	asrs	r2, r2, #3
 802375e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8023762:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8023766:	431f      	orrs	r7, r3
 8023768:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 802376c:	9317      	str	r3, [sp, #92]	; 0x5c
 802376e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023770:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023772:	041b      	lsls	r3, r3, #16
 8023774:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023778:	ea43 030b 	orr.w	r3, r3, fp
 802377c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023780:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023784:	4353      	muls	r3, r2
 8023786:	fb04 3707 	mla	r7, r4, r7, r3
 802378a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802378e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023790:	ea43 0b01 	orr.w	fp, r3, r1
 8023794:	f1c0 0110 	rsb	r1, r0, #16
 8023798:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802379a:	eba1 0c0c 	sub.w	ip, r1, ip
 802379e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80237a2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80237a6:	fb0c 770b 	mla	r7, ip, fp, r7
 80237aa:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80237ae:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 80237b2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80237b6:	ea4c 0c0b 	orr.w	ip, ip, fp
 80237ba:	fb02 770c 	mla	r7, r2, ip, r7
 80237be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80237c0:	0d79      	lsrs	r1, r7, #21
 80237c2:	8812      	ldrh	r2, [r2, #0]
 80237c4:	097f      	lsrs	r7, r7, #5
 80237c6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80237ca:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80237ce:	430f      	orrs	r7, r1
 80237d0:	1211      	asrs	r1, r2, #8
 80237d2:	b2bb      	uxth	r3, r7
 80237d4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80237d8:	10d7      	asrs	r7, r2, #3
 80237da:	fb11 f104 	smulbb	r1, r1, r4
 80237de:	1218      	asrs	r0, r3, #8
 80237e0:	00d2      	lsls	r2, r2, #3
 80237e2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80237e6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80237ea:	fb17 f704 	smulbb	r7, r7, r4
 80237ee:	b2d2      	uxtb	r2, r2
 80237f0:	fb00 1009 	mla	r0, r0, r9, r1
 80237f4:	10d9      	asrs	r1, r3, #3
 80237f6:	fb12 f204 	smulbb	r2, r2, r4
 80237fa:	00db      	lsls	r3, r3, #3
 80237fc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023800:	b280      	uxth	r0, r0
 8023802:	b2db      	uxtb	r3, r3
 8023804:	fb01 7109 	mla	r1, r1, r9, r7
 8023808:	fb03 2309 	mla	r3, r3, r9, r2
 802380c:	1c42      	adds	r2, r0, #1
 802380e:	b289      	uxth	r1, r1
 8023810:	b29b      	uxth	r3, r3
 8023812:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023816:	1c4f      	adds	r7, r1, #1
 8023818:	1c5a      	adds	r2, r3, #1
 802381a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802381e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023822:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023828:	0949      	lsrs	r1, r1, #5
 802382a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802382e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023832:	4310      	orrs	r0, r2
 8023834:	4308      	orrs	r0, r1
 8023836:	f823 0b02 	strh.w	r0, [r3], #2
 802383a:	930e      	str	r3, [sp, #56]	; 0x38
 802383c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802383e:	449a      	add	sl, r3
 8023840:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023842:	441d      	add	r5, r3
 8023844:	e6ed      	b.n	8023622 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8023846:	2800      	cmp	r0, #0
 8023848:	f43f af7f 	beq.w	802374a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802384c:	5cd3      	ldrb	r3, [r2, r3]
 802384e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023852:	9310      	str	r3, [sp, #64]	; 0x40
 8023854:	e779      	b.n	802374a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023856:	b019      	add	sp, #100	; 0x64
 8023858:	ecbd 8b08 	vpop	{d8-d11}
 802385c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023860 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8023860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023864:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8023868:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 802386c:	2e00      	cmp	r6, #0
 802386e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023872:	fb06 570e 	mla	r7, r6, lr, r5
 8023876:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 802387a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802387e:	eb02 0807 	add.w	r8, r2, r7
 8023882:	8808      	ldrh	r0, [r1, #0]
 8023884:	db38      	blt.n	80238f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8023886:	45b1      	cmp	r9, r6
 8023888:	dd36      	ble.n	80238f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 802388a:	2d00      	cmp	r5, #0
 802388c:	db32      	blt.n	80238f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 802388e:	45ae      	cmp	lr, r5
 8023890:	dd30      	ble.n	80238f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8023892:	5dd2      	ldrb	r2, [r2, r7]
 8023894:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8023898:	1c6a      	adds	r2, r5, #1
 802389a:	d430      	bmi.n	80238fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 802389c:	4596      	cmp	lr, r2
 802389e:	dd2e      	ble.n	80238fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80238a0:	b36c      	cbz	r4, 80238fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80238a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80238a6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80238aa:	3601      	adds	r6, #1
 80238ac:	d42b      	bmi.n	8023906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80238ae:	45b1      	cmp	r9, r6
 80238b0:	dd29      	ble.n	8023906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80238b2:	f1bc 0f00 	cmp.w	ip, #0
 80238b6:	d028      	beq.n	802390a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 80238b8:	2d00      	cmp	r5, #0
 80238ba:	db22      	blt.n	8023902 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80238bc:	45ae      	cmp	lr, r5
 80238be:	dd20      	ble.n	8023902 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80238c0:	f818 600e 	ldrb.w	r6, [r8, lr]
 80238c4:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 80238c8:	3501      	adds	r5, #1
 80238ca:	d407      	bmi.n	80238dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80238cc:	45ae      	cmp	lr, r5
 80238ce:	dd05      	ble.n	80238dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80238d0:	b134      	cbz	r4, 80238e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80238d2:	44c6      	add	lr, r8
 80238d4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80238d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80238dc:	2c0f      	cmp	r4, #15
 80238de:	d802      	bhi.n	80238e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80238e0:	f1bc 0f0f 	cmp.w	ip, #15
 80238e4:	d914      	bls.n	8023910 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 80238e6:	4b26      	ldr	r3, [pc, #152]	; (8023980 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 80238e8:	f240 11db 	movw	r1, #475	; 0x1db
 80238ec:	4a25      	ldr	r2, [pc, #148]	; (8023984 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 80238ee:	4826      	ldr	r0, [pc, #152]	; (8023988 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 80238f0:	f006 feb0 	bl	802a654 <__assert_func>
 80238f4:	4607      	mov	r7, r0
 80238f6:	e7cf      	b.n	8023898 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 80238f8:	4602      	mov	r2, r0
 80238fa:	4607      	mov	r7, r0
 80238fc:	e7d5      	b.n	80238aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80238fe:	4602      	mov	r2, r0
 8023900:	e7d3      	b.n	80238aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8023902:	4606      	mov	r6, r0
 8023904:	e7e0      	b.n	80238c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8023906:	4606      	mov	r6, r0
 8023908:	e7e8      	b.n	80238dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 802390a:	2c0f      	cmp	r4, #15
 802390c:	d8eb      	bhi.n	80238e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802390e:	4606      	mov	r6, r0
 8023910:	fb14 f30c 	smulbb	r3, r4, ip
 8023914:	043d      	lsls	r5, r7, #16
 8023916:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 802391a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802391e:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8023922:	10db      	asrs	r3, r3, #3
 8023924:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023928:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802392c:	432f      	orrs	r7, r5
 802392e:	f1cc 0510 	rsb	r5, ip, #16
 8023932:	ea4e 0202 	orr.w	r2, lr, r2
 8023936:	1b2d      	subs	r5, r5, r4
 8023938:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 802393c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8023940:	4354      	muls	r4, r2
 8023942:	fb05 4507 	mla	r5, r5, r7, r4
 8023946:	0404      	lsls	r4, r0, #16
 8023948:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802394c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023950:	4320      	orrs	r0, r4
 8023952:	fb03 5400 	mla	r4, r3, r0, r5
 8023956:	0430      	lsls	r0, r6, #16
 8023958:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 802395c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023960:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023964:	4330      	orrs	r0, r6
 8023966:	fb03 4000 	mla	r0, r3, r0, r4
 802396a:	0d43      	lsrs	r3, r0, #21
 802396c:	0940      	lsrs	r0, r0, #5
 802396e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023972:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023976:	4318      	orrs	r0, r3
 8023978:	8008      	strh	r0, [r1, #0]
 802397a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802397e:	bf00      	nop
 8023980:	0803215f 	.word	0x0803215f
 8023984:	08032737 	.word	0x08032737
 8023988:	0803212c 	.word	0x0803212c

0802398c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023990:	ed2d 8b0a 	vpush	{d8-d12}
 8023994:	b093      	sub	sp, #76	; 0x4c
 8023996:	eeb0 aa40 	vmov.f32	s20, s0
 802399a:	eef0 9a60 	vmov.f32	s19, s1
 802399e:	920f      	str	r2, [sp, #60]	; 0x3c
 80239a0:	eeb0 9a41 	vmov.f32	s18, s2
 80239a4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80239a6:	eeb0 8a62 	vmov.f32	s16, s5
 80239aa:	9010      	str	r0, [sp, #64]	; 0x40
 80239ac:	eef0 8a43 	vmov.f32	s17, s6
 80239b0:	6850      	ldr	r0, [r2, #4]
 80239b2:	eeb0 ca44 	vmov.f32	s24, s8
 80239b6:	9108      	str	r1, [sp, #32]
 80239b8:	eef0 ba64 	vmov.f32	s23, s9
 80239bc:	9306      	str	r3, [sp, #24]
 80239be:	eeb0 ba45 	vmov.f32	s22, s10
 80239c2:	6812      	ldr	r2, [r2, #0]
 80239c4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80239c8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80239cc:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80239d0:	fb00 1303 	mla	r3, r0, r3, r1
 80239d4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80239d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80239da:	681b      	ldr	r3, [r3, #0]
 80239dc:	9307      	str	r3, [sp, #28]
 80239de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80239e0:	685f      	ldr	r7, [r3, #4]
 80239e2:	3704      	adds	r7, #4
 80239e4:	9b08      	ldr	r3, [sp, #32]
 80239e6:	2b00      	cmp	r3, #0
 80239e8:	dc03      	bgt.n	80239f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80239ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80239ec:	2b00      	cmp	r3, #0
 80239ee:	f340 81b2 	ble.w	8023d56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80239f2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80239f4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80239f8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80239fc:	1e48      	subs	r0, r1, #1
 80239fe:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8023a02:	9b06      	ldr	r3, [sp, #24]
 8023a04:	2b00      	cmp	r3, #0
 8023a06:	f340 80a9 	ble.w	8023b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023a0a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023a0e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023a12:	d406      	bmi.n	8023a22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023a14:	4586      	cmp	lr, r0
 8023a16:	da04      	bge.n	8023a22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023a18:	2b00      	cmp	r3, #0
 8023a1a:	db02      	blt.n	8023a22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023a1c:	4563      	cmp	r3, ip
 8023a1e:	f2c0 809e 	blt.w	8023b5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8023a22:	f11e 0e01 	adds.w	lr, lr, #1
 8023a26:	f100 808f 	bmi.w	8023b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023a2a:	4571      	cmp	r1, lr
 8023a2c:	f2c0 808c 	blt.w	8023b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023a30:	3301      	adds	r3, #1
 8023a32:	f100 8089 	bmi.w	8023b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023a36:	429a      	cmp	r2, r3
 8023a38:	f2c0 8086 	blt.w	8023b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023a3c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023a40:	46c8      	mov	r8, r9
 8023a42:	f1bb 0f00 	cmp.w	fp, #0
 8023a46:	f340 80a6 	ble.w	8023b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023a4a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023a4c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023a50:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023a52:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023a56:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023a5a:	1422      	asrs	r2, r4, #16
 8023a5c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023a60:	689b      	ldr	r3, [r3, #8]
 8023a62:	f100 80e3 	bmi.w	8023c2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023a66:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8023a6a:	4552      	cmp	r2, sl
 8023a6c:	f280 80de 	bge.w	8023c2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023a70:	f1bc 0f00 	cmp.w	ip, #0
 8023a74:	f2c0 80da 	blt.w	8023c2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023a78:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8023a7c:	45d4      	cmp	ip, sl
 8023a7e:	f280 80d5 	bge.w	8023c2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023a82:	b21b      	sxth	r3, r3
 8023a84:	9d07      	ldr	r5, [sp, #28]
 8023a86:	fb0c 2203 	mla	r2, ip, r3, r2
 8023a8a:	eb05 0a02 	add.w	sl, r5, r2
 8023a8e:	5caa      	ldrb	r2, [r5, r2]
 8023a90:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8023a94:	2800      	cmp	r0, #0
 8023a96:	f000 80c0 	beq.w	8023c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8023a9a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023a9e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8023aa2:	920b      	str	r2, [sp, #44]	; 0x2c
 8023aa4:	b151      	cbz	r1, 8023abc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023aa6:	eb0a 0203 	add.w	r2, sl, r3
 8023aaa:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023aae:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8023ab4:	7853      	ldrb	r3, [r2, #1]
 8023ab6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023aba:	930c      	str	r3, [sp, #48]	; 0x30
 8023abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023abe:	fb10 f201 	smulbb	r2, r0, r1
 8023ac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023ac4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023ac8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023acc:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023ad0:	10d2      	asrs	r2, r2, #3
 8023ad2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023ad6:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8023ada:	ea4c 0c03 	orr.w	ip, ip, r3
 8023ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ae0:	041b      	lsls	r3, r3, #16
 8023ae2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023ae6:	432b      	orrs	r3, r5
 8023ae8:	4353      	muls	r3, r2
 8023aea:	fb0a 330c 	mla	r3, sl, ip, r3
 8023aee:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023af2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023af6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023afa:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023afe:	f1c1 0c10 	rsb	ip, r1, #16
 8023b02:	ebac 0c00 	sub.w	ip, ip, r0
 8023b06:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023b0a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023b0e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b14:	0418      	lsls	r0, r3, #16
 8023b16:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023b1a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023b1e:	4318      	orrs	r0, r3
 8023b20:	fb02 c200 	mla	r2, r2, r0, ip
 8023b24:	0d53      	lsrs	r3, r2, #21
 8023b26:	0952      	lsrs	r2, r2, #5
 8023b28:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023b2c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023b30:	431a      	orrs	r2, r3
 8023b32:	f8a8 2000 	strh.w	r2, [r8]
 8023b36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023b38:	f108 0802 	add.w	r8, r8, #2
 8023b3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8023b40:	441c      	add	r4, r3
 8023b42:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b44:	441e      	add	r6, r3
 8023b46:	e77c      	b.n	8023a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023b48:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023b4a:	f109 0902 	add.w	r9, r9, #2
 8023b4e:	441c      	add	r4, r3
 8023b50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b52:	441e      	add	r6, r3
 8023b54:	9b06      	ldr	r3, [sp, #24]
 8023b56:	3b01      	subs	r3, #1
 8023b58:	9306      	str	r3, [sp, #24]
 8023b5a:	e752      	b.n	8023a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023b5c:	d020      	beq.n	8023ba0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023b5e:	9b06      	ldr	r3, [sp, #24]
 8023b60:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023b62:	3b01      	subs	r3, #1
 8023b64:	fb00 4003 	mla	r0, r0, r3, r4
 8023b68:	1400      	asrs	r0, r0, #16
 8023b6a:	f53f af67 	bmi.w	8023a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023b6e:	3901      	subs	r1, #1
 8023b70:	4288      	cmp	r0, r1
 8023b72:	f6bf af63 	bge.w	8023a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023b76:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023b78:	fb01 6303 	mla	r3, r1, r3, r6
 8023b7c:	141b      	asrs	r3, r3, #16
 8023b7e:	f53f af5d 	bmi.w	8023a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023b82:	3a01      	subs	r2, #1
 8023b84:	4293      	cmp	r3, r2
 8023b86:	f6bf af59 	bge.w	8023a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023b8a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023b8e:	46ca      	mov	sl, r9
 8023b90:	f1b8 0f00 	cmp.w	r8, #0
 8023b94:	dc67      	bgt.n	8023c66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8023b96:	9b06      	ldr	r3, [sp, #24]
 8023b98:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023b9c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8023ba0:	9b08      	ldr	r3, [sp, #32]
 8023ba2:	2b00      	cmp	r3, #0
 8023ba4:	f340 80d7 	ble.w	8023d56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8023ba8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8023bac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023bae:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023bb2:	eef0 6a48 	vmov.f32	s13, s16
 8023bb6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8023bba:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8023bbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023bc2:	ee16 4a90 	vmov	r4, s13
 8023bc6:	eef0 6a68 	vmov.f32	s13, s17
 8023bca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023bce:	ee16 6a90 	vmov	r6, s13
 8023bd2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023bd6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023bda:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023bde:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023be2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023be6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023bea:	ee18 2a10 	vmov	r2, s16
 8023bee:	eeb0 8a47 	vmov.f32	s16, s14
 8023bf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8023bf6:	ee18 2a90 	vmov	r2, s17
 8023bfa:	9329      	str	r3, [sp, #164]	; 0xa4
 8023bfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023bfe:	eef0 8a67 	vmov.f32	s17, s15
 8023c02:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c06:	932a      	str	r3, [sp, #168]	; 0xa8
 8023c08:	9b08      	ldr	r3, [sp, #32]
 8023c0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023c0c:	3b01      	subs	r3, #1
 8023c0e:	9308      	str	r3, [sp, #32]
 8023c10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023c12:	bf08      	it	eq
 8023c14:	4613      	moveq	r3, r2
 8023c16:	9306      	str	r3, [sp, #24]
 8023c18:	e6e4      	b.n	80239e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023c1a:	2900      	cmp	r1, #0
 8023c1c:	f43f af4e 	beq.w	8023abc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023c20:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023c24:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023c28:	9309      	str	r3, [sp, #36]	; 0x24
 8023c2a:	e747      	b.n	8023abc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023c2c:	f112 0a01 	adds.w	sl, r2, #1
 8023c30:	d481      	bmi.n	8023b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023c32:	4553      	cmp	r3, sl
 8023c34:	f6ff af7f 	blt.w	8023b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023c38:	f11c 0a01 	adds.w	sl, ip, #1
 8023c3c:	f53f af7b 	bmi.w	8023b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023c40:	45d6      	cmp	lr, sl
 8023c42:	f6ff af78 	blt.w	8023b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023c46:	b21b      	sxth	r3, r3
 8023c48:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8023c4c:	fa0f f28e 	sxth.w	r2, lr
 8023c50:	9300      	str	r3, [sp, #0]
 8023c52:	463b      	mov	r3, r7
 8023c54:	9201      	str	r2, [sp, #4]
 8023c56:	9a07      	ldr	r2, [sp, #28]
 8023c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023c5c:	4641      	mov	r1, r8
 8023c5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023c60:	f7ff fdfe 	bl	8023860 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8023c64:	e767      	b.n	8023b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023c66:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023c68:	1422      	asrs	r2, r4, #16
 8023c6a:	1431      	asrs	r1, r6, #16
 8023c6c:	9d07      	ldr	r5, [sp, #28]
 8023c6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023c72:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8023c76:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023c7a:	fb03 2101 	mla	r1, r3, r1, r2
 8023c7e:	9a07      	ldr	r2, [sp, #28]
 8023c80:	440a      	add	r2, r1
 8023c82:	5c69      	ldrb	r1, [r5, r1]
 8023c84:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8023c88:	f1be 0f00 	cmp.w	lr, #0
 8023c8c:	d05c      	beq.n	8023d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8023c8e:	f892 c001 	ldrb.w	ip, [r2, #1]
 8023c92:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8023c96:	950d      	str	r5, [sp, #52]	; 0x34
 8023c98:	b150      	cbz	r0, 8023cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8023c9a:	eb02 0c03 	add.w	ip, r2, r3
 8023c9e:	5cd3      	ldrb	r3, [r2, r3]
 8023ca0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023ca4:	930a      	str	r3, [sp, #40]	; 0x28
 8023ca6:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023caa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023cae:	930e      	str	r3, [sp, #56]	; 0x38
 8023cb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023cb2:	fb1e f200 	smulbb	r2, lr, r0
 8023cb6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023cb8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8023cbc:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023cc0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023cc4:	10d2      	asrs	r2, r2, #3
 8023cc6:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8023cca:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023cce:	ea4c 0c03 	orr.w	ip, ip, r3
 8023cd2:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8023cd6:	9311      	str	r3, [sp, #68]	; 0x44
 8023cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023cda:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023cdc:	041b      	lsls	r3, r3, #16
 8023cde:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023ce2:	ea43 030b 	orr.w	r3, r3, fp
 8023ce6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023cea:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023cee:	4353      	muls	r3, r2
 8023cf0:	fb05 3c0c 	mla	ip, r5, ip, r3
 8023cf4:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8023cf8:	ea43 0b01 	orr.w	fp, r3, r1
 8023cfc:	f1c0 0110 	rsb	r1, r0, #16
 8023d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d02:	eba1 0e0e 	sub.w	lr, r1, lr
 8023d06:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8023d0a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023d0e:	fb0e cc0b 	mla	ip, lr, fp, ip
 8023d12:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8023d16:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8023d1a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023d1e:	ea4b 0e0e 	orr.w	lr, fp, lr
 8023d22:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023d26:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8023d2a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023d2e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023d32:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023d36:	ea43 0c0c 	orr.w	ip, r3, ip
 8023d3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d3c:	441c      	add	r4, r3
 8023d3e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d40:	f82a cb02 	strh.w	ip, [sl], #2
 8023d44:	441e      	add	r6, r3
 8023d46:	e723      	b.n	8023b90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023d48:	2800      	cmp	r0, #0
 8023d4a:	d0b1      	beq.n	8023cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8023d4c:	5cd3      	ldrb	r3, [r2, r3]
 8023d4e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023d52:	930a      	str	r3, [sp, #40]	; 0x28
 8023d54:	e7ac      	b.n	8023cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8023d56:	b013      	add	sp, #76	; 0x4c
 8023d58:	ecbd 8b0a 	vpop	{d8-d12}
 8023d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023d60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8023d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d64:	468b      	mov	fp, r1
 8023d66:	8809      	ldrh	r1, [r1, #0]
 8023d68:	b089      	sub	sp, #36	; 0x24
 8023d6a:	10cd      	asrs	r5, r1, #3
 8023d6c:	ea4f 2921 	mov.w	r9, r1, asr #8
 8023d70:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8023d74:	00c9      	lsls	r1, r1, #3
 8023d76:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023d7a:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8023d7e:	9202      	str	r2, [sp, #8]
 8023d80:	b2c9      	uxtb	r1, r1
 8023d82:	9500      	str	r5, [sp, #0]
 8023d84:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8023d88:	9101      	str	r1, [sp, #4]
 8023d8a:	9900      	ldr	r1, [sp, #0]
 8023d8c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8023d90:	0209      	lsls	r1, r1, #8
 8023d92:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8023d96:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8023d9a:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8023d9e:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8023da2:	fb04 650e 	mla	r5, r4, lr, r6
 8023da6:	2c00      	cmp	r4, #0
 8023da8:	eb02 0805 	add.w	r8, r2, r5
 8023dac:	9a01      	ldr	r2, [sp, #4]
 8023dae:	ea41 0102 	orr.w	r1, r1, r2
 8023db2:	9107      	str	r1, [sp, #28]
 8023db4:	db43      	blt.n	8023e3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8023db6:	45a2      	cmp	sl, r4
 8023db8:	dd41      	ble.n	8023e3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8023dba:	2e00      	cmp	r6, #0
 8023dbc:	db3d      	blt.n	8023e3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8023dbe:	45b6      	cmp	lr, r6
 8023dc0:	dd3b      	ble.n	8023e3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8023dc2:	9a02      	ldr	r2, [sp, #8]
 8023dc4:	5d55      	ldrb	r5, [r2, r5]
 8023dc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023dca:	441d      	add	r5, r3
 8023dcc:	1c72      	adds	r2, r6, #1
 8023dce:	d439      	bmi.n	8023e44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8023dd0:	4596      	cmp	lr, r2
 8023dd2:	dd37      	ble.n	8023e44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8023dd4:	2f00      	cmp	r7, #0
 8023dd6:	d035      	beq.n	8023e44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8023dd8:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023ddc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023de0:	4419      	add	r1, r3
 8023de2:	3401      	adds	r4, #1
 8023de4:	d432      	bmi.n	8023e4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8023de6:	45a2      	cmp	sl, r4
 8023de8:	dd30      	ble.n	8023e4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8023dea:	b378      	cbz	r0, 8023e4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8023dec:	2e00      	cmp	r6, #0
 8023dee:	db2b      	blt.n	8023e48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8023df0:	45b6      	cmp	lr, r6
 8023df2:	dd29      	ble.n	8023e48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8023df4:	f818 400e 	ldrb.w	r4, [r8, lr]
 8023df8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023dfc:	441c      	add	r4, r3
 8023dfe:	3601      	adds	r6, #1
 8023e00:	d427      	bmi.n	8023e52 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8023e02:	45b6      	cmp	lr, r6
 8023e04:	dd25      	ble.n	8023e52 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8023e06:	b327      	cbz	r7, 8023e52 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8023e08:	44c6      	add	lr, r8
 8023e0a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023e0e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023e12:	4413      	add	r3, r2
 8023e14:	782a      	ldrb	r2, [r5, #0]
 8023e16:	2f0f      	cmp	r7, #15
 8023e18:	9202      	str	r2, [sp, #8]
 8023e1a:	780a      	ldrb	r2, [r1, #0]
 8023e1c:	9203      	str	r2, [sp, #12]
 8023e1e:	7822      	ldrb	r2, [r4, #0]
 8023e20:	9204      	str	r2, [sp, #16]
 8023e22:	781a      	ldrb	r2, [r3, #0]
 8023e24:	9205      	str	r2, [sp, #20]
 8023e26:	d801      	bhi.n	8023e2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 8023e28:	280f      	cmp	r0, #15
 8023e2a:	d914      	bls.n	8023e56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8023e2c:	4b3f      	ldr	r3, [pc, #252]	; (8023f2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8023e2e:	f240 11f9 	movw	r1, #505	; 0x1f9
 8023e32:	4a3f      	ldr	r2, [pc, #252]	; (8023f30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8023e34:	483f      	ldr	r0, [pc, #252]	; (8023f34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 8023e36:	f006 fc0d 	bl	802a654 <__assert_func>
 8023e3a:	ad07      	add	r5, sp, #28
 8023e3c:	e7c6      	b.n	8023dcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8023e3e:	a907      	add	r1, sp, #28
 8023e40:	460d      	mov	r5, r1
 8023e42:	e7ce      	b.n	8023de2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8023e44:	a907      	add	r1, sp, #28
 8023e46:	e7cc      	b.n	8023de2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8023e48:	ac07      	add	r4, sp, #28
 8023e4a:	e7d8      	b.n	8023dfe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8023e4c:	ab07      	add	r3, sp, #28
 8023e4e:	461c      	mov	r4, r3
 8023e50:	e7e0      	b.n	8023e14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8023e52:	ab07      	add	r3, sp, #28
 8023e54:	e7de      	b.n	8023e14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8023e56:	b2ba      	uxth	r2, r7
 8023e58:	f891 8002 	ldrb.w	r8, [r1, #2]
 8023e5c:	b280      	uxth	r0, r0
 8023e5e:	7849      	ldrb	r1, [r1, #1]
 8023e60:	78ae      	ldrb	r6, [r5, #2]
 8023e62:	fa1f f78c 	uxth.w	r7, ip
 8023e66:	fb02 fa00 	mul.w	sl, r2, r0
 8023e6a:	0112      	lsls	r2, r2, #4
 8023e6c:	786d      	ldrb	r5, [r5, #1]
 8023e6e:	ea6f 0c0c 	mvn.w	ip, ip
 8023e72:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023e76:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8023e7a:	eba2 020a 	sub.w	r2, r2, sl
 8023e7e:	fa5f fc8c 	uxtb.w	ip, ip
 8023e82:	b280      	uxth	r0, r0
 8023e84:	fb19 f90c 	smulbb	r9, r9, ip
 8023e88:	b292      	uxth	r2, r2
 8023e8a:	ebae 0e00 	sub.w	lr, lr, r0
 8023e8e:	4351      	muls	r1, r2
 8023e90:	fa1f fe8e 	uxth.w	lr, lr
 8023e94:	fb02 f808 	mul.w	r8, r2, r8
 8023e98:	fb0e 1505 	mla	r5, lr, r5, r1
 8023e9c:	7861      	ldrb	r1, [r4, #1]
 8023e9e:	fb0e 8806 	mla	r8, lr, r6, r8
 8023ea2:	78a6      	ldrb	r6, [r4, #2]
 8023ea4:	fb00 5501 	mla	r5, r0, r1, r5
 8023ea8:	7859      	ldrb	r1, [r3, #1]
 8023eaa:	fb00 8806 	mla	r8, r0, r6, r8
 8023eae:	789e      	ldrb	r6, [r3, #2]
 8023eb0:	9b00      	ldr	r3, [sp, #0]
 8023eb2:	fb0a 5101 	mla	r1, sl, r1, r5
 8023eb6:	fb0a 8606 	mla	r6, sl, r6, r8
 8023eba:	fb13 f50c 	smulbb	r5, r3, ip
 8023ebe:	9b03      	ldr	r3, [sp, #12]
 8023ec0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023ec4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023ec8:	435a      	muls	r2, r3
 8023eca:	9b02      	ldr	r3, [sp, #8]
 8023ecc:	fb06 9607 	mla	r6, r6, r7, r9
 8023ed0:	fb0e 2203 	mla	r2, lr, r3, r2
 8023ed4:	9b04      	ldr	r3, [sp, #16]
 8023ed6:	b2b6      	uxth	r6, r6
 8023ed8:	fb01 5107 	mla	r1, r1, r7, r5
 8023edc:	fb00 2003 	mla	r0, r0, r3, r2
 8023ee0:	9b05      	ldr	r3, [sp, #20]
 8023ee2:	f106 0901 	add.w	r9, r6, #1
 8023ee6:	b289      	uxth	r1, r1
 8023ee8:	fb0a 0a03 	mla	sl, sl, r3, r0
 8023eec:	9b01      	ldr	r3, [sp, #4]
 8023eee:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8023ef2:	1c4d      	adds	r5, r1, #1
 8023ef4:	fb13 fc0c 	smulbb	ip, r3, ip
 8023ef8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023efc:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8023f00:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8023f04:	fb0a c707 	mla	r7, sl, r7, ip
 8023f08:	0949      	lsrs	r1, r1, #5
 8023f0a:	b2bf      	uxth	r7, r7
 8023f0c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023f10:	1c7e      	adds	r6, r7, #1
 8023f12:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8023f16:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023f1a:	ea46 0609 	orr.w	r6, r6, r9
 8023f1e:	430e      	orrs	r6, r1
 8023f20:	f8ab 6000 	strh.w	r6, [fp]
 8023f24:	b009      	add	sp, #36	; 0x24
 8023f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f2a:	bf00      	nop
 8023f2c:	0803215f 	.word	0x0803215f
 8023f30:	0803268e 	.word	0x0803268e
 8023f34:	0803212c 	.word	0x0803212c

08023f38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f3c:	ed2d 8b08 	vpush	{d8-d11}
 8023f40:	b095      	sub	sp, #84	; 0x54
 8023f42:	eeb0 aa40 	vmov.f32	s20, s0
 8023f46:	eef0 9a60 	vmov.f32	s19, s1
 8023f4a:	9212      	str	r2, [sp, #72]	; 0x48
 8023f4c:	eeb0 9a41 	vmov.f32	s18, s2
 8023f50:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023f52:	eeb0 8a62 	vmov.f32	s16, s5
 8023f56:	9309      	str	r3, [sp, #36]	; 0x24
 8023f58:	eef0 8a43 	vmov.f32	s17, s6
 8023f5c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023f60:	eef0 ba44 	vmov.f32	s23, s8
 8023f64:	9013      	str	r0, [sp, #76]	; 0x4c
 8023f66:	eeb0 ba64 	vmov.f32	s22, s9
 8023f6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8023f6c:	eef0 aa45 	vmov.f32	s21, s10
 8023f70:	6850      	ldr	r0, [r2, #4]
 8023f72:	910e      	str	r1, [sp, #56]	; 0x38
 8023f74:	6812      	ldr	r2, [r2, #0]
 8023f76:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023f7a:	fb00 1303 	mla	r3, r0, r3, r1
 8023f7e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023f82:	930a      	str	r3, [sp, #40]	; 0x28
 8023f84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023f86:	681b      	ldr	r3, [r3, #0]
 8023f88:	930d      	str	r3, [sp, #52]	; 0x34
 8023f8a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023f8c:	685c      	ldr	r4, [r3, #4]
 8023f8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023f90:	3404      	adds	r4, #4
 8023f92:	43db      	mvns	r3, r3
 8023f94:	b2db      	uxtb	r3, r3
 8023f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8023f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	dc03      	bgt.n	8023fa6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023f9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023fa0:	2b00      	cmp	r3, #0
 8023fa2:	f340 8255 	ble.w	8024450 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8023fa6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023fa8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023fac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023fb0:	1e48      	subs	r0, r1, #1
 8023fb2:	1e55      	subs	r5, r2, #1
 8023fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fb6:	2b00      	cmp	r3, #0
 8023fb8:	f340 80f9 	ble.w	80241ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8023fbc:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8023fbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023fc0:	1436      	asrs	r6, r6, #16
 8023fc2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023fc6:	d406      	bmi.n	8023fd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023fc8:	4286      	cmp	r6, r0
 8023fca:	da04      	bge.n	8023fd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	db02      	blt.n	8023fd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023fd0:	42ab      	cmp	r3, r5
 8023fd2:	f2c0 80ed 	blt.w	80241b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023fd6:	3601      	adds	r6, #1
 8023fd8:	f100 80da 	bmi.w	8024190 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023fdc:	42b1      	cmp	r1, r6
 8023fde:	f2c0 80d7 	blt.w	8024190 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023fe2:	3301      	adds	r3, #1
 8023fe4:	f100 80d4 	bmi.w	8024190 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023fe8:	429a      	cmp	r2, r3
 8023fea:	f2c0 80d1 	blt.w	8024190 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ff0:	9311      	str	r3, [sp, #68]	; 0x44
 8023ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ff4:	930c      	str	r3, [sp, #48]	; 0x30
 8023ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023ff8:	2b00      	cmp	r3, #0
 8023ffa:	f340 80fa 	ble.w	80241f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8023ffe:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8024000:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024002:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024004:	68c6      	ldr	r6, [r0, #12]
 8024006:	141d      	asrs	r5, r3, #16
 8024008:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802400a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802400e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024010:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024012:	1400      	asrs	r0, r0, #16
 8024014:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024018:	6892      	ldr	r2, [r2, #8]
 802401a:	f100 813e 	bmi.w	802429a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802401e:	1e57      	subs	r7, r2, #1
 8024020:	42b8      	cmp	r0, r7
 8024022:	f280 813a 	bge.w	802429a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024026:	2d00      	cmp	r5, #0
 8024028:	f2c0 8137 	blt.w	802429a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802402c:	1e77      	subs	r7, r6, #1
 802402e:	42bd      	cmp	r5, r7
 8024030:	f280 8133 	bge.w	802429a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024034:	b212      	sxth	r2, r2
 8024036:	fb05 0002 	mla	r0, r5, r2, r0
 802403a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802403c:	f815 a000 	ldrb.w	sl, [r5, r0]
 8024040:	182e      	adds	r6, r5, r0
 8024042:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024046:	eb04 050a 	add.w	r5, r4, sl
 802404a:	2b00      	cmp	r3, #0
 802404c:	f000 8117 	beq.w	802427e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8024050:	f896 c001 	ldrb.w	ip, [r6, #1]
 8024054:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024058:	44a4      	add	ip, r4
 802405a:	2900      	cmp	r1, #0
 802405c:	f000 8117 	beq.w	802428e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024060:	18b0      	adds	r0, r6, r2
 8024062:	5cb2      	ldrb	r2, [r6, r2]
 8024064:	7840      	ldrb	r0, [r0, #1]
 8024066:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802406a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802406e:	4422      	add	r2, r4
 8024070:	4420      	add	r0, r4
 8024072:	b29b      	uxth	r3, r3
 8024074:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8024078:	b289      	uxth	r1, r1
 802407a:	f895 b002 	ldrb.w	fp, [r5, #2]
 802407e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024080:	fb03 f901 	mul.w	r9, r3, r1
 8024084:	011b      	lsls	r3, r3, #4
 8024086:	f8b6 e000 	ldrh.w	lr, [r6]
 802408a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802408e:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8024092:	eba3 0309 	sub.w	r3, r3, r9
 8024096:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 802409a:	b289      	uxth	r1, r1
 802409c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80240a0:	b29b      	uxth	r3, r3
 80240a2:	eba8 0801 	sub.w	r8, r8, r1
 80240a6:	435f      	muls	r7, r3
 80240a8:	fa1f f888 	uxth.w	r8, r8
 80240ac:	9310      	str	r3, [sp, #64]	; 0x40
 80240ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240b0:	fb08 770b 	mla	r7, r8, fp, r7
 80240b4:	f892 b002 	ldrb.w	fp, [r2, #2]
 80240b8:	fb01 770b 	mla	r7, r1, fp, r7
 80240bc:	f890 b002 	ldrb.w	fp, [r0, #2]
 80240c0:	fb09 770b 	mla	r7, r9, fp, r7
 80240c4:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80240c8:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80240cc:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80240d0:	fb1b fb03 	smulbb	fp, fp, r3
 80240d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80240d6:	fb07 b706 	mla	r7, r7, r6, fp
 80240da:	f895 b001 	ldrb.w	fp, [r5, #1]
 80240de:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80240e2:	f89c c000 	ldrb.w	ip, [ip]
 80240e6:	b2bf      	uxth	r7, r7
 80240e8:	435d      	muls	r5, r3
 80240ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240ec:	fb08 550b 	mla	r5, r8, fp, r5
 80240f0:	f892 b001 	ldrb.w	fp, [r2, #1]
 80240f4:	fb01 550b 	mla	r5, r1, fp, r5
 80240f8:	f890 b001 	ldrb.w	fp, [r0, #1]
 80240fc:	fb09 550b 	mla	r5, r9, fp, r5
 8024100:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8024104:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024108:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802410c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024110:	fa5f fe8e 	uxtb.w	lr, lr
 8024114:	fb1b fb03 	smulbb	fp, fp, r3
 8024118:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802411a:	fb03 f30c 	mul.w	r3, r3, ip
 802411e:	f892 c000 	ldrb.w	ip, [r2]
 8024122:	fb05 b506 	mla	r5, r5, r6, fp
 8024126:	fb08 330a 	mla	r3, r8, sl, r3
 802412a:	b2ad      	uxth	r5, r5
 802412c:	fb01 330c 	mla	r3, r1, ip, r3
 8024130:	f890 c000 	ldrb.w	ip, [r0]
 8024134:	f105 0b01 	add.w	fp, r5, #1
 8024138:	fb09 3c0c 	mla	ip, r9, ip, r3
 802413c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802413e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024142:	fb1e fe03 	smulbb	lr, lr, r3
 8024146:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802414a:	1c7b      	adds	r3, r7, #1
 802414c:	096d      	lsrs	r5, r5, #5
 802414e:	fb0c e606 	mla	r6, ip, r6, lr
 8024152:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024156:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802415a:	b2b6      	uxth	r6, r6
 802415c:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8024160:	1c77      	adds	r7, r6, #1
 8024162:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024166:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802416a:	431f      	orrs	r7, r3
 802416c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802416e:	433d      	orrs	r5, r7
 8024170:	801d      	strh	r5, [r3, #0]
 8024172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024174:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024176:	3302      	adds	r3, #2
 8024178:	930c      	str	r3, [sp, #48]	; 0x30
 802417a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802417c:	4413      	add	r3, r2
 802417e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024180:	9327      	str	r3, [sp, #156]	; 0x9c
 8024182:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024184:	4413      	add	r3, r2
 8024186:	9328      	str	r3, [sp, #160]	; 0xa0
 8024188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802418a:	3b01      	subs	r3, #1
 802418c:	9311      	str	r3, [sp, #68]	; 0x44
 802418e:	e732      	b.n	8023ff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024190:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024192:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8024194:	4433      	add	r3, r6
 8024196:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8024198:	9327      	str	r3, [sp, #156]	; 0x9c
 802419a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802419c:	4433      	add	r3, r6
 802419e:	9328      	str	r3, [sp, #160]	; 0xa0
 80241a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241a2:	3b01      	subs	r3, #1
 80241a4:	9309      	str	r3, [sp, #36]	; 0x24
 80241a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80241a8:	3302      	adds	r3, #2
 80241aa:	930a      	str	r3, [sp, #40]	; 0x28
 80241ac:	e702      	b.n	8023fb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80241ae:	d027      	beq.n	8024200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80241b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241b2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80241b4:	3b01      	subs	r3, #1
 80241b6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80241b8:	fb00 5003 	mla	r0, r0, r3, r5
 80241bc:	1400      	asrs	r0, r0, #16
 80241be:	f53f af16 	bmi.w	8023fee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80241c2:	3901      	subs	r1, #1
 80241c4:	4288      	cmp	r0, r1
 80241c6:	f6bf af12 	bge.w	8023fee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80241ca:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80241cc:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80241ce:	fb01 0303 	mla	r3, r1, r3, r0
 80241d2:	141b      	asrs	r3, r3, #16
 80241d4:	f53f af0b 	bmi.w	8023fee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80241d8:	3a01      	subs	r2, #1
 80241da:	4293      	cmp	r3, r2
 80241dc:	f6bf af07 	bge.w	8023fee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80241e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241e2:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80241e6:	9311      	str	r3, [sp, #68]	; 0x44
 80241e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80241ea:	930c      	str	r3, [sp, #48]	; 0x30
 80241ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80241ee:	2b00      	cmp	r3, #0
 80241f0:	dc70      	bgt.n	80242d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80241f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80241f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80241fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80241fe:	930a      	str	r3, [sp, #40]	; 0x28
 8024200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024202:	2b00      	cmp	r3, #0
 8024204:	f340 8124 	ble.w	8024450 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8024208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802420c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802420e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024212:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024216:	eef0 6a48 	vmov.f32	s13, s16
 802421a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802421e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024222:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024226:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 802422a:	eef0 6a68 	vmov.f32	s13, s17
 802422e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024232:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8024236:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802423a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802423e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024242:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024246:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802424a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802424e:	ee18 2a10 	vmov	r2, s16
 8024252:	eeb0 8a47 	vmov.f32	s16, s14
 8024256:	fb92 f3f3 	sdiv	r3, r2, r3
 802425a:	ee18 2a90 	vmov	r2, s17
 802425e:	9329      	str	r3, [sp, #164]	; 0xa4
 8024260:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024262:	eef0 8a67 	vmov.f32	s17, s15
 8024266:	fb92 f3f3 	sdiv	r3, r2, r3
 802426a:	932a      	str	r3, [sp, #168]	; 0xa8
 802426c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802426e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024270:	3b01      	subs	r3, #1
 8024272:	930e      	str	r3, [sp, #56]	; 0x38
 8024274:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024276:	bf08      	it	eq
 8024278:	4613      	moveq	r3, r2
 802427a:	9309      	str	r3, [sp, #36]	; 0x24
 802427c:	e68c      	b.n	8023f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802427e:	b149      	cbz	r1, 8024294 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8024280:	5cb2      	ldrb	r2, [r6, r2]
 8024282:	4628      	mov	r0, r5
 8024284:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024288:	4422      	add	r2, r4
 802428a:	46ac      	mov	ip, r5
 802428c:	e6f1      	b.n	8024072 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802428e:	4628      	mov	r0, r5
 8024290:	462a      	mov	r2, r5
 8024292:	e6ee      	b.n	8024072 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024294:	4628      	mov	r0, r5
 8024296:	462a      	mov	r2, r5
 8024298:	e7f7      	b.n	802428a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802429a:	1c47      	adds	r7, r0, #1
 802429c:	f53f af69 	bmi.w	8024172 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80242a0:	42ba      	cmp	r2, r7
 80242a2:	f6ff af66 	blt.w	8024172 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80242a6:	1c6f      	adds	r7, r5, #1
 80242a8:	f53f af63 	bmi.w	8024172 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80242ac:	42be      	cmp	r6, r7
 80242ae:	f6ff af60 	blt.w	8024172 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80242b2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80242b4:	b236      	sxth	r6, r6
 80242b6:	b212      	sxth	r2, r2
 80242b8:	9002      	str	r0, [sp, #8]
 80242ba:	9601      	str	r6, [sp, #4]
 80242bc:	9200      	str	r2, [sp, #0]
 80242be:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80242c0:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80242c4:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80242c8:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80242cc:	4623      	mov	r3, r4
 80242ce:	f7ff fd47 	bl	8023d60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80242d2:	e74e      	b.n	8024172 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80242d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80242d6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80242d8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80242dc:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80242de:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80242e0:	1400      	asrs	r0, r0, #16
 80242e2:	142d      	asrs	r5, r5, #16
 80242e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80242e6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80242ea:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80242ee:	fb02 5000 	mla	r0, r2, r0, r5
 80242f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80242f4:	f815 9000 	ldrb.w	r9, [r5, r0]
 80242f8:	182e      	adds	r6, r5, r0
 80242fa:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80242fe:	eb04 0509 	add.w	r5, r4, r9
 8024302:	2b00      	cmp	r3, #0
 8024304:	f000 8096 	beq.w	8024434 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8024308:	7877      	ldrb	r7, [r6, #1]
 802430a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802430e:	4427      	add	r7, r4
 8024310:	2900      	cmp	r1, #0
 8024312:	f000 8097 	beq.w	8024444 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8024316:	18b0      	adds	r0, r6, r2
 8024318:	5cb2      	ldrb	r2, [r6, r2]
 802431a:	7840      	ldrb	r0, [r0, #1]
 802431c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024320:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024324:	4422      	add	r2, r4
 8024326:	4420      	add	r0, r4
 8024328:	b29b      	uxth	r3, r3
 802432a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802432c:	b289      	uxth	r1, r1
 802432e:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024332:	f8b6 c000 	ldrh.w	ip, [r6]
 8024336:	fb03 f801 	mul.w	r8, r3, r1
 802433a:	011b      	lsls	r3, r3, #4
 802433c:	78be      	ldrb	r6, [r7, #2]
 802433e:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024342:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024346:	eba3 0308 	sub.w	r3, r3, r8
 802434a:	f814 9009 	ldrb.w	r9, [r4, r9]
 802434e:	b289      	uxth	r1, r1
 8024350:	b29b      	uxth	r3, r3
 8024352:	ebae 0e01 	sub.w	lr, lr, r1
 8024356:	435e      	muls	r6, r3
 8024358:	fa1f fe8e 	uxth.w	lr, lr
 802435c:	9310      	str	r3, [sp, #64]	; 0x40
 802435e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024360:	fb0e 660b 	mla	r6, lr, fp, r6
 8024364:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024368:	fb01 660b 	mla	r6, r1, fp, r6
 802436c:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024370:	fb08 660b 	mla	r6, r8, fp, r6
 8024374:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024378:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802437c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024380:	fb1b fb03 	smulbb	fp, fp, r3
 8024384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024386:	fb06 b60a 	mla	r6, r6, sl, fp
 802438a:	f895 b001 	ldrb.w	fp, [r5, #1]
 802438e:	787d      	ldrb	r5, [r7, #1]
 8024390:	783f      	ldrb	r7, [r7, #0]
 8024392:	b2b6      	uxth	r6, r6
 8024394:	435d      	muls	r5, r3
 8024396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024398:	fb0e 550b 	mla	r5, lr, fp, r5
 802439c:	f892 b001 	ldrb.w	fp, [r2, #1]
 80243a0:	fb01 550b 	mla	r5, r1, fp, r5
 80243a4:	f890 b001 	ldrb.w	fp, [r0, #1]
 80243a8:	fb08 550b 	mla	r5, r8, fp, r5
 80243ac:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80243b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80243b4:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80243b8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80243bc:	fa5f fc8c 	uxtb.w	ip, ip
 80243c0:	fb1b fb03 	smulbb	fp, fp, r3
 80243c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80243c6:	437b      	muls	r3, r7
 80243c8:	7817      	ldrb	r7, [r2, #0]
 80243ca:	fb05 b50a 	mla	r5, r5, sl, fp
 80243ce:	fb0e 3309 	mla	r3, lr, r9, r3
 80243d2:	b2ad      	uxth	r5, r5
 80243d4:	fb01 3307 	mla	r3, r1, r7, r3
 80243d8:	7807      	ldrb	r7, [r0, #0]
 80243da:	f105 0b01 	add.w	fp, r5, #1
 80243de:	fb08 3707 	mla	r7, r8, r7, r3
 80243e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80243e4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80243e8:	fb1c fc03 	smulbb	ip, ip, r3
 80243ec:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80243f0:	1c73      	adds	r3, r6, #1
 80243f2:	096d      	lsrs	r5, r5, #5
 80243f4:	fb07 c70a 	mla	r7, r7, sl, ip
 80243f8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80243fc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024400:	b2bf      	uxth	r7, r7
 8024402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024404:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8024408:	1c7a      	adds	r2, r7, #1
 802440a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802440e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024412:	4316      	orrs	r6, r2
 8024414:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024416:	432e      	orrs	r6, r5
 8024418:	f823 6b02 	strh.w	r6, [r3], #2
 802441c:	930c      	str	r3, [sp, #48]	; 0x30
 802441e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024420:	4413      	add	r3, r2
 8024422:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024424:	9327      	str	r3, [sp, #156]	; 0x9c
 8024426:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024428:	4413      	add	r3, r2
 802442a:	9328      	str	r3, [sp, #160]	; 0xa0
 802442c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802442e:	3b01      	subs	r3, #1
 8024430:	9311      	str	r3, [sp, #68]	; 0x44
 8024432:	e6db      	b.n	80241ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8024434:	b149      	cbz	r1, 802444a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8024436:	5cb2      	ldrb	r2, [r6, r2]
 8024438:	4628      	mov	r0, r5
 802443a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802443e:	4422      	add	r2, r4
 8024440:	462f      	mov	r7, r5
 8024442:	e771      	b.n	8024328 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024444:	4628      	mov	r0, r5
 8024446:	462a      	mov	r2, r5
 8024448:	e76e      	b.n	8024328 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802444a:	4628      	mov	r0, r5
 802444c:	462a      	mov	r2, r5
 802444e:	e7f7      	b.n	8024440 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024450:	b015      	add	sp, #84	; 0x54
 8024452:	ecbd 8b08 	vpop	{d8-d11}
 8024456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802445c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 802445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024460:	880e      	ldrh	r6, [r1, #0]
 8024462:	b085      	sub	sp, #20
 8024464:	4691      	mov	r9, r2
 8024466:	0230      	lsls	r0, r6, #8
 8024468:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802446c:	9101      	str	r1, [sp, #4]
 802446e:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8024472:	0170      	lsls	r0, r6, #5
 8024474:	00f6      	lsls	r6, r6, #3
 8024476:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802447a:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 802447e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8024482:	b2f6      	uxtb	r6, r6
 8024484:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8024488:	ea4b 0000 	orr.w	r0, fp, r0
 802448c:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8024490:	4306      	orrs	r6, r0
 8024492:	fb05 7a0c 	mla	sl, r5, ip, r7
 8024496:	2d00      	cmp	r5, #0
 8024498:	9603      	str	r6, [sp, #12]
 802449a:	eb09 0e0a 	add.w	lr, r9, sl
 802449e:	db42      	blt.n	8024526 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 80244a0:	45a8      	cmp	r8, r5
 80244a2:	dd40      	ble.n	8024526 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 80244a4:	2f00      	cmp	r7, #0
 80244a6:	db3c      	blt.n	8024522 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 80244a8:	45bc      	cmp	ip, r7
 80244aa:	dd3a      	ble.n	8024522 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 80244ac:	f819 600a 	ldrb.w	r6, [r9, sl]
 80244b0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80244b4:	441e      	add	r6, r3
 80244b6:	1c78      	adds	r0, r7, #1
 80244b8:	d438      	bmi.n	802452c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80244ba:	4584      	cmp	ip, r0
 80244bc:	dd36      	ble.n	802452c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80244be:	b3aa      	cbz	r2, 802452c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80244c0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80244c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80244c8:	4418      	add	r0, r3
 80244ca:	3501      	adds	r5, #1
 80244cc:	d432      	bmi.n	8024534 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80244ce:	45a8      	cmp	r8, r5
 80244d0:	dd30      	ble.n	8024534 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80244d2:	b37c      	cbz	r4, 8024534 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80244d4:	2f00      	cmp	r7, #0
 80244d6:	db2b      	blt.n	8024530 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 80244d8:	45bc      	cmp	ip, r7
 80244da:	dd29      	ble.n	8024530 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 80244dc:	f81e 500c 	ldrb.w	r5, [lr, ip]
 80244e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80244e4:	441d      	add	r5, r3
 80244e6:	3701      	adds	r7, #1
 80244e8:	d427      	bmi.n	802453a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80244ea:	45bc      	cmp	ip, r7
 80244ec:	dd25      	ble.n	802453a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80244ee:	b322      	cbz	r2, 802453a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80244f0:	44f4      	add	ip, lr
 80244f2:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80244f6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80244fa:	443b      	add	r3, r7
 80244fc:	781f      	ldrb	r7, [r3, #0]
 80244fe:	2a0f      	cmp	r2, #15
 8024500:	f896 9000 	ldrb.w	r9, [r6]
 8024504:	f890 a000 	ldrb.w	sl, [r0]
 8024508:	4639      	mov	r1, r7
 802450a:	f895 8000 	ldrb.w	r8, [r5]
 802450e:	d801      	bhi.n	8024514 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8024510:	2c0f      	cmp	r4, #15
 8024512:	d914      	bls.n	802453e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8024514:	4b2c      	ldr	r3, [pc, #176]	; (80245c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8024516:	f240 11f9 	movw	r1, #505	; 0x1f9
 802451a:	4a2c      	ldr	r2, [pc, #176]	; (80245cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 802451c:	482c      	ldr	r0, [pc, #176]	; (80245d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 802451e:	f006 f899 	bl	802a654 <__assert_func>
 8024522:	ae03      	add	r6, sp, #12
 8024524:	e7c7      	b.n	80244b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8024526:	a803      	add	r0, sp, #12
 8024528:	4606      	mov	r6, r0
 802452a:	e7ce      	b.n	80244ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802452c:	a803      	add	r0, sp, #12
 802452e:	e7cc      	b.n	80244ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024530:	ad03      	add	r5, sp, #12
 8024532:	e7d8      	b.n	80244e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8024534:	ab03      	add	r3, sp, #12
 8024536:	461d      	mov	r5, r3
 8024538:	e7e0      	b.n	80244fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 802453a:	ab03      	add	r3, sp, #12
 802453c:	e7de      	b.n	80244fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 802453e:	b292      	uxth	r2, r2
 8024540:	f890 c002 	ldrb.w	ip, [r0, #2]
 8024544:	b2a4      	uxth	r4, r4
 8024546:	f896 b002 	ldrb.w	fp, [r6, #2]
 802454a:	7840      	ldrb	r0, [r0, #1]
 802454c:	fb02 fe04 	mul.w	lr, r2, r4
 8024550:	0112      	lsls	r2, r2, #4
 8024552:	7876      	ldrb	r6, [r6, #1]
 8024554:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8024558:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802455c:	eba2 020e 	sub.w	r2, r2, lr
 8024560:	b2a4      	uxth	r4, r4
 8024562:	b292      	uxth	r2, r2
 8024564:	1b3f      	subs	r7, r7, r4
 8024566:	fb02 fc0c 	mul.w	ip, r2, ip
 802456a:	b2bf      	uxth	r7, r7
 802456c:	fb07 cc0b 	mla	ip, r7, fp, ip
 8024570:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024574:	fb04 cc0b 	mla	ip, r4, fp, ip
 8024578:	f893 b002 	ldrb.w	fp, [r3, #2]
 802457c:	785b      	ldrb	r3, [r3, #1]
 802457e:	fb0e cc0b 	mla	ip, lr, fp, ip
 8024582:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8024586:	fb02 fc0a 	mul.w	ip, r2, sl
 802458a:	4342      	muls	r2, r0
 802458c:	7868      	ldrb	r0, [r5, #1]
 802458e:	fb07 cc09 	mla	ip, r7, r9, ip
 8024592:	fb07 2206 	mla	r2, r7, r6, r2
 8024596:	fb04 cc08 	mla	ip, r4, r8, ip
 802459a:	fb04 2400 	mla	r4, r4, r0, r2
 802459e:	fb0e cc01 	mla	ip, lr, r1, ip
 80245a2:	fb0e 4e03 	mla	lr, lr, r3, r4
 80245a6:	9b01      	ldr	r3, [sp, #4]
 80245a8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80245ac:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80245b0:	ea4c 0c0b 	orr.w	ip, ip, fp
 80245b4:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80245b8:	ea4c 0c0e 	orr.w	ip, ip, lr
 80245bc:	f8a3 c000 	strh.w	ip, [r3]
 80245c0:	b005      	add	sp, #20
 80245c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245c6:	bf00      	nop
 80245c8:	0803215f 	.word	0x0803215f
 80245cc:	0803268e 	.word	0x0803268e
 80245d0:	0803212c 	.word	0x0803212c

080245d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80245d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245d8:	ed2d 8b08 	vpush	{d8-d11}
 80245dc:	b08f      	sub	sp, #60	; 0x3c
 80245de:	eeb0 aa40 	vmov.f32	s20, s0
 80245e2:	eef0 9a60 	vmov.f32	s19, s1
 80245e6:	920c      	str	r2, [sp, #48]	; 0x30
 80245e8:	eeb0 9a41 	vmov.f32	s18, s2
 80245ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80245ee:	eeb0 8a62 	vmov.f32	s16, s5
 80245f2:	900d      	str	r0, [sp, #52]	; 0x34
 80245f4:	eef0 8a43 	vmov.f32	s17, s6
 80245f8:	6850      	ldr	r0, [r2, #4]
 80245fa:	eef0 ba44 	vmov.f32	s23, s8
 80245fe:	910a      	str	r1, [sp, #40]	; 0x28
 8024600:	eeb0 ba64 	vmov.f32	s22, s9
 8024604:	9306      	str	r3, [sp, #24]
 8024606:	eef0 aa45 	vmov.f32	s21, s10
 802460a:	6812      	ldr	r2, [r2, #0]
 802460c:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8024610:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8024614:	fb00 1303 	mla	r3, r0, r3, r1
 8024618:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802461c:	9307      	str	r3, [sp, #28]
 802461e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024620:	681b      	ldr	r3, [r3, #0]
 8024622:	9308      	str	r3, [sp, #32]
 8024624:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024626:	685c      	ldr	r4, [r3, #4]
 8024628:	3404      	adds	r4, #4
 802462a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802462c:	2b00      	cmp	r3, #0
 802462e:	dc03      	bgt.n	8024638 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8024630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024632:	2b00      	cmp	r3, #0
 8024634:	f340 81d5 	ble.w	80249e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024638:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802463a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802463e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024642:	1e48      	subs	r0, r1, #1
 8024644:	1e56      	subs	r6, r2, #1
 8024646:	9b06      	ldr	r3, [sp, #24]
 8024648:	2b00      	cmp	r3, #0
 802464a:	f340 80b6 	ble.w	80247ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802464e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8024652:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024656:	d406      	bmi.n	8024666 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024658:	4287      	cmp	r7, r0
 802465a:	da04      	bge.n	8024666 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802465c:	2b00      	cmp	r3, #0
 802465e:	db02      	blt.n	8024666 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024660:	42b3      	cmp	r3, r6
 8024662:	f2c0 80ab 	blt.w	80247bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024666:	3701      	adds	r7, #1
 8024668:	f100 809c 	bmi.w	80247a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 802466c:	42b9      	cmp	r1, r7
 802466e:	f2c0 8099 	blt.w	80247a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024672:	3301      	adds	r3, #1
 8024674:	f100 8096 	bmi.w	80247a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024678:	429a      	cmp	r2, r3
 802467a:	f2c0 8093 	blt.w	80247a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 802467e:	9b06      	ldr	r3, [sp, #24]
 8024680:	930b      	str	r3, [sp, #44]	; 0x2c
 8024682:	9b07      	ldr	r3, [sp, #28]
 8024684:	9309      	str	r3, [sp, #36]	; 0x24
 8024686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024688:	2b00      	cmp	r3, #0
 802468a:	f340 80b4 	ble.w	80247f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802468e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8024690:	142e      	asrs	r6, r5, #16
 8024692:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024694:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024698:	68c7      	ldr	r7, [r0, #12]
 802469a:	ea5f 402b 	movs.w	r0, fp, asr #16
 802469e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80246a2:	6892      	ldr	r2, [r2, #8]
 80246a4:	f100 80fb 	bmi.w	802489e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80246a8:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80246ac:	4560      	cmp	r0, ip
 80246ae:	f280 80f6 	bge.w	802489e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80246b2:	2e00      	cmp	r6, #0
 80246b4:	f2c0 80f3 	blt.w	802489e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80246b8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80246bc:	4566      	cmp	r6, ip
 80246be:	f280 80ee 	bge.w	802489e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80246c2:	b212      	sxth	r2, r2
 80246c4:	fb06 0002 	mla	r0, r6, r2, r0
 80246c8:	9e08      	ldr	r6, [sp, #32]
 80246ca:	1837      	adds	r7, r6, r0
 80246cc:	5c30      	ldrb	r0, [r6, r0]
 80246ce:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80246d2:	eb04 0c08 	add.w	ip, r4, r8
 80246d6:	2b00      	cmp	r3, #0
 80246d8:	f000 80d3 	beq.w	8024882 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80246dc:	787e      	ldrb	r6, [r7, #1]
 80246de:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80246e2:	4426      	add	r6, r4
 80246e4:	2900      	cmp	r1, #0
 80246e6:	f000 80d4 	beq.w	8024892 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 80246ea:	18b8      	adds	r0, r7, r2
 80246ec:	5cba      	ldrb	r2, [r7, r2]
 80246ee:	7840      	ldrb	r0, [r0, #1]
 80246f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80246f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80246f8:	4422      	add	r2, r4
 80246fa:	4420      	add	r0, r4
 80246fc:	b29b      	uxth	r3, r3
 80246fe:	78b7      	ldrb	r7, [r6, #2]
 8024700:	b289      	uxth	r1, r1
 8024702:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024706:	f89c c001 	ldrb.w	ip, [ip, #1]
 802470a:	fb03 f901 	mul.w	r9, r3, r1
 802470e:	011b      	lsls	r3, r3, #4
 8024710:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024714:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024718:	eba3 0309 	sub.w	r3, r3, r9
 802471c:	b289      	uxth	r1, r1
 802471e:	b29b      	uxth	r3, r3
 8024720:	ebae 0e01 	sub.w	lr, lr, r1
 8024724:	435f      	muls	r7, r3
 8024726:	fa1f fe8e 	uxth.w	lr, lr
 802472a:	fb0e 770a 	mla	r7, lr, sl, r7
 802472e:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024732:	fb01 770a 	mla	r7, r1, sl, r7
 8024736:	f890 a002 	ldrb.w	sl, [r0, #2]
 802473a:	fb09 7a0a 	mla	sl, r9, sl, r7
 802473e:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024742:	f896 8000 	ldrb.w	r8, [r6]
 8024746:	7876      	ldrb	r6, [r6, #1]
 8024748:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802474c:	fb03 f808 	mul.w	r8, r3, r8
 8024750:	4373      	muls	r3, r6
 8024752:	fb0e 8807 	mla	r8, lr, r7, r8
 8024756:	7817      	ldrb	r7, [r2, #0]
 8024758:	fb0e 330c 	mla	r3, lr, ip, r3
 802475c:	fb01 8807 	mla	r8, r1, r7, r8
 8024760:	7807      	ldrb	r7, [r0, #0]
 8024762:	fb09 8707 	mla	r7, r9, r7, r8
 8024766:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802476a:	ea47 070a 	orr.w	r7, r7, sl
 802476e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024772:	fb01 310a 	mla	r1, r1, sl, r3
 8024776:	f890 a001 	ldrb.w	sl, [r0, #1]
 802477a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802477c:	fb09 1a0a 	mla	sl, r9, sl, r1
 8024780:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024784:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024788:	ea47 070a 	orr.w	r7, r7, sl
 802478c:	801f      	strh	r7, [r3, #0]
 802478e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024790:	3302      	adds	r3, #2
 8024792:	9309      	str	r3, [sp, #36]	; 0x24
 8024794:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024796:	449b      	add	fp, r3
 8024798:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802479a:	441d      	add	r5, r3
 802479c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802479e:	3b01      	subs	r3, #1
 80247a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80247a2:	e770      	b.n	8024686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80247a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80247a6:	449b      	add	fp, r3
 80247a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80247aa:	441d      	add	r5, r3
 80247ac:	9b06      	ldr	r3, [sp, #24]
 80247ae:	3b01      	subs	r3, #1
 80247b0:	9306      	str	r3, [sp, #24]
 80247b2:	9b07      	ldr	r3, [sp, #28]
 80247b4:	3302      	adds	r3, #2
 80247b6:	9307      	str	r3, [sp, #28]
 80247b8:	e745      	b.n	8024646 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80247ba:	d023      	beq.n	8024804 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80247bc:	9b06      	ldr	r3, [sp, #24]
 80247be:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80247c0:	3b01      	subs	r3, #1
 80247c2:	fb00 b003 	mla	r0, r0, r3, fp
 80247c6:	1400      	asrs	r0, r0, #16
 80247c8:	f53f af59 	bmi.w	802467e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80247cc:	3901      	subs	r1, #1
 80247ce:	4288      	cmp	r0, r1
 80247d0:	f6bf af55 	bge.w	802467e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80247d4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80247d6:	fb01 5303 	mla	r3, r1, r3, r5
 80247da:	141b      	asrs	r3, r3, #16
 80247dc:	f53f af4f 	bmi.w	802467e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80247e0:	3a01      	subs	r2, #1
 80247e2:	4293      	cmp	r3, r2
 80247e4:	f6bf af4b 	bge.w	802467e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80247e8:	9b06      	ldr	r3, [sp, #24]
 80247ea:	9309      	str	r3, [sp, #36]	; 0x24
 80247ec:	9b07      	ldr	r3, [sp, #28]
 80247ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80247f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247f2:	2b00      	cmp	r3, #0
 80247f4:	dc70      	bgt.n	80248d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80247f6:	9b06      	ldr	r3, [sp, #24]
 80247f8:	9a07      	ldr	r2, [sp, #28]
 80247fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80247fe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024802:	9307      	str	r3, [sp, #28]
 8024804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024806:	2b00      	cmp	r3, #0
 8024808:	f340 80eb 	ble.w	80249e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 802480c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024810:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024812:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024816:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802481a:	eef0 6a48 	vmov.f32	s13, s16
 802481e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024822:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024826:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802482a:	ee16 ba90 	vmov	fp, s13
 802482e:	eef0 6a68 	vmov.f32	s13, s17
 8024832:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024836:	ee16 5a90 	vmov	r5, s13
 802483a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802483e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024842:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024846:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802484a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802484e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024852:	ee18 2a10 	vmov	r2, s16
 8024856:	eeb0 8a47 	vmov.f32	s16, s14
 802485a:	fb92 f3f3 	sdiv	r3, r2, r3
 802485e:	ee18 2a90 	vmov	r2, s17
 8024862:	9323      	str	r3, [sp, #140]	; 0x8c
 8024864:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024866:	eef0 8a67 	vmov.f32	s17, s15
 802486a:	fb92 f3f3 	sdiv	r3, r2, r3
 802486e:	9324      	str	r3, [sp, #144]	; 0x90
 8024870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024874:	3b01      	subs	r3, #1
 8024876:	930a      	str	r3, [sp, #40]	; 0x28
 8024878:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802487a:	bf08      	it	eq
 802487c:	4613      	moveq	r3, r2
 802487e:	9306      	str	r3, [sp, #24]
 8024880:	e6d3      	b.n	802462a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8024882:	b149      	cbz	r1, 8024898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8024884:	5cba      	ldrb	r2, [r7, r2]
 8024886:	4660      	mov	r0, ip
 8024888:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802488c:	4422      	add	r2, r4
 802488e:	4666      	mov	r6, ip
 8024890:	e734      	b.n	80246fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8024892:	4660      	mov	r0, ip
 8024894:	4662      	mov	r2, ip
 8024896:	e731      	b.n	80246fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8024898:	4660      	mov	r0, ip
 802489a:	4662      	mov	r2, ip
 802489c:	e7f7      	b.n	802488e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802489e:	f110 0c01 	adds.w	ip, r0, #1
 80248a2:	f53f af74 	bmi.w	802478e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80248a6:	4562      	cmp	r2, ip
 80248a8:	f6ff af71 	blt.w	802478e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80248ac:	f116 0c01 	adds.w	ip, r6, #1
 80248b0:	f53f af6d 	bmi.w	802478e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80248b4:	4567      	cmp	r7, ip
 80248b6:	f6ff af6a 	blt.w	802478e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80248ba:	b23f      	sxth	r7, r7
 80248bc:	b212      	sxth	r2, r2
 80248be:	9701      	str	r7, [sp, #4]
 80248c0:	9200      	str	r2, [sp, #0]
 80248c2:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80248c6:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80248ca:	4623      	mov	r3, r4
 80248cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80248ce:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80248d2:	f7ff fdc3 	bl	802445c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80248d6:	e75a      	b.n	802478e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80248d8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80248da:	ea4f 462b 	mov.w	r6, fp, asr #16
 80248de:	1428      	asrs	r0, r5, #16
 80248e0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80248e4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80248e8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80248ec:	fb02 6000 	mla	r0, r2, r0, r6
 80248f0:	9e08      	ldr	r6, [sp, #32]
 80248f2:	f816 8000 	ldrb.w	r8, [r6, r0]
 80248f6:	1837      	adds	r7, r6, r0
 80248f8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80248fc:	eb04 0c08 	add.w	ip, r4, r8
 8024900:	2b00      	cmp	r3, #0
 8024902:	d060      	beq.n	80249c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8024904:	787e      	ldrb	r6, [r7, #1]
 8024906:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802490a:	4426      	add	r6, r4
 802490c:	2900      	cmp	r1, #0
 802490e:	d062      	beq.n	80249d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8024910:	18b8      	adds	r0, r7, r2
 8024912:	5cba      	ldrb	r2, [r7, r2]
 8024914:	7840      	ldrb	r0, [r0, #1]
 8024916:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802491a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802491e:	4422      	add	r2, r4
 8024920:	4420      	add	r0, r4
 8024922:	b29b      	uxth	r3, r3
 8024924:	78b7      	ldrb	r7, [r6, #2]
 8024926:	b289      	uxth	r1, r1
 8024928:	f89c a002 	ldrb.w	sl, [ip, #2]
 802492c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024930:	fb03 f901 	mul.w	r9, r3, r1
 8024934:	011b      	lsls	r3, r3, #4
 8024936:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802493a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802493e:	eba3 0309 	sub.w	r3, r3, r9
 8024942:	b289      	uxth	r1, r1
 8024944:	b29b      	uxth	r3, r3
 8024946:	ebae 0e01 	sub.w	lr, lr, r1
 802494a:	435f      	muls	r7, r3
 802494c:	fa1f fe8e 	uxth.w	lr, lr
 8024950:	fb0e 770a 	mla	r7, lr, sl, r7
 8024954:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024958:	fb01 770a 	mla	r7, r1, sl, r7
 802495c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024960:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024964:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024968:	f896 8000 	ldrb.w	r8, [r6]
 802496c:	7876      	ldrb	r6, [r6, #1]
 802496e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8024972:	fb03 f808 	mul.w	r8, r3, r8
 8024976:	4373      	muls	r3, r6
 8024978:	7856      	ldrb	r6, [r2, #1]
 802497a:	fb0e 8807 	mla	r8, lr, r7, r8
 802497e:	7817      	ldrb	r7, [r2, #0]
 8024980:	fb0e 330c 	mla	r3, lr, ip, r3
 8024984:	fb01 8807 	mla	r8, r1, r7, r8
 8024988:	7807      	ldrb	r7, [r0, #0]
 802498a:	fb01 3306 	mla	r3, r1, r6, r3
 802498e:	fb09 8707 	mla	r7, r9, r7, r8
 8024992:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024996:	ea47 070a 	orr.w	r7, r7, sl
 802499a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802499e:	fb09 3a0a 	mla	sl, r9, sl, r3
 80249a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80249a4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80249a8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80249ac:	ea47 070a 	orr.w	r7, r7, sl
 80249b0:	f823 7b02 	strh.w	r7, [r3], #2
 80249b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80249b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80249b8:	449b      	add	fp, r3
 80249ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80249bc:	441d      	add	r5, r3
 80249be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80249c0:	3b01      	subs	r3, #1
 80249c2:	9309      	str	r3, [sp, #36]	; 0x24
 80249c4:	e714      	b.n	80247f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 80249c6:	b149      	cbz	r1, 80249dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 80249c8:	5cba      	ldrb	r2, [r7, r2]
 80249ca:	4660      	mov	r0, ip
 80249cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80249d0:	4422      	add	r2, r4
 80249d2:	4666      	mov	r6, ip
 80249d4:	e7a5      	b.n	8024922 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80249d6:	4660      	mov	r0, ip
 80249d8:	4662      	mov	r2, ip
 80249da:	e7a2      	b.n	8024922 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80249dc:	4660      	mov	r0, ip
 80249de:	4662      	mov	r2, ip
 80249e0:	e7f7      	b.n	80249d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 80249e2:	b00f      	add	sp, #60	; 0x3c
 80249e4:	ecbd 8b08 	vpop	{d8-d11}
 80249e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080249ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80249ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249f0:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 80249f4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80249f8:	2c00      	cmp	r4, #0
 80249fa:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80249fe:	fb04 560c 	mla	r6, r4, ip, r5
 8024a02:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8024a06:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8024a0a:	eb02 0e06 	add.w	lr, r2, r6
 8024a0e:	db3d      	blt.n	8024a8c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8024a10:	45a0      	cmp	r8, r4
 8024a12:	dd3b      	ble.n	8024a8c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8024a14:	2d00      	cmp	r5, #0
 8024a16:	db37      	blt.n	8024a88 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8024a18:	45ac      	cmp	ip, r5
 8024a1a:	dd35      	ble.n	8024a88 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8024a1c:	5d92      	ldrb	r2, [r2, r6]
 8024a1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024a22:	1c6e      	adds	r6, r5, #1
 8024a24:	d435      	bmi.n	8024a92 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8024a26:	45b4      	cmp	ip, r6
 8024a28:	dd33      	ble.n	8024a92 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8024a2a:	b3a0      	cbz	r0, 8024a96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8024a2c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8024a30:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8024a34:	3401      	adds	r4, #1
 8024a36:	d432      	bmi.n	8024a9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8024a38:	45a0      	cmp	r8, r4
 8024a3a:	dd30      	ble.n	8024a9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8024a3c:	b397      	cbz	r7, 8024aa4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8024a3e:	2d00      	cmp	r5, #0
 8024a40:	db2b      	blt.n	8024a9a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8024a42:	45ac      	cmp	ip, r5
 8024a44:	dd29      	ble.n	8024a9a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8024a46:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8024a4a:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8024a4e:	3501      	adds	r5, #1
 8024a50:	d42b      	bmi.n	8024aaa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8024a52:	45ac      	cmp	ip, r5
 8024a54:	dd29      	ble.n	8024aaa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8024a56:	b350      	cbz	r0, 8024aae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8024a58:	44f4      	add	ip, lr
 8024a5a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024a5e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024a62:	280f      	cmp	r0, #15
 8024a64:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024a68:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024a6c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024a70:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024a74:	d801      	bhi.n	8024a7a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 8024a76:	2f0f      	cmp	r7, #15
 8024a78:	d91b      	bls.n	8024ab2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8024a7a:	4b8d      	ldr	r3, [pc, #564]	; (8024cb0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8024a7c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8024a80:	4a8c      	ldr	r2, [pc, #560]	; (8024cb4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8024a82:	488d      	ldr	r0, [pc, #564]	; (8024cb8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8024a84:	f005 fde6 	bl	802a654 <__assert_func>
 8024a88:	2200      	movs	r2, #0
 8024a8a:	e7ca      	b.n	8024a22 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8024a8c:	2600      	movs	r6, #0
 8024a8e:	4632      	mov	r2, r6
 8024a90:	e7d0      	b.n	8024a34 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8024a92:	2600      	movs	r6, #0
 8024a94:	e7ce      	b.n	8024a34 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8024a96:	4606      	mov	r6, r0
 8024a98:	e7cc      	b.n	8024a34 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8024a9a:	2400      	movs	r4, #0
 8024a9c:	e7d7      	b.n	8024a4e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 8024a9e:	2300      	movs	r3, #0
 8024aa0:	461c      	mov	r4, r3
 8024aa2:	e7de      	b.n	8024a62 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024aa4:	463b      	mov	r3, r7
 8024aa6:	463c      	mov	r4, r7
 8024aa8:	e7db      	b.n	8024a62 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024aaa:	2300      	movs	r3, #0
 8024aac:	e7d9      	b.n	8024a62 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024aae:	4603      	mov	r3, r0
 8024ab0:	e7d7      	b.n	8024a62 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024ab2:	b280      	uxth	r0, r0
 8024ab4:	b2bf      	uxth	r7, r7
 8024ab6:	fb07 fe00 	mul.w	lr, r7, r0
 8024aba:	0100      	lsls	r0, r0, #4
 8024abc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024ac0:	eba0 0c0e 	sub.w	ip, r0, lr
 8024ac4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8024ac8:	b2bf      	uxth	r7, r7
 8024aca:	fa1f fc8c 	uxth.w	ip, ip
 8024ace:	1bed      	subs	r5, r5, r7
 8024ad0:	fb0a f00c 	mul.w	r0, sl, ip
 8024ad4:	b2ad      	uxth	r5, r5
 8024ad6:	fb0b 0005 	mla	r0, fp, r5, r0
 8024ada:	fb07 0009 	mla	r0, r7, r9, r0
 8024ade:	fb0e 0008 	mla	r0, lr, r8, r0
 8024ae2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024ae6:	9001      	str	r0, [sp, #4]
 8024ae8:	2800      	cmp	r0, #0
 8024aea:	f000 80de 	beq.w	8024caa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8024aee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024af2:	d018      	beq.n	8024b26 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 8024af4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024af8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024afc:	fb0b f000 	mul.w	r0, fp, r0
 8024b00:	fb0b fb02 	mul.w	fp, fp, r2
 8024b04:	0a02      	lsrs	r2, r0, #8
 8024b06:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024b0a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024b0e:	4402      	add	r2, r0
 8024b10:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024b14:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024b18:	0a12      	lsrs	r2, r2, #8
 8024b1a:	0a00      	lsrs	r0, r0, #8
 8024b1c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024b20:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024b24:	4302      	orrs	r2, r0
 8024b26:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024b2a:	d01a      	beq.n	8024b62 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8024b2c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8024b30:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024b34:	fb0a f000 	mul.w	r0, sl, r0
 8024b38:	fb0a fa06 	mul.w	sl, sl, r6
 8024b3c:	0a06      	lsrs	r6, r0, #8
 8024b3e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024b42:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024b46:	4406      	add	r6, r0
 8024b48:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024b4c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024b50:	0a36      	lsrs	r6, r6, #8
 8024b52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b56:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024b5a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024b5e:	ea46 060a 	orr.w	r6, r6, sl
 8024b62:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024b66:	d01b      	beq.n	8024ba0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8024b68:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024b6c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024b70:	fb09 fa0a 	mul.w	sl, r9, sl
 8024b74:	fb09 f004 	mul.w	r0, r9, r4
 8024b78:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024b7c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024b80:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8024b84:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024b88:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8024b8c:	4454      	add	r4, sl
 8024b8e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024b92:	0a24      	lsrs	r4, r4, #8
 8024b94:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024b98:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024b9c:	ea44 0409 	orr.w	r4, r4, r9
 8024ba0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024ba4:	d01b      	beq.n	8024bde <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 8024ba6:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8024baa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024bae:	fb08 f909 	mul.w	r9, r8, r9
 8024bb2:	fb08 f003 	mul.w	r0, r8, r3
 8024bb6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024bba:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024bbe:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8024bc2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024bc6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8024bca:	444b      	add	r3, r9
 8024bcc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024bd0:	0a1b      	lsrs	r3, r3, #8
 8024bd2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024bd6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024bda:	ea43 0308 	orr.w	r3, r3, r8
 8024bde:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024be2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024be6:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8024bea:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024bee:	fb0c f808 	mul.w	r8, ip, r8
 8024bf2:	8808      	ldrh	r0, [r1, #0]
 8024bf4:	fb0c f606 	mul.w	r6, ip, r6
 8024bf8:	fb05 8909 	mla	r9, r5, r9, r8
 8024bfc:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8024c00:	fb05 6502 	mla	r5, r5, r2, r6
 8024c04:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024c08:	fb07 9908 	mla	r9, r7, r8, r9
 8024c0c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8024c10:	fb07 5704 	mla	r7, r7, r4, r5
 8024c14:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8024c18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c1c:	b2b6      	uxth	r6, r6
 8024c1e:	fb0e 9808 	mla	r8, lr, r8, r9
 8024c22:	9a01      	ldr	r2, [sp, #4]
 8024c24:	fb0e 7e03 	mla	lr, lr, r3, r7
 8024c28:	1205      	asrs	r5, r0, #8
 8024c2a:	4372      	muls	r2, r6
 8024c2c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024c30:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024c34:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024c38:	1c53      	adds	r3, r2, #1
 8024c3a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024c3e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024c42:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024c46:	ea48 0e0e 	orr.w	lr, r8, lr
 8024c4a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8024c4e:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8024c52:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8024c56:	b2db      	uxtb	r3, r3
 8024c58:	fb12 f206 	smulbb	r2, r2, r6
 8024c5c:	fa5f fe8e 	uxtb.w	lr, lr
 8024c60:	fb14 f406 	smulbb	r4, r4, r6
 8024c64:	fb05 2503 	mla	r5, r5, r3, r2
 8024c68:	10c2      	asrs	r2, r0, #3
 8024c6a:	fb1e fe06 	smulbb	lr, lr, r6
 8024c6e:	00c0      	lsls	r0, r0, #3
 8024c70:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024c74:	b2ad      	uxth	r5, r5
 8024c76:	b2c0      	uxtb	r0, r0
 8024c78:	fb02 4203 	mla	r2, r2, r3, r4
 8024c7c:	fb00 e303 	mla	r3, r0, r3, lr
 8024c80:	b294      	uxth	r4, r2
 8024c82:	b298      	uxth	r0, r3
 8024c84:	1c6b      	adds	r3, r5, #1
 8024c86:	1c62      	adds	r2, r4, #1
 8024c88:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024c8c:	1c43      	adds	r3, r0, #1
 8024c8e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024c92:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024c96:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024c9a:	0952      	lsrs	r2, r2, #5
 8024c9c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024ca0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024ca4:	432b      	orrs	r3, r5
 8024ca6:	4313      	orrs	r3, r2
 8024ca8:	800b      	strh	r3, [r1, #0]
 8024caa:	b003      	add	sp, #12
 8024cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cb0:	0803215f 	.word	0x0803215f
 8024cb4:	0803268e 	.word	0x0803268e
 8024cb8:	0803212c 	.word	0x0803212c

08024cbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cc0:	ed2d 8b08 	vpush	{d8-d11}
 8024cc4:	b09f      	sub	sp, #124	; 0x7c
 8024cc6:	eeb0 aa40 	vmov.f32	s20, s0
 8024cca:	eef0 9a60 	vmov.f32	s19, s1
 8024cce:	921b      	str	r2, [sp, #108]	; 0x6c
 8024cd0:	eeb0 9a41 	vmov.f32	s18, s2
 8024cd4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8024cd6:	eeb0 8a62 	vmov.f32	s16, s5
 8024cda:	9309      	str	r3, [sp, #36]	; 0x24
 8024cdc:	eef0 8a43 	vmov.f32	s17, s6
 8024ce0:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8024ce4:	eef0 ba44 	vmov.f32	s23, s8
 8024ce8:	901d      	str	r0, [sp, #116]	; 0x74
 8024cea:	eeb0 ba64 	vmov.f32	s22, s9
 8024cee:	931c      	str	r3, [sp, #112]	; 0x70
 8024cf0:	eef0 aa45 	vmov.f32	s21, s10
 8024cf4:	6850      	ldr	r0, [r2, #4]
 8024cf6:	9119      	str	r1, [sp, #100]	; 0x64
 8024cf8:	6812      	ldr	r2, [r2, #0]
 8024cfa:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8024cfc:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8024d00:	fb00 1303 	mla	r3, r0, r3, r1
 8024d04:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024d08:	930c      	str	r3, [sp, #48]	; 0x30
 8024d0a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024d0c:	681b      	ldr	r3, [r3, #0]
 8024d0e:	9312      	str	r3, [sp, #72]	; 0x48
 8024d10:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024d12:	685e      	ldr	r6, [r3, #4]
 8024d14:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8024d18:	3604      	adds	r6, #4
 8024d1a:	930d      	str	r3, [sp, #52]	; 0x34
 8024d1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	dc03      	bgt.n	8024d2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024d22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024d24:	2b00      	cmp	r3, #0
 8024d26:	f340 8387 	ble.w	8025438 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8024d2a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024d2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024d30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024d34:	1e48      	subs	r0, r1, #1
 8024d36:	1e57      	subs	r7, r2, #1
 8024d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	f340 8194 	ble.w	8025068 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8024d40:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024d42:	142b      	asrs	r3, r5, #16
 8024d44:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024d48:	d406      	bmi.n	8024d58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024d4a:	4584      	cmp	ip, r0
 8024d4c:	da04      	bge.n	8024d58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024d4e:	2b00      	cmp	r3, #0
 8024d50:	db02      	blt.n	8024d58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024d52:	42bb      	cmp	r3, r7
 8024d54:	f2c0 8189 	blt.w	802506a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024d58:	f11c 0c01 	adds.w	ip, ip, #1
 8024d5c:	f100 8177 	bmi.w	802504e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024d60:	4561      	cmp	r1, ip
 8024d62:	f2c0 8174 	blt.w	802504e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024d66:	3301      	adds	r3, #1
 8024d68:	f100 8171 	bmi.w	802504e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024d6c:	429a      	cmp	r2, r3
 8024d6e:	f2c0 816e 	blt.w	802504e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d74:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024d76:	931a      	str	r3, [sp, #104]	; 0x68
 8024d78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024d7a:	2b00      	cmp	r3, #0
 8024d7c:	f340 8193 	ble.w	80250a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8024d80:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024d82:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024d86:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024d8a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024d8e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024d90:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024d94:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024d96:	141b      	asrs	r3, r3, #16
 8024d98:	f100 81d6 	bmi.w	8025148 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024d9c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8024da0:	4543      	cmp	r3, r8
 8024da2:	f280 81d1 	bge.w	8025148 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024da6:	f1bc 0f00 	cmp.w	ip, #0
 8024daa:	f2c0 81cd 	blt.w	8025148 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024dae:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8024db2:	45c4      	cmp	ip, r8
 8024db4:	f280 81c8 	bge.w	8025148 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024db8:	b200      	sxth	r0, r0
 8024dba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024dbc:	fb0c 3300 	mla	r3, ip, r0, r3
 8024dc0:	eb04 0803 	add.w	r8, r4, r3
 8024dc4:	5ce3      	ldrb	r3, [r4, r3]
 8024dc6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024dca:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024dce:	2a00      	cmp	r2, #0
 8024dd0:	f000 81af 	beq.w	8025132 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8024dd4:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024dd8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024ddc:	940e      	str	r4, [sp, #56]	; 0x38
 8024dde:	0e24      	lsrs	r4, r4, #24
 8024de0:	9415      	str	r4, [sp, #84]	; 0x54
 8024de2:	b179      	cbz	r1, 8024e04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024de4:	eb08 0c00 	add.w	ip, r8, r0
 8024de8:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024dec:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024df0:	900a      	str	r0, [sp, #40]	; 0x28
 8024df2:	0e00      	lsrs	r0, r0, #24
 8024df4:	9013      	str	r0, [sp, #76]	; 0x4c
 8024df6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024dfa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024dfe:	900f      	str	r0, [sp, #60]	; 0x3c
 8024e00:	0e00      	lsrs	r0, r0, #24
 8024e02:	9016      	str	r0, [sp, #88]	; 0x58
 8024e04:	b292      	uxth	r2, r2
 8024e06:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024e08:	b289      	uxth	r1, r1
 8024e0a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024e0c:	fb02 f901 	mul.w	r9, r2, r1
 8024e10:	0112      	lsls	r2, r2, #4
 8024e12:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024e16:	eba2 0809 	sub.w	r8, r2, r9
 8024e1a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024e1e:	b289      	uxth	r1, r1
 8024e20:	fa1f f888 	uxth.w	r8, r8
 8024e24:	1a52      	subs	r2, r2, r1
 8024e26:	fb08 f000 	mul.w	r0, r8, r0
 8024e2a:	b292      	uxth	r2, r2
 8024e2c:	fb02 000e 	mla	r0, r2, lr, r0
 8024e30:	fb01 0004 	mla	r0, r1, r4, r0
 8024e34:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024e36:	fb09 0004 	mla	r0, r9, r4, r0
 8024e3a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024e3e:	2800      	cmp	r0, #0
 8024e40:	f000 80fa 	beq.w	8025038 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024e44:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024e48:	d01b      	beq.n	8024e82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024e4a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024e4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024e52:	fb0e fa0a 	mul.w	sl, lr, sl
 8024e56:	fb0e fe03 	mul.w	lr, lr, r3
 8024e5a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024e5e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024e62:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024e66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e6a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024e6e:	4453      	add	r3, sl
 8024e70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e74:	0a1b      	lsrs	r3, r3, #8
 8024e76:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024e7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e7e:	ea43 030c 	orr.w	r3, r3, ip
 8024e82:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024e84:	2cff      	cmp	r4, #255	; 0xff
 8024e86:	d021      	beq.n	8024ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8024e88:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024e8a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024e8e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024e90:	fb04 fb0b 	mul.w	fp, r4, fp
 8024e94:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024e96:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024e9a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024e9c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024ea0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024ea4:	fb04 fa0a 	mul.w	sl, r4, sl
 8024ea8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024eac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024eb0:	44de      	add	lr, fp
 8024eb2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024eb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024eba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ebe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ec2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ec6:	ea4e 040a 	orr.w	r4, lr, sl
 8024eca:	940e      	str	r4, [sp, #56]	; 0x38
 8024ecc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024ece:	2cff      	cmp	r4, #255	; 0xff
 8024ed0:	d021      	beq.n	8024f16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8024ed2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024ed4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024ed8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024eda:	fb04 fb0b 	mul.w	fp, r4, fp
 8024ede:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024ee0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024ee4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024ee6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024eea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024eee:	fb04 fa0a 	mul.w	sl, r4, sl
 8024ef2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ef6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024efa:	44de      	add	lr, fp
 8024efc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024f00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024f10:	ea4e 040a 	orr.w	r4, lr, sl
 8024f14:	940a      	str	r4, [sp, #40]	; 0x28
 8024f16:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024f18:	2cff      	cmp	r4, #255	; 0xff
 8024f1a:	d021      	beq.n	8024f60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024f1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024f1e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024f22:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024f24:	fb04 fb0b 	mul.w	fp, r4, fp
 8024f28:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024f2a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024f2e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024f30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024f34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024f38:	fb04 fa0a 	mul.w	sl, r4, sl
 8024f3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f40:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024f44:	44de      	add	lr, fp
 8024f46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024f4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024f5a:	ea4e 040a 	orr.w	r4, lr, sl
 8024f5e:	940f      	str	r4, [sp, #60]	; 0x3c
 8024f60:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024f62:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024f66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024f6a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024f6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024f70:	fb08 fc0c 	mul.w	ip, r8, ip
 8024f74:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024f78:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024f7c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024f7e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024f82:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024f86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024f88:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024f8c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024f90:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024f92:	fb08 f80e 	mul.w	r8, r8, lr
 8024f96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f9a:	fb02 8303 	mla	r3, r2, r3, r8
 8024f9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024fa0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024fa4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024fa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024faa:	fb01 330a 	mla	r3, r1, sl, r3
 8024fae:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024fb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024fb4:	fb09 3901 	mla	r9, r9, r1, r3
 8024fb8:	883b      	ldrh	r3, [r7, #0]
 8024fba:	4342      	muls	r2, r0
 8024fbc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024fc0:	1c50      	adds	r0, r2, #1
 8024fc2:	1219      	asrs	r1, r3, #8
 8024fc4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024fc8:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024fcc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024fd0:	ea4c 0c09 	orr.w	ip, ip, r9
 8024fd4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024fd8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8024fdc:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8024fe0:	b2c0      	uxtb	r0, r0
 8024fe2:	fb12 f204 	smulbb	r2, r2, r4
 8024fe6:	fa5f fc8c 	uxtb.w	ip, ip
 8024fea:	fb1e fe04 	smulbb	lr, lr, r4
 8024fee:	fb01 2100 	mla	r1, r1, r0, r2
 8024ff2:	10da      	asrs	r2, r3, #3
 8024ff4:	fb1c fc04 	smulbb	ip, ip, r4
 8024ff8:	00db      	lsls	r3, r3, #3
 8024ffa:	b289      	uxth	r1, r1
 8024ffc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025000:	b2db      	uxtb	r3, r3
 8025002:	fb02 e200 	mla	r2, r2, r0, lr
 8025006:	fb03 c300 	mla	r3, r3, r0, ip
 802500a:	b292      	uxth	r2, r2
 802500c:	fa1f fc83 	uxth.w	ip, r3
 8025010:	1c4b      	adds	r3, r1, #1
 8025012:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025016:	f10c 0301 	add.w	r3, ip, #1
 802501a:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802501e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8025022:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025026:	430b      	orrs	r3, r1
 8025028:	1c51      	adds	r1, r2, #1
 802502a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802502e:	0952      	lsrs	r2, r2, #5
 8025030:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025034:	4313      	orrs	r3, r2
 8025036:	803b      	strh	r3, [r7, #0]
 8025038:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802503a:	3702      	adds	r7, #2
 802503c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802503e:	441a      	add	r2, r3
 8025040:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025042:	441d      	add	r5, r3
 8025044:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025046:	9231      	str	r2, [sp, #196]	; 0xc4
 8025048:	3b01      	subs	r3, #1
 802504a:	931a      	str	r3, [sp, #104]	; 0x68
 802504c:	e694      	b.n	8024d78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802504e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025050:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8025052:	441c      	add	r4, r3
 8025054:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025056:	441d      	add	r5, r3
 8025058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802505a:	9431      	str	r4, [sp, #196]	; 0xc4
 802505c:	3b01      	subs	r3, #1
 802505e:	9309      	str	r3, [sp, #36]	; 0x24
 8025060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025062:	3302      	adds	r3, #2
 8025064:	930c      	str	r3, [sp, #48]	; 0x30
 8025066:	e667      	b.n	8024d38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025068:	d024      	beq.n	80250b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802506a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802506c:	9833      	ldr	r0, [sp, #204]	; 0xcc
 802506e:	3b01      	subs	r3, #1
 8025070:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8025072:	fb00 4003 	mla	r0, r0, r3, r4
 8025076:	1400      	asrs	r0, r0, #16
 8025078:	f53f ae7b 	bmi.w	8024d72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802507c:	3901      	subs	r1, #1
 802507e:	4288      	cmp	r0, r1
 8025080:	f6bf ae77 	bge.w	8024d72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025084:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8025086:	fb01 5303 	mla	r3, r1, r3, r5
 802508a:	141b      	asrs	r3, r3, #16
 802508c:	f53f ae71 	bmi.w	8024d72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025090:	3a01      	subs	r2, #1
 8025092:	4293      	cmp	r3, r2
 8025094:	f6bf ae6d 	bge.w	8024d72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025098:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802509c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80250a0:	f1bb 0f00 	cmp.w	fp, #0
 80250a4:	dc70      	bgt.n	8025188 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 80250a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80250ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80250ae:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80250b2:	930c      	str	r3, [sp, #48]	; 0x30
 80250b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80250b6:	2b00      	cmp	r3, #0
 80250b8:	f340 81be 	ble.w	8025438 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 80250bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80250c0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80250c2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80250c6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80250ca:	eef0 6a48 	vmov.f32	s13, s16
 80250ce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80250d2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80250d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80250da:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 80250de:	eef0 6a68 	vmov.f32	s13, s17
 80250e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80250e6:	ee16 5a90 	vmov	r5, s13
 80250ea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80250ee:	ee69 7a27 	vmul.f32	s15, s18, s15
 80250f2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80250f6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80250fa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80250fe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025102:	ee18 2a10 	vmov	r2, s16
 8025106:	eeb0 8a47 	vmov.f32	s16, s14
 802510a:	fb92 f3f3 	sdiv	r3, r2, r3
 802510e:	ee18 2a90 	vmov	r2, s17
 8025112:	9333      	str	r3, [sp, #204]	; 0xcc
 8025114:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025116:	eef0 8a67 	vmov.f32	s17, s15
 802511a:	fb92 f3f3 	sdiv	r3, r2, r3
 802511e:	9334      	str	r3, [sp, #208]	; 0xd0
 8025120:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025122:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8025124:	3b01      	subs	r3, #1
 8025126:	9319      	str	r3, [sp, #100]	; 0x64
 8025128:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802512a:	bf08      	it	eq
 802512c:	4613      	moveq	r3, r2
 802512e:	9309      	str	r3, [sp, #36]	; 0x24
 8025130:	e5f4      	b.n	8024d1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8025132:	2900      	cmp	r1, #0
 8025134:	f43f ae66 	beq.w	8024e04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025138:	f818 0000 	ldrb.w	r0, [r8, r0]
 802513c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025140:	900a      	str	r0, [sp, #40]	; 0x28
 8025142:	0e00      	lsrs	r0, r0, #24
 8025144:	9013      	str	r0, [sp, #76]	; 0x4c
 8025146:	e65d      	b.n	8024e04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025148:	f113 0801 	adds.w	r8, r3, #1
 802514c:	f53f af74 	bmi.w	8025038 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025150:	4540      	cmp	r0, r8
 8025152:	f6ff af71 	blt.w	8025038 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025156:	f11c 0801 	adds.w	r8, ip, #1
 802515a:	f53f af6d 	bmi.w	8025038 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802515e:	45c6      	cmp	lr, r8
 8025160:	f6ff af6a 	blt.w	8025038 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025164:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8025166:	b200      	sxth	r0, r0
 8025168:	9302      	str	r3, [sp, #8]
 802516a:	fa0f f38e 	sxth.w	r3, lr
 802516e:	9000      	str	r0, [sp, #0]
 8025170:	9301      	str	r3, [sp, #4]
 8025172:	4633      	mov	r3, r6
 8025174:	981d      	ldr	r0, [sp, #116]	; 0x74
 8025176:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802517a:	e9cd c203 	strd	ip, r2, [sp, #12]
 802517e:	4639      	mov	r1, r7
 8025180:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025182:	f7ff fc33 	bl	80249ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8025186:	e757      	b.n	8025038 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025188:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802518a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802518e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8025190:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025194:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025196:	1427      	asrs	r7, r4, #16
 8025198:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802519a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802519e:	142b      	asrs	r3, r5, #16
 80251a0:	fb01 7303 	mla	r3, r1, r3, r7
 80251a4:	18e7      	adds	r7, r4, r3
 80251a6:	5ce3      	ldrb	r3, [r4, r3]
 80251a8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80251ac:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80251b0:	2a00      	cmp	r2, #0
 80251b2:	f000 8137 	beq.w	8025424 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 80251b6:	f897 e001 	ldrb.w	lr, [r7, #1]
 80251ba:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80251be:	9410      	str	r4, [sp, #64]	; 0x40
 80251c0:	0e24      	lsrs	r4, r4, #24
 80251c2:	9417      	str	r4, [sp, #92]	; 0x5c
 80251c4:	b170      	cbz	r0, 80251e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 80251c6:	eb07 0e01 	add.w	lr, r7, r1
 80251ca:	5c79      	ldrb	r1, [r7, r1]
 80251cc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80251d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80251d2:	0e09      	lsrs	r1, r1, #24
 80251d4:	9114      	str	r1, [sp, #80]	; 0x50
 80251d6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80251da:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80251de:	9111      	str	r1, [sp, #68]	; 0x44
 80251e0:	0e09      	lsrs	r1, r1, #24
 80251e2:	9118      	str	r1, [sp, #96]	; 0x60
 80251e4:	b292      	uxth	r2, r2
 80251e6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80251e8:	b280      	uxth	r0, r0
 80251ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80251ec:	fb02 f800 	mul.w	r8, r2, r0
 80251f0:	0112      	lsls	r2, r2, #4
 80251f2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80251f6:	eba2 0e08 	sub.w	lr, r2, r8
 80251fa:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80251fe:	b280      	uxth	r0, r0
 8025200:	fa1f fe8e 	uxth.w	lr, lr
 8025204:	1a12      	subs	r2, r2, r0
 8025206:	fb0e f101 	mul.w	r1, lr, r1
 802520a:	b292      	uxth	r2, r2
 802520c:	fb02 110c 	mla	r1, r2, ip, r1
 8025210:	fb00 1104 	mla	r1, r0, r4, r1
 8025214:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025216:	fb08 1104 	mla	r1, r8, r4, r1
 802521a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802521e:	2900      	cmp	r1, #0
 8025220:	f000 80f5 	beq.w	802540e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8025224:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025228:	d019      	beq.n	802525e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 802522a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802522e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025232:	fb0c fa0a 	mul.w	sl, ip, sl
 8025236:	fb0c fc03 	mul.w	ip, ip, r3
 802523a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802523e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025242:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025246:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802524a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802524e:	4453      	add	r3, sl
 8025250:	0a3f      	lsrs	r7, r7, #8
 8025252:	0a1b      	lsrs	r3, r3, #8
 8025254:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025258:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802525c:	433b      	orrs	r3, r7
 802525e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025260:	2cff      	cmp	r4, #255	; 0xff
 8025262:	d020      	beq.n	80252a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8025264:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025266:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802526a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802526c:	4367      	muls	r7, r4
 802526e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025270:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025274:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025278:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802527a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802527e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025282:	fb04 fa0a 	mul.w	sl, r4, sl
 8025286:	44bc      	add	ip, r7
 8025288:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802528c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025290:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025294:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025298:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802529c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80252a0:	ea4c 040a 	orr.w	r4, ip, sl
 80252a4:	9410      	str	r4, [sp, #64]	; 0x40
 80252a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80252a8:	2cff      	cmp	r4, #255	; 0xff
 80252aa:	d020      	beq.n	80252ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 80252ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80252ae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80252b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80252b4:	4367      	muls	r7, r4
 80252b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80252b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80252bc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80252c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80252c2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80252c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252ca:	fb04 fa0a 	mul.w	sl, r4, sl
 80252ce:	44bc      	add	ip, r7
 80252d0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80252d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80252dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80252e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80252e8:	ea4c 040a 	orr.w	r4, ip, sl
 80252ec:	940b      	str	r4, [sp, #44]	; 0x2c
 80252ee:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80252f0:	2cff      	cmp	r4, #255	; 0xff
 80252f2:	d020      	beq.n	8025336 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 80252f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80252f6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80252fa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80252fc:	4367      	muls	r7, r4
 80252fe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025300:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025304:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025308:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802530a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802530e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025312:	fb04 fa0a 	mul.w	sl, r4, sl
 8025316:	44bc      	add	ip, r7
 8025318:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802531c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025320:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025324:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025328:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802532c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025330:	ea4c 040a 	orr.w	r4, ip, sl
 8025334:	9411      	str	r4, [sp, #68]	; 0x44
 8025336:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025338:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802533c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025340:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025344:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025346:	fb0e f707 	mul.w	r7, lr, r7
 802534a:	fb02 770c 	mla	r7, r2, ip, r7
 802534e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025352:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025354:	fb00 770c 	mla	r7, r0, ip, r7
 8025358:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802535c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802535e:	fb08 770c 	mla	r7, r8, ip, r7
 8025362:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025366:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025368:	fb0e fe0c 	mul.w	lr, lr, ip
 802536c:	0a3f      	lsrs	r7, r7, #8
 802536e:	fb02 e303 	mla	r3, r2, r3, lr
 8025372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025374:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025378:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802537c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802537e:	fb00 330a 	mla	r3, r0, sl, r3
 8025382:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025386:	f8b9 0000 	ldrh.w	r0, [r9]
 802538a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802538e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025390:	1202      	asrs	r2, r0, #8
 8025392:	434b      	muls	r3, r1
 8025394:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025398:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802539c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80253a0:	1c59      	adds	r1, r3, #1
 80253a2:	ea47 070c 	orr.w	r7, r7, ip
 80253a6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80253aa:	0c3b      	lsrs	r3, r7, #16
 80253ac:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80253b0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80253b4:	b2ff      	uxtb	r7, r7
 80253b6:	fb13 f304 	smulbb	r3, r3, r4
 80253ba:	b2c9      	uxtb	r1, r1
 80253bc:	fb1c fc04 	smulbb	ip, ip, r4
 80253c0:	fb02 3201 	mla	r2, r2, r1, r3
 80253c4:	10c3      	asrs	r3, r0, #3
 80253c6:	fb17 f704 	smulbb	r7, r7, r4
 80253ca:	00c0      	lsls	r0, r0, #3
 80253cc:	b292      	uxth	r2, r2
 80253ce:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80253d2:	b2c0      	uxtb	r0, r0
 80253d4:	fb03 c301 	mla	r3, r3, r1, ip
 80253d8:	f102 0c01 	add.w	ip, r2, #1
 80253dc:	fb00 7001 	mla	r0, r0, r1, r7
 80253e0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80253e4:	b280      	uxth	r0, r0
 80253e6:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80253ea:	b29b      	uxth	r3, r3
 80253ec:	1c42      	adds	r2, r0, #1
 80253ee:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80253f2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80253f6:	ea42 020c 	orr.w	r2, r2, ip
 80253fa:	f103 0c01 	add.w	ip, r3, #1
 80253fe:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025402:	095b      	lsrs	r3, r3, #5
 8025404:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025408:	431a      	orrs	r2, r3
 802540a:	f8a9 2000 	strh.w	r2, [r9]
 802540e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025410:	f109 0902 	add.w	r9, r9, #2
 8025414:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8025416:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 802541a:	441a      	add	r2, r3
 802541c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802541e:	9231      	str	r2, [sp, #196]	; 0xc4
 8025420:	441d      	add	r5, r3
 8025422:	e63d      	b.n	80250a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025424:	2800      	cmp	r0, #0
 8025426:	f43f aedd 	beq.w	80251e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 802542a:	5c79      	ldrb	r1, [r7, r1]
 802542c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025430:	910b      	str	r1, [sp, #44]	; 0x2c
 8025432:	0e09      	lsrs	r1, r1, #24
 8025434:	9114      	str	r1, [sp, #80]	; 0x50
 8025436:	e6d5      	b.n	80251e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8025438:	b01f      	add	sp, #124	; 0x7c
 802543a:	ecbd 8b08 	vpop	{d8-d11}
 802543e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025444 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025448:	880e      	ldrh	r6, [r1, #0]
 802544a:	b085      	sub	sp, #20
 802544c:	4691      	mov	r9, r2
 802544e:	ea4f 2826 	mov.w	r8, r6, asr #8
 8025452:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8025456:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 802545a:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 802545e:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8025462:	00f6      	lsls	r6, r6, #3
 8025464:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8025468:	9200      	str	r2, [sp, #0]
 802546a:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 802546e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8025472:	9201      	str	r2, [sp, #4]
 8025474:	b2f2      	uxtb	r2, r6
 8025476:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 802547a:	9202      	str	r2, [sp, #8]
 802547c:	fb04 560c 	mla	r6, r4, ip, r5
 8025480:	2c00      	cmp	r4, #0
 8025482:	eb09 0806 	add.w	r8, r9, r6
 8025486:	db3f      	blt.n	8025508 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8025488:	45a6      	cmp	lr, r4
 802548a:	dd3d      	ble.n	8025508 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 802548c:	2d00      	cmp	r5, #0
 802548e:	db39      	blt.n	8025504 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025490:	45ac      	cmp	ip, r5
 8025492:	dd37      	ble.n	8025504 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025494:	f819 2006 	ldrb.w	r2, [r9, r6]
 8025498:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802549c:	1c6e      	adds	r6, r5, #1
 802549e:	d436      	bmi.n	802550e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 80254a0:	45b4      	cmp	ip, r6
 80254a2:	dd34      	ble.n	802550e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 80254a4:	b3a8      	cbz	r0, 8025512 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 80254a6:	f898 6001 	ldrb.w	r6, [r8, #1]
 80254aa:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80254ae:	3401      	adds	r4, #1
 80254b0:	d433      	bmi.n	802551a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80254b2:	45a6      	cmp	lr, r4
 80254b4:	dd31      	ble.n	802551a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80254b6:	b39f      	cbz	r7, 8025520 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 80254b8:	2d00      	cmp	r5, #0
 80254ba:	eb08 0e0c 	add.w	lr, r8, ip
 80254be:	db2a      	blt.n	8025516 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 80254c0:	45ac      	cmp	ip, r5
 80254c2:	dd28      	ble.n	8025516 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 80254c4:	f818 400c 	ldrb.w	r4, [r8, ip]
 80254c8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80254cc:	3501      	adds	r5, #1
 80254ce:	d42a      	bmi.n	8025526 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 80254d0:	45ac      	cmp	ip, r5
 80254d2:	dd28      	ble.n	8025526 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 80254d4:	b348      	cbz	r0, 802552a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 80254d6:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80254da:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80254de:	280f      	cmp	r0, #15
 80254e0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80254e4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80254e8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80254ec:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80254f0:	d801      	bhi.n	80254f6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 80254f2:	2f0f      	cmp	r7, #15
 80254f4:	d91b      	bls.n	802552e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 80254f6:	4b7e      	ldr	r3, [pc, #504]	; (80256f0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 80254f8:	f240 11f9 	movw	r1, #505	; 0x1f9
 80254fc:	4a7d      	ldr	r2, [pc, #500]	; (80256f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 80254fe:	487e      	ldr	r0, [pc, #504]	; (80256f8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8025500:	f005 f8a8 	bl	802a654 <__assert_func>
 8025504:	2200      	movs	r2, #0
 8025506:	e7c9      	b.n	802549c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8025508:	2600      	movs	r6, #0
 802550a:	4632      	mov	r2, r6
 802550c:	e7cf      	b.n	80254ae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802550e:	2600      	movs	r6, #0
 8025510:	e7cd      	b.n	80254ae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025512:	4606      	mov	r6, r0
 8025514:	e7cb      	b.n	80254ae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025516:	2400      	movs	r4, #0
 8025518:	e7d8      	b.n	80254cc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 802551a:	2300      	movs	r3, #0
 802551c:	461c      	mov	r4, r3
 802551e:	e7de      	b.n	80254de <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025520:	463b      	mov	r3, r7
 8025522:	463c      	mov	r4, r7
 8025524:	e7db      	b.n	80254de <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025526:	2300      	movs	r3, #0
 8025528:	e7d9      	b.n	80254de <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802552a:	4603      	mov	r3, r0
 802552c:	e7d7      	b.n	80254de <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802552e:	b280      	uxth	r0, r0
 8025530:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8025534:	b2bf      	uxth	r7, r7
 8025536:	fb00 fe07 	mul.w	lr, r0, r7
 802553a:	ea4f 1000 	mov.w	r0, r0, lsl #4
 802553e:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025542:	eba0 0c0e 	sub.w	ip, r0, lr
 8025546:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802554a:	b2bf      	uxth	r7, r7
 802554c:	fa1f fc8c 	uxth.w	ip, ip
 8025550:	eba5 0507 	sub.w	r5, r5, r7
 8025554:	fb0c f00a 	mul.w	r0, ip, sl
 8025558:	b2ad      	uxth	r5, r5
 802555a:	fb05 000b 	mla	r0, r5, fp, r0
 802555e:	fb07 0009 	mla	r0, r7, r9, r0
 8025562:	fb0e 0008 	mla	r0, lr, r8, r0
 8025566:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802556a:	9003      	str	r0, [sp, #12]
 802556c:	d018      	beq.n	80255a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 802556e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025572:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025576:	fb0b f000 	mul.w	r0, fp, r0
 802557a:	fb0b fb02 	mul.w	fp, fp, r2
 802557e:	0a02      	lsrs	r2, r0, #8
 8025580:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025584:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025588:	4402      	add	r2, r0
 802558a:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802558e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025592:	0a12      	lsrs	r2, r2, #8
 8025594:	0a00      	lsrs	r0, r0, #8
 8025596:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802559a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802559e:	4302      	orrs	r2, r0
 80255a0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80255a4:	d019      	beq.n	80255da <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 80255a6:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80255aa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80255ae:	fb0a fb0b 	mul.w	fp, sl, fp
 80255b2:	fb0a fa06 	mul.w	sl, sl, r6
 80255b6:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80255ba:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80255be:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80255c2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80255c6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80255ca:	445e      	add	r6, fp
 80255cc:	0a00      	lsrs	r0, r0, #8
 80255ce:	0a36      	lsrs	r6, r6, #8
 80255d0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80255d4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80255d8:	4306      	orrs	r6, r0
 80255da:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80255de:	d019      	beq.n	8025614 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 80255e0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80255e4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80255e8:	fb09 fa0a 	mul.w	sl, r9, sl
 80255ec:	fb09 f904 	mul.w	r9, r9, r4
 80255f0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80255f4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80255f8:	f509 7080 	add.w	r0, r9, #256	; 0x100
 80255fc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025600:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8025604:	4454      	add	r4, sl
 8025606:	0a00      	lsrs	r0, r0, #8
 8025608:	0a24      	lsrs	r4, r4, #8
 802560a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802560e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025612:	4304      	orrs	r4, r0
 8025614:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025618:	d019      	beq.n	802564e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 802561a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802561e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025622:	fb08 f909 	mul.w	r9, r8, r9
 8025626:	fb08 f803 	mul.w	r8, r8, r3
 802562a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802562e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025632:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8025636:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802563a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802563e:	444b      	add	r3, r9
 8025640:	0a00      	lsrs	r0, r0, #8
 8025642:	0a1b      	lsrs	r3, r3, #8
 8025644:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025648:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802564c:	4303      	orrs	r3, r0
 802564e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025652:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025656:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802565a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802565e:	fb0c f808 	mul.w	r8, ip, r8
 8025662:	fb0c f606 	mul.w	r6, ip, r6
 8025666:	fb05 8800 	mla	r8, r5, r0, r8
 802566a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802566e:	fb05 6202 	mla	r2, r5, r2, r6
 8025672:	9d00      	ldr	r5, [sp, #0]
 8025674:	fb07 8800 	mla	r8, r7, r0, r8
 8025678:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802567c:	fb0e 8000 	mla	r0, lr, r0, r8
 8025680:	0a00      	lsrs	r0, r0, #8
 8025682:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8025686:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 802568a:	fb07 2700 	mla	r7, r7, r0, r2
 802568e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8025692:	9b03      	ldr	r3, [sp, #12]
 8025694:	fb0e 7000 	mla	r0, lr, r0, r7
 8025698:	9a02      	ldr	r2, [sp, #8]
 802569a:	43dc      	mvns	r4, r3
 802569c:	9b01      	ldr	r3, [sp, #4]
 802569e:	0a00      	lsrs	r0, r0, #8
 80256a0:	b2e4      	uxtb	r4, r4
 80256a2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80256a6:	4363      	muls	r3, r4
 80256a8:	4365      	muls	r5, r4
 80256aa:	ea48 0000 	orr.w	r0, r8, r0
 80256ae:	4362      	muls	r2, r4
 80256b0:	1c5e      	adds	r6, r3, #1
 80256b2:	4614      	mov	r4, r2
 80256b4:	1c6a      	adds	r2, r5, #1
 80256b6:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 80256ba:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80256be:	0a03      	lsrs	r3, r0, #8
 80256c0:	0c02      	lsrs	r2, r0, #16
 80256c2:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80256c6:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80256ca:	00db      	lsls	r3, r3, #3
 80256cc:	0212      	lsls	r2, r2, #8
 80256ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80256d2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80256d6:	4313      	orrs	r3, r2
 80256d8:	1c62      	adds	r2, r4, #1
 80256da:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80256de:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80256e2:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80256e6:	4318      	orrs	r0, r3
 80256e8:	8008      	strh	r0, [r1, #0]
 80256ea:	b005      	add	sp, #20
 80256ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256f0:	0803215f 	.word	0x0803215f
 80256f4:	0803268e 	.word	0x0803268e
 80256f8:	0803212c 	.word	0x0803212c

080256fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80256fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025700:	ed2d 8b08 	vpush	{d8-d11}
 8025704:	b09b      	sub	sp, #108	; 0x6c
 8025706:	eeb0 aa40 	vmov.f32	s20, s0
 802570a:	eef0 9a60 	vmov.f32	s19, s1
 802570e:	9218      	str	r2, [sp, #96]	; 0x60
 8025710:	eeb0 9a41 	vmov.f32	s18, s2
 8025714:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8025716:	eeb0 8a62 	vmov.f32	s16, s5
 802571a:	9019      	str	r0, [sp, #100]	; 0x64
 802571c:	eef0 8a43 	vmov.f32	s17, s6
 8025720:	6850      	ldr	r0, [r2, #4]
 8025722:	eef0 ba44 	vmov.f32	s23, s8
 8025726:	9116      	str	r1, [sp, #88]	; 0x58
 8025728:	eeb0 ba64 	vmov.f32	s22, s9
 802572c:	9307      	str	r3, [sp, #28]
 802572e:	eef0 aa45 	vmov.f32	s21, s10
 8025732:	6812      	ldr	r2, [r2, #0]
 8025734:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8025736:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802573a:	fb00 1303 	mla	r3, r0, r3, r1
 802573e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025742:	930a      	str	r3, [sp, #40]	; 0x28
 8025744:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025746:	681b      	ldr	r3, [r3, #0]
 8025748:	930f      	str	r3, [sp, #60]	; 0x3c
 802574a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802574c:	685e      	ldr	r6, [r3, #4]
 802574e:	3604      	adds	r6, #4
 8025750:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025752:	2b00      	cmp	r3, #0
 8025754:	dc03      	bgt.n	802575e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8025756:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025758:	2b00      	cmp	r3, #0
 802575a:	f340 8373 	ble.w	8025e44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802575e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025760:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025764:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025768:	1e48      	subs	r0, r1, #1
 802576a:	1e57      	subs	r7, r2, #1
 802576c:	9b07      	ldr	r3, [sp, #28]
 802576e:	2b00      	cmp	r3, #0
 8025770:	f340 818f 	ble.w	8025a92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8025774:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025776:	142b      	asrs	r3, r5, #16
 8025778:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802577c:	d406      	bmi.n	802578c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802577e:	4584      	cmp	ip, r0
 8025780:	da04      	bge.n	802578c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025782:	2b00      	cmp	r3, #0
 8025784:	db02      	blt.n	802578c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025786:	42bb      	cmp	r3, r7
 8025788:	f2c0 8184 	blt.w	8025a94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 802578c:	f11c 0c01 	adds.w	ip, ip, #1
 8025790:	f100 8172 	bmi.w	8025a78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025794:	4561      	cmp	r1, ip
 8025796:	f2c0 816f 	blt.w	8025a78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802579a:	3301      	adds	r3, #1
 802579c:	f100 816c 	bmi.w	8025a78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80257a0:	429a      	cmp	r2, r3
 80257a2:	f2c0 8169 	blt.w	8025a78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80257a6:	9b07      	ldr	r3, [sp, #28]
 80257a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80257aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80257ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	f340 818e 	ble.w	8025ad0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80257b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80257b6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80257ba:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80257be:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80257c2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80257c4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80257c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80257ca:	141b      	asrs	r3, r3, #16
 80257cc:	f100 81d1 	bmi.w	8025b72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80257d0:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80257d4:	4543      	cmp	r3, r8
 80257d6:	f280 81cc 	bge.w	8025b72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80257da:	f1bc 0f00 	cmp.w	ip, #0
 80257de:	f2c0 81c8 	blt.w	8025b72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80257e2:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 80257e6:	45c4      	cmp	ip, r8
 80257e8:	f280 81c3 	bge.w	8025b72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80257ec:	b209      	sxth	r1, r1
 80257ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80257f0:	fb0c 3301 	mla	r3, ip, r1, r3
 80257f4:	eb04 0803 	add.w	r8, r4, r3
 80257f8:	5ce3      	ldrb	r3, [r4, r3]
 80257fa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80257fe:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025802:	2a00      	cmp	r2, #0
 8025804:	f000 81aa 	beq.w	8025b5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8025808:	f898 c001 	ldrb.w	ip, [r8, #1]
 802580c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025810:	940b      	str	r4, [sp, #44]	; 0x2c
 8025812:	0e24      	lsrs	r4, r4, #24
 8025814:	9412      	str	r4, [sp, #72]	; 0x48
 8025816:	b178      	cbz	r0, 8025838 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025818:	eb08 0c01 	add.w	ip, r8, r1
 802581c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025820:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025824:	9108      	str	r1, [sp, #32]
 8025826:	0e09      	lsrs	r1, r1, #24
 8025828:	9110      	str	r1, [sp, #64]	; 0x40
 802582a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802582e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025832:	910c      	str	r1, [sp, #48]	; 0x30
 8025834:	0e09      	lsrs	r1, r1, #24
 8025836:	9113      	str	r1, [sp, #76]	; 0x4c
 8025838:	b292      	uxth	r2, r2
 802583a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802583c:	b280      	uxth	r0, r0
 802583e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025840:	fb02 f900 	mul.w	r9, r2, r0
 8025844:	0112      	lsls	r2, r2, #4
 8025846:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802584a:	eba2 0809 	sub.w	r8, r2, r9
 802584e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025852:	b280      	uxth	r0, r0
 8025854:	fa1f f888 	uxth.w	r8, r8
 8025858:	1a12      	subs	r2, r2, r0
 802585a:	fb08 f101 	mul.w	r1, r8, r1
 802585e:	b292      	uxth	r2, r2
 8025860:	fb02 110e 	mla	r1, r2, lr, r1
 8025864:	fb00 1104 	mla	r1, r0, r4, r1
 8025868:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802586a:	fb09 1104 	mla	r1, r9, r4, r1
 802586e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025872:	2900      	cmp	r1, #0
 8025874:	f000 80f5 	beq.w	8025a62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025878:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802587c:	d01b      	beq.n	80258b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802587e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025882:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025886:	fb0e fa0a 	mul.w	sl, lr, sl
 802588a:	fb0e fe03 	mul.w	lr, lr, r3
 802588e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025892:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025896:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802589a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802589e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80258a2:	4453      	add	r3, sl
 80258a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80258a8:	0a1b      	lsrs	r3, r3, #8
 80258aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80258ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80258b2:	ea43 030c 	orr.w	r3, r3, ip
 80258b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80258b8:	2cff      	cmp	r4, #255	; 0xff
 80258ba:	d021      	beq.n	8025900 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80258bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80258be:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80258c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80258c4:	fb04 fb0b 	mul.w	fp, r4, fp
 80258c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80258ca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80258ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80258d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80258d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80258d8:	fb04 fa0a 	mul.w	sl, r4, sl
 80258dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80258e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80258e4:	44de      	add	lr, fp
 80258e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80258ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80258ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80258f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80258f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80258fa:	ea4e 040a 	orr.w	r4, lr, sl
 80258fe:	940b      	str	r4, [sp, #44]	; 0x2c
 8025900:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025902:	2cff      	cmp	r4, #255	; 0xff
 8025904:	d021      	beq.n	802594a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8025906:	9c08      	ldr	r4, [sp, #32]
 8025908:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802590c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802590e:	fb04 fb0b 	mul.w	fp, r4, fp
 8025912:	9c08      	ldr	r4, [sp, #32]
 8025914:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025918:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802591a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802591e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025922:	fb04 fa0a 	mul.w	sl, r4, sl
 8025926:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802592a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802592e:	44de      	add	lr, fp
 8025930:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025934:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025938:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802593c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025940:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025944:	ea4e 040a 	orr.w	r4, lr, sl
 8025948:	9408      	str	r4, [sp, #32]
 802594a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802594c:	2cff      	cmp	r4, #255	; 0xff
 802594e:	d021      	beq.n	8025994 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8025950:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025952:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025956:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025958:	fb04 fb0b 	mul.w	fp, r4, fp
 802595c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802595e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025962:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025964:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025968:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802596c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025970:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025974:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025978:	44de      	add	lr, fp
 802597a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802597e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025982:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025986:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802598a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802598e:	ea4e 040a 	orr.w	r4, lr, sl
 8025992:	940c      	str	r4, [sp, #48]	; 0x30
 8025994:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025996:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802599a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802599e:	43c9      	mvns	r1, r1
 80259a0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80259a4:	9c08      	ldr	r4, [sp, #32]
 80259a6:	fb08 fc0c 	mul.w	ip, r8, ip
 80259aa:	fb02 cc0e 	mla	ip, r2, lr, ip
 80259ae:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80259b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80259b4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80259b8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80259bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80259be:	fb09 cc0e 	mla	ip, r9, lr, ip
 80259c2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80259c6:	fb08 f80e 	mul.w	r8, r8, lr
 80259ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80259ce:	fa5f fe81 	uxtb.w	lr, r1
 80259d2:	fb02 8303 	mla	r3, r2, r3, r8
 80259d6:	9a08      	ldr	r2, [sp, #32]
 80259d8:	f8b7 8000 	ldrh.w	r8, [r7]
 80259dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259e0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80259e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80259e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80259ea:	fb00 330a 	mla	r3, r0, sl, r3
 80259ee:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80259f2:	ea4f 2228 	mov.w	r2, r8, asr #8
 80259f6:	fb09 3900 	mla	r9, r9, r0, r3
 80259fa:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80259fe:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025a02:	b2c9      	uxtb	r1, r1
 8025a04:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025a08:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025a0c:	fb02 f20e 	mul.w	r2, r2, lr
 8025a10:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025a14:	fb00 f00e 	mul.w	r0, r0, lr
 8025a18:	1c53      	adds	r3, r2, #1
 8025a1a:	fb01 f10e 	mul.w	r1, r1, lr
 8025a1e:	ea4c 0c09 	orr.w	ip, ip, r9
 8025a22:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025a26:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8025a2a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025a2e:	4a60      	ldr	r2, [pc, #384]	; (8025bb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8025a30:	b2db      	uxtb	r3, r3
 8025a32:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8025a36:	1c43      	adds	r3, r0, #1
 8025a38:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025a3c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025a40:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025a44:	00db      	lsls	r3, r3, #3
 8025a46:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a4a:	4313      	orrs	r3, r2
 8025a4c:	1c4a      	adds	r2, r1, #1
 8025a4e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025a52:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025a56:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025a5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8025a5e:	f8a7 c000 	strh.w	ip, [r7]
 8025a62:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025a64:	3702      	adds	r7, #2
 8025a66:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025a68:	441a      	add	r2, r3
 8025a6a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025a6c:	441d      	add	r5, r3
 8025a6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025a70:	922d      	str	r2, [sp, #180]	; 0xb4
 8025a72:	3b01      	subs	r3, #1
 8025a74:	9317      	str	r3, [sp, #92]	; 0x5c
 8025a76:	e699      	b.n	80257ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8025a78:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025a7a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025a7c:	441c      	add	r4, r3
 8025a7e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025a80:	441d      	add	r5, r3
 8025a82:	9b07      	ldr	r3, [sp, #28]
 8025a84:	942d      	str	r4, [sp, #180]	; 0xb4
 8025a86:	3b01      	subs	r3, #1
 8025a88:	9307      	str	r3, [sp, #28]
 8025a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a8c:	3302      	adds	r3, #2
 8025a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8025a90:	e66c      	b.n	802576c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025a92:	d024      	beq.n	8025ade <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8025a94:	9b07      	ldr	r3, [sp, #28]
 8025a96:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8025a98:	3b01      	subs	r3, #1
 8025a9a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025a9c:	fb00 4003 	mla	r0, r0, r3, r4
 8025aa0:	1400      	asrs	r0, r0, #16
 8025aa2:	f53f ae80 	bmi.w	80257a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025aa6:	3901      	subs	r1, #1
 8025aa8:	4288      	cmp	r0, r1
 8025aaa:	f6bf ae7c 	bge.w	80257a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025aae:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8025ab0:	fb01 5303 	mla	r3, r1, r3, r5
 8025ab4:	141b      	asrs	r3, r3, #16
 8025ab6:	f53f ae76 	bmi.w	80257a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025aba:	3a01      	subs	r2, #1
 8025abc:	4293      	cmp	r3, r2
 8025abe:	f6bf ae72 	bge.w	80257a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025ac2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025ac6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8025aca:	f1bb 0f00 	cmp.w	fp, #0
 8025ace:	dc71      	bgt.n	8025bb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8025ad0:	9b07      	ldr	r3, [sp, #28]
 8025ad2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ad8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025adc:	930a      	str	r3, [sp, #40]	; 0x28
 8025ade:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025ae0:	2b00      	cmp	r3, #0
 8025ae2:	f340 81af 	ble.w	8025e44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8025ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025aea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025aec:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025af0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025af4:	eef0 6a48 	vmov.f32	s13, s16
 8025af8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025afc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025b00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b04:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8025b08:	eef0 6a68 	vmov.f32	s13, s17
 8025b0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b10:	ee16 5a90 	vmov	r5, s13
 8025b14:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025b18:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025b1c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025b20:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025b24:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025b28:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025b2c:	ee18 2a10 	vmov	r2, s16
 8025b30:	eeb0 8a47 	vmov.f32	s16, s14
 8025b34:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b38:	ee18 2a90 	vmov	r2, s17
 8025b3c:	932f      	str	r3, [sp, #188]	; 0xbc
 8025b3e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025b40:	eef0 8a67 	vmov.f32	s17, s15
 8025b44:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b48:	9330      	str	r3, [sp, #192]	; 0xc0
 8025b4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025b4c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025b4e:	3b01      	subs	r3, #1
 8025b50:	9316      	str	r3, [sp, #88]	; 0x58
 8025b52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025b54:	bf08      	it	eq
 8025b56:	4613      	moveq	r3, r2
 8025b58:	9307      	str	r3, [sp, #28]
 8025b5a:	e5f9      	b.n	8025750 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8025b5c:	2800      	cmp	r0, #0
 8025b5e:	f43f ae6b 	beq.w	8025838 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025b62:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025b66:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025b6a:	9108      	str	r1, [sp, #32]
 8025b6c:	0e09      	lsrs	r1, r1, #24
 8025b6e:	9110      	str	r1, [sp, #64]	; 0x40
 8025b70:	e662      	b.n	8025838 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025b72:	f113 0801 	adds.w	r8, r3, #1
 8025b76:	f53f af74 	bmi.w	8025a62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025b7a:	4541      	cmp	r1, r8
 8025b7c:	f6ff af71 	blt.w	8025a62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025b80:	f11c 0801 	adds.w	r8, ip, #1
 8025b84:	f53f af6d 	bmi.w	8025a62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025b88:	45c6      	cmp	lr, r8
 8025b8a:	f6ff af6a 	blt.w	8025a62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025b8e:	b209      	sxth	r1, r1
 8025b90:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8025b94:	fa0f f38e 	sxth.w	r3, lr
 8025b98:	9100      	str	r1, [sp, #0]
 8025b9a:	4639      	mov	r1, r7
 8025b9c:	9301      	str	r3, [sp, #4]
 8025b9e:	4633      	mov	r3, r6
 8025ba0:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8025ba4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025ba6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025ba8:	f7ff fc4c 	bl	8025444 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8025bac:	e759      	b.n	8025a62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025bae:	bf00      	nop
 8025bb0:	fffff800 	.word	0xfffff800
 8025bb4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025bb6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025bba:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025bbc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025bc0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025bc2:	1427      	asrs	r7, r4, #16
 8025bc4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025bc6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025bca:	142b      	asrs	r3, r5, #16
 8025bcc:	fb01 7303 	mla	r3, r1, r3, r7
 8025bd0:	18e7      	adds	r7, r4, r3
 8025bd2:	5ce3      	ldrb	r3, [r4, r3]
 8025bd4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025bd8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025bdc:	2a00      	cmp	r2, #0
 8025bde:	f000 8127 	beq.w	8025e30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8025be2:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025be6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025bea:	940d      	str	r4, [sp, #52]	; 0x34
 8025bec:	0e24      	lsrs	r4, r4, #24
 8025bee:	9414      	str	r4, [sp, #80]	; 0x50
 8025bf0:	b170      	cbz	r0, 8025c10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8025bf2:	eb07 0e01 	add.w	lr, r7, r1
 8025bf6:	5c79      	ldrb	r1, [r7, r1]
 8025bf8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025bfc:	9109      	str	r1, [sp, #36]	; 0x24
 8025bfe:	0e09      	lsrs	r1, r1, #24
 8025c00:	9111      	str	r1, [sp, #68]	; 0x44
 8025c02:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025c06:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025c0a:	910e      	str	r1, [sp, #56]	; 0x38
 8025c0c:	0e09      	lsrs	r1, r1, #24
 8025c0e:	9115      	str	r1, [sp, #84]	; 0x54
 8025c10:	b292      	uxth	r2, r2
 8025c12:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025c14:	b280      	uxth	r0, r0
 8025c16:	fb02 f800 	mul.w	r8, r2, r0
 8025c1a:	0112      	lsls	r2, r2, #4
 8025c1c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025c20:	eba2 0e08 	sub.w	lr, r2, r8
 8025c24:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025c28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025c2a:	b280      	uxth	r0, r0
 8025c2c:	fa1f fe8e 	uxth.w	lr, lr
 8025c30:	1a09      	subs	r1, r1, r0
 8025c32:	fb0e f202 	mul.w	r2, lr, r2
 8025c36:	b289      	uxth	r1, r1
 8025c38:	fb01 220c 	mla	r2, r1, ip, r2
 8025c3c:	fb00 2204 	mla	r2, r0, r4, r2
 8025c40:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025c42:	fb08 2204 	mla	r2, r8, r4, r2
 8025c46:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025c4a:	2a00      	cmp	r2, #0
 8025c4c:	f000 80e5 	beq.w	8025e1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8025c50:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025c54:	d019      	beq.n	8025c8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 8025c56:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025c5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c5e:	fb0c fa0a 	mul.w	sl, ip, sl
 8025c62:	fb0c fc03 	mul.w	ip, ip, r3
 8025c66:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025c6a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025c6e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025c72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025c76:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025c7a:	4453      	add	r3, sl
 8025c7c:	0a3f      	lsrs	r7, r7, #8
 8025c7e:	0a1b      	lsrs	r3, r3, #8
 8025c80:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025c84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025c88:	433b      	orrs	r3, r7
 8025c8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025c8c:	2cff      	cmp	r4, #255	; 0xff
 8025c8e:	d020      	beq.n	8025cd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 8025c90:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025c92:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025c96:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025c98:	4367      	muls	r7, r4
 8025c9a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025c9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025ca0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025ca4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025ca6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025caa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025cae:	fb04 fa0a 	mul.w	sl, r4, sl
 8025cb2:	44bc      	add	ip, r7
 8025cb4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025cb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025cbc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025cc0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025cc4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025cc8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ccc:	ea4c 040a 	orr.w	r4, ip, sl
 8025cd0:	940d      	str	r4, [sp, #52]	; 0x34
 8025cd2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025cd4:	2cff      	cmp	r4, #255	; 0xff
 8025cd6:	d020      	beq.n	8025d1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8025cd8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025cda:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025cde:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025ce0:	4367      	muls	r7, r4
 8025ce2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025ce4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025ce8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025cec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025cee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025cf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025cf6:	fb04 fa0a 	mul.w	sl, r4, sl
 8025cfa:	44bc      	add	ip, r7
 8025cfc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025d00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d04:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025d08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025d14:	ea4c 040a 	orr.w	r4, ip, sl
 8025d18:	9409      	str	r4, [sp, #36]	; 0x24
 8025d1a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025d1c:	2cff      	cmp	r4, #255	; 0xff
 8025d1e:	d020      	beq.n	8025d62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8025d20:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025d22:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025d26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025d28:	4367      	muls	r7, r4
 8025d2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025d2c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025d30:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025d34:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025d36:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025d3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d3e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025d42:	44bc      	add	ip, r7
 8025d44:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025d48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025d50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025d5c:	ea4c 040a 	orr.w	r4, ip, sl
 8025d60:	940e      	str	r4, [sp, #56]	; 0x38
 8025d62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025d64:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025d68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025d6c:	43d2      	mvns	r2, r2
 8025d6e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025d72:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025d74:	b2d2      	uxtb	r2, r2
 8025d76:	fb0e f707 	mul.w	r7, lr, r7
 8025d7a:	fb01 770c 	mla	r7, r1, ip, r7
 8025d7e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025d82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025d84:	fb00 770c 	mla	r7, r0, ip, r7
 8025d88:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025d8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025d8e:	fb08 770c 	mla	r7, r8, ip, r7
 8025d92:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025d96:	fb0e fe0c 	mul.w	lr, lr, ip
 8025d9a:	0a3f      	lsrs	r7, r7, #8
 8025d9c:	fb01 e303 	mla	r3, r1, r3, lr
 8025da0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025da2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025da6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025daa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025dac:	fb00 330a 	mla	r3, r0, sl, r3
 8025db0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025db4:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025db8:	f8b9 3000 	ldrh.w	r3, [r9]
 8025dbc:	1218      	asrs	r0, r3, #8
 8025dbe:	10d9      	asrs	r1, r3, #3
 8025dc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025dc4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025dc8:	00db      	lsls	r3, r3, #3
 8025dca:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025dce:	4350      	muls	r0, r2
 8025dd0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025dd4:	b2db      	uxtb	r3, r3
 8025dd6:	4351      	muls	r1, r2
 8025dd8:	ea47 070c 	orr.w	r7, r7, ip
 8025ddc:	4353      	muls	r3, r2
 8025dde:	1c42      	adds	r2, r0, #1
 8025de0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025de4:	0c3a      	lsrs	r2, r7, #16
 8025de6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025dea:	4a19      	ldr	r2, [pc, #100]	; (8025e50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8025dec:	b2c0      	uxtb	r0, r0
 8025dee:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8025df2:	1c4a      	adds	r2, r1, #1
 8025df4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025df8:	0a3a      	lsrs	r2, r7, #8
 8025dfa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025dfe:	00c9      	lsls	r1, r1, #3
 8025e00:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025e04:	4301      	orrs	r1, r0
 8025e06:	1c58      	adds	r0, r3, #1
 8025e08:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025e0c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025e10:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8025e14:	4308      	orrs	r0, r1
 8025e16:	f8a9 0000 	strh.w	r0, [r9]
 8025e1a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025e1c:	f109 0902 	add.w	r9, r9, #2
 8025e20:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025e22:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8025e26:	441a      	add	r2, r3
 8025e28:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025e2a:	922d      	str	r2, [sp, #180]	; 0xb4
 8025e2c:	441d      	add	r5, r3
 8025e2e:	e64c      	b.n	8025aca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8025e30:	2800      	cmp	r0, #0
 8025e32:	f43f aeed 	beq.w	8025c10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8025e36:	5c79      	ldrb	r1, [r7, r1]
 8025e38:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025e3c:	9109      	str	r1, [sp, #36]	; 0x24
 8025e3e:	0e09      	lsrs	r1, r1, #24
 8025e40:	9111      	str	r1, [sp, #68]	; 0x44
 8025e42:	e6e5      	b.n	8025c10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8025e44:	b01b      	add	sp, #108	; 0x6c
 8025e46:	ecbd 8b08 	vpop	{d8-d11}
 8025e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e4e:	bf00      	nop
 8025e50:	fffff800 	.word	0xfffff800

08025e54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8025e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e58:	b085      	sub	sp, #20
 8025e5a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8025e5e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8025e62:	9103      	str	r1, [sp, #12]
 8025e64:	2d00      	cmp	r5, #0
 8025e66:	fb05 7106 	mla	r1, r5, r6, r7
 8025e6a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8025e6e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8025e72:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8025e76:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8025e7a:	eb03 0901 	add.w	r9, r3, r1
 8025e7e:	9401      	str	r4, [sp, #4]
 8025e80:	f2c0 80c0 	blt.w	8026004 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8025e84:	45a8      	cmp	r8, r5
 8025e86:	f340 80bd 	ble.w	8026004 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8025e8a:	2f00      	cmp	r7, #0
 8025e8c:	f2c0 80b6 	blt.w	8025ffc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8025e90:	42be      	cmp	r6, r7
 8025e92:	f340 80b3 	ble.w	8025ffc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8025e96:	f813 c001 	ldrb.w	ip, [r3, r1]
 8025e9a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8025e9e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025ea2:	d019      	beq.n	8025ed8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8025ea4:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8025ea8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025eac:	435a      	muls	r2, r3
 8025eae:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8025eb2:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8025eb6:	fb0c f403 	mul.w	r4, ip, r3
 8025eba:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8025ebe:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025ec2:	441a      	add	r2, r3
 8025ec4:	f104 0320 	add.w	r3, r4, #32
 8025ec8:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8025ecc:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8025ed0:	0a1b      	lsrs	r3, r3, #8
 8025ed2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025ed6:	4319      	orrs	r1, r3
 8025ed8:	b289      	uxth	r1, r1
 8025eda:	1c7b      	adds	r3, r7, #1
 8025edc:	f100 8097 	bmi.w	802600e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025ee0:	429e      	cmp	r6, r3
 8025ee2:	f340 8094 	ble.w	802600e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025ee6:	2800      	cmp	r0, #0
 8025ee8:	f000 8094 	beq.w	8026014 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8025eec:	f899 4001 	ldrb.w	r4, [r9, #1]
 8025ef0:	9b01      	ldr	r3, [sp, #4]
 8025ef2:	2cff      	cmp	r4, #255	; 0xff
 8025ef4:	885b      	ldrh	r3, [r3, #2]
 8025ef6:	d01b      	beq.n	8025f30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8025ef8:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8025efc:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8025f00:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025f04:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025f08:	fb0a f202 	mul.w	r2, sl, r2
 8025f0c:	fb04 fa03 	mul.w	sl, r4, r3
 8025f10:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8025f14:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025f18:	441a      	add	r2, r3
 8025f1a:	f10a 0320 	add.w	r3, sl, #32
 8025f1e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025f22:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8025f26:	0a1b      	lsrs	r3, r3, #8
 8025f28:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025f2c:	ea4b 0303 	orr.w	r3, fp, r3
 8025f30:	b29b      	uxth	r3, r3
 8025f32:	3501      	adds	r5, #1
 8025f34:	d474      	bmi.n	8026020 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8025f36:	45a8      	cmp	r8, r5
 8025f38:	dd72      	ble.n	8026020 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8025f3a:	f1be 0f00 	cmp.w	lr, #0
 8025f3e:	f000 8120 	beq.w	8026182 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8025f42:	2f00      	cmp	r7, #0
 8025f44:	db69      	blt.n	802601a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8025f46:	42be      	cmp	r6, r7
 8025f48:	dd67      	ble.n	802601a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8025f4a:	f819 5006 	ldrb.w	r5, [r9, r6]
 8025f4e:	9a01      	ldr	r2, [sp, #4]
 8025f50:	2dff      	cmp	r5, #255	; 0xff
 8025f52:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8025f56:	d01c      	beq.n	8025f92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8025f58:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8025f5c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8025f60:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8025f64:	fb08 f802 	mul.w	r8, r8, r2
 8025f68:	fb05 fa0b 	mul.w	sl, r5, fp
 8025f6c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025f70:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8025f74:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025f78:	4490      	add	r8, r2
 8025f7a:	f10a 0220 	add.w	r2, sl, #32
 8025f7e:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8025f82:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8025f86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f8a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025f8e:	ea4b 0b0a 	orr.w	fp, fp, sl
 8025f92:	fa1f fb8b 	uxth.w	fp, fp
 8025f96:	3701      	adds	r7, #1
 8025f98:	d447      	bmi.n	802602a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8025f9a:	42be      	cmp	r6, r7
 8025f9c:	dd45      	ble.n	802602a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8025f9e:	2800      	cmp	r0, #0
 8025fa0:	d046      	beq.n	8026030 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8025fa2:	3601      	adds	r6, #1
 8025fa4:	9a01      	ldr	r2, [sp, #4]
 8025fa6:	f819 7006 	ldrb.w	r7, [r9, r6]
 8025faa:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8025fae:	2fff      	cmp	r7, #255	; 0xff
 8025fb0:	d01a      	beq.n	8025fe8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8025fb2:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8025fb6:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8025fba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025fbe:	fb08 f806 	mul.w	r8, r8, r6
 8025fc2:	fb07 f902 	mul.w	r9, r7, r2
 8025fc6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025fca:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8025fce:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025fd2:	44b0      	add	r8, r6
 8025fd4:	f109 0620 	add.w	r6, r9, #32
 8025fd8:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8025fdc:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025fe0:	0a36      	lsrs	r6, r6, #8
 8025fe2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025fe6:	4332      	orrs	r2, r6
 8025fe8:	b292      	uxth	r2, r2
 8025fea:	280f      	cmp	r0, #15
 8025fec:	d922      	bls.n	8026034 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8025fee:	4b69      	ldr	r3, [pc, #420]	; (8026194 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8025ff0:	f240 11f9 	movw	r1, #505	; 0x1f9
 8025ff4:	4a68      	ldr	r2, [pc, #416]	; (8026198 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8025ff6:	4869      	ldr	r0, [pc, #420]	; (802619c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8025ff8:	f004 fb2c 	bl	802a654 <__assert_func>
 8025ffc:	f04f 0c00 	mov.w	ip, #0
 8026000:	4661      	mov	r1, ip
 8026002:	e76a      	b.n	8025eda <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8026004:	2400      	movs	r4, #0
 8026006:	46a4      	mov	ip, r4
 8026008:	4623      	mov	r3, r4
 802600a:	4621      	mov	r1, r4
 802600c:	e791      	b.n	8025f32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802600e:	2400      	movs	r4, #0
 8026010:	4623      	mov	r3, r4
 8026012:	e78e      	b.n	8025f32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8026014:	4604      	mov	r4, r0
 8026016:	4603      	mov	r3, r0
 8026018:	e78b      	b.n	8025f32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802601a:	2500      	movs	r5, #0
 802601c:	46ab      	mov	fp, r5
 802601e:	e7ba      	b.n	8025f96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8026020:	2700      	movs	r7, #0
 8026022:	463d      	mov	r5, r7
 8026024:	463a      	mov	r2, r7
 8026026:	46bb      	mov	fp, r7
 8026028:	e7df      	b.n	8025fea <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 802602a:	2700      	movs	r7, #0
 802602c:	463a      	mov	r2, r7
 802602e:	e7dc      	b.n	8025fea <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8026030:	4607      	mov	r7, r0
 8026032:	4602      	mov	r2, r0
 8026034:	f1be 0f0f 	cmp.w	lr, #15
 8026038:	d8d9      	bhi.n	8025fee <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802603a:	b286      	uxth	r6, r0
 802603c:	fa1f f98e 	uxth.w	r9, lr
 8026040:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026044:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026048:	fb06 f809 	mul.w	r8, r6, r9
 802604c:	0136      	lsls	r6, r6, #4
 802604e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026052:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026056:	9601      	str	r6, [sp, #4]
 8026058:	ea4a 0101 	orr.w	r1, sl, r1
 802605c:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8026060:	fa1f f689 	uxth.w	r6, r9
 8026064:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026068:	fb10 f90e 	smulbb	r9, r0, lr
 802606c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026070:	9602      	str	r6, [sp, #8]
 8026072:	460e      	mov	r6, r1
 8026074:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8026078:	f1ce 0110 	rsb	r1, lr, #16
 802607c:	ea4a 0303 	orr.w	r3, sl, r3
 8026080:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026084:	1a09      	subs	r1, r1, r0
 8026086:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802608a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802608e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026092:	4343      	muls	r3, r0
 8026094:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8026098:	9801      	ldr	r0, [sp, #4]
 802609a:	ea4a 0202 	orr.w	r2, sl, r2
 802609e:	fb01 3106 	mla	r1, r1, r6, r3
 80260a2:	9e02      	ldr	r6, [sp, #8]
 80260a4:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80260a8:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80260ac:	fb09 1302 	mla	r3, r9, r2, r1
 80260b0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80260b4:	1b80      	subs	r0, r0, r6
 80260b6:	9e01      	ldr	r6, [sp, #4]
 80260b8:	9a03      	ldr	r2, [sp, #12]
 80260ba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80260be:	eba6 0608 	sub.w	r6, r6, r8
 80260c2:	b280      	uxth	r0, r0
 80260c4:	8811      	ldrh	r1, [r2, #0]
 80260c6:	ea4a 0b0b 	orr.w	fp, sl, fp
 80260ca:	b2b6      	uxth	r6, r6
 80260cc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80260d0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80260d4:	4374      	muls	r4, r6
 80260d6:	b292      	uxth	r2, r2
 80260d8:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80260dc:	fb0c 4400 	mla	r4, ip, r0, r4
 80260e0:	9802      	ldr	r0, [sp, #8]
 80260e2:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80260e6:	fb00 4505 	mla	r5, r0, r5, r4
 80260ea:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80260ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80260f2:	1208      	asrs	r0, r1, #8
 80260f4:	fb08 5707 	mla	r7, r8, r7, r5
 80260f8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80260fc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026100:	10cd      	asrs	r5, r1, #3
 8026102:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8026106:	ea43 0e0e 	orr.w	lr, r3, lr
 802610a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802610e:	4357      	muls	r7, r2
 8026110:	fa1f f38e 	uxth.w	r3, lr
 8026114:	f107 0801 	add.w	r8, r7, #1
 8026118:	121c      	asrs	r4, r3, #8
 802611a:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 802611e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8026122:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8026126:	b2ff      	uxtb	r7, r7
 8026128:	fb10 f007 	smulbb	r0, r0, r7
 802612c:	fb15 f507 	smulbb	r5, r5, r7
 8026130:	fb04 0402 	mla	r4, r4, r2, r0
 8026134:	10d8      	asrs	r0, r3, #3
 8026136:	00db      	lsls	r3, r3, #3
 8026138:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802613c:	b2a4      	uxth	r4, r4
 802613e:	fb00 5002 	mla	r0, r0, r2, r5
 8026142:	b2dd      	uxtb	r5, r3
 8026144:	00cb      	lsls	r3, r1, #3
 8026146:	b280      	uxth	r0, r0
 8026148:	b2db      	uxtb	r3, r3
 802614a:	fb13 f307 	smulbb	r3, r3, r7
 802614e:	fb05 3202 	mla	r2, r5, r2, r3
 8026152:	1c63      	adds	r3, r4, #1
 8026154:	b292      	uxth	r2, r2
 8026156:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802615a:	1c53      	adds	r3, r2, #1
 802615c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8026160:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026164:	1c42      	adds	r2, r0, #1
 8026166:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802616a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802616e:	9a03      	ldr	r2, [sp, #12]
 8026170:	0940      	lsrs	r0, r0, #5
 8026172:	4323      	orrs	r3, r4
 8026174:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026178:	4303      	orrs	r3, r0
 802617a:	8013      	strh	r3, [r2, #0]
 802617c:	b005      	add	sp, #20
 802617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026182:	280f      	cmp	r0, #15
 8026184:	f63f af33 	bhi.w	8025fee <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8026188:	4677      	mov	r7, lr
 802618a:	4675      	mov	r5, lr
 802618c:	4672      	mov	r2, lr
 802618e:	46f3      	mov	fp, lr
 8026190:	e753      	b.n	802603a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8026192:	bf00      	nop
 8026194:	0803215f 	.word	0x0803215f
 8026198:	0803268e 	.word	0x0803268e
 802619c:	0803212c 	.word	0x0803212c

080261a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80261a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261a4:	ed2d 8b08 	vpush	{d8-d11}
 80261a8:	b097      	sub	sp, #92	; 0x5c
 80261aa:	eeb0 aa40 	vmov.f32	s20, s0
 80261ae:	eef0 9a60 	vmov.f32	s19, s1
 80261b2:	9214      	str	r2, [sp, #80]	; 0x50
 80261b4:	eeb0 9a41 	vmov.f32	s18, s2
 80261b8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80261ba:	eeb0 8a62 	vmov.f32	s16, s5
 80261be:	9308      	str	r3, [sp, #32]
 80261c0:	eef0 8a43 	vmov.f32	s17, s6
 80261c4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80261c8:	eef0 ba44 	vmov.f32	s23, s8
 80261cc:	9015      	str	r0, [sp, #84]	; 0x54
 80261ce:	eeb0 ba64 	vmov.f32	s22, s9
 80261d2:	9312      	str	r3, [sp, #72]	; 0x48
 80261d4:	eef0 aa45 	vmov.f32	s21, s10
 80261d8:	6850      	ldr	r0, [r2, #4]
 80261da:	9111      	str	r1, [sp, #68]	; 0x44
 80261dc:	6812      	ldr	r2, [r2, #0]
 80261de:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80261e2:	fb00 1303 	mla	r3, r0, r3, r1
 80261e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80261ea:	9309      	str	r3, [sp, #36]	; 0x24
 80261ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80261ee:	681b      	ldr	r3, [r3, #0]
 80261f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80261f2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80261f4:	685b      	ldr	r3, [r3, #4]
 80261f6:	930c      	str	r3, [sp, #48]	; 0x30
 80261f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80261fc:	930a      	str	r3, [sp, #40]	; 0x28
 80261fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026200:	2b00      	cmp	r3, #0
 8026202:	dc03      	bgt.n	802620c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026204:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026206:	2b00      	cmp	r3, #0
 8026208:	f340 83cd 	ble.w	80269a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 802620c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802620e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026212:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026216:	1e48      	subs	r0, r1, #1
 8026218:	1e55      	subs	r5, r2, #1
 802621a:	9b08      	ldr	r3, [sp, #32]
 802621c:	2b00      	cmp	r3, #0
 802621e:	f340 81a5 	ble.w	802656c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8026222:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8026224:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026226:	1436      	asrs	r6, r6, #16
 8026228:	ea4f 4323 	mov.w	r3, r3, asr #16
 802622c:	d406      	bmi.n	802623c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802622e:	4286      	cmp	r6, r0
 8026230:	da04      	bge.n	802623c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026232:	2b00      	cmp	r3, #0
 8026234:	db02      	blt.n	802623c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026236:	42ab      	cmp	r3, r5
 8026238:	f2c0 8199 	blt.w	802656e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 802623c:	3601      	adds	r6, #1
 802623e:	f100 8186 	bmi.w	802654e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026242:	42b1      	cmp	r1, r6
 8026244:	f2c0 8183 	blt.w	802654e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026248:	3301      	adds	r3, #1
 802624a:	f100 8180 	bmi.w	802654e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802624e:	429a      	cmp	r2, r3
 8026250:	f2c0 817d 	blt.w	802654e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026254:	9b08      	ldr	r3, [sp, #32]
 8026256:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802625a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802625c:	9313      	str	r3, [sp, #76]	; 0x4c
 802625e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026260:	2b00      	cmp	r3, #0
 8026262:	f340 81a6 	ble.w	80265b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026266:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026268:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 802626a:	1418      	asrs	r0, r3, #16
 802626c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802626e:	142d      	asrs	r5, r5, #16
 8026270:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026274:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026276:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802627a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802627c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026280:	f100 81fa 	bmi.w	8026678 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026284:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 8026288:	4575      	cmp	r5, lr
 802628a:	f280 81f5 	bge.w	8026678 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802628e:	2800      	cmp	r0, #0
 8026290:	f2c0 81f2 	blt.w	8026678 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026294:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8026298:	4570      	cmp	r0, lr
 802629a:	f280 81ed 	bge.w	8026678 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802629e:	b212      	sxth	r2, r2
 80262a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80262a2:	fa1f fe81 	uxth.w	lr, r1
 80262a6:	fb00 5002 	mla	r0, r0, r2, r5
 80262aa:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80262ae:	eb03 0a00 	add.w	sl, r3, r0
 80262b2:	f813 9000 	ldrb.w	r9, [r3, r0]
 80262b6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80262ba:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80262be:	b29b      	uxth	r3, r3
 80262c0:	f1bc 0f00 	cmp.w	ip, #0
 80262c4:	f000 81bb 	beq.w	802663e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80262c8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80262cc:	eb0a 0b02 	add.w	fp, sl, r2
 80262d0:	fa1f fa8c 	uxth.w	sl, ip
 80262d4:	940d      	str	r4, [sp, #52]	; 0x34
 80262d6:	fb0a fe0e 	mul.w	lr, sl, lr
 80262da:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80262de:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80262e2:	eba5 050e 	sub.w	r5, r5, lr
 80262e6:	940e      	str	r4, [sp, #56]	; 0x38
 80262e8:	fa1f fa8a 	uxth.w	sl, sl
 80262ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80262ee:	b2ad      	uxth	r5, r5
 80262f0:	eba3 030a 	sub.w	r3, r3, sl
 80262f4:	fb08 f505 	mul.w	r5, r8, r5
 80262f8:	b29b      	uxth	r3, r3
 80262fa:	fb09 5303 	mla	r3, r9, r3, r5
 80262fe:	fb0a 3304 	mla	r3, sl, r4, r3
 8026302:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026304:	fb0e 3304 	mla	r3, lr, r4, r3
 8026308:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802630c:	2b00      	cmp	r3, #0
 802630e:	f000 8111 	beq.w	8026534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026312:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026314:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026318:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802631c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026320:	f000 8192 	beq.w	8026648 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8026324:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026328:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802632c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026330:	fb0a fe0e 	mul.w	lr, sl, lr
 8026334:	fb09 f000 	mul.w	r0, r9, r0
 8026338:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802633c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026340:	f100 0b20 	add.w	fp, r0, #32
 8026344:	44ce      	add	lr, r9
 8026346:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802634a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802634e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026352:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026356:	ea4e 0909 	orr.w	r9, lr, r9
 802635a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802635e:	8868      	ldrh	r0, [r5, #2]
 8026360:	d019      	beq.n	8026396 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8026362:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026366:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802636a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802636e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026372:	fb08 f800 	mul.w	r8, r8, r0
 8026376:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802637a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802637e:	f108 0b20 	add.w	fp, r8, #32
 8026382:	4486      	add	lr, r0
 8026384:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026388:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802638c:	0a00      	lsrs	r0, r0, #8
 802638e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026392:	ea4e 0000 	orr.w	r0, lr, r0
 8026396:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802639a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802639e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80263a2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80263a6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80263aa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80263ae:	ea4e 0909 	orr.w	r9, lr, r9
 80263b2:	ea4a 0000 	orr.w	r0, sl, r0
 80263b6:	f1bc 0f00 	cmp.w	ip, #0
 80263ba:	f000 8147 	beq.w	802664c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80263be:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80263c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80263c4:	3a01      	subs	r2, #1
 80263c6:	2cff      	cmp	r4, #255	; 0xff
 80263c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80263cc:	f102 0202 	add.w	r2, r2, #2
 80263d0:	eb05 0e02 	add.w	lr, r5, r2
 80263d4:	5aaa      	ldrh	r2, [r5, r2]
 80263d6:	d018      	beq.n	802640a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80263d8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80263dc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80263e0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80263e4:	fb04 fa02 	mul.w	sl, r4, r2
 80263e8:	fb08 f805 	mul.w	r8, r8, r5
 80263ec:	f10a 0520 	add.w	r5, sl, #32
 80263f0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80263f4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80263f8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80263fc:	4442      	add	r2, r8
 80263fe:	0a2d      	lsrs	r5, r5, #8
 8026400:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026404:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026408:	432a      	orrs	r2, r5
 802640a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802640c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026410:	2cff      	cmp	r4, #255	; 0xff
 8026412:	d01a      	beq.n	802644a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8026414:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026418:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802641c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026420:	fb04 fa05 	mul.w	sl, r4, r5
 8026424:	fb08 f80e 	mul.w	r8, r8, lr
 8026428:	f10a 0e20 	add.w	lr, sl, #32
 802642c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026430:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026434:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026438:	4445      	add	r5, r8
 802643a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802643e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026442:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026446:	ea45 050e 	orr.w	r5, r5, lr
 802644a:	fb1c fe01 	smulbb	lr, ip, r1
 802644e:	f1cc 0810 	rsb	r8, ip, #16
 8026452:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026456:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802645a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802645e:	eba8 0801 	sub.w	r8, r8, r1
 8026462:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026466:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802646a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802646e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026472:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026476:	ea4a 0202 	orr.w	r2, sl, r2
 802647a:	4341      	muls	r1, r0
 802647c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026480:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026484:	fb09 1108 	mla	r1, r9, r8, r1
 8026488:	ea4b 0505 	orr.w	r5, fp, r5
 802648c:	fb0c 1102 	mla	r1, ip, r2, r1
 8026490:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026494:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026498:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802649c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80264a0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80264a4:	ea42 0e0e 	orr.w	lr, r2, lr
 80264a8:	fa1f f28e 	uxth.w	r2, lr
 80264ac:	2bff      	cmp	r3, #255	; 0xff
 80264ae:	d103      	bne.n	80264b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80264b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80264b2:	29ff      	cmp	r1, #255	; 0xff
 80264b4:	f000 80de 	beq.w	8026674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80264b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80264ba:	1215      	asrs	r5, r2, #8
 80264bc:	8838      	ldrh	r0, [r7, #0]
 80264be:	434b      	muls	r3, r1
 80264c0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80264c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80264c6:	f103 0c01 	add.w	ip, r3, #1
 80264ca:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80264ce:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80264d2:	fa5f fc83 	uxtb.w	ip, r3
 80264d6:	1203      	asrs	r3, r0, #8
 80264d8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80264dc:	fb13 f30c 	smulbb	r3, r3, ip
 80264e0:	fb05 3501 	mla	r5, r5, r1, r3
 80264e4:	10c3      	asrs	r3, r0, #3
 80264e6:	10d1      	asrs	r1, r2, #3
 80264e8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80264ec:	00d2      	lsls	r2, r2, #3
 80264ee:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80264f2:	b2ad      	uxth	r5, r5
 80264f4:	fb13 f30c 	smulbb	r3, r3, ip
 80264f8:	b2d2      	uxtb	r2, r2
 80264fa:	fb01 3104 	mla	r1, r1, r4, r3
 80264fe:	00c3      	lsls	r3, r0, #3
 8026500:	b2db      	uxtb	r3, r3
 8026502:	b289      	uxth	r1, r1
 8026504:	fb13 f30c 	smulbb	r3, r3, ip
 8026508:	fb02 3304 	mla	r3, r2, r4, r3
 802650c:	b29a      	uxth	r2, r3
 802650e:	1c6b      	adds	r3, r5, #1
 8026510:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026514:	1c53      	adds	r3, r2, #1
 8026516:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802651a:	1c4a      	adds	r2, r1, #1
 802651c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026520:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026524:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026528:	0949      	lsrs	r1, r1, #5
 802652a:	432b      	orrs	r3, r5
 802652c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026530:	430b      	orrs	r3, r1
 8026532:	803b      	strh	r3, [r7, #0]
 8026534:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026536:	3702      	adds	r7, #2
 8026538:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802653a:	4413      	add	r3, r2
 802653c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802653e:	9329      	str	r3, [sp, #164]	; 0xa4
 8026540:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026542:	441a      	add	r2, r3
 8026544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026546:	3b01      	subs	r3, #1
 8026548:	922a      	str	r2, [sp, #168]	; 0xa8
 802654a:	9313      	str	r3, [sp, #76]	; 0x4c
 802654c:	e687      	b.n	802625e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802654e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026550:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8026552:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8026554:	4433      	add	r3, r6
 8026556:	9329      	str	r3, [sp, #164]	; 0xa4
 8026558:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802655a:	441c      	add	r4, r3
 802655c:	9b08      	ldr	r3, [sp, #32]
 802655e:	3b01      	subs	r3, #1
 8026560:	942a      	str	r4, [sp, #168]	; 0xa8
 8026562:	9308      	str	r3, [sp, #32]
 8026564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026566:	3302      	adds	r3, #2
 8026568:	9309      	str	r3, [sp, #36]	; 0x24
 802656a:	e656      	b.n	802621a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802656c:	d028      	beq.n	80265c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802656e:	9b08      	ldr	r3, [sp, #32]
 8026570:	982b      	ldr	r0, [sp, #172]	; 0xac
 8026572:	3b01      	subs	r3, #1
 8026574:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8026576:	fb00 5003 	mla	r0, r0, r3, r5
 802657a:	1400      	asrs	r0, r0, #16
 802657c:	f53f ae6a 	bmi.w	8026254 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026580:	3901      	subs	r1, #1
 8026582:	4288      	cmp	r0, r1
 8026584:	f6bf ae66 	bge.w	8026254 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026588:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802658a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 802658c:	fb01 0303 	mla	r3, r1, r3, r0
 8026590:	141b      	asrs	r3, r3, #16
 8026592:	f53f ae5f 	bmi.w	8026254 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026596:	3a01      	subs	r2, #1
 8026598:	4293      	cmp	r3, r2
 802659a:	f6bf ae5b 	bge.w	8026254 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802659e:	9b08      	ldr	r3, [sp, #32]
 80265a0:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80265a4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80265a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80265aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80265ac:	2b00      	cmp	r3, #0
 80265ae:	f300 8082 	bgt.w	80266b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80265b2:	9b08      	ldr	r3, [sp, #32]
 80265b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80265b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80265ba:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80265be:	9309      	str	r3, [sp, #36]	; 0x24
 80265c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80265c2:	2b00      	cmp	r3, #0
 80265c4:	f340 81ef 	ble.w	80269a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 80265c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80265cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80265ce:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80265d2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80265d6:	eef0 6a48 	vmov.f32	s13, s16
 80265da:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80265de:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80265e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265e6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80265ea:	eef0 6a68 	vmov.f32	s13, s17
 80265ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265f2:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80265f6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80265fa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80265fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026602:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026606:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802660a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802660e:	ee18 2a10 	vmov	r2, s16
 8026612:	eeb0 8a47 	vmov.f32	s16, s14
 8026616:	fb92 f3f3 	sdiv	r3, r2, r3
 802661a:	ee18 2a90 	vmov	r2, s17
 802661e:	932b      	str	r3, [sp, #172]	; 0xac
 8026620:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026622:	eef0 8a67 	vmov.f32	s17, s15
 8026626:	fb92 f3f3 	sdiv	r3, r2, r3
 802662a:	932c      	str	r3, [sp, #176]	; 0xb0
 802662c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802662e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026630:	3b01      	subs	r3, #1
 8026632:	9311      	str	r3, [sp, #68]	; 0x44
 8026634:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026636:	bf08      	it	eq
 8026638:	4613      	moveq	r3, r2
 802663a:	9308      	str	r3, [sp, #32]
 802663c:	e5df      	b.n	80261fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802663e:	fb08 f505 	mul.w	r5, r8, r5
 8026642:	fb09 5303 	mla	r3, r9, r3, r5
 8026646:	e65f      	b.n	8026308 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8026648:	4681      	mov	r9, r0
 802664a:	e686      	b.n	802635a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802664c:	f1c1 0210 	rsb	r2, r1, #16
 8026650:	4341      	muls	r1, r0
 8026652:	fb09 1902 	mla	r9, r9, r2, r1
 8026656:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802665a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802665e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026662:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026666:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802666a:	ea42 0909 	orr.w	r9, r2, r9
 802666e:	fa1f f289 	uxth.w	r2, r9
 8026672:	e71b      	b.n	80264ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8026674:	803a      	strh	r2, [r7, #0]
 8026676:	e75d      	b.n	8026534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026678:	f115 0e01 	adds.w	lr, r5, #1
 802667c:	f53f af5a 	bmi.w	8026534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026680:	4572      	cmp	r2, lr
 8026682:	f6ff af57 	blt.w	8026534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026686:	f110 0e01 	adds.w	lr, r0, #1
 802668a:	f53f af53 	bmi.w	8026534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802668e:	4573      	cmp	r3, lr
 8026690:	f6ff af50 	blt.w	8026534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026694:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026696:	b21b      	sxth	r3, r3
 8026698:	b212      	sxth	r2, r2
 802669a:	9502      	str	r5, [sp, #8]
 802669c:	9301      	str	r3, [sp, #4]
 802669e:	9200      	str	r2, [sp, #0]
 80266a0:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80266a4:	e9cd c405 	strd	ip, r4, [sp, #20]
 80266a8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80266ac:	4639      	mov	r1, r7
 80266ae:	9815      	ldr	r0, [sp, #84]	; 0x54
 80266b0:	f7ff fbd0 	bl	8025e54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80266b4:	e73e      	b.n	8026534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80266b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80266b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80266bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80266be:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80266c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80266c4:	fa1f fc82 	uxth.w	ip, r2
 80266c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80266cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80266ce:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80266d2:	141f      	asrs	r7, r3, #16
 80266d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80266d6:	141b      	asrs	r3, r3, #16
 80266d8:	fb01 3707 	mla	r7, r1, r7, r3
 80266dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80266de:	eb03 0a07 	add.w	sl, r3, r7
 80266e2:	f813 9007 	ldrb.w	r9, [r3, r7]
 80266e6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80266ea:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80266ee:	b29b      	uxth	r3, r3
 80266f0:	2d00      	cmp	r5, #0
 80266f2:	f000 813d 	beq.w	8026970 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 80266f6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80266fa:	eb0a 0b01 	add.w	fp, sl, r1
 80266fe:	fa1f fa85 	uxth.w	sl, r5
 8026702:	940f      	str	r4, [sp, #60]	; 0x3c
 8026704:	fb0a fc0c 	mul.w	ip, sl, ip
 8026708:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802670c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026710:	eba0 000c 	sub.w	r0, r0, ip
 8026714:	9410      	str	r4, [sp, #64]	; 0x40
 8026716:	fa1f fa8a 	uxth.w	sl, sl
 802671a:	b280      	uxth	r0, r0
 802671c:	eba3 030a 	sub.w	r3, r3, sl
 8026720:	fb08 f000 	mul.w	r0, r8, r0
 8026724:	b29b      	uxth	r3, r3
 8026726:	fb09 0303 	mla	r3, r9, r3, r0
 802672a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802672c:	fb0a 3300 	mla	r3, sl, r0, r3
 8026730:	fb0c 3304 	mla	r3, ip, r4, r3
 8026734:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026738:	2b00      	cmp	r3, #0
 802673a:	f000 810b 	beq.w	8026954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 802673e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026740:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026744:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026746:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802674a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802674e:	f000 8114 	beq.w	802697a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8026752:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026756:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802675a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802675e:	fb0a fc0c 	mul.w	ip, sl, ip
 8026762:	fb09 f707 	mul.w	r7, r9, r7
 8026766:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802676a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802676e:	f107 0b20 	add.w	fp, r7, #32
 8026772:	44cc      	add	ip, r9
 8026774:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026778:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802677c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026780:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026784:	ea4c 0909 	orr.w	r9, ip, r9
 8026788:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802678c:	8847      	ldrh	r7, [r0, #2]
 802678e:	d019      	beq.n	80267c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8026790:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026794:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026798:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802679c:	fb0a fc0c 	mul.w	ip, sl, ip
 80267a0:	fb08 f807 	mul.w	r8, r8, r7
 80267a4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80267a8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80267ac:	f108 0b20 	add.w	fp, r8, #32
 80267b0:	44bc      	add	ip, r7
 80267b2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80267b6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80267ba:	0a3f      	lsrs	r7, r7, #8
 80267bc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80267c0:	ea4c 0707 	orr.w	r7, ip, r7
 80267c4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80267c8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80267cc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80267d0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80267d4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80267d8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80267dc:	ea4c 0909 	orr.w	r9, ip, r9
 80267e0:	ea4a 0707 	orr.w	r7, sl, r7
 80267e4:	2d00      	cmp	r5, #0
 80267e6:	f000 80ca 	beq.w	802697e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80267ea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80267ee:	3901      	subs	r1, #1
 80267f0:	0049      	lsls	r1, r1, #1
 80267f2:	3102      	adds	r1, #2
 80267f4:	eb00 0c01 	add.w	ip, r0, r1
 80267f8:	5a41      	ldrh	r1, [r0, r1]
 80267fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80267fc:	28ff      	cmp	r0, #255	; 0xff
 80267fe:	d019      	beq.n	8026834 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8026800:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8026804:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026806:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802680a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802680e:	fb04 fa01 	mul.w	sl, r4, r1
 8026812:	fb08 f800 	mul.w	r8, r8, r0
 8026816:	f10a 0020 	add.w	r0, sl, #32
 802681a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802681e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026822:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026826:	4441      	add	r1, r8
 8026828:	0a00      	lsrs	r0, r0, #8
 802682a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802682e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026832:	4301      	orrs	r1, r0
 8026834:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026836:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802683a:	2cff      	cmp	r4, #255	; 0xff
 802683c:	d01a      	beq.n	8026874 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 802683e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8026842:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026846:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802684a:	fb04 fa00 	mul.w	sl, r4, r0
 802684e:	fb08 f80c 	mul.w	r8, r8, ip
 8026852:	f10a 0c20 	add.w	ip, sl, #32
 8026856:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802685a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802685e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026862:	4440      	add	r0, r8
 8026864:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026868:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802686c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026870:	ea40 000c 	orr.w	r0, r0, ip
 8026874:	fb15 fc02 	smulbb	ip, r5, r2
 8026878:	f1c5 0810 	rsb	r8, r5, #16
 802687c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026880:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026884:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026888:	eba8 0802 	sub.w	r8, r8, r2
 802688c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026890:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026894:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026898:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802689c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80268a0:	ea4a 0101 	orr.w	r1, sl, r1
 80268a4:	437a      	muls	r2, r7
 80268a6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80268aa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80268ae:	fb09 2208 	mla	r2, r9, r8, r2
 80268b2:	ea4b 0000 	orr.w	r0, fp, r0
 80268b6:	fb05 2201 	mla	r2, r5, r1, r2
 80268ba:	fb0c 2200 	mla	r2, ip, r0, r2
 80268be:	0d57      	lsrs	r7, r2, #21
 80268c0:	0952      	lsrs	r2, r2, #5
 80268c2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80268c6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80268ca:	433a      	orrs	r2, r7
 80268cc:	2bff      	cmp	r3, #255	; 0xff
 80268ce:	b292      	uxth	r2, r2
 80268d0:	d102      	bne.n	80268d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 80268d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80268d4:	29ff      	cmp	r1, #255	; 0xff
 80268d6:	d063      	beq.n	80269a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 80268d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80268da:	1215      	asrs	r5, r2, #8
 80268dc:	f8be 1000 	ldrh.w	r1, [lr]
 80268e0:	4343      	muls	r3, r0
 80268e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80268e4:	10cf      	asrs	r7, r1, #3
 80268e6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80268ea:	1c58      	adds	r0, r3, #1
 80268ec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80268f0:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80268f4:	1208      	asrs	r0, r1, #8
 80268f6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80268fa:	00c9      	lsls	r1, r1, #3
 80268fc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026900:	b2db      	uxtb	r3, r3
 8026902:	b2c9      	uxtb	r1, r1
 8026904:	fb10 f003 	smulbb	r0, r0, r3
 8026908:	fb11 f103 	smulbb	r1, r1, r3
 802690c:	fb05 0504 	mla	r5, r5, r4, r0
 8026910:	10d0      	asrs	r0, r2, #3
 8026912:	fb17 f703 	smulbb	r7, r7, r3
 8026916:	00d2      	lsls	r2, r2, #3
 8026918:	b2ad      	uxth	r5, r5
 802691a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802691e:	b2d2      	uxtb	r2, r2
 8026920:	fb00 7004 	mla	r0, r0, r4, r7
 8026924:	1c6b      	adds	r3, r5, #1
 8026926:	fb02 1204 	mla	r2, r2, r4, r1
 802692a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802692e:	b292      	uxth	r2, r2
 8026930:	b280      	uxth	r0, r0
 8026932:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026936:	1c57      	adds	r7, r2, #1
 8026938:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802693c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026940:	433d      	orrs	r5, r7
 8026942:	1c47      	adds	r7, r0, #1
 8026944:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026948:	097f      	lsrs	r7, r7, #5
 802694a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802694e:	433d      	orrs	r5, r7
 8026950:	f8ae 5000 	strh.w	r5, [lr]
 8026954:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026956:	f10e 0e02 	add.w	lr, lr, #2
 802695a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802695c:	4413      	add	r3, r2
 802695e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8026960:	9329      	str	r3, [sp, #164]	; 0xa4
 8026962:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026964:	441a      	add	r2, r3
 8026966:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026968:	3b01      	subs	r3, #1
 802696a:	922a      	str	r2, [sp, #168]	; 0xa8
 802696c:	9313      	str	r3, [sp, #76]	; 0x4c
 802696e:	e61c      	b.n	80265aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8026970:	fb08 f000 	mul.w	r0, r8, r0
 8026974:	fb09 0303 	mla	r3, r9, r3, r0
 8026978:	e6dc      	b.n	8026734 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 802697a:	46b9      	mov	r9, r7
 802697c:	e704      	b.n	8026788 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 802697e:	f1c2 0110 	rsb	r1, r2, #16
 8026982:	437a      	muls	r2, r7
 8026984:	fb09 2901 	mla	r9, r9, r1, r2
 8026988:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802698c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026990:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026994:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026998:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802699c:	4302      	orrs	r2, r0
 802699e:	e795      	b.n	80268cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 80269a0:	f8ae 2000 	strh.w	r2, [lr]
 80269a4:	e7d6      	b.n	8026954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 80269a6:	b017      	add	sp, #92	; 0x5c
 80269a8:	ecbd 8b08 	vpop	{d8-d11}
 80269ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080269b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80269b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269b4:	b085      	sub	sp, #20
 80269b6:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80269ba:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80269be:	9103      	str	r1, [sp, #12]
 80269c0:	2d00      	cmp	r5, #0
 80269c2:	fb05 7106 	mla	r1, r5, r6, r7
 80269c6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80269ca:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80269ce:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 80269d2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80269d6:	eb02 0901 	add.w	r9, r2, r1
 80269da:	9401      	str	r4, [sp, #4]
 80269dc:	f2c0 80c0 	blt.w	8026b60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80269e0:	45a8      	cmp	r8, r5
 80269e2:	f340 80bd 	ble.w	8026b60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80269e6:	2f00      	cmp	r7, #0
 80269e8:	f2c0 80b6 	blt.w	8026b58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80269ec:	42be      	cmp	r6, r7
 80269ee:	f340 80b3 	ble.w	8026b58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80269f2:	f812 c001 	ldrb.w	ip, [r2, r1]
 80269f6:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80269fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80269fe:	d019      	beq.n	8026a34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8026a00:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8026a04:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026a08:	435a      	muls	r2, r3
 8026a0a:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8026a0e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8026a12:	fb0c f403 	mul.w	r4, ip, r3
 8026a16:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8026a1a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8026a1e:	441a      	add	r2, r3
 8026a20:	f104 0320 	add.w	r3, r4, #32
 8026a24:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8026a28:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8026a2c:	0a1b      	lsrs	r3, r3, #8
 8026a2e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026a32:	4319      	orrs	r1, r3
 8026a34:	b289      	uxth	r1, r1
 8026a36:	1c7b      	adds	r3, r7, #1
 8026a38:	f100 8097 	bmi.w	8026b6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8026a3c:	429e      	cmp	r6, r3
 8026a3e:	f340 8094 	ble.w	8026b6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8026a42:	2800      	cmp	r0, #0
 8026a44:	f000 8094 	beq.w	8026b70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8026a48:	f899 4001 	ldrb.w	r4, [r9, #1]
 8026a4c:	9b01      	ldr	r3, [sp, #4]
 8026a4e:	2cff      	cmp	r4, #255	; 0xff
 8026a50:	885b      	ldrh	r3, [r3, #2]
 8026a52:	d01b      	beq.n	8026a8c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8026a54:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8026a58:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8026a5c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026a60:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026a64:	fb0a f202 	mul.w	r2, sl, r2
 8026a68:	fb04 fa03 	mul.w	sl, r4, r3
 8026a6c:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8026a70:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8026a74:	441a      	add	r2, r3
 8026a76:	f10a 0320 	add.w	r3, sl, #32
 8026a7a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8026a7e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8026a82:	0a1b      	lsrs	r3, r3, #8
 8026a84:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026a88:	ea4b 0303 	orr.w	r3, fp, r3
 8026a8c:	b29b      	uxth	r3, r3
 8026a8e:	3501      	adds	r5, #1
 8026a90:	d474      	bmi.n	8026b7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8026a92:	45a8      	cmp	r8, r5
 8026a94:	dd72      	ble.n	8026b7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8026a96:	f1be 0f00 	cmp.w	lr, #0
 8026a9a:	f000 8110 	beq.w	8026cbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8026a9e:	2f00      	cmp	r7, #0
 8026aa0:	db69      	blt.n	8026b76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8026aa2:	42be      	cmp	r6, r7
 8026aa4:	dd67      	ble.n	8026b76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8026aa6:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026aaa:	9a01      	ldr	r2, [sp, #4]
 8026aac:	2dff      	cmp	r5, #255	; 0xff
 8026aae:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8026ab2:	d01c      	beq.n	8026aee <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8026ab4:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8026ab8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8026abc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026ac0:	fb08 f802 	mul.w	r8, r8, r2
 8026ac4:	fb05 fa0b 	mul.w	sl, r5, fp
 8026ac8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026acc:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8026ad0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026ad4:	4490      	add	r8, r2
 8026ad6:	f10a 0220 	add.w	r2, sl, #32
 8026ada:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8026ade:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8026ae2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ae6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8026aea:	ea4b 0b0a 	orr.w	fp, fp, sl
 8026aee:	fa1f fb8b 	uxth.w	fp, fp
 8026af2:	3701      	adds	r7, #1
 8026af4:	d447      	bmi.n	8026b86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8026af6:	42be      	cmp	r6, r7
 8026af8:	dd45      	ble.n	8026b86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8026afa:	2800      	cmp	r0, #0
 8026afc:	d046      	beq.n	8026b8c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8026afe:	3601      	adds	r6, #1
 8026b00:	9a01      	ldr	r2, [sp, #4]
 8026b02:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026b06:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8026b0a:	2fff      	cmp	r7, #255	; 0xff
 8026b0c:	d01a      	beq.n	8026b44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8026b0e:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8026b12:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8026b16:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026b1a:	fb08 f806 	mul.w	r8, r8, r6
 8026b1e:	fb07 f902 	mul.w	r9, r7, r2
 8026b22:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026b26:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8026b2a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026b2e:	44b0      	add	r8, r6
 8026b30:	f109 0620 	add.w	r6, r9, #32
 8026b34:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8026b38:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026b3c:	0a36      	lsrs	r6, r6, #8
 8026b3e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8026b42:	4332      	orrs	r2, r6
 8026b44:	b292      	uxth	r2, r2
 8026b46:	280f      	cmp	r0, #15
 8026b48:	d922      	bls.n	8026b90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8026b4a:	4b61      	ldr	r3, [pc, #388]	; (8026cd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8026b4c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8026b50:	4a60      	ldr	r2, [pc, #384]	; (8026cd4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8026b52:	4861      	ldr	r0, [pc, #388]	; (8026cd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8026b54:	f003 fd7e 	bl	802a654 <__assert_func>
 8026b58:	f04f 0c00 	mov.w	ip, #0
 8026b5c:	4661      	mov	r1, ip
 8026b5e:	e76a      	b.n	8026a36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8026b60:	2400      	movs	r4, #0
 8026b62:	46a4      	mov	ip, r4
 8026b64:	4623      	mov	r3, r4
 8026b66:	4621      	mov	r1, r4
 8026b68:	e791      	b.n	8026a8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8026b6a:	2400      	movs	r4, #0
 8026b6c:	4623      	mov	r3, r4
 8026b6e:	e78e      	b.n	8026a8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8026b70:	4604      	mov	r4, r0
 8026b72:	4603      	mov	r3, r0
 8026b74:	e78b      	b.n	8026a8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8026b76:	2500      	movs	r5, #0
 8026b78:	46ab      	mov	fp, r5
 8026b7a:	e7ba      	b.n	8026af2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8026b7c:	2700      	movs	r7, #0
 8026b7e:	463d      	mov	r5, r7
 8026b80:	463a      	mov	r2, r7
 8026b82:	46bb      	mov	fp, r7
 8026b84:	e7df      	b.n	8026b46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8026b86:	2700      	movs	r7, #0
 8026b88:	463a      	mov	r2, r7
 8026b8a:	e7dc      	b.n	8026b46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8026b8c:	4607      	mov	r7, r0
 8026b8e:	4602      	mov	r2, r0
 8026b90:	f1be 0f0f 	cmp.w	lr, #15
 8026b94:	d8d9      	bhi.n	8026b4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8026b96:	b286      	uxth	r6, r0
 8026b98:	fa1f f98e 	uxth.w	r9, lr
 8026b9c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026ba0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026ba4:	fb06 f809 	mul.w	r8, r6, r9
 8026ba8:	0136      	lsls	r6, r6, #4
 8026baa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026bae:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026bb2:	9601      	str	r6, [sp, #4]
 8026bb4:	ea4a 0101 	orr.w	r1, sl, r1
 8026bb8:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8026bbc:	fa1f f689 	uxth.w	r6, r9
 8026bc0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026bc4:	fb10 f90e 	smulbb	r9, r0, lr
 8026bc8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026bcc:	9602      	str	r6, [sp, #8]
 8026bce:	460e      	mov	r6, r1
 8026bd0:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8026bd4:	f1ce 0110 	rsb	r1, lr, #16
 8026bd8:	ea4a 0303 	orr.w	r3, sl, r3
 8026bdc:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026be0:	1a09      	subs	r1, r1, r0
 8026be2:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8026be6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026bea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026bee:	4343      	muls	r3, r0
 8026bf0:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8026bf4:	ea4a 0202 	orr.w	r2, sl, r2
 8026bf8:	9802      	ldr	r0, [sp, #8]
 8026bfa:	fb01 3106 	mla	r1, r1, r6, r3
 8026bfe:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8026c02:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026c06:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026c0a:	fb09 1302 	mla	r3, r9, r2, r1
 8026c0e:	9a03      	ldr	r2, [sp, #12]
 8026c10:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026c14:	8811      	ldrh	r1, [r2, #0]
 8026c16:	9a01      	ldr	r2, [sp, #4]
 8026c18:	ea4a 0b0b 	orr.w	fp, sl, fp
 8026c1c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026c20:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8026c24:	1a12      	subs	r2, r2, r0
 8026c26:	9801      	ldr	r0, [sp, #4]
 8026c28:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8026c2c:	eba0 0608 	sub.w	r6, r0, r8
 8026c30:	b292      	uxth	r2, r2
 8026c32:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026c36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026c3a:	b2b6      	uxth	r6, r6
 8026c3c:	10c8      	asrs	r0, r1, #3
 8026c3e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026c42:	4374      	muls	r4, r6
 8026c44:	ea43 0e0e 	orr.w	lr, r3, lr
 8026c48:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026c4c:	fb0c 4402 	mla	r4, ip, r2, r4
 8026c50:	9a02      	ldr	r2, [sp, #8]
 8026c52:	fa1f f38e 	uxth.w	r3, lr
 8026c56:	fb02 4505 	mla	r5, r2, r5, r4
 8026c5a:	120a      	asrs	r2, r1, #8
 8026c5c:	00c9      	lsls	r1, r1, #3
 8026c5e:	fb08 5707 	mla	r7, r8, r7, r5
 8026c62:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026c66:	b2c9      	uxtb	r1, r1
 8026c68:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8026c6c:	b2ff      	uxtb	r7, r7
 8026c6e:	437a      	muls	r2, r7
 8026c70:	4378      	muls	r0, r7
 8026c72:	434f      	muls	r7, r1
 8026c74:	1c51      	adds	r1, r2, #1
 8026c76:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8026c7a:	121a      	asrs	r2, r3, #8
 8026c7c:	f022 0207 	bic.w	r2, r2, #7
 8026c80:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8026c84:	1c41      	adds	r1, r0, #1
 8026c86:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026c8a:	10d9      	asrs	r1, r3, #3
 8026c8c:	0212      	lsls	r2, r2, #8
 8026c8e:	f021 0103 	bic.w	r1, r1, #3
 8026c92:	00db      	lsls	r3, r3, #3
 8026c94:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026c98:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026c9c:	00c9      	lsls	r1, r1, #3
 8026c9e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026ca2:	430a      	orrs	r2, r1
 8026ca4:	1c79      	adds	r1, r7, #1
 8026ca6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8026caa:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8026cae:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026cb2:	4313      	orrs	r3, r2
 8026cb4:	9a03      	ldr	r2, [sp, #12]
 8026cb6:	8013      	strh	r3, [r2, #0]
 8026cb8:	b005      	add	sp, #20
 8026cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026cbe:	280f      	cmp	r0, #15
 8026cc0:	f63f af43 	bhi.w	8026b4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8026cc4:	4677      	mov	r7, lr
 8026cc6:	4675      	mov	r5, lr
 8026cc8:	4672      	mov	r2, lr
 8026cca:	46f3      	mov	fp, lr
 8026ccc:	e763      	b.n	8026b96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8026cce:	bf00      	nop
 8026cd0:	0803215f 	.word	0x0803215f
 8026cd4:	0803268e 	.word	0x0803268e
 8026cd8:	0803212c 	.word	0x0803212c

08026cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ce0:	ed2d 8b08 	vpush	{d8-d11}
 8026ce4:	b093      	sub	sp, #76	; 0x4c
 8026ce6:	eeb0 aa40 	vmov.f32	s20, s0
 8026cea:	eef0 9a60 	vmov.f32	s19, s1
 8026cee:	9210      	str	r2, [sp, #64]	; 0x40
 8026cf0:	eeb0 9a41 	vmov.f32	s18, s2
 8026cf4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026cf6:	eeb0 8a62 	vmov.f32	s16, s5
 8026cfa:	9011      	str	r0, [sp, #68]	; 0x44
 8026cfc:	eef0 8a43 	vmov.f32	s17, s6
 8026d00:	6850      	ldr	r0, [r2, #4]
 8026d02:	eef0 ba44 	vmov.f32	s23, s8
 8026d06:	910e      	str	r1, [sp, #56]	; 0x38
 8026d08:	eeb0 ba64 	vmov.f32	s22, s9
 8026d0c:	9306      	str	r3, [sp, #24]
 8026d0e:	eef0 aa45 	vmov.f32	s21, s10
 8026d12:	6812      	ldr	r2, [r2, #0]
 8026d14:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026d18:	fb00 1303 	mla	r3, r0, r3, r1
 8026d1c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026d20:	9307      	str	r3, [sp, #28]
 8026d22:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d24:	681b      	ldr	r3, [r3, #0]
 8026d26:	9308      	str	r3, [sp, #32]
 8026d28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d2a:	685b      	ldr	r3, [r3, #4]
 8026d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8026d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026d30:	2b00      	cmp	r3, #0
 8026d32:	dc03      	bgt.n	8026d3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8026d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026d36:	2b00      	cmp	r3, #0
 8026d38:	f340 83b6 	ble.w	80274a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8026d3c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d3e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026d42:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026d46:	1e48      	subs	r0, r1, #1
 8026d48:	1e55      	subs	r5, r2, #1
 8026d4a:	9b06      	ldr	r3, [sp, #24]
 8026d4c:	2b00      	cmp	r3, #0
 8026d4e:	f340 8165 	ble.w	802701c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8026d52:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8026d54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026d56:	1436      	asrs	r6, r6, #16
 8026d58:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026d5c:	d406      	bmi.n	8026d6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d5e:	4286      	cmp	r6, r0
 8026d60:	da04      	bge.n	8026d6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d62:	2b00      	cmp	r3, #0
 8026d64:	db02      	blt.n	8026d6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d66:	42ab      	cmp	r3, r5
 8026d68:	f2c0 8159 	blt.w	802701e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026d6c:	3601      	adds	r6, #1
 8026d6e:	f100 8146 	bmi.w	8026ffe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026d72:	42b1      	cmp	r1, r6
 8026d74:	f2c0 8143 	blt.w	8026ffe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026d78:	3301      	adds	r3, #1
 8026d7a:	f100 8140 	bmi.w	8026ffe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026d7e:	429a      	cmp	r2, r3
 8026d80:	f2c0 813d 	blt.w	8026ffe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026d84:	9b06      	ldr	r3, [sp, #24]
 8026d86:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026d8a:	9f07      	ldr	r7, [sp, #28]
 8026d8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8026d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026d90:	2b00      	cmp	r3, #0
 8026d92:	f340 8166 	ble.w	8027062 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026d96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026d98:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8026d9a:	1418      	asrs	r0, r3, #16
 8026d9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026d9e:	142d      	asrs	r5, r5, #16
 8026da0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026da4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026da6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026daa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026dac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026db0:	f100 81f0 	bmi.w	8027194 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026db4:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 8026db8:	4575      	cmp	r5, lr
 8026dba:	f280 81eb 	bge.w	8027194 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026dbe:	2800      	cmp	r0, #0
 8026dc0:	f2c0 81e8 	blt.w	8027194 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026dc4:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8026dc8:	4570      	cmp	r0, lr
 8026dca:	f280 81e3 	bge.w	8027194 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026dce:	b212      	sxth	r2, r2
 8026dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026dd2:	fa1f fe81 	uxth.w	lr, r1
 8026dd6:	fb00 5002 	mla	r0, r0, r2, r5
 8026dda:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026dde:	eb03 0a00 	add.w	sl, r3, r0
 8026de2:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026de6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8026dea:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026dee:	b29b      	uxth	r3, r3
 8026df0:	f1bc 0f00 	cmp.w	ip, #0
 8026df4:	f000 817b 	beq.w	80270ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026df8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026dfc:	eb0a 0b02 	add.w	fp, sl, r2
 8026e00:	fa1f fa8c 	uxth.w	sl, ip
 8026e04:	940a      	str	r4, [sp, #40]	; 0x28
 8026e06:	fb0a fe0e 	mul.w	lr, sl, lr
 8026e0a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026e0e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026e12:	eba5 050e 	sub.w	r5, r5, lr
 8026e16:	940b      	str	r4, [sp, #44]	; 0x2c
 8026e18:	fa1f fa8a 	uxth.w	sl, sl
 8026e1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026e1e:	b2ad      	uxth	r5, r5
 8026e20:	eba3 030a 	sub.w	r3, r3, sl
 8026e24:	fb08 f505 	mul.w	r5, r8, r5
 8026e28:	b29b      	uxth	r3, r3
 8026e2a:	fb09 5303 	mla	r3, r9, r3, r5
 8026e2e:	fb0a 3304 	mla	r3, sl, r4, r3
 8026e32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026e34:	fb0e 3304 	mla	r3, lr, r4, r3
 8026e38:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026e3c:	2b00      	cmp	r3, #0
 8026e3e:	f000 80d1 	beq.w	8026fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026e42:	9c08      	ldr	r4, [sp, #32]
 8026e44:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026e48:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026e4c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026e50:	f000 8152 	beq.w	80270f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8026e54:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026e58:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026e5c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026e60:	fb0a fe0e 	mul.w	lr, sl, lr
 8026e64:	fb09 f000 	mul.w	r0, r9, r0
 8026e68:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026e6c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026e70:	f100 0b20 	add.w	fp, r0, #32
 8026e74:	44ce      	add	lr, r9
 8026e76:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026e7a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026e7e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026e82:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026e86:	ea4e 0909 	orr.w	r9, lr, r9
 8026e8a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026e8e:	8868      	ldrh	r0, [r5, #2]
 8026e90:	d019      	beq.n	8026ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026e92:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026e96:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026e9a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026e9e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026ea2:	fb08 f800 	mul.w	r8, r8, r0
 8026ea6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026eaa:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026eae:	f108 0b20 	add.w	fp, r8, #32
 8026eb2:	4486      	add	lr, r0
 8026eb4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026eb8:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026ebc:	0a00      	lsrs	r0, r0, #8
 8026ebe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026ec2:	ea4e 0000 	orr.w	r0, lr, r0
 8026ec6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026eca:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026ece:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026ed2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026ed6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026eda:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026ede:	ea4e 0909 	orr.w	r9, lr, r9
 8026ee2:	ea4a 0000 	orr.w	r0, sl, r0
 8026ee6:	f1bc 0f00 	cmp.w	ip, #0
 8026eea:	f000 8107 	beq.w	80270fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026eee:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026ef2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026ef4:	3a01      	subs	r2, #1
 8026ef6:	2cff      	cmp	r4, #255	; 0xff
 8026ef8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026efc:	f102 0202 	add.w	r2, r2, #2
 8026f00:	eb05 0e02 	add.w	lr, r5, r2
 8026f04:	5aaa      	ldrh	r2, [r5, r2]
 8026f06:	d018      	beq.n	8026f3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8026f08:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026f0c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026f10:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026f14:	fb04 fa02 	mul.w	sl, r4, r2
 8026f18:	fb08 f805 	mul.w	r8, r8, r5
 8026f1c:	f10a 0520 	add.w	r5, sl, #32
 8026f20:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026f24:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026f28:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026f2c:	4442      	add	r2, r8
 8026f2e:	0a2d      	lsrs	r5, r5, #8
 8026f30:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026f34:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026f38:	432a      	orrs	r2, r5
 8026f3a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026f3c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026f40:	2cff      	cmp	r4, #255	; 0xff
 8026f42:	d01a      	beq.n	8026f7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8026f44:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026f48:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026f4c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026f50:	fb04 fa05 	mul.w	sl, r4, r5
 8026f54:	fb08 f80e 	mul.w	r8, r8, lr
 8026f58:	f10a 0e20 	add.w	lr, sl, #32
 8026f5c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026f60:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026f64:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026f68:	4445      	add	r5, r8
 8026f6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f6e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026f72:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026f76:	ea45 050e 	orr.w	r5, r5, lr
 8026f7a:	fb1c fe01 	smulbb	lr, ip, r1
 8026f7e:	f1cc 0810 	rsb	r8, ip, #16
 8026f82:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026f86:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026f8a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026f8e:	eba8 0801 	sub.w	r8, r8, r1
 8026f92:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026f96:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026f9a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026f9e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026fa2:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026fa6:	ea4a 0202 	orr.w	r2, sl, r2
 8026faa:	4341      	muls	r1, r0
 8026fac:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026fb0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026fb4:	fb09 1108 	mla	r1, r9, r8, r1
 8026fb8:	ea4b 0505 	orr.w	r5, fp, r5
 8026fbc:	fb0c 1102 	mla	r1, ip, r2, r1
 8026fc0:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026fc4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026fc8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026fcc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026fd0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026fd4:	ea42 0e0e 	orr.w	lr, r2, lr
 8026fd8:	fa1f f28e 	uxth.w	r2, lr
 8026fdc:	2bff      	cmp	r3, #255	; 0xff
 8026fde:	f040 80a1 	bne.w	8027124 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8026fe2:	803a      	strh	r2, [r7, #0]
 8026fe4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026fe6:	3702      	adds	r7, #2
 8026fe8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026fea:	4413      	add	r3, r2
 8026fec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8026fee:	9325      	str	r3, [sp, #148]	; 0x94
 8026ff0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026ff2:	441a      	add	r2, r3
 8026ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026ff6:	3b01      	subs	r3, #1
 8026ff8:	9226      	str	r2, [sp, #152]	; 0x98
 8026ffa:	930f      	str	r3, [sp, #60]	; 0x3c
 8026ffc:	e6c7      	b.n	8026d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026ffe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027000:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8027002:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8027004:	4433      	add	r3, r6
 8027006:	9325      	str	r3, [sp, #148]	; 0x94
 8027008:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802700a:	441c      	add	r4, r3
 802700c:	9b06      	ldr	r3, [sp, #24]
 802700e:	3b01      	subs	r3, #1
 8027010:	9426      	str	r4, [sp, #152]	; 0x98
 8027012:	9306      	str	r3, [sp, #24]
 8027014:	9b07      	ldr	r3, [sp, #28]
 8027016:	3302      	adds	r3, #2
 8027018:	9307      	str	r3, [sp, #28]
 802701a:	e696      	b.n	8026d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802701c:	d028      	beq.n	8027070 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802701e:	9b06      	ldr	r3, [sp, #24]
 8027020:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027022:	3b01      	subs	r3, #1
 8027024:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8027026:	fb00 5003 	mla	r0, r0, r3, r5
 802702a:	1400      	asrs	r0, r0, #16
 802702c:	f53f aeaa 	bmi.w	8026d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027030:	3901      	subs	r1, #1
 8027032:	4288      	cmp	r0, r1
 8027034:	f6bf aea6 	bge.w	8026d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027038:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802703a:	9826      	ldr	r0, [sp, #152]	; 0x98
 802703c:	fb01 0303 	mla	r3, r1, r3, r0
 8027040:	141b      	asrs	r3, r3, #16
 8027042:	f53f ae9f 	bmi.w	8026d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027046:	3a01      	subs	r2, #1
 8027048:	4293      	cmp	r3, r2
 802704a:	f6bf ae9b 	bge.w	8026d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802704e:	9b06      	ldr	r3, [sp, #24]
 8027050:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027054:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027058:	930f      	str	r3, [sp, #60]	; 0x3c
 802705a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802705c:	2b00      	cmp	r3, #0
 802705e:	f300 80b6 	bgt.w	80271ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8027062:	9b06      	ldr	r3, [sp, #24]
 8027064:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027068:	9b07      	ldr	r3, [sp, #28]
 802706a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802706e:	9307      	str	r3, [sp, #28]
 8027070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027072:	2b00      	cmp	r3, #0
 8027074:	f340 8218 	ble.w	80274a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8027078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802707c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802707e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027082:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027086:	eef0 6a48 	vmov.f32	s13, s16
 802708a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802708e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027092:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027096:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802709a:	eef0 6a68 	vmov.f32	s13, s17
 802709e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80270a2:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80270a6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80270aa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80270ae:	ee37 8a48 	vsub.f32	s16, s14, s16
 80270b2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80270b6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80270ba:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80270be:	ee18 2a10 	vmov	r2, s16
 80270c2:	eeb0 8a47 	vmov.f32	s16, s14
 80270c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80270ca:	ee18 2a90 	vmov	r2, s17
 80270ce:	9327      	str	r3, [sp, #156]	; 0x9c
 80270d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80270d2:	eef0 8a67 	vmov.f32	s17, s15
 80270d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80270da:	9328      	str	r3, [sp, #160]	; 0xa0
 80270dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80270de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80270e0:	3b01      	subs	r3, #1
 80270e2:	930e      	str	r3, [sp, #56]	; 0x38
 80270e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80270e6:	bf08      	it	eq
 80270e8:	4613      	moveq	r3, r2
 80270ea:	9306      	str	r3, [sp, #24]
 80270ec:	e61f      	b.n	8026d2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80270ee:	fb08 f505 	mul.w	r5, r8, r5
 80270f2:	fb09 5303 	mla	r3, r9, r3, r5
 80270f6:	e69f      	b.n	8026e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80270f8:	4681      	mov	r9, r0
 80270fa:	e6c6      	b.n	8026e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80270fc:	f1c1 0210 	rsb	r2, r1, #16
 8027100:	4341      	muls	r1, r0
 8027102:	fb09 1902 	mla	r9, r9, r2, r1
 8027106:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802710a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802710e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027112:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027116:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802711a:	ea42 0909 	orr.w	r9, r2, r9
 802711e:	fa1f f289 	uxth.w	r2, r9
 8027122:	e75b      	b.n	8026fdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8027124:	f8b7 c000 	ldrh.w	ip, [r7]
 8027128:	43db      	mvns	r3, r3
 802712a:	ea4f 202c 	mov.w	r0, ip, asr #8
 802712e:	fa5f fe83 	uxtb.w	lr, r3
 8027132:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027136:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802713a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802713e:	fb00 f00e 	mul.w	r0, r0, lr
 8027142:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027146:	b2db      	uxtb	r3, r3
 8027148:	1c41      	adds	r1, r0, #1
 802714a:	fb05 f50e 	mul.w	r5, r5, lr
 802714e:	fb03 f30e 	mul.w	r3, r3, lr
 8027152:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027156:	1211      	asrs	r1, r2, #8
 8027158:	f021 0107 	bic.w	r1, r1, #7
 802715c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027160:	48d4      	ldr	r0, [pc, #848]	; (80274b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8027162:	b2c9      	uxtb	r1, r1
 8027164:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8027168:	1c69      	adds	r1, r5, #1
 802716a:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802716e:	10d1      	asrs	r1, r2, #3
 8027170:	00d2      	lsls	r2, r2, #3
 8027172:	f021 0103 	bic.w	r1, r1, #3
 8027176:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802717a:	00c9      	lsls	r1, r1, #3
 802717c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027180:	4301      	orrs	r1, r0
 8027182:	1c58      	adds	r0, r3, #1
 8027184:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027188:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802718c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027190:	430a      	orrs	r2, r1
 8027192:	e726      	b.n	8026fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027194:	f115 0e01 	adds.w	lr, r5, #1
 8027198:	f53f af24 	bmi.w	8026fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802719c:	4572      	cmp	r2, lr
 802719e:	f6ff af21 	blt.w	8026fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80271a2:	f110 0e01 	adds.w	lr, r0, #1
 80271a6:	f53f af1d 	bmi.w	8026fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80271aa:	4573      	cmp	r3, lr
 80271ac:	f6ff af1a 	blt.w	8026fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80271b0:	b21b      	sxth	r3, r3
 80271b2:	b212      	sxth	r2, r2
 80271b4:	9301      	str	r3, [sp, #4]
 80271b6:	9200      	str	r2, [sp, #0]
 80271b8:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80271bc:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80271c0:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80271c4:	4639      	mov	r1, r7
 80271c6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80271c8:	f7ff fbf2 	bl	80269b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80271cc:	e70a      	b.n	8026fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80271ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80271d0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80271d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80271d6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80271da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80271dc:	fa1f fc82 	uxth.w	ip, r2
 80271e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80271e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80271e6:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80271ea:	141f      	asrs	r7, r3, #16
 80271ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80271ee:	141b      	asrs	r3, r3, #16
 80271f0:	fb01 3707 	mla	r7, r1, r7, r3
 80271f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80271f6:	eb03 0a07 	add.w	sl, r3, r7
 80271fa:	f813 9007 	ldrb.w	r9, [r3, r7]
 80271fe:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027202:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027206:	b29b      	uxth	r3, r3
 8027208:	2d00      	cmp	r5, #0
 802720a:	f000 80fe 	beq.w	802740a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802720e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027212:	eb0a 0b01 	add.w	fp, sl, r1
 8027216:	fa1f fa85 	uxth.w	sl, r5
 802721a:	940c      	str	r4, [sp, #48]	; 0x30
 802721c:	fb0a fc0c 	mul.w	ip, sl, ip
 8027220:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027224:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027228:	eba0 000c 	sub.w	r0, r0, ip
 802722c:	940d      	str	r4, [sp, #52]	; 0x34
 802722e:	fa1f fa8a 	uxth.w	sl, sl
 8027232:	b280      	uxth	r0, r0
 8027234:	eba3 030a 	sub.w	r3, r3, sl
 8027238:	fb08 f000 	mul.w	r0, r8, r0
 802723c:	b29b      	uxth	r3, r3
 802723e:	fb09 0303 	mla	r3, r9, r3, r0
 8027242:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027244:	fb0a 3300 	mla	r3, sl, r0, r3
 8027248:	fb0c 3304 	mla	r3, ip, r4, r3
 802724c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027250:	2b00      	cmp	r3, #0
 8027252:	f000 80cc 	beq.w	80273ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8027256:	9808      	ldr	r0, [sp, #32]
 8027258:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802725c:	9c08      	ldr	r4, [sp, #32]
 802725e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027262:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027266:	f000 80d5 	beq.w	8027414 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 802726a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802726e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027272:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027276:	fb0a fc0c 	mul.w	ip, sl, ip
 802727a:	fb09 f707 	mul.w	r7, r9, r7
 802727e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027282:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027286:	f107 0b20 	add.w	fp, r7, #32
 802728a:	44cc      	add	ip, r9
 802728c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027290:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027294:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027298:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802729c:	ea4c 0909 	orr.w	r9, ip, r9
 80272a0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80272a4:	8847      	ldrh	r7, [r0, #2]
 80272a6:	d019      	beq.n	80272dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 80272a8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80272ac:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80272b0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80272b4:	fb0a fc0c 	mul.w	ip, sl, ip
 80272b8:	fb08 f807 	mul.w	r8, r8, r7
 80272bc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80272c0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80272c4:	f108 0b20 	add.w	fp, r8, #32
 80272c8:	44bc      	add	ip, r7
 80272ca:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80272ce:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80272d2:	0a3f      	lsrs	r7, r7, #8
 80272d4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80272d8:	ea4c 0707 	orr.w	r7, ip, r7
 80272dc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80272e0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80272e4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80272e8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80272ec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80272f0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80272f4:	ea4c 0909 	orr.w	r9, ip, r9
 80272f8:	ea4a 0707 	orr.w	r7, sl, r7
 80272fc:	2d00      	cmp	r5, #0
 80272fe:	f000 808b 	beq.w	8027418 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8027302:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027306:	3901      	subs	r1, #1
 8027308:	0049      	lsls	r1, r1, #1
 802730a:	3102      	adds	r1, #2
 802730c:	eb00 0c01 	add.w	ip, r0, r1
 8027310:	5a41      	ldrh	r1, [r0, r1]
 8027312:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027314:	28ff      	cmp	r0, #255	; 0xff
 8027316:	d019      	beq.n	802734c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8027318:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802731c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802731e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027322:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027326:	fb04 fa01 	mul.w	sl, r4, r1
 802732a:	fb08 f800 	mul.w	r8, r8, r0
 802732e:	f10a 0020 	add.w	r0, sl, #32
 8027332:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027336:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802733a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802733e:	4441      	add	r1, r8
 8027340:	0a00      	lsrs	r0, r0, #8
 8027342:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027346:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802734a:	4301      	orrs	r1, r0
 802734c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802734e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027352:	2cff      	cmp	r4, #255	; 0xff
 8027354:	d01a      	beq.n	802738c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8027356:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802735a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802735e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027362:	fb04 fa00 	mul.w	sl, r4, r0
 8027366:	fb08 f80c 	mul.w	r8, r8, ip
 802736a:	f10a 0c20 	add.w	ip, sl, #32
 802736e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027372:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027376:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802737a:	4440      	add	r0, r8
 802737c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027380:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027384:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027388:	ea40 000c 	orr.w	r0, r0, ip
 802738c:	fb15 fc02 	smulbb	ip, r5, r2
 8027390:	f1c5 0810 	rsb	r8, r5, #16
 8027394:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027398:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802739c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80273a0:	eba8 0802 	sub.w	r8, r8, r2
 80273a4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80273a8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80273ac:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80273b0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80273b4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80273b8:	ea4a 0101 	orr.w	r1, sl, r1
 80273bc:	437a      	muls	r2, r7
 80273be:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80273c2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80273c6:	fb09 2208 	mla	r2, r9, r8, r2
 80273ca:	ea4b 0000 	orr.w	r0, fp, r0
 80273ce:	fb05 2201 	mla	r2, r5, r1, r2
 80273d2:	fb0c 2200 	mla	r2, ip, r0, r2
 80273d6:	0d57      	lsrs	r7, r2, #21
 80273d8:	0952      	lsrs	r2, r2, #5
 80273da:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80273de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80273e2:	433a      	orrs	r2, r7
 80273e4:	2bff      	cmp	r3, #255	; 0xff
 80273e6:	b292      	uxth	r2, r2
 80273e8:	d127      	bne.n	802743a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 80273ea:	f8ae 2000 	strh.w	r2, [lr]
 80273ee:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80273f0:	f10e 0e02 	add.w	lr, lr, #2
 80273f4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80273f6:	4413      	add	r3, r2
 80273f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80273fa:	9325      	str	r3, [sp, #148]	; 0x94
 80273fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80273fe:	441a      	add	r2, r3
 8027400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027402:	3b01      	subs	r3, #1
 8027404:	9226      	str	r2, [sp, #152]	; 0x98
 8027406:	930f      	str	r3, [sp, #60]	; 0x3c
 8027408:	e627      	b.n	802705a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802740a:	fb08 f000 	mul.w	r0, r8, r0
 802740e:	fb09 0303 	mla	r3, r9, r3, r0
 8027412:	e71b      	b.n	802724c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8027414:	46b9      	mov	r9, r7
 8027416:	e743      	b.n	80272a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8027418:	f1c2 0110 	rsb	r1, r2, #16
 802741c:	437a      	muls	r2, r7
 802741e:	fb09 2901 	mla	r9, r9, r1, r2
 8027422:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027426:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802742a:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802742e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027432:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027436:	4302      	orrs	r2, r0
 8027438:	e7d4      	b.n	80273e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 802743a:	f8be 7000 	ldrh.w	r7, [lr]
 802743e:	43db      	mvns	r3, r3
 8027440:	4c1c      	ldr	r4, [pc, #112]	; (80274b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8027442:	1238      	asrs	r0, r7, #8
 8027444:	fa5f fc83 	uxtb.w	ip, r3
 8027448:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802744c:	10fd      	asrs	r5, r7, #3
 802744e:	00fb      	lsls	r3, r7, #3
 8027450:	fb00 f00c 	mul.w	r0, r0, ip
 8027454:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027458:	b2db      	uxtb	r3, r3
 802745a:	fb05 f10c 	mul.w	r1, r5, ip
 802745e:	1c45      	adds	r5, r0, #1
 8027460:	fb03 f30c 	mul.w	r3, r3, ip
 8027464:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027468:	1215      	asrs	r5, r2, #8
 802746a:	f025 0507 	bic.w	r5, r5, #7
 802746e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027472:	1c4d      	adds	r5, r1, #1
 8027474:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027478:	10d1      	asrs	r1, r2, #3
 802747a:	b2c0      	uxtb	r0, r0
 802747c:	f021 0103 	bic.w	r1, r1, #3
 8027480:	00d2      	lsls	r2, r2, #3
 8027482:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8027486:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802748a:	00c9      	lsls	r1, r1, #3
 802748c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027490:	4308      	orrs	r0, r1
 8027492:	1c59      	adds	r1, r3, #1
 8027494:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027498:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802749c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80274a0:	4318      	orrs	r0, r3
 80274a2:	f8ae 0000 	strh.w	r0, [lr]
 80274a6:	e7a2      	b.n	80273ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80274a8:	b013      	add	sp, #76	; 0x4c
 80274aa:	ecbd 8b08 	vpop	{d8-d11}
 80274ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80274b2:	bf00      	nop
 80274b4:	fffff800 	.word	0xfffff800

080274b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80274b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80274bc:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 80274c0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80274c4:	fb0c 4e03 	mla	lr, ip, r3, r4
 80274c8:	f1bc 0f00 	cmp.w	ip, #0
 80274cc:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80274d0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80274d4:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 80274d8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80274dc:	8808      	ldrh	r0, [r1, #0]
 80274de:	db2f      	blt.n	8027540 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80274e0:	45e2      	cmp	sl, ip
 80274e2:	dd2d      	ble.n	8027540 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80274e4:	2c00      	cmp	r4, #0
 80274e6:	db29      	blt.n	802753c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80274e8:	42a3      	cmp	r3, r4
 80274ea:	dd27      	ble.n	802753c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80274ec:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 80274f0:	1c62      	adds	r2, r4, #1
 80274f2:	d428      	bmi.n	8027546 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80274f4:	4293      	cmp	r3, r2
 80274f6:	dd26      	ble.n	8027546 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80274f8:	b32f      	cbz	r7, 8027546 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80274fa:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 80274fe:	f11c 0c01 	adds.w	ip, ip, #1
 8027502:	d424      	bmi.n	802754e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8027504:	45e2      	cmp	sl, ip
 8027506:	dd22      	ble.n	802754e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8027508:	2e00      	cmp	r6, #0
 802750a:	f000 809d 	beq.w	8027648 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 802750e:	2c00      	cmp	r4, #0
 8027510:	db1b      	blt.n	802754a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8027512:	42a3      	cmp	r3, r4
 8027514:	dd19      	ble.n	802754a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8027516:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 802751a:	3401      	adds	r4, #1
 802751c:	d41a      	bmi.n	8027554 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802751e:	42a3      	cmp	r3, r4
 8027520:	dd18      	ble.n	8027554 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8027522:	b1cf      	cbz	r7, 8027558 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8027524:	3301      	adds	r3, #1
 8027526:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 802752a:	2f0f      	cmp	r7, #15
 802752c:	d915      	bls.n	802755a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 802752e:	4b49      	ldr	r3, [pc, #292]	; (8027654 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8027530:	f240 11db 	movw	r1, #475	; 0x1db
 8027534:	4a48      	ldr	r2, [pc, #288]	; (8027658 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8027536:	4849      	ldr	r0, [pc, #292]	; (802765c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8027538:	f003 f88c 	bl	802a654 <__assert_func>
 802753c:	4681      	mov	r9, r0
 802753e:	e7d7      	b.n	80274f0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8027540:	4686      	mov	lr, r0
 8027542:	4681      	mov	r9, r0
 8027544:	e7db      	b.n	80274fe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8027546:	4686      	mov	lr, r0
 8027548:	e7d9      	b.n	80274fe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802754a:	4684      	mov	ip, r0
 802754c:	e7e5      	b.n	802751a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 802754e:	4603      	mov	r3, r0
 8027550:	4684      	mov	ip, r0
 8027552:	e7ea      	b.n	802752a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8027554:	4603      	mov	r3, r0
 8027556:	e7e8      	b.n	802752a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8027558:	4603      	mov	r3, r0
 802755a:	2e0f      	cmp	r6, #15
 802755c:	d8e7      	bhi.n	802752e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802755e:	fb17 f806 	smulbb	r8, r7, r6
 8027562:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8027566:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 802756a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802756e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027572:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8027576:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802757a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802757e:	ea44 0909 	orr.w	r9, r4, r9
 8027582:	f1c6 0410 	rsb	r4, r6, #16
 8027586:	041a      	lsls	r2, r3, #16
 8027588:	ea4a 0e0e 	orr.w	lr, sl, lr
 802758c:	1be4      	subs	r4, r4, r7
 802758e:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8027592:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027596:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802759a:	fb07 fe0e 	mul.w	lr, r7, lr
 802759e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80275a2:	4313      	orrs	r3, r2
 80275a4:	ea4f 420c 	mov.w	r2, ip, lsl #16
 80275a8:	fb04 e409 	mla	r4, r4, r9, lr
 80275ac:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80275b0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80275b4:	b2af      	uxth	r7, r5
 80275b6:	fb08 4303 	mla	r3, r8, r3, r4
 80275ba:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 80275be:	43ed      	mvns	r5, r5
 80275c0:	4322      	orrs	r2, r4
 80275c2:	b2ed      	uxtb	r5, r5
 80275c4:	fb06 3202 	mla	r2, r6, r2, r3
 80275c8:	10c6      	asrs	r6, r0, #3
 80275ca:	0d53      	lsrs	r3, r2, #21
 80275cc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80275d0:	0952      	lsrs	r2, r2, #5
 80275d2:	fb16 f605 	smulbb	r6, r6, r5
 80275d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80275da:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80275de:	431a      	orrs	r2, r3
 80275e0:	b293      	uxth	r3, r2
 80275e2:	1202      	asrs	r2, r0, #8
 80275e4:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80275e8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80275ec:	00dc      	lsls	r4, r3, #3
 80275ee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80275f2:	fb12 f205 	smulbb	r2, r2, r5
 80275f6:	b2e4      	uxtb	r4, r4
 80275f8:	fb0c 2c07 	mla	ip, ip, r7, r2
 80275fc:	10da      	asrs	r2, r3, #3
 80275fe:	00c3      	lsls	r3, r0, #3
 8027600:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027604:	fa1f fc8c 	uxth.w	ip, ip
 8027608:	b2db      	uxtb	r3, r3
 802760a:	fb02 6207 	mla	r2, r2, r7, r6
 802760e:	fb13 f305 	smulbb	r3, r3, r5
 8027612:	b296      	uxth	r6, r2
 8027614:	fb04 3307 	mla	r3, r4, r7, r3
 8027618:	b29a      	uxth	r2, r3
 802761a:	f10c 0301 	add.w	r3, ip, #1
 802761e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027622:	1c53      	adds	r3, r2, #1
 8027624:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027628:	1c72      	adds	r2, r6, #1
 802762a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802762e:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8027632:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027636:	0952      	lsrs	r2, r2, #5
 8027638:	ea43 030c 	orr.w	r3, r3, ip
 802763c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027640:	4313      	orrs	r3, r2
 8027642:	800b      	strh	r3, [r1, #0]
 8027644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027648:	2f0f      	cmp	r7, #15
 802764a:	f63f af70 	bhi.w	802752e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802764e:	4603      	mov	r3, r0
 8027650:	4684      	mov	ip, r0
 8027652:	e784      	b.n	802755e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8027654:	0803215f 	.word	0x0803215f
 8027658:	08032737 	.word	0x08032737
 802765c:	0803212c 	.word	0x0803212c

08027660 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027664:	ed2d 8b08 	vpush	{d8-d11}
 8027668:	b093      	sub	sp, #76	; 0x4c
 802766a:	461d      	mov	r5, r3
 802766c:	eeb0 aa40 	vmov.f32	s20, s0
 8027670:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027672:	eef0 9a60 	vmov.f32	s19, s1
 8027676:	9210      	str	r2, [sp, #64]	; 0x40
 8027678:	eeb0 9a41 	vmov.f32	s18, s2
 802767c:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8027680:	eeb0 8a62 	vmov.f32	s16, s5
 8027684:	910a      	str	r1, [sp, #40]	; 0x28
 8027686:	eef0 8a43 	vmov.f32	s17, s6
 802768a:	920b      	str	r2, [sp, #44]	; 0x2c
 802768c:	eef0 ba44 	vmov.f32	s23, s8
 8027690:	6859      	ldr	r1, [r3, #4]
 8027692:	eeb0 ba64 	vmov.f32	s22, s9
 8027696:	681b      	ldr	r3, [r3, #0]
 8027698:	eef0 aa45 	vmov.f32	s21, s10
 802769c:	9011      	str	r0, [sp, #68]	; 0x44
 802769e:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 80276a2:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80276a6:	fb01 2707 	mla	r7, r1, r7, r2
 80276aa:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80276ae:	9307      	str	r3, [sp, #28]
 80276b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80276b2:	681b      	ldr	r3, [r3, #0]
 80276b4:	9309      	str	r3, [sp, #36]	; 0x24
 80276b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80276b8:	43db      	mvns	r3, r3
 80276ba:	b2db      	uxtb	r3, r3
 80276bc:	9308      	str	r3, [sp, #32]
 80276be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80276c0:	2b00      	cmp	r3, #0
 80276c2:	dc03      	bgt.n	80276cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80276c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80276c6:	2b00      	cmp	r3, #0
 80276c8:	f340 8205 	ble.w	8027ad6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80276cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80276ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80276d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80276d6:	1e48      	subs	r0, r1, #1
 80276d8:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80276dc:	2d00      	cmp	r5, #0
 80276de:	f340 80da 	ble.w	8027896 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80276e2:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80276e6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80276ea:	d406      	bmi.n	80276fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80276ec:	4586      	cmp	lr, r0
 80276ee:	da04      	bge.n	80276fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80276f0:	2b00      	cmp	r3, #0
 80276f2:	db02      	blt.n	80276fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80276f4:	4563      	cmp	r3, ip
 80276f6:	f2c0 80cf 	blt.w	8027898 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80276fa:	f11e 0e01 	adds.w	lr, lr, #1
 80276fe:	f100 80c1 	bmi.w	8027884 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027702:	4571      	cmp	r1, lr
 8027704:	f2c0 80be 	blt.w	8027884 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027708:	3301      	adds	r3, #1
 802770a:	f100 80bb 	bmi.w	8027884 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802770e:	429a      	cmp	r2, r3
 8027710:	f2c0 80b8 	blt.w	8027884 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027714:	46a9      	mov	r9, r5
 8027716:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802771a:	f1b9 0f00 	cmp.w	r9, #0
 802771e:	f340 80d8 	ble.w	80278d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8027722:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027724:	1421      	asrs	r1, r4, #16
 8027726:	ea4f 4026 	mov.w	r0, r6, asr #16
 802772a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802772e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027732:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027736:	f100 8112 	bmi.w	802795e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802773a:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 802773e:	4551      	cmp	r1, sl
 8027740:	f280 810d 	bge.w	802795e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027744:	2800      	cmp	r0, #0
 8027746:	f2c0 810a 	blt.w	802795e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802774a:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 802774e:	4550      	cmp	r0, sl
 8027750:	f280 8105 	bge.w	802795e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027754:	fa0f f38e 	sxth.w	r3, lr
 8027758:	fb00 1103 	mla	r1, r0, r3, r1
 802775c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802775e:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8027762:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8027766:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802776a:	f1bc 0f00 	cmp.w	ip, #0
 802776e:	d007      	beq.n	8027780 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027770:	005b      	lsls	r3, r3, #1
 8027772:	eb0a 0003 	add.w	r0, sl, r3
 8027776:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802777a:	930c      	str	r3, [sp, #48]	; 0x30
 802777c:	8843      	ldrh	r3, [r0, #2]
 802777e:	930d      	str	r3, [sp, #52]	; 0x34
 8027780:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8027784:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027788:	fb12 f30c 	smulbb	r3, r2, ip
 802778c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027790:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027794:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027798:	10db      	asrs	r3, r3, #3
 802779a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802779e:	ea40 000e 	orr.w	r0, r0, lr
 80277a2:	f1cc 0e10 	rsb	lr, ip, #16
 80277a6:	ea4a 0101 	orr.w	r1, sl, r1
 80277aa:	9f08      	ldr	r7, [sp, #32]
 80277ac:	ebae 0e02 	sub.w	lr, lr, r2
 80277b0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80277b4:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80277b8:	4351      	muls	r1, r2
 80277ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80277bc:	fb0e 1e00 	mla	lr, lr, r0, r1
 80277c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80277c2:	0410      	lsls	r0, r2, #16
 80277c4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80277c8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80277cc:	4310      	orrs	r0, r2
 80277ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80277d0:	0412      	lsls	r2, r2, #16
 80277d2:	fb03 e000 	mla	r0, r3, r0, lr
 80277d6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80277da:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80277de:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80277e2:	ea42 020e 	orr.w	r2, r2, lr
 80277e6:	fb03 0302 	mla	r3, r3, r2, r0
 80277ea:	f8b8 0000 	ldrh.w	r0, [r8]
 80277ee:	0d5a      	lsrs	r2, r3, #21
 80277f0:	095b      	lsrs	r3, r3, #5
 80277f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80277f6:	1201      	asrs	r1, r0, #8
 80277f8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80277fc:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027800:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027804:	00c0      	lsls	r0, r0, #3
 8027806:	4313      	orrs	r3, r2
 8027808:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802780c:	fb11 f107 	smulbb	r1, r1, r7
 8027810:	b2c0      	uxtb	r0, r0
 8027812:	b29b      	uxth	r3, r3
 8027814:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8027818:	fb10 f007 	smulbb	r0, r0, r7
 802781c:	fb1e fe07 	smulbb	lr, lr, r7
 8027820:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027824:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027828:	fb0c 1c02 	mla	ip, ip, r2, r1
 802782c:	10d9      	asrs	r1, r3, #3
 802782e:	00db      	lsls	r3, r3, #3
 8027830:	fa1f fc8c 	uxth.w	ip, ip
 8027834:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027838:	b2db      	uxtb	r3, r3
 802783a:	fb01 e102 	mla	r1, r1, r2, lr
 802783e:	fb03 0302 	mla	r3, r3, r2, r0
 8027842:	b289      	uxth	r1, r1
 8027844:	b29a      	uxth	r2, r3
 8027846:	f10c 0301 	add.w	r3, ip, #1
 802784a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802784e:	1c53      	adds	r3, r2, #1
 8027850:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027854:	1c4a      	adds	r2, r1, #1
 8027856:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802785a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802785e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027862:	0949      	lsrs	r1, r1, #5
 8027864:	ea43 030c 	orr.w	r3, r3, ip
 8027868:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802786c:	430b      	orrs	r3, r1
 802786e:	f8a8 3000 	strh.w	r3, [r8]
 8027872:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027874:	f108 0802 	add.w	r8, r8, #2
 8027878:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 802787c:	441c      	add	r4, r3
 802787e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027880:	441e      	add	r6, r3
 8027882:	e74a      	b.n	802771a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027884:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027886:	3d01      	subs	r5, #1
 8027888:	441c      	add	r4, r3
 802788a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802788c:	441e      	add	r6, r3
 802788e:	9b07      	ldr	r3, [sp, #28]
 8027890:	3302      	adds	r3, #2
 8027892:	9307      	str	r3, [sp, #28]
 8027894:	e722      	b.n	80276dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027896:	d022      	beq.n	80278de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027898:	1e6b      	subs	r3, r5, #1
 802789a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802789c:	fb00 4003 	mla	r0, r0, r3, r4
 80278a0:	1400      	asrs	r0, r0, #16
 80278a2:	f53f af37 	bmi.w	8027714 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80278a6:	3901      	subs	r1, #1
 80278a8:	4288      	cmp	r0, r1
 80278aa:	f6bf af33 	bge.w	8027714 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80278ae:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80278b0:	fb01 6303 	mla	r3, r1, r3, r6
 80278b4:	141b      	asrs	r3, r3, #16
 80278b6:	f53f af2d 	bmi.w	8027714 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80278ba:	3a01      	subs	r2, #1
 80278bc:	4293      	cmp	r3, r2
 80278be:	f6bf af29 	bge.w	8027714 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80278c2:	46a8      	mov	r8, r5
 80278c4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80278c8:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80278cc:	f1b8 0f00 	cmp.w	r8, #0
 80278d0:	dc60      	bgt.n	8027994 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80278d2:	9b07      	ldr	r3, [sp, #28]
 80278d4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80278d8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80278dc:	9307      	str	r3, [sp, #28]
 80278de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80278e0:	2b00      	cmp	r3, #0
 80278e2:	f340 80f8 	ble.w	8027ad6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80278e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80278ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80278ec:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80278f0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80278f4:	eef0 6a48 	vmov.f32	s13, s16
 80278f8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80278fc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027900:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027904:	ee16 4a90 	vmov	r4, s13
 8027908:	eef0 6a68 	vmov.f32	s13, s17
 802790c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027910:	ee16 6a90 	vmov	r6, s13
 8027914:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027918:	ee69 7a27 	vmul.f32	s15, s18, s15
 802791c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027920:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027924:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027928:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802792c:	ee18 2a10 	vmov	r2, s16
 8027930:	eeb0 8a47 	vmov.f32	s16, s14
 8027934:	fb92 f3f3 	sdiv	r3, r2, r3
 8027938:	ee18 2a90 	vmov	r2, s17
 802793c:	9327      	str	r3, [sp, #156]	; 0x9c
 802793e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027940:	eef0 8a67 	vmov.f32	s17, s15
 8027944:	fb92 f3f3 	sdiv	r3, r2, r3
 8027948:	9328      	str	r3, [sp, #160]	; 0xa0
 802794a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802794c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802794e:	3b01      	subs	r3, #1
 8027950:	930a      	str	r3, [sp, #40]	; 0x28
 8027952:	bf08      	it	eq
 8027954:	4615      	moveq	r5, r2
 8027956:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027958:	bf18      	it	ne
 802795a:	461d      	movne	r5, r3
 802795c:	e6af      	b.n	80276be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802795e:	f111 0a01 	adds.w	sl, r1, #1
 8027962:	d486      	bmi.n	8027872 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027964:	45d6      	cmp	lr, sl
 8027966:	db84      	blt.n	8027872 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027968:	f110 0a01 	adds.w	sl, r0, #1
 802796c:	d481      	bmi.n	8027872 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802796e:	4553      	cmp	r3, sl
 8027970:	f6ff af7f 	blt.w	8027872 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027974:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8027976:	b21b      	sxth	r3, r3
 8027978:	9101      	str	r1, [sp, #4]
 802797a:	4641      	mov	r1, r8
 802797c:	9300      	str	r3, [sp, #0]
 802797e:	fa0f f38e 	sxth.w	r3, lr
 8027982:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8027986:	e9cd c704 	strd	ip, r7, [sp, #16]
 802798a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802798c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802798e:	f7ff fd93 	bl	80274b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8027992:	e76e      	b.n	8027872 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027994:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027996:	1430      	asrs	r0, r6, #16
 8027998:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802799a:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802799e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80279a2:	1423      	asrs	r3, r4, #16
 80279a4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80279a8:	fb01 3000 	mla	r0, r1, r0, r3
 80279ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80279ae:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80279b2:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80279b6:	8858      	ldrh	r0, [r3, #2]
 80279b8:	f1be 0f00 	cmp.w	lr, #0
 80279bc:	d00b      	beq.n	80279d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 80279be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80279c2:	3901      	subs	r1, #1
 80279c4:	0049      	lsls	r1, r1, #1
 80279c6:	3102      	adds	r1, #2
 80279c8:	eb03 0b01 	add.w	fp, r3, r1
 80279cc:	5a5b      	ldrh	r3, [r3, r1]
 80279ce:	930e      	str	r3, [sp, #56]	; 0x38
 80279d0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80279d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80279d6:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80279da:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80279de:	fb12 f30e 	smulbb	r3, r2, lr
 80279e2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80279e6:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80279ea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80279ee:	10db      	asrs	r3, r3, #3
 80279f0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80279f4:	ea41 010c 	orr.w	r1, r1, ip
 80279f8:	f1ce 0c10 	rsb	ip, lr, #16
 80279fc:	ea4b 0000 	orr.w	r0, fp, r0
 8027a00:	9f08      	ldr	r7, [sp, #32]
 8027a02:	ebac 0c02 	sub.w	ip, ip, r2
 8027a06:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027a0a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8027a0e:	4350      	muls	r0, r2
 8027a10:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027a14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027a16:	fb0c 0c01 	mla	ip, ip, r1, r0
 8027a1a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027a1c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027a20:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8027a24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027a26:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027a2a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027a2e:	0412      	lsls	r2, r2, #16
 8027a30:	ea4b 0101 	orr.w	r1, fp, r1
 8027a34:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027a38:	fb03 c101 	mla	r1, r3, r1, ip
 8027a3c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027a40:	4302      	orrs	r2, r0
 8027a42:	fb03 1202 	mla	r2, r3, r2, r1
 8027a46:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8027a4a:	0952      	lsrs	r2, r2, #5
 8027a4c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8027a50:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8027a54:	f8b9 2000 	ldrh.w	r2, [r9]
 8027a58:	ea4b 0303 	orr.w	r3, fp, r3
 8027a5c:	1211      	asrs	r1, r2, #8
 8027a5e:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8027a62:	b29b      	uxth	r3, r3
 8027a64:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027a68:	00d2      	lsls	r2, r2, #3
 8027a6a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8027a6e:	fb11 f107 	smulbb	r1, r1, r7
 8027a72:	1218      	asrs	r0, r3, #8
 8027a74:	fb1c fc07 	smulbb	ip, ip, r7
 8027a78:	b2d2      	uxtb	r2, r2
 8027a7a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027a7e:	fb12 f207 	smulbb	r2, r2, r7
 8027a82:	fb00 100a 	mla	r0, r0, sl, r1
 8027a86:	10d9      	asrs	r1, r3, #3
 8027a88:	00db      	lsls	r3, r3, #3
 8027a8a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027a8e:	b280      	uxth	r0, r0
 8027a90:	b2db      	uxtb	r3, r3
 8027a92:	fb01 c10a 	mla	r1, r1, sl, ip
 8027a96:	fb03 230a 	mla	r3, r3, sl, r2
 8027a9a:	1c42      	adds	r2, r0, #1
 8027a9c:	b289      	uxth	r1, r1
 8027a9e:	b29b      	uxth	r3, r3
 8027aa0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027aa4:	f101 0c01 	add.w	ip, r1, #1
 8027aa8:	1c5a      	adds	r2, r3, #1
 8027aaa:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027aae:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027ab2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027ab6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027ab8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027abc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027ac0:	441c      	add	r4, r3
 8027ac2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027ac6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027ac8:	4310      	orrs	r0, r2
 8027aca:	441e      	add	r6, r3
 8027acc:	ea40 000c 	orr.w	r0, r0, ip
 8027ad0:	f829 0b02 	strh.w	r0, [r9], #2
 8027ad4:	e6fa      	b.n	80278cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8027ad6:	b013      	add	sp, #76	; 0x4c
 8027ad8:	ecbd 8b08 	vpop	{d8-d11}
 8027adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027ae0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8027ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027ae4:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8027ae8:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8027aec:	fb06 5c03 	mla	ip, r6, r3, r5
 8027af0:	2e00      	cmp	r6, #0
 8027af2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8027af6:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8027afa:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027afe:	8808      	ldrh	r0, [r1, #0]
 8027b00:	db2e      	blt.n	8027b60 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8027b02:	45b0      	cmp	r8, r6
 8027b04:	dd2c      	ble.n	8027b60 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8027b06:	2d00      	cmp	r5, #0
 8027b08:	db28      	blt.n	8027b5c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027b0a:	42ab      	cmp	r3, r5
 8027b0c:	dd26      	ble.n	8027b5c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027b0e:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8027b12:	1c6a      	adds	r2, r5, #1
 8027b14:	d427      	bmi.n	8027b66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027b16:	4293      	cmp	r3, r2
 8027b18:	dd25      	ble.n	8027b66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027b1a:	b324      	cbz	r4, 8027b66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027b1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027b20:	3601      	adds	r6, #1
 8027b22:	d424      	bmi.n	8027b6e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8027b24:	45b0      	cmp	r8, r6
 8027b26:	dd22      	ble.n	8027b6e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8027b28:	b31f      	cbz	r7, 8027b72 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8027b2a:	2d00      	cmp	r5, #0
 8027b2c:	db1d      	blt.n	8027b6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027b2e:	42ab      	cmp	r3, r5
 8027b30:	dd1b      	ble.n	8027b6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027b32:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8027b36:	3501      	adds	r5, #1
 8027b38:	d405      	bmi.n	8027b46 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027b3a:	42ab      	cmp	r3, r5
 8027b3c:	dd03      	ble.n	8027b46 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027b3e:	b124      	cbz	r4, 8027b4a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8027b40:	3301      	adds	r3, #1
 8027b42:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8027b46:	2c0f      	cmp	r4, #15
 8027b48:	d801      	bhi.n	8027b4e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8027b4a:	2f0f      	cmp	r7, #15
 8027b4c:	d914      	bls.n	8027b78 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8027b4e:	4b27      	ldr	r3, [pc, #156]	; (8027bec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8027b50:	f240 11db 	movw	r1, #475	; 0x1db
 8027b54:	4a26      	ldr	r2, [pc, #152]	; (8027bf0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8027b56:	4827      	ldr	r0, [pc, #156]	; (8027bf4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8027b58:	f002 fd7c 	bl	802a654 <__assert_func>
 8027b5c:	4684      	mov	ip, r0
 8027b5e:	e7d8      	b.n	8027b12 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8027b60:	4602      	mov	r2, r0
 8027b62:	4684      	mov	ip, r0
 8027b64:	e7dc      	b.n	8027b20 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8027b66:	4602      	mov	r2, r0
 8027b68:	e7da      	b.n	8027b20 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8027b6a:	4606      	mov	r6, r0
 8027b6c:	e7e3      	b.n	8027b36 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8027b6e:	4606      	mov	r6, r0
 8027b70:	e7e9      	b.n	8027b46 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027b72:	2c0f      	cmp	r4, #15
 8027b74:	d8eb      	bhi.n	8027b4e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8027b76:	4606      	mov	r6, r0
 8027b78:	fb14 f307 	smulbb	r3, r4, r7
 8027b7c:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8027b80:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8027b84:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027b88:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8027b8c:	10db      	asrs	r3, r3, #3
 8027b8e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027b92:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027b96:	ea45 0c0c 	orr.w	ip, r5, ip
 8027b9a:	f1c7 0510 	rsb	r5, r7, #16
 8027b9e:	ea4e 0202 	orr.w	r2, lr, r2
 8027ba2:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8027ba6:	1b2d      	subs	r5, r5, r4
 8027ba8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8027bac:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8027bb0:	4354      	muls	r4, r2
 8027bb2:	fb05 450c 	mla	r5, r5, ip, r4
 8027bb6:	0404      	lsls	r4, r0, #16
 8027bb8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027bbc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027bc0:	4320      	orrs	r0, r4
 8027bc2:	fb03 5400 	mla	r4, r3, r0, r5
 8027bc6:	0430      	lsls	r0, r6, #16
 8027bc8:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8027bcc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027bd0:	4330      	orrs	r0, r6
 8027bd2:	fb07 4000 	mla	r0, r7, r0, r4
 8027bd6:	0d43      	lsrs	r3, r0, #21
 8027bd8:	0940      	lsrs	r0, r0, #5
 8027bda:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027bde:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027be2:	4318      	orrs	r0, r3
 8027be4:	8008      	strh	r0, [r1, #0]
 8027be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027bea:	bf00      	nop
 8027bec:	0803215f 	.word	0x0803215f
 8027bf0:	08032737 	.word	0x08032737
 8027bf4:	0803212c 	.word	0x0803212c

08027bf8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027bfc:	ed2d 8b08 	vpush	{d8-d11}
 8027c00:	b08f      	sub	sp, #60	; 0x3c
 8027c02:	461d      	mov	r5, r3
 8027c04:	eeb0 aa40 	vmov.f32	s20, s0
 8027c08:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027c0a:	eef0 9a60 	vmov.f32	s19, s1
 8027c0e:	9107      	str	r1, [sp, #28]
 8027c10:	eeb0 9a41 	vmov.f32	s18, s2
 8027c14:	6859      	ldr	r1, [r3, #4]
 8027c16:	eeb0 8a62 	vmov.f32	s16, s5
 8027c1a:	920c      	str	r2, [sp, #48]	; 0x30
 8027c1c:	eef0 8a43 	vmov.f32	s17, s6
 8027c20:	681b      	ldr	r3, [r3, #0]
 8027c22:	eef0 ba44 	vmov.f32	s23, s8
 8027c26:	eeb0 ba64 	vmov.f32	s22, s9
 8027c2a:	900d      	str	r0, [sp, #52]	; 0x34
 8027c2c:	eef0 aa45 	vmov.f32	s21, s10
 8027c30:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8027c34:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8027c38:	fb01 2707 	mla	r7, r1, r7, r2
 8027c3c:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8027c40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027c42:	f8d3 8000 	ldr.w	r8, [r3]
 8027c46:	9b07      	ldr	r3, [sp, #28]
 8027c48:	2b00      	cmp	r3, #0
 8027c4a:	dc03      	bgt.n	8027c54 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8027c4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027c4e:	2b00      	cmp	r3, #0
 8027c50:	f340 8182 	ble.w	8027f58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8027c54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027c56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027c5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027c5e:	1e48      	subs	r0, r1, #1
 8027c60:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8027c64:	2d00      	cmp	r5, #0
 8027c66:	f340 809b 	ble.w	8027da0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8027c6a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027c6e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027c72:	d406      	bmi.n	8027c82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027c74:	4586      	cmp	lr, r0
 8027c76:	da04      	bge.n	8027c82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027c78:	2b00      	cmp	r3, #0
 8027c7a:	db02      	blt.n	8027c82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027c7c:	4563      	cmp	r3, ip
 8027c7e:	f2c0 8090 	blt.w	8027da2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8027c82:	f11e 0e01 	adds.w	lr, lr, #1
 8027c86:	f100 8084 	bmi.w	8027d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027c8a:	4571      	cmp	r1, lr
 8027c8c:	f2c0 8081 	blt.w	8027d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027c90:	3301      	adds	r3, #1
 8027c92:	d47e      	bmi.n	8027d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027c94:	429a      	cmp	r2, r3
 8027c96:	db7c      	blt.n	8027d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027c98:	46aa      	mov	sl, r5
 8027c9a:	46b9      	mov	r9, r7
 8027c9c:	f1ba 0f00 	cmp.w	sl, #0
 8027ca0:	f340 8099 	ble.w	8027dd6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8027ca4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027ca6:	1421      	asrs	r1, r4, #16
 8027ca8:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027cac:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027cb0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027cb4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027cb8:	f100 80d1 	bmi.w	8027e5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027cbc:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
 8027cc0:	4559      	cmp	r1, fp
 8027cc2:	f280 80cc 	bge.w	8027e5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027cc6:	2800      	cmp	r0, #0
 8027cc8:	f2c0 80c9 	blt.w	8027e5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027ccc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8027cd0:	4558      	cmp	r0, fp
 8027cd2:	f280 80c4 	bge.w	8027e5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027cd6:	fa0f fe8e 	sxth.w	lr, lr
 8027cda:	fb00 110e 	mla	r1, r0, lr, r1
 8027cde:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027ce2:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8027ce6:	8841      	ldrh	r1, [r0, #2]
 8027ce8:	f1bc 0f00 	cmp.w	ip, #0
 8027cec:	d00b      	beq.n	8027d06 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8027cee:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8027cf2:	3b01      	subs	r3, #1
 8027cf4:	005b      	lsls	r3, r3, #1
 8027cf6:	3302      	adds	r3, #2
 8027cf8:	eb00 0e03 	add.w	lr, r0, r3
 8027cfc:	5ac3      	ldrh	r3, [r0, r3]
 8027cfe:	9308      	str	r3, [sp, #32]
 8027d00:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8027d04:	9309      	str	r3, [sp, #36]	; 0x24
 8027d06:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8027d0a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027d0e:	fb12 f30c 	smulbb	r3, r2, ip
 8027d12:	f1cc 0e10 	rsb	lr, ip, #16
 8027d16:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027d1a:	10db      	asrs	r3, r3, #3
 8027d1c:	ebae 0e02 	sub.w	lr, lr, r2
 8027d20:	ea40 000b 	orr.w	r0, r0, fp
 8027d24:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027d28:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027d2c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027d30:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027d34:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027d38:	ea4b 0101 	orr.w	r1, fp, r1
 8027d3c:	4351      	muls	r1, r2
 8027d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027d40:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027d44:	0410      	lsls	r0, r2, #16
 8027d46:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027d4a:	9908      	ldr	r1, [sp, #32]
 8027d4c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027d50:	4310      	orrs	r0, r2
 8027d52:	9a08      	ldr	r2, [sp, #32]
 8027d54:	0412      	lsls	r2, r2, #16
 8027d56:	fb03 e000 	mla	r0, r3, r0, lr
 8027d5a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027d5e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027d62:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027d66:	ea42 020e 	orr.w	r2, r2, lr
 8027d6a:	fb03 0302 	mla	r3, r3, r2, r0
 8027d6e:	0d5a      	lsrs	r2, r3, #21
 8027d70:	095b      	lsrs	r3, r3, #5
 8027d72:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027d76:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027d7a:	4313      	orrs	r3, r2
 8027d7c:	f8a9 3000 	strh.w	r3, [r9]
 8027d80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027d82:	f109 0902 	add.w	r9, r9, #2
 8027d86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8027d8a:	441c      	add	r4, r3
 8027d8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d8e:	441e      	add	r6, r3
 8027d90:	e784      	b.n	8027c9c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8027d92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027d94:	3d01      	subs	r5, #1
 8027d96:	3702      	adds	r7, #2
 8027d98:	441c      	add	r4, r3
 8027d9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d9c:	441e      	add	r6, r3
 8027d9e:	e761      	b.n	8027c64 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027da0:	d01d      	beq.n	8027dde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8027da2:	1e6b      	subs	r3, r5, #1
 8027da4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8027da6:	fb00 4003 	mla	r0, r0, r3, r4
 8027daa:	1400      	asrs	r0, r0, #16
 8027dac:	f53f af74 	bmi.w	8027c98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027db0:	3901      	subs	r1, #1
 8027db2:	4288      	cmp	r0, r1
 8027db4:	f6bf af70 	bge.w	8027c98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027db8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027dba:	fb01 6303 	mla	r3, r1, r3, r6
 8027dbe:	141b      	asrs	r3, r3, #16
 8027dc0:	f53f af6a 	bmi.w	8027c98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027dc4:	3a01      	subs	r2, #1
 8027dc6:	4293      	cmp	r3, r2
 8027dc8:	f6bf af66 	bge.w	8027c98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027dcc:	46a9      	mov	r9, r5
 8027dce:	46ba      	mov	sl, r7
 8027dd0:	f1b9 0f00 	cmp.w	r9, #0
 8027dd4:	dc5b      	bgt.n	8027e8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8027dd6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027dda:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8027dde:	9b07      	ldr	r3, [sp, #28]
 8027de0:	2b00      	cmp	r3, #0
 8027de2:	f340 80b9 	ble.w	8027f58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8027de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027dea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027dec:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027df0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027df4:	eef0 6a48 	vmov.f32	s13, s16
 8027df8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027dfc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027e00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027e04:	ee16 4a90 	vmov	r4, s13
 8027e08:	eef0 6a68 	vmov.f32	s13, s17
 8027e0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027e10:	ee16 6a90 	vmov	r6, s13
 8027e14:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027e18:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027e1c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027e20:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027e24:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027e28:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027e2c:	ee18 2a10 	vmov	r2, s16
 8027e30:	eeb0 8a47 	vmov.f32	s16, s14
 8027e34:	fb92 f3f3 	sdiv	r3, r2, r3
 8027e38:	ee18 2a90 	vmov	r2, s17
 8027e3c:	9323      	str	r3, [sp, #140]	; 0x8c
 8027e3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027e40:	eef0 8a67 	vmov.f32	s17, s15
 8027e44:	fb92 f3f3 	sdiv	r3, r2, r3
 8027e48:	9324      	str	r3, [sp, #144]	; 0x90
 8027e4a:	9b07      	ldr	r3, [sp, #28]
 8027e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027e4e:	3b01      	subs	r3, #1
 8027e50:	9307      	str	r3, [sp, #28]
 8027e52:	bf08      	it	eq
 8027e54:	4615      	moveq	r5, r2
 8027e56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027e58:	bf18      	it	ne
 8027e5a:	461d      	movne	r5, r3
 8027e5c:	e6f3      	b.n	8027c46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8027e5e:	f111 0b01 	adds.w	fp, r1, #1
 8027e62:	d48d      	bmi.n	8027d80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027e64:	45de      	cmp	lr, fp
 8027e66:	db8b      	blt.n	8027d80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027e68:	f110 0b01 	adds.w	fp, r0, #1
 8027e6c:	d488      	bmi.n	8027d80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027e6e:	455b      	cmp	r3, fp
 8027e70:	db86      	blt.n	8027d80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027e72:	b21b      	sxth	r3, r3
 8027e74:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8027e78:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8027e7c:	9300      	str	r3, [sp, #0]
 8027e7e:	4642      	mov	r2, r8
 8027e80:	fa0f f38e 	sxth.w	r3, lr
 8027e84:	4649      	mov	r1, r9
 8027e86:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027e88:	f7ff fe2a 	bl	8027ae0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8027e8c:	e778      	b.n	8027d80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027e8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027e90:	1420      	asrs	r0, r4, #16
 8027e92:	1431      	asrs	r1, r6, #16
 8027e94:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027e98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8027e9c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027ea0:	fb03 0101 	mla	r1, r3, r1, r0
 8027ea4:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027ea8:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8027eac:	8841      	ldrh	r1, [r0, #2]
 8027eae:	f1be 0f00 	cmp.w	lr, #0
 8027eb2:	d00b      	beq.n	8027ecc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8027eb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8027eb8:	3b01      	subs	r3, #1
 8027eba:	005b      	lsls	r3, r3, #1
 8027ebc:	3302      	adds	r3, #2
 8027ebe:	eb00 0b03 	add.w	fp, r0, r3
 8027ec2:	5ac3      	ldrh	r3, [r0, r3]
 8027ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8027ec6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8027ecc:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8027ed0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027ed4:	fb12 f30e 	smulbb	r3, r2, lr
 8027ed8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027edc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027ee0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027ee4:	10db      	asrs	r3, r3, #3
 8027ee6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027eea:	ea40 000c 	orr.w	r0, r0, ip
 8027eee:	f1ce 0c10 	rsb	ip, lr, #16
 8027ef2:	ea4b 0101 	orr.w	r1, fp, r1
 8027ef6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8027efa:	ebac 0c02 	sub.w	ip, ip, r2
 8027efe:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027f02:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027f06:	4351      	muls	r1, r2
 8027f08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027f0a:	fb0c 1c00 	mla	ip, ip, r0, r1
 8027f0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027f10:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027f14:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8027f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027f1a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027f1e:	0412      	lsls	r2, r2, #16
 8027f20:	ea4b 0000 	orr.w	r0, fp, r0
 8027f24:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8027f28:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027f2c:	fb03 c000 	mla	r0, r3, r0, ip
 8027f30:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027f34:	ea42 0b0b 	orr.w	fp, r2, fp
 8027f38:	fb03 000b 	mla	r0, r3, fp, r0
 8027f3c:	0d43      	lsrs	r3, r0, #21
 8027f3e:	0940      	lsrs	r0, r0, #5
 8027f40:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027f44:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027f48:	4318      	orrs	r0, r3
 8027f4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027f4c:	441c      	add	r4, r3
 8027f4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027f50:	f82a 0b02 	strh.w	r0, [sl], #2
 8027f54:	441e      	add	r6, r3
 8027f56:	e73b      	b.n	8027dd0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8027f58:	b00f      	add	sp, #60	; 0x3c
 8027f5a:	ecbd 8b08 	vpop	{d8-d11}
 8027f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027f64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8027f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f68:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8027f6c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8027f70:	fb04 5603 	mla	r6, r4, r3, r5
 8027f74:	2c00      	cmp	r4, #0
 8027f76:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8027f7a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8027f7e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8027f82:	db36      	blt.n	8027ff2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8027f84:	45a6      	cmp	lr, r4
 8027f86:	dd34      	ble.n	8027ff2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8027f88:	2d00      	cmp	r5, #0
 8027f8a:	db30      	blt.n	8027fee <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8027f8c:	42ab      	cmp	r3, r5
 8027f8e:	dd2e      	ble.n	8027fee <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8027f90:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8027f94:	1c6e      	adds	r6, r5, #1
 8027f96:	d42f      	bmi.n	8027ff8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8027f98:	42b3      	cmp	r3, r6
 8027f9a:	dd2d      	ble.n	8027ff8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8027f9c:	b370      	cbz	r0, 8027ffc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8027f9e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8027fa2:	3401      	adds	r4, #1
 8027fa4:	d42e      	bmi.n	8028004 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8027fa6:	45a6      	cmp	lr, r4
 8027fa8:	dd2c      	ble.n	8028004 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8027faa:	b377      	cbz	r7, 802800a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8027fac:	2d00      	cmp	r5, #0
 8027fae:	db27      	blt.n	8028000 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8027fb0:	42ab      	cmp	r3, r5
 8027fb2:	dd25      	ble.n	8028000 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8027fb4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027fb8:	3501      	adds	r5, #1
 8027fba:	d429      	bmi.n	8028010 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8027fbc:	42ab      	cmp	r3, r5
 8027fbe:	dd27      	ble.n	8028010 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8027fc0:	b340      	cbz	r0, 8028014 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8027fc2:	3301      	adds	r3, #1
 8027fc4:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8027fc8:	280f      	cmp	r0, #15
 8027fca:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8027fce:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027fd2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027fd6:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8027fda:	d801      	bhi.n	8027fe0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8027fdc:	2f0f      	cmp	r7, #15
 8027fde:	d91b      	bls.n	8028018 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8027fe0:	4b8d      	ldr	r3, [pc, #564]	; (8028218 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8027fe2:	f240 11f9 	movw	r1, #505	; 0x1f9
 8027fe6:	4a8d      	ldr	r2, [pc, #564]	; (802821c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8027fe8:	488d      	ldr	r0, [pc, #564]	; (8028220 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8027fea:	f002 fb33 	bl	802a654 <__assert_func>
 8027fee:	2200      	movs	r2, #0
 8027ff0:	e7d0      	b.n	8027f94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8027ff2:	2600      	movs	r6, #0
 8027ff4:	4632      	mov	r2, r6
 8027ff6:	e7d4      	b.n	8027fa2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8027ff8:	2600      	movs	r6, #0
 8027ffa:	e7d2      	b.n	8027fa2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8027ffc:	4606      	mov	r6, r0
 8027ffe:	e7d0      	b.n	8027fa2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028000:	2400      	movs	r4, #0
 8028002:	e7d9      	b.n	8027fb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8028004:	2300      	movs	r3, #0
 8028006:	461c      	mov	r4, r3
 8028008:	e7de      	b.n	8027fc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802800a:	463b      	mov	r3, r7
 802800c:	463c      	mov	r4, r7
 802800e:	e7db      	b.n	8027fc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028010:	2300      	movs	r3, #0
 8028012:	e7d9      	b.n	8027fc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028014:	4603      	mov	r3, r0
 8028016:	e7d7      	b.n	8027fc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028018:	b280      	uxth	r0, r0
 802801a:	b2bf      	uxth	r7, r7
 802801c:	fb07 fe00 	mul.w	lr, r7, r0
 8028020:	0100      	lsls	r0, r0, #4
 8028022:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8028026:	eba0 0c0e 	sub.w	ip, r0, lr
 802802a:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802802e:	b2bf      	uxth	r7, r7
 8028030:	fa1f fc8c 	uxth.w	ip, ip
 8028034:	1bed      	subs	r5, r5, r7
 8028036:	fb0a f00c 	mul.w	r0, sl, ip
 802803a:	b2ad      	uxth	r5, r5
 802803c:	fb0b 0005 	mla	r0, fp, r5, r0
 8028040:	fb07 0009 	mla	r0, r7, r9, r0
 8028044:	fb0e 0008 	mla	r0, lr, r8, r0
 8028048:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802804c:	9001      	str	r0, [sp, #4]
 802804e:	2800      	cmp	r0, #0
 8028050:	f000 80de 	beq.w	8028210 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8028054:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8028058:	d018      	beq.n	802808c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 802805a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802805e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028062:	fb0b f000 	mul.w	r0, fp, r0
 8028066:	fb0b fb02 	mul.w	fp, fp, r2
 802806a:	0a02      	lsrs	r2, r0, #8
 802806c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028070:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028074:	4402      	add	r2, r0
 8028076:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802807a:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802807e:	0a12      	lsrs	r2, r2, #8
 8028080:	0a00      	lsrs	r0, r0, #8
 8028082:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028086:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802808a:	4302      	orrs	r2, r0
 802808c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8028090:	d01a      	beq.n	80280c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 8028092:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8028096:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802809a:	fb0a f000 	mul.w	r0, sl, r0
 802809e:	fb0a fa06 	mul.w	sl, sl, r6
 80280a2:	0a06      	lsrs	r6, r0, #8
 80280a4:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80280a8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80280ac:	4406      	add	r6, r0
 80280ae:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80280b2:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80280b6:	0a36      	lsrs	r6, r6, #8
 80280b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80280bc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80280c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80280c4:	ea46 060a 	orr.w	r6, r6, sl
 80280c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80280cc:	d01b      	beq.n	8028106 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 80280ce:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80280d2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80280d6:	fb09 fa0a 	mul.w	sl, r9, sl
 80280da:	fb09 f004 	mul.w	r0, r9, r4
 80280de:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80280e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80280e6:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80280ea:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80280ee:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80280f2:	4454      	add	r4, sl
 80280f4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80280f8:	0a24      	lsrs	r4, r4, #8
 80280fa:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80280fe:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028102:	ea44 0409 	orr.w	r4, r4, r9
 8028106:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802810a:	d01b      	beq.n	8028144 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 802810c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8028110:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028114:	fb08 f909 	mul.w	r9, r8, r9
 8028118:	fb08 f003 	mul.w	r0, r8, r3
 802811c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8028120:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8028124:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8028128:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802812c:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8028130:	444b      	add	r3, r9
 8028132:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028136:	0a1b      	lsrs	r3, r3, #8
 8028138:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802813c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028140:	ea43 0308 	orr.w	r3, r3, r8
 8028144:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8028148:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802814c:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8028150:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028154:	fb0c f808 	mul.w	r8, ip, r8
 8028158:	8808      	ldrh	r0, [r1, #0]
 802815a:	fb0c f606 	mul.w	r6, ip, r6
 802815e:	fb05 8909 	mla	r9, r5, r9, r8
 8028162:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8028166:	fb05 6502 	mla	r5, r5, r2, r6
 802816a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802816e:	fb07 9908 	mla	r9, r7, r8, r9
 8028172:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8028176:	fb07 5704 	mla	r7, r7, r4, r5
 802817a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802817e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028182:	b2b6      	uxth	r6, r6
 8028184:	fb0e 9808 	mla	r8, lr, r8, r9
 8028188:	9a01      	ldr	r2, [sp, #4]
 802818a:	fb0e 7e03 	mla	lr, lr, r3, r7
 802818e:	1205      	asrs	r5, r0, #8
 8028190:	4372      	muls	r2, r6
 8028192:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028196:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802819a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802819e:	1c53      	adds	r3, r2, #1
 80281a0:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80281a4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80281a8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80281ac:	ea48 0e0e 	orr.w	lr, r8, lr
 80281b0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80281b4:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80281b8:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80281bc:	b2db      	uxtb	r3, r3
 80281be:	fb12 f206 	smulbb	r2, r2, r6
 80281c2:	fa5f fe8e 	uxtb.w	lr, lr
 80281c6:	fb14 f406 	smulbb	r4, r4, r6
 80281ca:	fb05 2503 	mla	r5, r5, r3, r2
 80281ce:	10c2      	asrs	r2, r0, #3
 80281d0:	fb1e fe06 	smulbb	lr, lr, r6
 80281d4:	00c0      	lsls	r0, r0, #3
 80281d6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80281da:	b2ad      	uxth	r5, r5
 80281dc:	b2c0      	uxtb	r0, r0
 80281de:	fb02 4203 	mla	r2, r2, r3, r4
 80281e2:	fb00 e303 	mla	r3, r0, r3, lr
 80281e6:	b294      	uxth	r4, r2
 80281e8:	b298      	uxth	r0, r3
 80281ea:	1c6b      	adds	r3, r5, #1
 80281ec:	1c62      	adds	r2, r4, #1
 80281ee:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80281f2:	1c43      	adds	r3, r0, #1
 80281f4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80281f8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80281fc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8028200:	0952      	lsrs	r2, r2, #5
 8028202:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028206:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802820a:	432b      	orrs	r3, r5
 802820c:	4313      	orrs	r3, r2
 802820e:	800b      	strh	r3, [r1, #0]
 8028210:	b003      	add	sp, #12
 8028212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028216:	bf00      	nop
 8028218:	0803215f 	.word	0x0803215f
 802821c:	0803268e 	.word	0x0803268e
 8028220:	0803212c 	.word	0x0803212c

08028224 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028228:	ed2d 8b08 	vpush	{d8-d11}
 802822c:	b09d      	sub	sp, #116	; 0x74
 802822e:	eeb0 aa40 	vmov.f32	s20, s0
 8028232:	eef0 9a60 	vmov.f32	s19, s1
 8028236:	9219      	str	r2, [sp, #100]	; 0x64
 8028238:	eeb0 9a41 	vmov.f32	s18, s2
 802823c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802823e:	eeb0 8a62 	vmov.f32	s16, s5
 8028242:	9307      	str	r3, [sp, #28]
 8028244:	eef0 8a43 	vmov.f32	s17, s6
 8028248:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 802824c:	eef0 ba44 	vmov.f32	s23, s8
 8028250:	901b      	str	r0, [sp, #108]	; 0x6c
 8028252:	eeb0 ba64 	vmov.f32	s22, s9
 8028256:	931a      	str	r3, [sp, #104]	; 0x68
 8028258:	eef0 aa45 	vmov.f32	s21, s10
 802825c:	6850      	ldr	r0, [r2, #4]
 802825e:	9117      	str	r1, [sp, #92]	; 0x5c
 8028260:	6812      	ldr	r2, [r2, #0]
 8028262:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8028266:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 802826a:	fb00 1303 	mla	r3, r0, r3, r1
 802826e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028272:	930a      	str	r3, [sp, #40]	; 0x28
 8028274:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8028276:	681b      	ldr	r3, [r3, #0]
 8028278:	9310      	str	r3, [sp, #64]	; 0x40
 802827a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 802827e:	930b      	str	r3, [sp, #44]	; 0x2c
 8028280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028282:	2b00      	cmp	r3, #0
 8028284:	dc03      	bgt.n	802828e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8028286:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8028288:	2b00      	cmp	r3, #0
 802828a:	f340 8375 	ble.w	8028978 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 802828e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8028290:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028294:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028298:	1e48      	subs	r0, r1, #1
 802829a:	1e57      	subs	r7, r2, #1
 802829c:	9b07      	ldr	r3, [sp, #28]
 802829e:	2b00      	cmp	r3, #0
 80282a0:	f340 818e 	ble.w	80285c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80282a4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80282a8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80282ac:	d406      	bmi.n	80282bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80282ae:	4584      	cmp	ip, r0
 80282b0:	da04      	bge.n	80282bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80282b2:	2b00      	cmp	r3, #0
 80282b4:	db02      	blt.n	80282bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80282b6:	42bb      	cmp	r3, r7
 80282b8:	f2c0 8183 	blt.w	80285c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80282bc:	f11c 0c01 	adds.w	ip, ip, #1
 80282c0:	f100 8173 	bmi.w	80285aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80282c4:	4561      	cmp	r1, ip
 80282c6:	f2c0 8170 	blt.w	80285aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80282ca:	3301      	adds	r3, #1
 80282cc:	f100 816d 	bmi.w	80285aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80282d0:	429a      	cmp	r2, r3
 80282d2:	f2c0 816a 	blt.w	80285aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80282d6:	9b07      	ldr	r3, [sp, #28]
 80282d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80282da:	9318      	str	r3, [sp, #96]	; 0x60
 80282dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80282de:	2b00      	cmp	r3, #0
 80282e0:	f340 818c 	ble.w	80285fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 80282e4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80282e6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80282ea:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80282ec:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80282f0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80282f4:	1422      	asrs	r2, r4, #16
 80282f6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80282fa:	689b      	ldr	r3, [r3, #8]
 80282fc:	f100 81cd 	bmi.w	802869a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028300:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8028304:	4542      	cmp	r2, r8
 8028306:	f280 81c8 	bge.w	802869a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802830a:	f1bc 0f00 	cmp.w	ip, #0
 802830e:	f2c0 81c4 	blt.w	802869a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028312:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8028316:	45c4      	cmp	ip, r8
 8028318:	f280 81bf 	bge.w	802869a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802831c:	b21b      	sxth	r3, r3
 802831e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028320:	fb0c 2203 	mla	r2, ip, r3, r2
 8028324:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028328:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802832c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028330:	2800      	cmp	r0, #0
 8028332:	f000 81a9 	beq.w	8028688 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8028336:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802833a:	950c      	str	r5, [sp, #48]	; 0x30
 802833c:	0e2d      	lsrs	r5, r5, #24
 802833e:	9513      	str	r5, [sp, #76]	; 0x4c
 8028340:	b181      	cbz	r1, 8028364 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028346:	3b01      	subs	r3, #1
 8028348:	009b      	lsls	r3, r3, #2
 802834a:	3304      	adds	r3, #4
 802834c:	eb08 0c03 	add.w	ip, r8, r3
 8028350:	f858 3003 	ldr.w	r3, [r8, r3]
 8028354:	9308      	str	r3, [sp, #32]
 8028356:	0e1b      	lsrs	r3, r3, #24
 8028358:	9311      	str	r3, [sp, #68]	; 0x44
 802835a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802835e:	930d      	str	r3, [sp, #52]	; 0x34
 8028360:	0e1b      	lsrs	r3, r3, #24
 8028362:	9314      	str	r3, [sp, #80]	; 0x50
 8028364:	b280      	uxth	r0, r0
 8028366:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028368:	b289      	uxth	r1, r1
 802836a:	fb00 f901 	mul.w	r9, r0, r1
 802836e:	0100      	lsls	r0, r0, #4
 8028370:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028374:	eba0 0809 	sub.w	r8, r0, r9
 8028378:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802837c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802837e:	b289      	uxth	r1, r1
 8028380:	fa1f f888 	uxth.w	r8, r8
 8028384:	1a5b      	subs	r3, r3, r1
 8028386:	fb08 f000 	mul.w	r0, r8, r0
 802838a:	b29b      	uxth	r3, r3
 802838c:	fb03 000e 	mla	r0, r3, lr, r0
 8028390:	fb01 0005 	mla	r0, r1, r5, r0
 8028394:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028396:	fb09 0005 	mla	r0, r9, r5, r0
 802839a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802839e:	2800      	cmp	r0, #0
 80283a0:	f000 80fa 	beq.w	8028598 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80283a4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80283a8:	d01b      	beq.n	80283e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80283aa:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80283ae:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80283b2:	fb0e fa0a 	mul.w	sl, lr, sl
 80283b6:	fb0e fe02 	mul.w	lr, lr, r2
 80283ba:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80283be:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80283c2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80283c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80283ca:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80283ce:	4452      	add	r2, sl
 80283d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80283d4:	0a12      	lsrs	r2, r2, #8
 80283d6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80283da:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80283de:	ea42 020c 	orr.w	r2, r2, ip
 80283e2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80283e4:	2dff      	cmp	r5, #255	; 0xff
 80283e6:	d021      	beq.n	802842c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80283e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80283ea:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80283ee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80283f0:	fb05 fb0b 	mul.w	fp, r5, fp
 80283f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80283f6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80283fa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80283fc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028400:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028404:	fb05 fa0a 	mul.w	sl, r5, sl
 8028408:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802840c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028410:	44de      	add	lr, fp
 8028412:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028416:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802841a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802841e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028422:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028426:	ea4e 050a 	orr.w	r5, lr, sl
 802842a:	950c      	str	r5, [sp, #48]	; 0x30
 802842c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802842e:	2dff      	cmp	r5, #255	; 0xff
 8028430:	d021      	beq.n	8028476 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028432:	9d08      	ldr	r5, [sp, #32]
 8028434:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028438:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802843a:	fb05 fb0b 	mul.w	fp, r5, fp
 802843e:	9d08      	ldr	r5, [sp, #32]
 8028440:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028444:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028446:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802844a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802844e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028452:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028456:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802845a:	44de      	add	lr, fp
 802845c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028460:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028464:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028468:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802846c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028470:	ea4e 050a 	orr.w	r5, lr, sl
 8028474:	9508      	str	r5, [sp, #32]
 8028476:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028478:	2dff      	cmp	r5, #255	; 0xff
 802847a:	d021      	beq.n	80284c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802847c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802847e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028482:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028484:	fb05 fb0b 	mul.w	fp, r5, fp
 8028488:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802848a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802848e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028490:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028494:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028498:	fb05 fa0a 	mul.w	sl, r5, sl
 802849c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80284a0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80284a4:	44de      	add	lr, fp
 80284a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80284aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80284ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80284b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80284b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80284ba:	ea4e 050a 	orr.w	r5, lr, sl
 80284be:	950d      	str	r5, [sp, #52]	; 0x34
 80284c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80284c2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80284c6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80284ca:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80284ce:	9d08      	ldr	r5, [sp, #32]
 80284d0:	fb08 fc0c 	mul.w	ip, r8, ip
 80284d4:	fb03 cc0e 	mla	ip, r3, lr, ip
 80284d8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80284dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80284de:	fb01 cc0e 	mla	ip, r1, lr, ip
 80284e2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80284e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80284e8:	fb09 cc0e 	mla	ip, r9, lr, ip
 80284ec:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80284f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80284f2:	fb08 f80e 	mul.w	r8, r8, lr
 80284f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80284fa:	fb03 8202 	mla	r2, r3, r2, r8
 80284fe:	9b08      	ldr	r3, [sp, #32]
 8028500:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028504:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8028508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802850a:	fb01 220a 	mla	r2, r1, sl, r2
 802850e:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8028512:	883b      	ldrh	r3, [r7, #0]
 8028514:	fb09 2901 	mla	r9, r9, r1, r2
 8028518:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802851a:	1219      	asrs	r1, r3, #8
 802851c:	4342      	muls	r2, r0
 802851e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028522:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028526:	1c50      	adds	r0, r2, #1
 8028528:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802852c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028530:	ea4c 0c09 	orr.w	ip, ip, r9
 8028534:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028538:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802853c:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028540:	fa5f fc8c 	uxtb.w	ip, ip
 8028544:	fb12 f205 	smulbb	r2, r2, r5
 8028548:	b2c0      	uxtb	r0, r0
 802854a:	fb1c fc05 	smulbb	ip, ip, r5
 802854e:	fb01 2100 	mla	r1, r1, r0, r2
 8028552:	10da      	asrs	r2, r3, #3
 8028554:	fb1e fe05 	smulbb	lr, lr, r5
 8028558:	00db      	lsls	r3, r3, #3
 802855a:	b289      	uxth	r1, r1
 802855c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028560:	b2db      	uxtb	r3, r3
 8028562:	fb02 e200 	mla	r2, r2, r0, lr
 8028566:	fb03 c300 	mla	r3, r3, r0, ip
 802856a:	b292      	uxth	r2, r2
 802856c:	fa1f fc83 	uxth.w	ip, r3
 8028570:	1c4b      	adds	r3, r1, #1
 8028572:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028576:	f10c 0301 	add.w	r3, ip, #1
 802857a:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802857e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8028582:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028586:	430b      	orrs	r3, r1
 8028588:	1c51      	adds	r1, r2, #1
 802858a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802858e:	0952      	lsrs	r2, r2, #5
 8028590:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028594:	4313      	orrs	r3, r2
 8028596:	803b      	strh	r3, [r7, #0]
 8028598:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802859a:	3702      	adds	r7, #2
 802859c:	441c      	add	r4, r3
 802859e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80285a0:	441e      	add	r6, r3
 80285a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80285a4:	3b01      	subs	r3, #1
 80285a6:	9318      	str	r3, [sp, #96]	; 0x60
 80285a8:	e698      	b.n	80282dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80285aa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80285ac:	441c      	add	r4, r3
 80285ae:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80285b0:	441e      	add	r6, r3
 80285b2:	9b07      	ldr	r3, [sp, #28]
 80285b4:	3b01      	subs	r3, #1
 80285b6:	9307      	str	r3, [sp, #28]
 80285b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80285ba:	3302      	adds	r3, #2
 80285bc:	930a      	str	r3, [sp, #40]	; 0x28
 80285be:	e66d      	b.n	802829c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80285c0:	d023      	beq.n	802860a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80285c2:	9b07      	ldr	r3, [sp, #28]
 80285c4:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80285c6:	3b01      	subs	r3, #1
 80285c8:	fb00 4003 	mla	r0, r0, r3, r4
 80285cc:	1400      	asrs	r0, r0, #16
 80285ce:	f53f ae82 	bmi.w	80282d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80285d2:	3901      	subs	r1, #1
 80285d4:	4288      	cmp	r0, r1
 80285d6:	f6bf ae7e 	bge.w	80282d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80285da:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80285dc:	fb01 6303 	mla	r3, r1, r3, r6
 80285e0:	141b      	asrs	r3, r3, #16
 80285e2:	f53f ae78 	bmi.w	80282d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80285e6:	3a01      	subs	r2, #1
 80285e8:	4293      	cmp	r3, r2
 80285ea:	f6bf ae74 	bge.w	80282d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80285ee:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80285f2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80285f6:	f1bb 0f00 	cmp.w	fp, #0
 80285fa:	dc6c      	bgt.n	80286d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 80285fc:	9b07      	ldr	r3, [sp, #28]
 80285fe:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028604:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028608:	930a      	str	r3, [sp, #40]	; 0x28
 802860a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802860c:	2b00      	cmp	r3, #0
 802860e:	f340 81b3 	ble.w	8028978 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8028612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028616:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028618:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802861c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028620:	eef0 6a48 	vmov.f32	s13, s16
 8028624:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028628:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802862c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028630:	ee16 4a90 	vmov	r4, s13
 8028634:	eef0 6a68 	vmov.f32	s13, s17
 8028638:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802863c:	ee16 6a90 	vmov	r6, s13
 8028640:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028644:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028648:	ee37 8a48 	vsub.f32	s16, s14, s16
 802864c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028650:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028654:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028658:	ee18 2a10 	vmov	r2, s16
 802865c:	eeb0 8a47 	vmov.f32	s16, s14
 8028660:	fb92 f3f3 	sdiv	r3, r2, r3
 8028664:	ee18 2a90 	vmov	r2, s17
 8028668:	9331      	str	r3, [sp, #196]	; 0xc4
 802866a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802866c:	eef0 8a67 	vmov.f32	s17, s15
 8028670:	fb92 f3f3 	sdiv	r3, r2, r3
 8028674:	9332      	str	r3, [sp, #200]	; 0xc8
 8028676:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028678:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802867a:	3b01      	subs	r3, #1
 802867c:	9317      	str	r3, [sp, #92]	; 0x5c
 802867e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028680:	bf08      	it	eq
 8028682:	4613      	moveq	r3, r2
 8028684:	9307      	str	r3, [sp, #28]
 8028686:	e5fb      	b.n	8028280 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8028688:	2900      	cmp	r1, #0
 802868a:	f43f ae6b 	beq.w	8028364 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802868e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028692:	9308      	str	r3, [sp, #32]
 8028694:	0e1b      	lsrs	r3, r3, #24
 8028696:	9311      	str	r3, [sp, #68]	; 0x44
 8028698:	e664      	b.n	8028364 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802869a:	f112 0801 	adds.w	r8, r2, #1
 802869e:	f53f af7b 	bmi.w	8028598 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80286a2:	4543      	cmp	r3, r8
 80286a4:	f6ff af78 	blt.w	8028598 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80286a8:	f11c 0801 	adds.w	r8, ip, #1
 80286ac:	f53f af74 	bmi.w	8028598 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80286b0:	45c6      	cmp	lr, r8
 80286b2:	f6ff af71 	blt.w	8028598 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80286b6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80286b8:	b21b      	sxth	r3, r3
 80286ba:	9201      	str	r2, [sp, #4]
 80286bc:	fa0f f28e 	sxth.w	r2, lr
 80286c0:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80286c4:	e9cd c002 	strd	ip, r0, [sp, #8]
 80286c8:	9200      	str	r2, [sp, #0]
 80286ca:	4639      	mov	r1, r7
 80286cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80286ce:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80286d0:	f7ff fc48 	bl	8027f64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80286d4:	e760      	b.n	8028598 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80286d6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80286d8:	1427      	asrs	r7, r4, #16
 80286da:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80286dc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80286e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80286e4:	1433      	asrs	r3, r6, #16
 80286e6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80286ea:	fb01 7303 	mla	r3, r1, r3, r7
 80286ee:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80286f2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80286f6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80286fa:	2a00      	cmp	r2, #0
 80286fc:	f000 8133 	beq.w	8028966 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8028700:	687d      	ldr	r5, [r7, #4]
 8028702:	950e      	str	r5, [sp, #56]	; 0x38
 8028704:	0e2d      	lsrs	r5, r5, #24
 8028706:	9515      	str	r5, [sp, #84]	; 0x54
 8028708:	b178      	cbz	r0, 802872a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802870a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802870e:	3901      	subs	r1, #1
 8028710:	0089      	lsls	r1, r1, #2
 8028712:	3104      	adds	r1, #4
 8028714:	eb07 0e01 	add.w	lr, r7, r1
 8028718:	5879      	ldr	r1, [r7, r1]
 802871a:	9109      	str	r1, [sp, #36]	; 0x24
 802871c:	0e09      	lsrs	r1, r1, #24
 802871e:	9112      	str	r1, [sp, #72]	; 0x48
 8028720:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028724:	910f      	str	r1, [sp, #60]	; 0x3c
 8028726:	0e09      	lsrs	r1, r1, #24
 8028728:	9116      	str	r1, [sp, #88]	; 0x58
 802872a:	b292      	uxth	r2, r2
 802872c:	9915      	ldr	r1, [sp, #84]	; 0x54
 802872e:	b280      	uxth	r0, r0
 8028730:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028732:	fb02 f800 	mul.w	r8, r2, r0
 8028736:	0112      	lsls	r2, r2, #4
 8028738:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802873c:	eba2 0e08 	sub.w	lr, r2, r8
 8028740:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8028744:	b280      	uxth	r0, r0
 8028746:	fa1f fe8e 	uxth.w	lr, lr
 802874a:	1a12      	subs	r2, r2, r0
 802874c:	fb0e f101 	mul.w	r1, lr, r1
 8028750:	b292      	uxth	r2, r2
 8028752:	fb02 110c 	mla	r1, r2, ip, r1
 8028756:	fb00 1105 	mla	r1, r0, r5, r1
 802875a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802875c:	fb08 1105 	mla	r1, r8, r5, r1
 8028760:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028764:	2900      	cmp	r1, #0
 8028766:	f000 80f5 	beq.w	8028954 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802876a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802876e:	d019      	beq.n	80287a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8028770:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028774:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028778:	fb0c fa0a 	mul.w	sl, ip, sl
 802877c:	fb0c fc03 	mul.w	ip, ip, r3
 8028780:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028784:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028788:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802878c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028790:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028794:	4453      	add	r3, sl
 8028796:	0a3f      	lsrs	r7, r7, #8
 8028798:	0a1b      	lsrs	r3, r3, #8
 802879a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802879e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80287a2:	433b      	orrs	r3, r7
 80287a4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80287a6:	2dff      	cmp	r5, #255	; 0xff
 80287a8:	d020      	beq.n	80287ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 80287aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80287ac:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80287b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80287b2:	436f      	muls	r7, r5
 80287b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80287b6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80287ba:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80287be:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80287c0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80287c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80287c8:	fb05 fa0a 	mul.w	sl, r5, sl
 80287cc:	44bc      	add	ip, r7
 80287ce:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80287d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80287d6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80287da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80287de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80287e2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80287e6:	ea4c 050a 	orr.w	r5, ip, sl
 80287ea:	950e      	str	r5, [sp, #56]	; 0x38
 80287ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80287ee:	2dff      	cmp	r5, #255	; 0xff
 80287f0:	d020      	beq.n	8028834 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 80287f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80287f4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80287f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80287fa:	436f      	muls	r7, r5
 80287fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80287fe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028802:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028806:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028808:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802880c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028810:	fb05 fa0a 	mul.w	sl, r5, sl
 8028814:	44bc      	add	ip, r7
 8028816:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802881a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802881e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028822:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028826:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802882a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802882e:	ea4c 050a 	orr.w	r5, ip, sl
 8028832:	9509      	str	r5, [sp, #36]	; 0x24
 8028834:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028836:	2dff      	cmp	r5, #255	; 0xff
 8028838:	d020      	beq.n	802887c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 802883a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802883c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028840:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028842:	436f      	muls	r7, r5
 8028844:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028846:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802884a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802884e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028850:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028854:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028858:	fb05 fa0a 	mul.w	sl, r5, sl
 802885c:	44bc      	add	ip, r7
 802885e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028862:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028866:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802886a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802886e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028872:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028876:	ea4c 050a 	orr.w	r5, ip, sl
 802887a:	950f      	str	r5, [sp, #60]	; 0x3c
 802887c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802887e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028882:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028886:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802888a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802888c:	fb0e f707 	mul.w	r7, lr, r7
 8028890:	fb02 770c 	mla	r7, r2, ip, r7
 8028894:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028898:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802889a:	fb00 770c 	mla	r7, r0, ip, r7
 802889e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80288a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80288a4:	fb08 770c 	mla	r7, r8, ip, r7
 80288a8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80288ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80288ae:	fb0e fe0c 	mul.w	lr, lr, ip
 80288b2:	0a3f      	lsrs	r7, r7, #8
 80288b4:	fb02 e303 	mla	r3, r2, r3, lr
 80288b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80288ba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80288be:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80288c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80288c4:	fb00 330a 	mla	r3, r0, sl, r3
 80288c8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80288cc:	f8b9 0000 	ldrh.w	r0, [r9]
 80288d0:	fb08 3c0c 	mla	ip, r8, ip, r3
 80288d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80288d6:	1202      	asrs	r2, r0, #8
 80288d8:	4359      	muls	r1, r3
 80288da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80288de:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80288e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80288e6:	1c4b      	adds	r3, r1, #1
 80288e8:	ea47 070c 	orr.w	r7, r7, ip
 80288ec:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80288f0:	0c3b      	lsrs	r3, r7, #16
 80288f2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80288f6:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80288fa:	b2ff      	uxtb	r7, r7
 80288fc:	fb13 f305 	smulbb	r3, r3, r5
 8028900:	b2c9      	uxtb	r1, r1
 8028902:	fb17 f705 	smulbb	r7, r7, r5
 8028906:	fb02 3201 	mla	r2, r2, r1, r3
 802890a:	10c3      	asrs	r3, r0, #3
 802890c:	fb1c fc05 	smulbb	ip, ip, r5
 8028910:	00c0      	lsls	r0, r0, #3
 8028912:	b292      	uxth	r2, r2
 8028914:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028918:	b2c0      	uxtb	r0, r0
 802891a:	fb03 c301 	mla	r3, r3, r1, ip
 802891e:	fb00 7001 	mla	r0, r0, r1, r7
 8028922:	1c51      	adds	r1, r2, #1
 8028924:	b29b      	uxth	r3, r3
 8028926:	b280      	uxth	r0, r0
 8028928:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802892c:	f100 0c01 	add.w	ip, r0, #1
 8028930:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8028934:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8028938:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802893c:	ea4c 0202 	orr.w	r2, ip, r2
 8028940:	f103 0c01 	add.w	ip, r3, #1
 8028944:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8028948:	095b      	lsrs	r3, r3, #5
 802894a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802894e:	431a      	orrs	r2, r3
 8028950:	f8a9 2000 	strh.w	r2, [r9]
 8028954:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8028956:	f109 0902 	add.w	r9, r9, #2
 802895a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 802895e:	441c      	add	r4, r3
 8028960:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8028962:	441e      	add	r6, r3
 8028964:	e647      	b.n	80285f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8028966:	2800      	cmp	r0, #0
 8028968:	f43f aedf 	beq.w	802872a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802896c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8028970:	9109      	str	r1, [sp, #36]	; 0x24
 8028972:	0e09      	lsrs	r1, r1, #24
 8028974:	9112      	str	r1, [sp, #72]	; 0x48
 8028976:	e6d8      	b.n	802872a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028978:	b01d      	add	sp, #116	; 0x74
 802897a:	ecbd 8b08 	vpop	{d8-d11}
 802897e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028984 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8028984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028988:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 802898c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8028990:	fb04 5603 	mla	r6, r4, r3, r5
 8028994:	2c00      	cmp	r4, #0
 8028996:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802899a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802899e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80289a2:	db37      	blt.n	8028a14 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 80289a4:	45a6      	cmp	lr, r4
 80289a6:	dd35      	ble.n	8028a14 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 80289a8:	2d00      	cmp	r5, #0
 80289aa:	db31      	blt.n	8028a10 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80289ac:	42ab      	cmp	r3, r5
 80289ae:	dd2f      	ble.n	8028a10 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80289b0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80289b4:	1c6e      	adds	r6, r5, #1
 80289b6:	d430      	bmi.n	8028a1a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 80289b8:	42b3      	cmp	r3, r6
 80289ba:	dd2e      	ble.n	8028a1a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 80289bc:	b378      	cbz	r0, 8028a1e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 80289be:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80289c2:	3401      	adds	r4, #1
 80289c4:	d42f      	bmi.n	8028a26 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 80289c6:	45a6      	cmp	lr, r4
 80289c8:	dd2d      	ble.n	8028a26 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 80289ca:	b37f      	cbz	r7, 8028a2c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 80289cc:	2d00      	cmp	r5, #0
 80289ce:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 80289d2:	db26      	blt.n	8028a22 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80289d4:	42ab      	cmp	r3, r5
 80289d6:	dd24      	ble.n	8028a22 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80289d8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80289dc:	3501      	adds	r5, #1
 80289de:	d428      	bmi.n	8028a32 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80289e0:	42ab      	cmp	r3, r5
 80289e2:	dd26      	ble.n	8028a32 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80289e4:	b338      	cbz	r0, 8028a36 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 80289e6:	f8de 3004 	ldr.w	r3, [lr, #4]
 80289ea:	280f      	cmp	r0, #15
 80289ec:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80289f0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80289f4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80289f8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80289fc:	d801      	bhi.n	8028a02 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 80289fe:	2f0f      	cmp	r7, #15
 8028a00:	d91b      	bls.n	8028a3a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 8028a02:	4b87      	ldr	r3, [pc, #540]	; (8028c20 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8028a04:	f240 11f9 	movw	r1, #505	; 0x1f9
 8028a08:	4a86      	ldr	r2, [pc, #536]	; (8028c24 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8028a0a:	4887      	ldr	r0, [pc, #540]	; (8028c28 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8028a0c:	f001 fe22 	bl	802a654 <__assert_func>
 8028a10:	2200      	movs	r2, #0
 8028a12:	e7cf      	b.n	80289b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8028a14:	2600      	movs	r6, #0
 8028a16:	4632      	mov	r2, r6
 8028a18:	e7d3      	b.n	80289c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028a1a:	2600      	movs	r6, #0
 8028a1c:	e7d1      	b.n	80289c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028a1e:	4606      	mov	r6, r0
 8028a20:	e7cf      	b.n	80289c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028a22:	2400      	movs	r4, #0
 8028a24:	e7da      	b.n	80289dc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 8028a26:	2300      	movs	r3, #0
 8028a28:	461c      	mov	r4, r3
 8028a2a:	e7de      	b.n	80289ea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028a2c:	463b      	mov	r3, r7
 8028a2e:	463c      	mov	r4, r7
 8028a30:	e7db      	b.n	80289ea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028a32:	2300      	movs	r3, #0
 8028a34:	e7d9      	b.n	80289ea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028a36:	4603      	mov	r3, r0
 8028a38:	e7d7      	b.n	80289ea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028a3a:	b280      	uxth	r0, r0
 8028a3c:	b2bf      	uxth	r7, r7
 8028a3e:	fb07 fe00 	mul.w	lr, r7, r0
 8028a42:	0100      	lsls	r0, r0, #4
 8028a44:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8028a48:	eba0 0c0e 	sub.w	ip, r0, lr
 8028a4c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8028a50:	b2bf      	uxth	r7, r7
 8028a52:	fa1f fc8c 	uxth.w	ip, ip
 8028a56:	1bed      	subs	r5, r5, r7
 8028a58:	fb0c f00a 	mul.w	r0, ip, sl
 8028a5c:	b2ad      	uxth	r5, r5
 8028a5e:	fb0b 0005 	mla	r0, fp, r5, r0
 8028a62:	fb07 0009 	mla	r0, r7, r9, r0
 8028a66:	fb0e 0008 	mla	r0, lr, r8, r0
 8028a6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028a6e:	9001      	str	r0, [sp, #4]
 8028a70:	2800      	cmp	r0, #0
 8028a72:	f000 80d1 	beq.w	8028c18 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 8028a76:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8028a7a:	d018      	beq.n	8028aae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8028a7c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8028a80:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028a84:	fb0b f000 	mul.w	r0, fp, r0
 8028a88:	fb0b fb02 	mul.w	fp, fp, r2
 8028a8c:	0a02      	lsrs	r2, r0, #8
 8028a8e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028a92:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028a96:	4402      	add	r2, r0
 8028a98:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8028a9c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028aa0:	0a12      	lsrs	r2, r2, #8
 8028aa2:	0a00      	lsrs	r0, r0, #8
 8028aa4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028aa8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028aac:	4302      	orrs	r2, r0
 8028aae:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8028ab2:	d01a      	beq.n	8028aea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 8028ab4:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8028ab8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028abc:	fb0a f000 	mul.w	r0, sl, r0
 8028ac0:	fb0a fa06 	mul.w	sl, sl, r6
 8028ac4:	0a06      	lsrs	r6, r0, #8
 8028ac6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028aca:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028ace:	4406      	add	r6, r0
 8028ad0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8028ad4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8028ad8:	0a36      	lsrs	r6, r6, #8
 8028ada:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028ade:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028ae2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028ae6:	ea46 060a 	orr.w	r6, r6, sl
 8028aea:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028aee:	d01b      	beq.n	8028b28 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 8028af0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8028af4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028af8:	fb09 fa0a 	mul.w	sl, r9, sl
 8028afc:	fb09 f004 	mul.w	r0, r9, r4
 8028b00:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8028b04:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028b08:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8028b0c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028b10:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8028b14:	4454      	add	r4, sl
 8028b16:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028b1a:	0a24      	lsrs	r4, r4, #8
 8028b1c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028b20:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028b24:	ea44 0409 	orr.w	r4, r4, r9
 8028b28:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028b2c:	d01b      	beq.n	8028b66 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8028b2e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8028b32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028b36:	fb08 f909 	mul.w	r9, r8, r9
 8028b3a:	fb08 f003 	mul.w	r0, r8, r3
 8028b3e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8028b42:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8028b46:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8028b4a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028b4e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8028b52:	444b      	add	r3, r9
 8028b54:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028b58:	0a1b      	lsrs	r3, r3, #8
 8028b5a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028b5e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028b62:	ea43 0308 	orr.w	r3, r3, r8
 8028b66:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8028b6a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028b6e:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8028b72:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028b76:	fb0c f808 	mul.w	r8, ip, r8
 8028b7a:	8808      	ldrh	r0, [r1, #0]
 8028b7c:	fb0c f606 	mul.w	r6, ip, r6
 8028b80:	fb05 8909 	mla	r9, r5, r9, r8
 8028b84:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8028b88:	fb05 6502 	mla	r5, r5, r2, r6
 8028b8c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028b90:	fb07 9908 	mla	r9, r7, r8, r9
 8028b94:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8028b98:	fb07 5704 	mla	r7, r7, r4, r5
 8028b9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028ba0:	fb0e 9808 	mla	r8, lr, r8, r9
 8028ba4:	10c4      	asrs	r4, r0, #3
 8028ba6:	fb0e 7e03 	mla	lr, lr, r3, r7
 8028baa:	9b01      	ldr	r3, [sp, #4]
 8028bac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028bb0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8028bb4:	43da      	mvns	r2, r3
 8028bb6:	1203      	asrs	r3, r0, #8
 8028bb8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028bbc:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8028bc0:	b2d2      	uxtb	r2, r2
 8028bc2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8028bc6:	00c0      	lsls	r0, r0, #3
 8028bc8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028bcc:	4353      	muls	r3, r2
 8028bce:	b2c0      	uxtb	r0, r0
 8028bd0:	ea48 0e0e 	orr.w	lr, r8, lr
 8028bd4:	4354      	muls	r4, r2
 8028bd6:	4350      	muls	r0, r2
 8028bd8:	1c5a      	adds	r2, r3, #1
 8028bda:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028bde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8028be2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028be6:	1c62      	adds	r2, r4, #1
 8028be8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028bec:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8028bf0:	021b      	lsls	r3, r3, #8
 8028bf2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028bf6:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8028bfa:	00d2      	lsls	r2, r2, #3
 8028bfc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028c00:	4313      	orrs	r3, r2
 8028c02:	1c42      	adds	r2, r0, #1
 8028c04:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028c08:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 8028c0c:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 8028c10:	ea4e 0e03 	orr.w	lr, lr, r3
 8028c14:	f8a1 e000 	strh.w	lr, [r1]
 8028c18:	b003      	add	sp, #12
 8028c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c1e:	bf00      	nop
 8028c20:	0803215f 	.word	0x0803215f
 8028c24:	0803268e 	.word	0x0803268e
 8028c28:	0803212c 	.word	0x0803212c

08028c2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c30:	ed2d 8b08 	vpush	{d8-d11}
 8028c34:	b09b      	sub	sp, #108	; 0x6c
 8028c36:	eeb0 aa40 	vmov.f32	s20, s0
 8028c3a:	eef0 9a60 	vmov.f32	s19, s1
 8028c3e:	9218      	str	r2, [sp, #96]	; 0x60
 8028c40:	eeb0 9a41 	vmov.f32	s18, s2
 8028c44:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8028c46:	eeb0 8a62 	vmov.f32	s16, s5
 8028c4a:	9019      	str	r0, [sp, #100]	; 0x64
 8028c4c:	eef0 8a43 	vmov.f32	s17, s6
 8028c50:	6850      	ldr	r0, [r2, #4]
 8028c52:	eef0 ba44 	vmov.f32	s23, s8
 8028c56:	9116      	str	r1, [sp, #88]	; 0x58
 8028c58:	eeb0 ba64 	vmov.f32	s22, s9
 8028c5c:	9307      	str	r3, [sp, #28]
 8028c5e:	eef0 aa45 	vmov.f32	s21, s10
 8028c62:	6812      	ldr	r2, [r2, #0]
 8028c64:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8028c68:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8028c6c:	fb00 1303 	mla	r3, r0, r3, r1
 8028c70:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028c74:	930a      	str	r3, [sp, #40]	; 0x28
 8028c76:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028c78:	681b      	ldr	r3, [r3, #0]
 8028c7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8028c7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028c7e:	2b00      	cmp	r3, #0
 8028c80:	dc03      	bgt.n	8028c8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8028c82:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028c84:	2b00      	cmp	r3, #0
 8028c86:	f340 8387 	ble.w	8029398 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8028c8a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028c8c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028c90:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028c94:	1e48      	subs	r0, r1, #1
 8028c96:	1e57      	subs	r7, r2, #1
 8028c98:	9b07      	ldr	r3, [sp, #28]
 8028c9a:	2b00      	cmp	r3, #0
 8028c9c:	f340 8166 	ble.w	8028f6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8028ca0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028ca4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028ca8:	d406      	bmi.n	8028cb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028caa:	4584      	cmp	ip, r0
 8028cac:	da04      	bge.n	8028cb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028cae:	2b00      	cmp	r3, #0
 8028cb0:	db02      	blt.n	8028cb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028cb2:	42bb      	cmp	r3, r7
 8028cb4:	f2c0 815b 	blt.w	8028f6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8028cb8:	f11c 0c01 	adds.w	ip, ip, #1
 8028cbc:	f100 814b 	bmi.w	8028f56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028cc0:	4561      	cmp	r1, ip
 8028cc2:	f2c0 8148 	blt.w	8028f56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028cc6:	3301      	adds	r3, #1
 8028cc8:	f100 8145 	bmi.w	8028f56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028ccc:	429a      	cmp	r2, r3
 8028cce:	f2c0 8142 	blt.w	8028f56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028cd2:	9b07      	ldr	r3, [sp, #28]
 8028cd4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028cd6:	9317      	str	r3, [sp, #92]	; 0x5c
 8028cd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028cda:	2b00      	cmp	r3, #0
 8028cdc:	f340 8165 	ble.w	8028faa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8028ce0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8028ce2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028ce6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028ce8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028cec:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028cf0:	1422      	asrs	r2, r4, #16
 8028cf2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028cf6:	689b      	ldr	r3, [r3, #8]
 8028cf8:	f100 81d5 	bmi.w	80290a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028cfc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8028d00:	4542      	cmp	r2, r8
 8028d02:	f280 81d0 	bge.w	80290a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028d06:	f1bc 0f00 	cmp.w	ip, #0
 8028d0a:	f2c0 81cc 	blt.w	80290a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028d0e:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8028d12:	45c4      	cmp	ip, r8
 8028d14:	f280 81c7 	bge.w	80290a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028d18:	b21b      	sxth	r3, r3
 8028d1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028d1c:	fb0c 2203 	mla	r2, ip, r3, r2
 8028d20:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028d24:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028d28:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028d2c:	2900      	cmp	r1, #0
 8028d2e:	f000 8182 	beq.w	8029036 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8028d32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028d36:	950b      	str	r5, [sp, #44]	; 0x2c
 8028d38:	0e2d      	lsrs	r5, r5, #24
 8028d3a:	9512      	str	r5, [sp, #72]	; 0x48
 8028d3c:	b180      	cbz	r0, 8028d60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028d3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028d42:	3b01      	subs	r3, #1
 8028d44:	009b      	lsls	r3, r3, #2
 8028d46:	3304      	adds	r3, #4
 8028d48:	eb08 0c03 	add.w	ip, r8, r3
 8028d4c:	f858 3003 	ldr.w	r3, [r8, r3]
 8028d50:	9308      	str	r3, [sp, #32]
 8028d52:	0e1b      	lsrs	r3, r3, #24
 8028d54:	9310      	str	r3, [sp, #64]	; 0x40
 8028d56:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8028d5c:	0e1b      	lsrs	r3, r3, #24
 8028d5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8028d60:	b289      	uxth	r1, r1
 8028d62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028d64:	b280      	uxth	r0, r0
 8028d66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028d68:	fb01 f900 	mul.w	r9, r1, r0
 8028d6c:	0109      	lsls	r1, r1, #4
 8028d6e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028d72:	eba1 0809 	sub.w	r8, r1, r9
 8028d76:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8028d7a:	b280      	uxth	r0, r0
 8028d7c:	fa1f f888 	uxth.w	r8, r8
 8028d80:	1a09      	subs	r1, r1, r0
 8028d82:	fb08 f303 	mul.w	r3, r8, r3
 8028d86:	b289      	uxth	r1, r1
 8028d88:	fb01 330e 	mla	r3, r1, lr, r3
 8028d8c:	fb00 3305 	mla	r3, r0, r5, r3
 8028d90:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028d92:	fb09 3305 	mla	r3, r9, r5, r3
 8028d96:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028d9a:	2b00      	cmp	r3, #0
 8028d9c:	f000 80d2 	beq.w	8028f44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028da0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028da4:	d01b      	beq.n	8028dde <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8028da6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8028daa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028dae:	fb0e fa0a 	mul.w	sl, lr, sl
 8028db2:	fb0e fe02 	mul.w	lr, lr, r2
 8028db6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028dba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028dbe:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028dc2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028dc6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028dca:	4452      	add	r2, sl
 8028dcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028dd0:	0a12      	lsrs	r2, r2, #8
 8028dd2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028dd6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028dda:	ea42 020c 	orr.w	r2, r2, ip
 8028dde:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028de0:	2dff      	cmp	r5, #255	; 0xff
 8028de2:	d021      	beq.n	8028e28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8028de4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028de6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028dea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028dec:	fb05 fb0b 	mul.w	fp, r5, fp
 8028df0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028df2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028df6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028df8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028dfc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028e00:	fb05 fa0a 	mul.w	sl, r5, sl
 8028e04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e08:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028e0c:	44de      	add	lr, fp
 8028e0e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028e12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028e16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028e22:	ea4e 050a 	orr.w	r5, lr, sl
 8028e26:	950b      	str	r5, [sp, #44]	; 0x2c
 8028e28:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028e2a:	2dff      	cmp	r5, #255	; 0xff
 8028e2c:	d021      	beq.n	8028e72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028e2e:	9d08      	ldr	r5, [sp, #32]
 8028e30:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028e34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028e36:	fb05 fb0b 	mul.w	fp, r5, fp
 8028e3a:	9d08      	ldr	r5, [sp, #32]
 8028e3c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028e40:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028e42:	fb05 fa0e 	mul.w	sl, r5, lr
 8028e46:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028e4a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028e4e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e52:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028e56:	44de      	add	lr, fp
 8028e58:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028e5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028e60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028e6c:	ea4e 050a 	orr.w	r5, lr, sl
 8028e70:	9508      	str	r5, [sp, #32]
 8028e72:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028e74:	2dff      	cmp	r5, #255	; 0xff
 8028e76:	d021      	beq.n	8028ebc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8028e78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028e7a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028e7e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028e80:	fb05 fb0b 	mul.w	fp, r5, fp
 8028e84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028e86:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028e8a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028e8c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028e90:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028e94:	fb05 fa0a 	mul.w	sl, r5, sl
 8028e98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e9c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028ea0:	44de      	add	lr, fp
 8028ea2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028ea6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028eaa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028eae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028eb2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028eb6:	ea4e 050a 	orr.w	r5, lr, sl
 8028eba:	950c      	str	r5, [sp, #48]	; 0x30
 8028ebc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028ebe:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028ec2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028ec6:	2bff      	cmp	r3, #255	; 0xff
 8028ec8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028ecc:	9d08      	ldr	r5, [sp, #32]
 8028ece:	fb08 fc0c 	mul.w	ip, r8, ip
 8028ed2:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028ed6:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028edc:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028ee0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028ee4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028ee6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028eea:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028eee:	fb08 f80e 	mul.w	r8, r8, lr
 8028ef2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ef6:	fb01 8202 	mla	r2, r1, r2, r8
 8028efa:	9908      	ldr	r1, [sp, #32]
 8028efc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028f00:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028f04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028f06:	fb00 220a 	mla	r2, r0, sl, r2
 8028f0a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8028f0e:	fb09 2900 	mla	r9, r9, r0, r2
 8028f12:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028f16:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028f1a:	ea4c 0c09 	orr.w	ip, ip, r9
 8028f1e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8028f22:	f040 8091 	bne.w	8029048 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8028f26:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8028f2a:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8028f2e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028f32:	f022 0207 	bic.w	r2, r2, #7
 8028f36:	431a      	orrs	r2, r3
 8028f38:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8028f3c:	ea4c 0c02 	orr.w	ip, ip, r2
 8028f40:	f8a7 c000 	strh.w	ip, [r7]
 8028f44:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028f46:	3702      	adds	r7, #2
 8028f48:	441c      	add	r4, r3
 8028f4a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028f4c:	441e      	add	r6, r3
 8028f4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028f50:	3b01      	subs	r3, #1
 8028f52:	9317      	str	r3, [sp, #92]	; 0x5c
 8028f54:	e6c0      	b.n	8028cd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8028f56:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028f58:	441c      	add	r4, r3
 8028f5a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028f5c:	441e      	add	r6, r3
 8028f5e:	9b07      	ldr	r3, [sp, #28]
 8028f60:	3b01      	subs	r3, #1
 8028f62:	9307      	str	r3, [sp, #28]
 8028f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028f66:	3302      	adds	r3, #2
 8028f68:	930a      	str	r3, [sp, #40]	; 0x28
 8028f6a:	e695      	b.n	8028c98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028f6c:	d024      	beq.n	8028fb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8028f6e:	9b07      	ldr	r3, [sp, #28]
 8028f70:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8028f72:	3b01      	subs	r3, #1
 8028f74:	fb00 4003 	mla	r0, r0, r3, r4
 8028f78:	1400      	asrs	r0, r0, #16
 8028f7a:	f53f aeaa 	bmi.w	8028cd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028f7e:	3901      	subs	r1, #1
 8028f80:	4288      	cmp	r0, r1
 8028f82:	f6bf aea6 	bge.w	8028cd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028f86:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8028f88:	fb01 6303 	mla	r3, r1, r3, r6
 8028f8c:	141b      	asrs	r3, r3, #16
 8028f8e:	f53f aea0 	bmi.w	8028cd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028f92:	3a01      	subs	r2, #1
 8028f94:	4293      	cmp	r3, r2
 8028f96:	f6bf ae9c 	bge.w	8028cd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028f9a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028f9e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8028fa2:	f1bb 0f00 	cmp.w	fp, #0
 8028fa6:	f300 809a 	bgt.w	80290de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8028faa:	9b07      	ldr	r3, [sp, #28]
 8028fac:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028fb2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8028fb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028fba:	2b00      	cmp	r3, #0
 8028fbc:	f340 81ec 	ble.w	8029398 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8028fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028fc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028fc6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028fca:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028fce:	eef0 6a48 	vmov.f32	s13, s16
 8028fd2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028fd6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028fda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028fde:	ee16 4a90 	vmov	r4, s13
 8028fe2:	eef0 6a68 	vmov.f32	s13, s17
 8028fe6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028fea:	ee16 6a90 	vmov	r6, s13
 8028fee:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028ff2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028ff6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028ffa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028ffe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029002:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029006:	ee18 2a10 	vmov	r2, s16
 802900a:	eeb0 8a47 	vmov.f32	s16, s14
 802900e:	fb92 f3f3 	sdiv	r3, r2, r3
 8029012:	ee18 2a90 	vmov	r2, s17
 8029016:	932f      	str	r3, [sp, #188]	; 0xbc
 8029018:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802901a:	eef0 8a67 	vmov.f32	s17, s15
 802901e:	fb92 f3f3 	sdiv	r3, r2, r3
 8029022:	9330      	str	r3, [sp, #192]	; 0xc0
 8029024:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029026:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8029028:	3b01      	subs	r3, #1
 802902a:	9316      	str	r3, [sp, #88]	; 0x58
 802902c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802902e:	bf08      	it	eq
 8029030:	4613      	moveq	r3, r2
 8029032:	9307      	str	r3, [sp, #28]
 8029034:	e622      	b.n	8028c7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8029036:	2800      	cmp	r0, #0
 8029038:	f43f ae92 	beq.w	8028d60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802903c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029040:	9308      	str	r3, [sp, #32]
 8029042:	0e1b      	lsrs	r3, r3, #24
 8029044:	9310      	str	r3, [sp, #64]	; 0x40
 8029046:	e68b      	b.n	8028d60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8029048:	8839      	ldrh	r1, [r7, #0]
 802904a:	43db      	mvns	r3, r3
 802904c:	4dd5      	ldr	r5, [pc, #852]	; (80293a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 802904e:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8029052:	fa5f f883 	uxtb.w	r8, r3
 8029056:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802905a:	10c8      	asrs	r0, r1, #3
 802905c:	00cb      	lsls	r3, r1, #3
 802905e:	fb0e fe08 	mul.w	lr, lr, r8
 8029062:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029066:	b2db      	uxtb	r3, r3
 8029068:	f10e 0101 	add.w	r1, lr, #1
 802906c:	fb00 f008 	mul.w	r0, r0, r8
 8029070:	fb03 f308 	mul.w	r3, r3, r8
 8029074:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8029078:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802907c:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029080:	f100 0e01 	add.w	lr, r0, #1
 8029084:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8029088:	b2c9      	uxtb	r1, r1
 802908a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802908e:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8029092:	00d2      	lsls	r2, r2, #3
 8029094:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029098:	430a      	orrs	r2, r1
 802909a:	1c59      	adds	r1, r3, #1
 802909c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80290a0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80290a4:	e748      	b.n	8028f38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80290a6:	f112 0801 	adds.w	r8, r2, #1
 80290aa:	f53f af4b 	bmi.w	8028f44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80290ae:	4543      	cmp	r3, r8
 80290b0:	f6ff af48 	blt.w	8028f44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80290b4:	f11c 0801 	adds.w	r8, ip, #1
 80290b8:	f53f af44 	bmi.w	8028f44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80290bc:	45c6      	cmp	lr, r8
 80290be:	f6ff af41 	blt.w	8028f44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80290c2:	b21b      	sxth	r3, r3
 80290c4:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80290c8:	fa0f f28e 	sxth.w	r2, lr
 80290cc:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80290d0:	9200      	str	r2, [sp, #0]
 80290d2:	4639      	mov	r1, r7
 80290d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80290d6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80290d8:	f7ff fc54 	bl	8028984 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80290dc:	e732      	b.n	8028f44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80290de:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80290e0:	1421      	asrs	r1, r4, #16
 80290e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80290e4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80290e8:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80290ec:	1433      	asrs	r3, r6, #16
 80290ee:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80290f2:	fb07 1303 	mla	r3, r7, r3, r1
 80290f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80290f8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80290fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029100:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029104:	2a00      	cmp	r2, #0
 8029106:	f000 8108 	beq.w	802931a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802910a:	684d      	ldr	r5, [r1, #4]
 802910c:	950d      	str	r5, [sp, #52]	; 0x34
 802910e:	0e2d      	lsrs	r5, r5, #24
 8029110:	9514      	str	r5, [sp, #80]	; 0x50
 8029112:	b178      	cbz	r0, 8029134 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029114:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8029118:	3f01      	subs	r7, #1
 802911a:	00bf      	lsls	r7, r7, #2
 802911c:	3704      	adds	r7, #4
 802911e:	eb01 0e07 	add.w	lr, r1, r7
 8029122:	59c9      	ldr	r1, [r1, r7]
 8029124:	9109      	str	r1, [sp, #36]	; 0x24
 8029126:	0e09      	lsrs	r1, r1, #24
 8029128:	9111      	str	r1, [sp, #68]	; 0x44
 802912a:	f8de 1004 	ldr.w	r1, [lr, #4]
 802912e:	910e      	str	r1, [sp, #56]	; 0x38
 8029130:	0e09      	lsrs	r1, r1, #24
 8029132:	9115      	str	r1, [sp, #84]	; 0x54
 8029134:	b292      	uxth	r2, r2
 8029136:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029138:	b280      	uxth	r0, r0
 802913a:	fb02 f900 	mul.w	r9, r2, r0
 802913e:	0112      	lsls	r2, r2, #4
 8029140:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8029144:	eba2 0e09 	sub.w	lr, r2, r9
 8029148:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802914c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802914e:	b280      	uxth	r0, r0
 8029150:	fa1f fe8e 	uxth.w	lr, lr
 8029154:	1a09      	subs	r1, r1, r0
 8029156:	fb0e f202 	mul.w	r2, lr, r2
 802915a:	b289      	uxth	r1, r1
 802915c:	fb01 220c 	mla	r2, r1, ip, r2
 8029160:	fb00 2205 	mla	r2, r0, r5, r2
 8029164:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029166:	fb09 2205 	mla	r2, r9, r5, r2
 802916a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802916e:	2a00      	cmp	r2, #0
 8029170:	f000 80ca 	beq.w	8029308 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029174:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029178:	d019      	beq.n	80291ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 802917a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802917e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029182:	fb0c fa0a 	mul.w	sl, ip, sl
 8029186:	fb0c fc03 	mul.w	ip, ip, r3
 802918a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802918e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029192:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029196:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802919a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802919e:	4453      	add	r3, sl
 80291a0:	0a3f      	lsrs	r7, r7, #8
 80291a2:	0a1b      	lsrs	r3, r3, #8
 80291a4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80291a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80291ac:	433b      	orrs	r3, r7
 80291ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80291b0:	2dff      	cmp	r5, #255	; 0xff
 80291b2:	d020      	beq.n	80291f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 80291b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80291b6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80291ba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80291bc:	436f      	muls	r7, r5
 80291be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80291c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80291c4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80291c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80291ca:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80291ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80291d2:	fb05 fa0a 	mul.w	sl, r5, sl
 80291d6:	44bc      	add	ip, r7
 80291d8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80291dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80291e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80291e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80291e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80291ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80291f0:	ea4c 050a 	orr.w	r5, ip, sl
 80291f4:	950d      	str	r5, [sp, #52]	; 0x34
 80291f6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80291f8:	2dff      	cmp	r5, #255	; 0xff
 80291fa:	d020      	beq.n	802923e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 80291fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80291fe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029202:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029204:	436f      	muls	r7, r5
 8029206:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029208:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802920c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802920e:	fb05 fa0c 	mul.w	sl, r5, ip
 8029212:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029216:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802921a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802921e:	44bc      	add	ip, r7
 8029220:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029224:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029228:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802922c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029230:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029234:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029238:	ea4c 050a 	orr.w	r5, ip, sl
 802923c:	9509      	str	r5, [sp, #36]	; 0x24
 802923e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029240:	2dff      	cmp	r5, #255	; 0xff
 8029242:	d020      	beq.n	8029286 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8029244:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029246:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802924a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802924c:	436f      	muls	r7, r5
 802924e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029250:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029254:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029258:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802925a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802925e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029262:	fb05 fa0a 	mul.w	sl, r5, sl
 8029266:	44bc      	add	ip, r7
 8029268:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802926c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029270:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029274:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029278:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802927c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029280:	ea4c 050a 	orr.w	r5, ip, sl
 8029284:	950e      	str	r5, [sp, #56]	; 0x38
 8029286:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029288:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802928c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029290:	2aff      	cmp	r2, #255	; 0xff
 8029292:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029296:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029298:	fb0e f707 	mul.w	r7, lr, r7
 802929c:	fb01 770c 	mla	r7, r1, ip, r7
 80292a0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80292a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80292a6:	fb00 770c 	mla	r7, r0, ip, r7
 80292aa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80292ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80292b0:	fb09 770c 	mla	r7, r9, ip, r7
 80292b4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80292b8:	fb0e fe0c 	mul.w	lr, lr, ip
 80292bc:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80292c0:	fb01 e303 	mla	r3, r1, r3, lr
 80292c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80292c6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80292ca:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80292ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80292d0:	fb00 330a 	mla	r3, r0, sl, r3
 80292d4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80292d8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80292dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80292e0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80292e4:	ea47 070c 	orr.w	r7, r7, ip
 80292e8:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80292ec:	d11e      	bne.n	802932c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 80292ee:	097a      	lsrs	r2, r7, #5
 80292f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80292f4:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80292f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80292fc:	f023 0307 	bic.w	r3, r3, #7
 8029300:	4313      	orrs	r3, r2
 8029302:	431f      	orrs	r7, r3
 8029304:	f8a8 7000 	strh.w	r7, [r8]
 8029308:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802930a:	f108 0802 	add.w	r8, r8, #2
 802930e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8029312:	441c      	add	r4, r3
 8029314:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029316:	441e      	add	r6, r3
 8029318:	e643      	b.n	8028fa2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802931a:	2800      	cmp	r0, #0
 802931c:	f43f af0a 	beq.w	8029134 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029320:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8029324:	9109      	str	r1, [sp, #36]	; 0x24
 8029326:	0e09      	lsrs	r1, r1, #24
 8029328:	9111      	str	r1, [sp, #68]	; 0x44
 802932a:	e703      	b.n	8029134 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802932c:	f8b8 1000 	ldrh.w	r1, [r8]
 8029330:	43d2      	mvns	r2, r2
 8029332:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8029336:	fa5f fe82 	uxtb.w	lr, r2
 802933a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802933e:	10c8      	asrs	r0, r1, #3
 8029340:	00ca      	lsls	r2, r1, #3
 8029342:	fb0c fc0e 	mul.w	ip, ip, lr
 8029346:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802934a:	b2d2      	uxtb	r2, r2
 802934c:	f10c 0101 	add.w	r1, ip, #1
 8029350:	fb00 f00e 	mul.w	r0, r0, lr
 8029354:	fb02 f20e 	mul.w	r2, r2, lr
 8029358:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802935c:	0c39      	lsrs	r1, r7, #16
 802935e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029362:	4910      	ldr	r1, [pc, #64]	; (80293a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8029364:	fa5f fc8c 	uxtb.w	ip, ip
 8029368:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802936c:	1c41      	adds	r1, r0, #1
 802936e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029372:	1c51      	adds	r1, r2, #1
 8029374:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029378:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802937c:	00c0      	lsls	r0, r0, #3
 802937e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8029382:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029386:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802938a:	ea4c 0c00 	orr.w	ip, ip, r0
 802938e:	ea47 0c0c 	orr.w	ip, r7, ip
 8029392:	f8a8 c000 	strh.w	ip, [r8]
 8029396:	e7b7      	b.n	8029308 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029398:	b01b      	add	sp, #108	; 0x6c
 802939a:	ecbd 8b08 	vpop	{d8-d11}
 802939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80293a2:	bf00      	nop
 80293a4:	fffff800 	.word	0xfffff800

080293a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80293a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80293ac:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80293b0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80293b4:	2c00      	cmp	r4, #0
 80293b6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80293ba:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80293be:	fb04 ce03 	mla	lr, r4, r3, ip
 80293c2:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80293c6:	db60      	blt.n	802948a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80293c8:	45a1      	cmp	r9, r4
 80293ca:	dd5e      	ble.n	802948a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80293cc:	f1bc 0f00 	cmp.w	ip, #0
 80293d0:	db59      	blt.n	8029486 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80293d2:	45e0      	cmp	r8, ip
 80293d4:	dd57      	ble.n	8029486 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80293d6:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80293da:	f01e 0f01 	tst.w	lr, #1
 80293de:	5c16      	ldrb	r6, [r2, r0]
 80293e0:	bf0c      	ite	eq
 80293e2:	f006 060f 	andeq.w	r6, r6, #15
 80293e6:	1136      	asrne	r6, r6, #4
 80293e8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80293ec:	b2f6      	uxtb	r6, r6
 80293ee:	f11c 0001 	adds.w	r0, ip, #1
 80293f2:	d44d      	bmi.n	8029490 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80293f4:	4580      	cmp	r8, r0
 80293f6:	dd4b      	ble.n	8029490 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80293f8:	2d00      	cmp	r5, #0
 80293fa:	d04b      	beq.n	8029494 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 80293fc:	f10e 0a01 	add.w	sl, lr, #1
 8029400:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8029404:	f01a 0f01 	tst.w	sl, #1
 8029408:	5c10      	ldrb	r0, [r2, r0]
 802940a:	bf0c      	ite	eq
 802940c:	f000 000f 	andeq.w	r0, r0, #15
 8029410:	1100      	asrne	r0, r0, #4
 8029412:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029416:	b2c0      	uxtb	r0, r0
 8029418:	3401      	adds	r4, #1
 802941a:	d43f      	bmi.n	802949c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802941c:	45a1      	cmp	r9, r4
 802941e:	dd3d      	ble.n	802949c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8029420:	2f00      	cmp	r7, #0
 8029422:	f000 80a8 	beq.w	8029576 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 8029426:	f1bc 0f00 	cmp.w	ip, #0
 802942a:	db35      	blt.n	8029498 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802942c:	45e0      	cmp	r8, ip
 802942e:	dd33      	ble.n	8029498 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8029430:	eb03 090e 	add.w	r9, r3, lr
 8029434:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029438:	f019 0f01 	tst.w	r9, #1
 802943c:	5d14      	ldrb	r4, [r2, r4]
 802943e:	bf0c      	ite	eq
 8029440:	f004 040f 	andeq.w	r4, r4, #15
 8029444:	1124      	asrne	r4, r4, #4
 8029446:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802944a:	b2e4      	uxtb	r4, r4
 802944c:	f11c 0c01 	adds.w	ip, ip, #1
 8029450:	d427      	bmi.n	80294a2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8029452:	45e0      	cmp	r8, ip
 8029454:	dd25      	ble.n	80294a2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8029456:	b335      	cbz	r5, 80294a6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8029458:	3301      	adds	r3, #1
 802945a:	449e      	add	lr, r3
 802945c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029460:	f01e 0f01 	tst.w	lr, #1
 8029464:	5cd2      	ldrb	r2, [r2, r3]
 8029466:	bf0c      	ite	eq
 8029468:	f002 020f 	andeq.w	r2, r2, #15
 802946c:	1112      	asrne	r2, r2, #4
 802946e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029472:	b2d3      	uxtb	r3, r2
 8029474:	2d0f      	cmp	r5, #15
 8029476:	d917      	bls.n	80294a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8029478:	4b42      	ldr	r3, [pc, #264]	; (8029584 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 802947a:	f240 11f9 	movw	r1, #505	; 0x1f9
 802947e:	4a42      	ldr	r2, [pc, #264]	; (8029588 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8029480:	4842      	ldr	r0, [pc, #264]	; (802958c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8029482:	f001 f8e7 	bl	802a654 <__assert_func>
 8029486:	2600      	movs	r6, #0
 8029488:	e7b1      	b.n	80293ee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802948a:	2000      	movs	r0, #0
 802948c:	4606      	mov	r6, r0
 802948e:	e7c3      	b.n	8029418 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029490:	2000      	movs	r0, #0
 8029492:	e7c1      	b.n	8029418 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029494:	4628      	mov	r0, r5
 8029496:	e7bf      	b.n	8029418 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029498:	2400      	movs	r4, #0
 802949a:	e7d7      	b.n	802944c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 802949c:	2300      	movs	r3, #0
 802949e:	461c      	mov	r4, r3
 80294a0:	e7e8      	b.n	8029474 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80294a2:	2300      	movs	r3, #0
 80294a4:	e7e6      	b.n	8029474 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80294a6:	462b      	mov	r3, r5
 80294a8:	2f0f      	cmp	r7, #15
 80294aa:	d8e5      	bhi.n	8029478 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80294ac:	b2ad      	uxth	r5, r5
 80294ae:	b2bf      	uxth	r7, r7
 80294b0:	fb05 fc07 	mul.w	ip, r5, r7
 80294b4:	012d      	lsls	r5, r5, #4
 80294b6:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80294ba:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80294be:	eba5 050c 	sub.w	r5, r5, ip
 80294c2:	b2bf      	uxth	r7, r7
 80294c4:	b2ad      	uxth	r5, r5
 80294c6:	1bd2      	subs	r2, r2, r7
 80294c8:	4368      	muls	r0, r5
 80294ca:	b292      	uxth	r2, r2
 80294cc:	fb06 0002 	mla	r0, r6, r2, r0
 80294d0:	fb07 0404 	mla	r4, r7, r4, r0
 80294d4:	fb0c 4303 	mla	r3, ip, r3, r4
 80294d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80294dc:	b1b3      	cbz	r3, 802950c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 80294de:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80294e2:	435a      	muls	r2, r3
 80294e4:	1c53      	adds	r3, r2, #1
 80294e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80294ea:	4a29      	ldr	r2, [pc, #164]	; (8029590 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 80294ec:	121b      	asrs	r3, r3, #8
 80294ee:	6812      	ldr	r2, [r2, #0]
 80294f0:	2bff      	cmp	r3, #255	; 0xff
 80294f2:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80294f6:	d10b      	bne.n	8029510 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 80294f8:	0950      	lsrs	r0, r2, #5
 80294fa:	4b26      	ldr	r3, [pc, #152]	; (8029594 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 80294fc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029500:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029504:	4033      	ands	r3, r6
 8029506:	4318      	orrs	r0, r3
 8029508:	4302      	orrs	r2, r0
 802950a:	800a      	strh	r2, [r1, #0]
 802950c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029510:	880d      	ldrh	r5, [r1, #0]
 8029512:	b29f      	uxth	r7, r3
 8029514:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029518:	43db      	mvns	r3, r3
 802951a:	122c      	asrs	r4, r5, #8
 802951c:	fb10 f007 	smulbb	r0, r0, r7
 8029520:	b2db      	uxtb	r3, r3
 8029522:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029526:	b2f6      	uxtb	r6, r6
 8029528:	b2d2      	uxtb	r2, r2
 802952a:	fb04 0403 	mla	r4, r4, r3, r0
 802952e:	10e8      	asrs	r0, r5, #3
 8029530:	fb12 f207 	smulbb	r2, r2, r7
 8029534:	00ed      	lsls	r5, r5, #3
 8029536:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802953a:	b2a4      	uxth	r4, r4
 802953c:	fb16 f607 	smulbb	r6, r6, r7
 8029540:	b2ed      	uxtb	r5, r5
 8029542:	fb00 6603 	mla	r6, r0, r3, r6
 8029546:	fb05 2303 	mla	r3, r5, r3, r2
 802954a:	b2b0      	uxth	r0, r6
 802954c:	b29a      	uxth	r2, r3
 802954e:	1c63      	adds	r3, r4, #1
 8029550:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029554:	1c53      	adds	r3, r2, #1
 8029556:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802955a:	1c42      	adds	r2, r0, #1
 802955c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029560:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029564:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029568:	0940      	lsrs	r0, r0, #5
 802956a:	4323      	orrs	r3, r4
 802956c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029570:	4303      	orrs	r3, r0
 8029572:	800b      	strh	r3, [r1, #0]
 8029574:	e7ca      	b.n	802950c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8029576:	2d0f      	cmp	r5, #15
 8029578:	f63f af7e 	bhi.w	8029478 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802957c:	463b      	mov	r3, r7
 802957e:	463c      	mov	r4, r7
 8029580:	e794      	b.n	80294ac <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8029582:	bf00      	nop
 8029584:	0803215f 	.word	0x0803215f
 8029588:	0803268e 	.word	0x0803268e
 802958c:	0803212c 	.word	0x0803212c
 8029590:	200153a8 	.word	0x200153a8
 8029594:	00fff800 	.word	0x00fff800

08029598 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802959c:	ed2d 8b08 	vpush	{d8-d11}
 80295a0:	b097      	sub	sp, #92	; 0x5c
 80295a2:	eeb0 aa40 	vmov.f32	s20, s0
 80295a6:	eef0 9a60 	vmov.f32	s19, s1
 80295aa:	9214      	str	r2, [sp, #80]	; 0x50
 80295ac:	eeb0 9a41 	vmov.f32	s18, s2
 80295b0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80295b2:	eeb0 8a62 	vmov.f32	s16, s5
 80295b6:	9309      	str	r3, [sp, #36]	; 0x24
 80295b8:	eef0 8a43 	vmov.f32	s17, s6
 80295bc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80295c0:	eef0 ba44 	vmov.f32	s23, s8
 80295c4:	9015      	str	r0, [sp, #84]	; 0x54
 80295c6:	eeb0 ba64 	vmov.f32	s22, s9
 80295ca:	6850      	ldr	r0, [r2, #4]
 80295cc:	eef0 aa45 	vmov.f32	s21, s10
 80295d0:	910d      	str	r1, [sp, #52]	; 0x34
 80295d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80295d4:	6812      	ldr	r2, [r2, #0]
 80295d6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80295da:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 80295de:	fb00 1303 	mla	r3, r0, r3, r1
 80295e2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80295e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80295e8:	689b      	ldr	r3, [r3, #8]
 80295ea:	3301      	adds	r3, #1
 80295ec:	f023 0301 	bic.w	r3, r3, #1
 80295f0:	930a      	str	r3, [sp, #40]	; 0x28
 80295f2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80295f4:	681f      	ldr	r7, [r3, #0]
 80295f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80295f8:	2b00      	cmp	r3, #0
 80295fa:	dc03      	bgt.n	8029604 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80295fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80295fe:	2b00      	cmp	r3, #0
 8029600:	f340 8289 	ble.w	8029b16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8029604:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029606:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802960a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802960e:	1e48      	subs	r0, r1, #1
 8029610:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8029614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029616:	2b00      	cmp	r3, #0
 8029618:	f340 80c5 	ble.w	80297a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802961c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029620:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029624:	d406      	bmi.n	8029634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029626:	4586      	cmp	lr, r0
 8029628:	da04      	bge.n	8029634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802962a:	2b00      	cmp	r3, #0
 802962c:	db02      	blt.n	8029634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802962e:	4563      	cmp	r3, ip
 8029630:	f2c0 80ba 	blt.w	80297a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8029634:	f11e 0e01 	adds.w	lr, lr, #1
 8029638:	f100 80ab 	bmi.w	8029792 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802963c:	4571      	cmp	r1, lr
 802963e:	f2c0 80a8 	blt.w	8029792 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029642:	3301      	adds	r3, #1
 8029644:	f100 80a5 	bmi.w	8029792 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029648:	429a      	cmp	r2, r3
 802964a:	f2c0 80a2 	blt.w	8029792 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802964e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029650:	46c8      	mov	r8, r9
 8029652:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8029656:	930e      	str	r3, [sp, #56]	; 0x38
 8029658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802965a:	2b00      	cmp	r3, #0
 802965c:	f340 80c4 	ble.w	80297e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8029660:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029662:	1430      	asrs	r0, r6, #16
 8029664:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029668:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802966c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029670:	1423      	asrs	r3, r4, #16
 8029672:	f100 814f 	bmi.w	8029914 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029676:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 802967a:	455b      	cmp	r3, fp
 802967c:	f280 814a 	bge.w	8029914 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029680:	2800      	cmp	r0, #0
 8029682:	f2c0 8147 	blt.w	8029914 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029686:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
 802968a:	4558      	cmp	r0, fp
 802968c:	f280 8142 	bge.w	8029914 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029690:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029692:	fb00 3305 	mla	r3, r0, r5, r3
 8029696:	0858      	lsrs	r0, r3, #1
 8029698:	07dd      	lsls	r5, r3, #31
 802969a:	f817 c000 	ldrb.w	ip, [r7, r0]
 802969e:	bf54      	ite	pl
 80296a0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80296a4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80296a8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80296ac:	fa5f fc8c 	uxtb.w	ip, ip
 80296b0:	2a00      	cmp	r2, #0
 80296b2:	f000 80dd 	beq.w	8029870 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80296b6:	1c58      	adds	r0, r3, #1
 80296b8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80296bc:	07c0      	lsls	r0, r0, #31
 80296be:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80296c2:	bf54      	ite	pl
 80296c4:	f00e 0e0f 	andpl.w	lr, lr, #15
 80296c8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80296cc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80296d0:	fa5f f08e 	uxtb.w	r0, lr
 80296d4:	9010      	str	r0, [sp, #64]	; 0x40
 80296d6:	b1d9      	cbz	r1, 8029710 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 80296d8:	4453      	add	r3, sl
 80296da:	0858      	lsrs	r0, r3, #1
 80296dc:	07dd      	lsls	r5, r3, #31
 80296de:	f103 0301 	add.w	r3, r3, #1
 80296e2:	5c38      	ldrb	r0, [r7, r0]
 80296e4:	bf54      	ite	pl
 80296e6:	f000 000f 	andpl.w	r0, r0, #15
 80296ea:	1100      	asrmi	r0, r0, #4
 80296ec:	07dd      	lsls	r5, r3, #31
 80296ee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80296f2:	b2c0      	uxtb	r0, r0
 80296f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80296f6:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80296fa:	f817 e000 	ldrb.w	lr, [r7, r0]
 80296fe:	bf54      	ite	pl
 8029700:	f00e 030f 	andpl.w	r3, lr, #15
 8029704:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029708:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802970c:	b2db      	uxtb	r3, r3
 802970e:	9311      	str	r3, [sp, #68]	; 0x44
 8029710:	b292      	uxth	r2, r2
 8029712:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029714:	b289      	uxth	r1, r1
 8029716:	fb02 f301 	mul.w	r3, r2, r1
 802971a:	0112      	lsls	r2, r2, #4
 802971c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029720:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029724:	1ad2      	subs	r2, r2, r3
 8029726:	b289      	uxth	r1, r1
 8029728:	b292      	uxth	r2, r2
 802972a:	1a40      	subs	r0, r0, r1
 802972c:	436a      	muls	r2, r5
 802972e:	b280      	uxth	r0, r0
 8029730:	fb0c 2c00 	mla	ip, ip, r0, r2
 8029734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029736:	fb01 c102 	mla	r1, r1, r2, ip
 802973a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802973c:	fb03 1302 	mla	r3, r3, r2, r1
 8029740:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029744:	b1db      	cbz	r3, 802977e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029748:	4353      	muls	r3, r2
 802974a:	1c5a      	adds	r2, r3, #1
 802974c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029750:	4ac6      	ldr	r2, [pc, #792]	; (8029a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029752:	121b      	asrs	r3, r3, #8
 8029754:	6812      	ldr	r2, [r2, #0]
 8029756:	2bff      	cmp	r3, #255	; 0xff
 8029758:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802975c:	f040 8099 	bne.w	8029892 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8029760:	0953      	lsrs	r3, r2, #5
 8029762:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8029766:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802976a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802976e:	f02c 0c07 	bic.w	ip, ip, #7
 8029772:	ea43 0c0c 	orr.w	ip, r3, ip
 8029776:	ea4c 0202 	orr.w	r2, ip, r2
 802977a:	f8a8 2000 	strh.w	r2, [r8]
 802977e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029780:	f108 0802 	add.w	r8, r8, #2
 8029784:	441c      	add	r4, r3
 8029786:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029788:	441e      	add	r6, r3
 802978a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802978c:	3b01      	subs	r3, #1
 802978e:	930e      	str	r3, [sp, #56]	; 0x38
 8029790:	e762      	b.n	8029658 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8029792:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029794:	f109 0902 	add.w	r9, r9, #2
 8029798:	441c      	add	r4, r3
 802979a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802979c:	441e      	add	r6, r3
 802979e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80297a0:	3b01      	subs	r3, #1
 80297a2:	9309      	str	r3, [sp, #36]	; 0x24
 80297a4:	e736      	b.n	8029614 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80297a6:	d024      	beq.n	80297f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80297a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80297aa:	982b      	ldr	r0, [sp, #172]	; 0xac
 80297ac:	3b01      	subs	r3, #1
 80297ae:	fb00 4003 	mla	r0, r0, r3, r4
 80297b2:	1400      	asrs	r0, r0, #16
 80297b4:	f53f af4b 	bmi.w	802964e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80297b8:	3901      	subs	r1, #1
 80297ba:	4288      	cmp	r0, r1
 80297bc:	f6bf af47 	bge.w	802964e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80297c0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80297c2:	fb01 6303 	mla	r3, r1, r3, r6
 80297c6:	141b      	asrs	r3, r3, #16
 80297c8:	f53f af41 	bmi.w	802964e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80297cc:	3a01      	subs	r2, #1
 80297ce:	4293      	cmp	r3, r2
 80297d0:	f6bf af3d 	bge.w	802964e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80297d4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80297d8:	46c8      	mov	r8, r9
 80297da:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80297de:	930e      	str	r3, [sp, #56]	; 0x38
 80297e0:	f1bb 0f00 	cmp.w	fp, #0
 80297e4:	f300 80b7 	bgt.w	8029956 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80297e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80297ea:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80297ee:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80297f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80297f4:	2b00      	cmp	r3, #0
 80297f6:	f340 818e 	ble.w	8029b16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80297fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80297fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029800:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029804:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029808:	eef0 6a48 	vmov.f32	s13, s16
 802980c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029810:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029814:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029818:	ee16 4a90 	vmov	r4, s13
 802981c:	eef0 6a68 	vmov.f32	s13, s17
 8029820:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029824:	ee16 6a90 	vmov	r6, s13
 8029828:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802982c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029830:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029834:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029838:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802983c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029840:	ee18 2a10 	vmov	r2, s16
 8029844:	eeb0 8a47 	vmov.f32	s16, s14
 8029848:	fb92 f3f3 	sdiv	r3, r2, r3
 802984c:	ee18 2a90 	vmov	r2, s17
 8029850:	932b      	str	r3, [sp, #172]	; 0xac
 8029852:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029854:	eef0 8a67 	vmov.f32	s17, s15
 8029858:	fb92 f3f3 	sdiv	r3, r2, r3
 802985c:	932c      	str	r3, [sp, #176]	; 0xb0
 802985e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029860:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029862:	3b01      	subs	r3, #1
 8029864:	930d      	str	r3, [sp, #52]	; 0x34
 8029866:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029868:	bf08      	it	eq
 802986a:	4613      	moveq	r3, r2
 802986c:	9309      	str	r3, [sp, #36]	; 0x24
 802986e:	e6c2      	b.n	80295f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8029870:	2900      	cmp	r1, #0
 8029872:	f43f af4d 	beq.w	8029710 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8029876:	eb0a 0003 	add.w	r0, sl, r3
 802987a:	0843      	lsrs	r3, r0, #1
 802987c:	07c0      	lsls	r0, r0, #31
 802987e:	5cfb      	ldrb	r3, [r7, r3]
 8029880:	bf54      	ite	pl
 8029882:	f003 030f 	andpl.w	r3, r3, #15
 8029886:	111b      	asrmi	r3, r3, #4
 8029888:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802988c:	b2db      	uxtb	r3, r3
 802988e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029890:	e73e      	b.n	8029710 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8029892:	f8b8 e000 	ldrh.w	lr, [r8]
 8029896:	fa1f fb83 	uxth.w	fp, r3
 802989a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802989e:	43db      	mvns	r3, r3
 80298a0:	ea4f 202e 	mov.w	r0, lr, asr #8
 80298a4:	fb11 f10b 	smulbb	r1, r1, fp
 80298a8:	b2db      	uxtb	r3, r3
 80298aa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80298ae:	fa5f fc8c 	uxtb.w	ip, ip
 80298b2:	b2d2      	uxtb	r2, r2
 80298b4:	fb00 1003 	mla	r0, r0, r3, r1
 80298b8:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80298bc:	fb1c fc0b 	smulbb	ip, ip, fp
 80298c0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80298c4:	b280      	uxth	r0, r0
 80298c6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80298ca:	fb12 fb0b 	smulbb	fp, r2, fp
 80298ce:	fa5f fe8e 	uxtb.w	lr, lr
 80298d2:	fb01 cc03 	mla	ip, r1, r3, ip
 80298d6:	fb0e bb03 	mla	fp, lr, r3, fp
 80298da:	1c43      	adds	r3, r0, #1
 80298dc:	fa1f fc8c 	uxth.w	ip, ip
 80298e0:	fa1f fb8b 	uxth.w	fp, fp
 80298e4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80298e8:	f10c 0101 	add.w	r1, ip, #1
 80298ec:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80298f0:	f10b 0001 	add.w	r0, fp, #1
 80298f4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80298f8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80298fc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029900:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029904:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029908:	4318      	orrs	r0, r3
 802990a:	ea40 000c 	orr.w	r0, r0, ip
 802990e:	f8a8 0000 	strh.w	r0, [r8]
 8029912:	e734      	b.n	802977e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029914:	f113 0b01 	adds.w	fp, r3, #1
 8029918:	f53f af31 	bmi.w	802977e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802991c:	45dc      	cmp	ip, fp
 802991e:	f6ff af2e 	blt.w	802977e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029922:	f110 0b01 	adds.w	fp, r0, #1
 8029926:	f53f af2a 	bmi.w	802977e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802992a:	45de      	cmp	lr, fp
 802992c:	f6ff af27 	blt.w	802977e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029930:	9302      	str	r3, [sp, #8]
 8029932:	fa0f f38e 	sxth.w	r3, lr
 8029936:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029938:	9301      	str	r3, [sp, #4]
 802993a:	fa0f f38c 	sxth.w	r3, ip
 802993e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029942:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8029946:	9300      	str	r3, [sp, #0]
 8029948:	463a      	mov	r2, r7
 802994a:	4653      	mov	r3, sl
 802994c:	4641      	mov	r1, r8
 802994e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8029950:	f7ff fd2a 	bl	80293a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8029954:	e713      	b.n	802977e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029956:	1422      	asrs	r2, r4, #16
 8029958:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802995a:	1433      	asrs	r3, r6, #16
 802995c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029960:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029964:	fb05 2303 	mla	r3, r5, r3, r2
 8029968:	085a      	lsrs	r2, r3, #1
 802996a:	07dd      	lsls	r5, r3, #31
 802996c:	5cba      	ldrb	r2, [r7, r2]
 802996e:	bf54      	ite	pl
 8029970:	f002 020f 	andpl.w	r2, r2, #15
 8029974:	1112      	asrmi	r2, r2, #4
 8029976:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802997a:	b2d2      	uxtb	r2, r2
 802997c:	2900      	cmp	r1, #0
 802997e:	d077      	beq.n	8029a70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8029980:	f103 0e01 	add.w	lr, r3, #1
 8029984:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8029988:	f01e 0f01 	tst.w	lr, #1
 802998c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029990:	bf0c      	ite	eq
 8029992:	f00c 0c0f 	andeq.w	ip, ip, #15
 8029996:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802999a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802999e:	fa5f f58c 	uxtb.w	r5, ip
 80299a2:	9512      	str	r5, [sp, #72]	; 0x48
 80299a4:	b308      	cbz	r0, 80299ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80299a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80299a8:	442b      	add	r3, r5
 80299aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80299ae:	07dd      	lsls	r5, r3, #31
 80299b0:	f103 0301 	add.w	r3, r3, #1
 80299b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80299b8:	bf54      	ite	pl
 80299ba:	f00c 0c0f 	andpl.w	ip, ip, #15
 80299be:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80299c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80299c6:	fa5f f58c 	uxtb.w	r5, ip
 80299ca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80299ce:	950c      	str	r5, [sp, #48]	; 0x30
 80299d0:	07dd      	lsls	r5, r3, #31
 80299d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80299d6:	bf54      	ite	pl
 80299d8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80299dc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80299e0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80299e4:	fa5f f38c 	uxtb.w	r3, ip
 80299e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80299ea:	b289      	uxth	r1, r1
 80299ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80299ee:	b280      	uxth	r0, r0
 80299f0:	fb01 f300 	mul.w	r3, r1, r0
 80299f4:	0109      	lsls	r1, r1, #4
 80299f6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80299fa:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80299fe:	1ac9      	subs	r1, r1, r3
 8029a00:	b280      	uxth	r0, r0
 8029a02:	b289      	uxth	r1, r1
 8029a04:	ebac 0c00 	sub.w	ip, ip, r0
 8029a08:	4369      	muls	r1, r5
 8029a0a:	fa1f fc8c 	uxth.w	ip, ip
 8029a0e:	fb02 120c 	mla	r2, r2, ip, r1
 8029a12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029a14:	fb00 2001 	mla	r0, r0, r1, r2
 8029a18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8029a1a:	fb03 0302 	mla	r3, r3, r2, r0
 8029a1e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029a22:	b1d3      	cbz	r3, 8029a5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029a24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029a26:	4353      	muls	r3, r2
 8029a28:	1c5a      	adds	r2, r3, #1
 8029a2a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029a2e:	4a0f      	ldr	r2, [pc, #60]	; (8029a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029a30:	121b      	asrs	r3, r3, #8
 8029a32:	6812      	ldr	r2, [r2, #0]
 8029a34:	2bff      	cmp	r3, #255	; 0xff
 8029a36:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029a3a:	d12d      	bne.n	8029a98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8029a3c:	0953      	lsrs	r3, r2, #5
 8029a3e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8029a42:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029a46:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029a4a:	f02c 0c07 	bic.w	ip, ip, #7
 8029a4e:	ea43 0c0c 	orr.w	ip, r3, ip
 8029a52:	ea4c 0202 	orr.w	r2, ip, r2
 8029a56:	f8a8 2000 	strh.w	r2, [r8]
 8029a5a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029a5c:	f108 0802 	add.w	r8, r8, #2
 8029a60:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8029a64:	441c      	add	r4, r3
 8029a66:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029a68:	441e      	add	r6, r3
 8029a6a:	e6b9      	b.n	80297e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8029a6c:	200153a8 	.word	0x200153a8
 8029a70:	2800      	cmp	r0, #0
 8029a72:	d0ba      	beq.n	80299ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029a74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029a76:	442b      	add	r3, r5
 8029a78:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029a7c:	07db      	lsls	r3, r3, #31
 8029a7e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029a82:	bf54      	ite	pl
 8029a84:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029a88:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029a8c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029a90:	fa5f f38c 	uxtb.w	r3, ip
 8029a94:	930c      	str	r3, [sp, #48]	; 0x30
 8029a96:	e7a8      	b.n	80299ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029a98:	f8b8 e000 	ldrh.w	lr, [r8]
 8029a9c:	fa1f fa83 	uxth.w	sl, r3
 8029aa0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029aa4:	43db      	mvns	r3, r3
 8029aa6:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029aaa:	fb11 f10a 	smulbb	r1, r1, sl
 8029aae:	b2db      	uxtb	r3, r3
 8029ab0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029ab4:	b2d2      	uxtb	r2, r2
 8029ab6:	fa5f fc8c 	uxtb.w	ip, ip
 8029aba:	fb00 1003 	mla	r0, r0, r3, r1
 8029abe:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029ac2:	fb12 f20a 	smulbb	r2, r2, sl
 8029ac6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029aca:	b280      	uxth	r0, r0
 8029acc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029ad0:	fb1c fc0a 	smulbb	ip, ip, sl
 8029ad4:	fa5f fe8e 	uxtb.w	lr, lr
 8029ad8:	fb0e 2203 	mla	r2, lr, r3, r2
 8029adc:	fb01 cc03 	mla	ip, r1, r3, ip
 8029ae0:	1c43      	adds	r3, r0, #1
 8029ae2:	b292      	uxth	r2, r2
 8029ae4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029ae8:	1c51      	adds	r1, r2, #1
 8029aea:	fa1f fc8c 	uxth.w	ip, ip
 8029aee:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8029af2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8029af6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029afa:	4308      	orrs	r0, r1
 8029afc:	f10c 0101 	add.w	r1, ip, #1
 8029b00:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029b04:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029b08:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029b0c:	ea40 000c 	orr.w	r0, r0, ip
 8029b10:	f8a8 0000 	strh.w	r0, [r8]
 8029b14:	e7a1      	b.n	8029a5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029b16:	b017      	add	sp, #92	; 0x5c
 8029b18:	ecbd 8b08 	vpop	{d8-d11}
 8029b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029b20 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8029b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029b24:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8029b28:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029b2c:	2c00      	cmp	r4, #0
 8029b2e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029b32:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8029b36:	fb04 ce03 	mla	lr, r4, r3, ip
 8029b3a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8029b3e:	db60      	blt.n	8029c02 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029b40:	45a1      	cmp	r9, r4
 8029b42:	dd5e      	ble.n	8029c02 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029b44:	f1bc 0f00 	cmp.w	ip, #0
 8029b48:	db59      	blt.n	8029bfe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8029b4a:	45e0      	cmp	r8, ip
 8029b4c:	dd57      	ble.n	8029bfe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8029b4e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8029b52:	f01e 0f01 	tst.w	lr, #1
 8029b56:	5c16      	ldrb	r6, [r2, r0]
 8029b58:	bf0c      	ite	eq
 8029b5a:	f006 060f 	andeq.w	r6, r6, #15
 8029b5e:	1136      	asrne	r6, r6, #4
 8029b60:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029b64:	b2f6      	uxtb	r6, r6
 8029b66:	f11c 0001 	adds.w	r0, ip, #1
 8029b6a:	d44d      	bmi.n	8029c08 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8029b6c:	4580      	cmp	r8, r0
 8029b6e:	dd4b      	ble.n	8029c08 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8029b70:	2d00      	cmp	r5, #0
 8029b72:	d04b      	beq.n	8029c0c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8029b74:	f10e 0a01 	add.w	sl, lr, #1
 8029b78:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8029b7c:	f01a 0f01 	tst.w	sl, #1
 8029b80:	5c10      	ldrb	r0, [r2, r0]
 8029b82:	bf0c      	ite	eq
 8029b84:	f000 000f 	andeq.w	r0, r0, #15
 8029b88:	1100      	asrne	r0, r0, #4
 8029b8a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029b8e:	b2c0      	uxtb	r0, r0
 8029b90:	3401      	adds	r4, #1
 8029b92:	d43f      	bmi.n	8029c14 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8029b94:	45a1      	cmp	r9, r4
 8029b96:	dd3d      	ble.n	8029c14 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8029b98:	2f00      	cmp	r7, #0
 8029b9a:	f000 8093 	beq.w	8029cc4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8029b9e:	f1bc 0f00 	cmp.w	ip, #0
 8029ba2:	db35      	blt.n	8029c10 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8029ba4:	45e0      	cmp	r8, ip
 8029ba6:	dd33      	ble.n	8029c10 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8029ba8:	eb03 090e 	add.w	r9, r3, lr
 8029bac:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029bb0:	f019 0f01 	tst.w	r9, #1
 8029bb4:	5d14      	ldrb	r4, [r2, r4]
 8029bb6:	bf0c      	ite	eq
 8029bb8:	f004 040f 	andeq.w	r4, r4, #15
 8029bbc:	1124      	asrne	r4, r4, #4
 8029bbe:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029bc2:	b2e4      	uxtb	r4, r4
 8029bc4:	f11c 0c01 	adds.w	ip, ip, #1
 8029bc8:	d427      	bmi.n	8029c1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8029bca:	45e0      	cmp	r8, ip
 8029bcc:	dd25      	ble.n	8029c1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8029bce:	b335      	cbz	r5, 8029c1e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8029bd0:	3301      	adds	r3, #1
 8029bd2:	449e      	add	lr, r3
 8029bd4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029bd8:	f01e 0f01 	tst.w	lr, #1
 8029bdc:	5cd2      	ldrb	r2, [r2, r3]
 8029bde:	bf0c      	ite	eq
 8029be0:	f002 020f 	andeq.w	r2, r2, #15
 8029be4:	1112      	asrne	r2, r2, #4
 8029be6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029bea:	b2d3      	uxtb	r3, r2
 8029bec:	2d0f      	cmp	r5, #15
 8029bee:	d917      	bls.n	8029c20 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8029bf0:	4b37      	ldr	r3, [pc, #220]	; (8029cd0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 8029bf2:	f240 11f9 	movw	r1, #505	; 0x1f9
 8029bf6:	4a37      	ldr	r2, [pc, #220]	; (8029cd4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 8029bf8:	4837      	ldr	r0, [pc, #220]	; (8029cd8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8029bfa:	f000 fd2b 	bl	802a654 <__assert_func>
 8029bfe:	2600      	movs	r6, #0
 8029c00:	e7b1      	b.n	8029b66 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8029c02:	2000      	movs	r0, #0
 8029c04:	4606      	mov	r6, r0
 8029c06:	e7c3      	b.n	8029b90 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029c08:	2000      	movs	r0, #0
 8029c0a:	e7c1      	b.n	8029b90 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029c0c:	4628      	mov	r0, r5
 8029c0e:	e7bf      	b.n	8029b90 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029c10:	2400      	movs	r4, #0
 8029c12:	e7d7      	b.n	8029bc4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8029c14:	2300      	movs	r3, #0
 8029c16:	461c      	mov	r4, r3
 8029c18:	e7e8      	b.n	8029bec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8029c1a:	2300      	movs	r3, #0
 8029c1c:	e7e6      	b.n	8029bec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8029c1e:	462b      	mov	r3, r5
 8029c20:	2f0f      	cmp	r7, #15
 8029c22:	d8e5      	bhi.n	8029bf0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8029c24:	b2ad      	uxth	r5, r5
 8029c26:	b2bf      	uxth	r7, r7
 8029c28:	fb05 fc07 	mul.w	ip, r5, r7
 8029c2c:	012d      	lsls	r5, r5, #4
 8029c2e:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029c32:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8029c36:	eba5 050c 	sub.w	r5, r5, ip
 8029c3a:	b2bf      	uxth	r7, r7
 8029c3c:	b2ad      	uxth	r5, r5
 8029c3e:	1bd2      	subs	r2, r2, r7
 8029c40:	4368      	muls	r0, r5
 8029c42:	b292      	uxth	r2, r2
 8029c44:	fb06 0002 	mla	r0, r6, r2, r0
 8029c48:	fb07 0404 	mla	r4, r7, r4, r0
 8029c4c:	fb0c 4303 	mla	r3, ip, r3, r4
 8029c50:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029c54:	b3a3      	cbz	r3, 8029cc0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8029c56:	4a21      	ldr	r2, [pc, #132]	; (8029cdc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8029c58:	880e      	ldrh	r6, [r1, #0]
 8029c5a:	6815      	ldr	r5, [r2, #0]
 8029c5c:	b29a      	uxth	r2, r3
 8029c5e:	1234      	asrs	r4, r6, #8
 8029c60:	43db      	mvns	r3, r3
 8029c62:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8029c66:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8029c6a:	b2db      	uxtb	r3, r3
 8029c6c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029c70:	fb10 f002 	smulbb	r0, r0, r2
 8029c74:	b2ed      	uxtb	r5, r5
 8029c76:	fb17 f702 	smulbb	r7, r7, r2
 8029c7a:	fb04 0403 	mla	r4, r4, r3, r0
 8029c7e:	10f0      	asrs	r0, r6, #3
 8029c80:	fb15 f202 	smulbb	r2, r5, r2
 8029c84:	00f6      	lsls	r6, r6, #3
 8029c86:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029c8a:	b2a4      	uxth	r4, r4
 8029c8c:	b2f6      	uxtb	r6, r6
 8029c8e:	fb00 7003 	mla	r0, r0, r3, r7
 8029c92:	fb06 2303 	mla	r3, r6, r3, r2
 8029c96:	b280      	uxth	r0, r0
 8029c98:	b29a      	uxth	r2, r3
 8029c9a:	1c63      	adds	r3, r4, #1
 8029c9c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029ca0:	1c53      	adds	r3, r2, #1
 8029ca2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029ca6:	1c42      	adds	r2, r0, #1
 8029ca8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029cac:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029cb0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029cb4:	0940      	lsrs	r0, r0, #5
 8029cb6:	4323      	orrs	r3, r4
 8029cb8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029cbc:	4303      	orrs	r3, r0
 8029cbe:	800b      	strh	r3, [r1, #0]
 8029cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029cc4:	2d0f      	cmp	r5, #15
 8029cc6:	d893      	bhi.n	8029bf0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8029cc8:	463b      	mov	r3, r7
 8029cca:	463c      	mov	r4, r7
 8029ccc:	e7aa      	b.n	8029c24 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8029cce:	bf00      	nop
 8029cd0:	0803215f 	.word	0x0803215f
 8029cd4:	0803268e 	.word	0x0803268e
 8029cd8:	0803212c 	.word	0x0803212c
 8029cdc:	200153a8 	.word	0x200153a8

08029ce0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ce4:	ed2d 8b08 	vpush	{d8-d11}
 8029ce8:	b093      	sub	sp, #76	; 0x4c
 8029cea:	461d      	mov	r5, r3
 8029cec:	eeb0 aa40 	vmov.f32	s20, s0
 8029cf0:	920c      	str	r2, [sp, #48]	; 0x30
 8029cf2:	eef0 9a60 	vmov.f32	s19, s1
 8029cf6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029cf8:	eeb0 9a41 	vmov.f32	s18, s2
 8029cfc:	9011      	str	r0, [sp, #68]	; 0x44
 8029cfe:	eeb0 8a62 	vmov.f32	s16, s5
 8029d02:	6850      	ldr	r0, [r2, #4]
 8029d04:	eef0 8a43 	vmov.f32	s17, s6
 8029d08:	9107      	str	r1, [sp, #28]
 8029d0a:	eef0 ba44 	vmov.f32	s23, s8
 8029d0e:	6812      	ldr	r2, [r2, #0]
 8029d10:	eeb0 ba64 	vmov.f32	s22, s9
 8029d14:	eef0 aa45 	vmov.f32	s21, s10
 8029d18:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8029d1c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8029d20:	fb00 1303 	mla	r3, r0, r3, r1
 8029d24:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029d28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029d2a:	689b      	ldr	r3, [r3, #8]
 8029d2c:	3301      	adds	r3, #1
 8029d2e:	f023 0301 	bic.w	r3, r3, #1
 8029d32:	9306      	str	r3, [sp, #24]
 8029d34:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029d36:	681f      	ldr	r7, [r3, #0]
 8029d38:	9b07      	ldr	r3, [sp, #28]
 8029d3a:	2b00      	cmp	r3, #0
 8029d3c:	dc03      	bgt.n	8029d46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029d3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029d40:	2b00      	cmp	r3, #0
 8029d42:	f340 8267 	ble.w	802a214 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8029d46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029d48:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029d4c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029d50:	1e48      	subs	r0, r1, #1
 8029d52:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8029d56:	2d00      	cmp	r5, #0
 8029d58:	f340 80b7 	ble.w	8029eca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029d5c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029d60:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029d64:	d406      	bmi.n	8029d74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8029d66:	4586      	cmp	lr, r0
 8029d68:	da04      	bge.n	8029d74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8029d6a:	2b00      	cmp	r3, #0
 8029d6c:	db02      	blt.n	8029d74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8029d6e:	4563      	cmp	r3, ip
 8029d70:	f2c0 80ac 	blt.w	8029ecc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8029d74:	f11e 0e01 	adds.w	lr, lr, #1
 8029d78:	f100 809f 	bmi.w	8029eba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8029d7c:	4571      	cmp	r1, lr
 8029d7e:	f2c0 809c 	blt.w	8029eba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8029d82:	3301      	adds	r3, #1
 8029d84:	f100 8099 	bmi.w	8029eba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8029d88:	429a      	cmp	r2, r3
 8029d8a:	f2c0 8096 	blt.w	8029eba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8029d8e:	46c8      	mov	r8, r9
 8029d90:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8029d94:	9509      	str	r5, [sp, #36]	; 0x24
 8029d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029d98:	2b00      	cmp	r3, #0
 8029d9a:	f340 80b5 	ble.w	8029f08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8029d9e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8029da2:	1430      	asrs	r0, r6, #16
 8029da4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029da8:	9308      	str	r3, [sp, #32]
 8029daa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029dac:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029db0:	1423      	asrs	r3, r4, #16
 8029db2:	f100 813f 	bmi.w	802a034 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029db6:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 8029dba:	455b      	cmp	r3, fp
 8029dbc:	f280 813a 	bge.w	802a034 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029dc0:	2800      	cmp	r0, #0
 8029dc2:	f2c0 8137 	blt.w	802a034 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029dc6:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
 8029dca:	4558      	cmp	r0, fp
 8029dcc:	f280 8132 	bge.w	802a034 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029dd0:	9a06      	ldr	r2, [sp, #24]
 8029dd2:	fb00 3302 	mla	r3, r0, r2, r3
 8029dd6:	0858      	lsrs	r0, r3, #1
 8029dd8:	07da      	lsls	r2, r3, #31
 8029dda:	9a08      	ldr	r2, [sp, #32]
 8029ddc:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029de0:	bf54      	ite	pl
 8029de2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029de6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029dea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029dee:	fa5f fc8c 	uxtb.w	ip, ip
 8029df2:	2a00      	cmp	r2, #0
 8029df4:	f000 80cc 	beq.w	8029f90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8029df8:	1c58      	adds	r0, r3, #1
 8029dfa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029dfe:	07c0      	lsls	r0, r0, #31
 8029e00:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029e04:	bf54      	ite	pl
 8029e06:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029e0a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029e0e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029e12:	fa5f fe8e 	uxtb.w	lr, lr
 8029e16:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8029e1a:	b1b9      	cbz	r1, 8029e4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8029e1c:	4453      	add	r3, sl
 8029e1e:	0858      	lsrs	r0, r3, #1
 8029e20:	07da      	lsls	r2, r3, #31
 8029e22:	5c38      	ldrb	r0, [r7, r0]
 8029e24:	bf54      	ite	pl
 8029e26:	f000 000f 	andpl.w	r0, r0, #15
 8029e2a:	1100      	asrmi	r0, r0, #4
 8029e2c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029e30:	b2c0      	uxtb	r0, r0
 8029e32:	900a      	str	r0, [sp, #40]	; 0x28
 8029e34:	1c58      	adds	r0, r3, #1
 8029e36:	0843      	lsrs	r3, r0, #1
 8029e38:	07c2      	lsls	r2, r0, #31
 8029e3a:	5cfb      	ldrb	r3, [r7, r3]
 8029e3c:	bf54      	ite	pl
 8029e3e:	f003 030f 	andpl.w	r3, r3, #15
 8029e42:	111b      	asrmi	r3, r3, #4
 8029e44:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029e48:	b2db      	uxtb	r3, r3
 8029e4a:	930e      	str	r3, [sp, #56]	; 0x38
 8029e4c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8029e50:	b289      	uxth	r1, r1
 8029e52:	fb02 f301 	mul.w	r3, r2, r1
 8029e56:	0112      	lsls	r2, r2, #4
 8029e58:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029e5c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029e60:	1ad2      	subs	r2, r2, r3
 8029e62:	b289      	uxth	r1, r1
 8029e64:	b292      	uxth	r2, r2
 8029e66:	1a40      	subs	r0, r0, r1
 8029e68:	fa1f fe80 	uxth.w	lr, r0
 8029e6c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8029e6e:	4342      	muls	r2, r0
 8029e70:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8029e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029e76:	fb01 c102 	mla	r1, r1, r2, ip
 8029e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029e7c:	fb03 1302 	mla	r3, r3, r2, r1
 8029e80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029e84:	2bff      	cmp	r3, #255	; 0xff
 8029e86:	f040 8094 	bne.w	8029fb2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8029e8a:	4bbf      	ldr	r3, [pc, #764]	; (802a188 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8029e8c:	681a      	ldr	r2, [r3, #0]
 8029e8e:	4bbf      	ldr	r3, [pc, #764]	; (802a18c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8029e90:	0951      	lsrs	r1, r2, #5
 8029e92:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8029e96:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029e9a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029e9e:	430b      	orrs	r3, r1
 8029ea0:	4313      	orrs	r3, r2
 8029ea2:	f8a8 3000 	strh.w	r3, [r8]
 8029ea6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029ea8:	f108 0802 	add.w	r8, r8, #2
 8029eac:	441c      	add	r4, r3
 8029eae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029eb0:	441e      	add	r6, r3
 8029eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029eb4:	3b01      	subs	r3, #1
 8029eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8029eb8:	e76d      	b.n	8029d96 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029eba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029ebc:	3d01      	subs	r5, #1
 8029ebe:	f109 0902 	add.w	r9, r9, #2
 8029ec2:	441c      	add	r4, r3
 8029ec4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029ec6:	441e      	add	r6, r3
 8029ec8:	e745      	b.n	8029d56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8029eca:	d021      	beq.n	8029f10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8029ecc:	1e6b      	subs	r3, r5, #1
 8029ece:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8029ed0:	fb00 4003 	mla	r0, r0, r3, r4
 8029ed4:	1400      	asrs	r0, r0, #16
 8029ed6:	f53f af5a 	bmi.w	8029d8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029eda:	3901      	subs	r1, #1
 8029edc:	4288      	cmp	r0, r1
 8029ede:	f6bf af56 	bge.w	8029d8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029ee2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8029ee4:	fb01 6303 	mla	r3, r1, r3, r6
 8029ee8:	141b      	asrs	r3, r3, #16
 8029eea:	f53f af50 	bmi.w	8029d8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029eee:	3a01      	subs	r2, #1
 8029ef0:	4293      	cmp	r3, r2
 8029ef2:	f6bf af4c 	bge.w	8029d8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029ef6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8029efa:	46a8      	mov	r8, r5
 8029efc:	46ce      	mov	lr, r9
 8029efe:	9308      	str	r3, [sp, #32]
 8029f00:	f1b8 0f00 	cmp.w	r8, #0
 8029f04:	f300 80b6 	bgt.w	802a074 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8029f08:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029f0c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029f10:	9b07      	ldr	r3, [sp, #28]
 8029f12:	2b00      	cmp	r3, #0
 8029f14:	f340 817e 	ble.w	802a214 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8029f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029f1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029f1e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029f22:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029f26:	eef0 6a48 	vmov.f32	s13, s16
 8029f2a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029f2e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029f32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029f36:	ee16 4a90 	vmov	r4, s13
 8029f3a:	eef0 6a68 	vmov.f32	s13, s17
 8029f3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029f42:	ee16 6a90 	vmov	r6, s13
 8029f46:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029f4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029f4e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029f52:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029f56:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029f5a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029f5e:	ee18 2a10 	vmov	r2, s16
 8029f62:	eeb0 8a47 	vmov.f32	s16, s14
 8029f66:	fb92 f3f3 	sdiv	r3, r2, r3
 8029f6a:	ee18 2a90 	vmov	r2, s17
 8029f6e:	9327      	str	r3, [sp, #156]	; 0x9c
 8029f70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029f72:	eef0 8a67 	vmov.f32	s17, s15
 8029f76:	fb92 f3f3 	sdiv	r3, r2, r3
 8029f7a:	9328      	str	r3, [sp, #160]	; 0xa0
 8029f7c:	9b07      	ldr	r3, [sp, #28]
 8029f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029f80:	3b01      	subs	r3, #1
 8029f82:	9307      	str	r3, [sp, #28]
 8029f84:	bf08      	it	eq
 8029f86:	4615      	moveq	r5, r2
 8029f88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029f8a:	bf18      	it	ne
 8029f8c:	461d      	movne	r5, r3
 8029f8e:	e6d3      	b.n	8029d38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8029f90:	2900      	cmp	r1, #0
 8029f92:	f43f af5b 	beq.w	8029e4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8029f96:	eb0a 0003 	add.w	r0, sl, r3
 8029f9a:	0843      	lsrs	r3, r0, #1
 8029f9c:	07c0      	lsls	r0, r0, #31
 8029f9e:	5cfb      	ldrb	r3, [r7, r3]
 8029fa0:	bf54      	ite	pl
 8029fa2:	f003 030f 	andpl.w	r3, r3, #15
 8029fa6:	111b      	asrmi	r3, r3, #4
 8029fa8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029fac:	b2db      	uxtb	r3, r3
 8029fae:	930a      	str	r3, [sp, #40]	; 0x28
 8029fb0:	e74c      	b.n	8029e4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8029fb2:	2b00      	cmp	r3, #0
 8029fb4:	f43f af77 	beq.w	8029ea6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029fb8:	4a73      	ldr	r2, [pc, #460]	; (802a188 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8029fba:	fa1f fe83 	uxth.w	lr, r3
 8029fbe:	f8b8 c000 	ldrh.w	ip, [r8]
 8029fc2:	43db      	mvns	r3, r3
 8029fc4:	6810      	ldr	r0, [r2, #0]
 8029fc6:	ea4f 212c 	mov.w	r1, ip, asr #8
 8029fca:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8029fce:	b2db      	uxtb	r3, r3
 8029fd0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029fd4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8029fd8:	fb12 f20e 	smulbb	r2, r2, lr
 8029fdc:	b2c0      	uxtb	r0, r0
 8029fde:	fb1b fb0e 	smulbb	fp, fp, lr
 8029fe2:	fb01 2103 	mla	r1, r1, r3, r2
 8029fe6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029fea:	fb10 fe0e 	smulbb	lr, r0, lr
 8029fee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029ff2:	b289      	uxth	r1, r1
 8029ff4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029ff8:	fa5f fc8c 	uxtb.w	ip, ip
 8029ffc:	fb02 b203 	mla	r2, r2, r3, fp
 802a000:	1c48      	adds	r0, r1, #1
 802a002:	fb0c e303 	mla	r3, ip, r3, lr
 802a006:	b292      	uxth	r2, r2
 802a008:	b29b      	uxth	r3, r3
 802a00a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a00e:	f102 0b01 	add.w	fp, r2, #1
 802a012:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802a016:	1c59      	adds	r1, r3, #1
 802a018:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a01c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a020:	0952      	lsrs	r2, r2, #5
 802a022:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a026:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a02a:	4301      	orrs	r1, r0
 802a02c:	4311      	orrs	r1, r2
 802a02e:	f8a8 1000 	strh.w	r1, [r8]
 802a032:	e738      	b.n	8029ea6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a034:	f113 0b01 	adds.w	fp, r3, #1
 802a038:	f53f af35 	bmi.w	8029ea6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a03c:	45dc      	cmp	ip, fp
 802a03e:	f6ff af32 	blt.w	8029ea6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a042:	f110 0b01 	adds.w	fp, r0, #1
 802a046:	f53f af2e 	bmi.w	8029ea6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a04a:	45de      	cmp	lr, fp
 802a04c:	f6ff af2b 	blt.w	8029ea6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a050:	9302      	str	r3, [sp, #8]
 802a052:	fa0f f38e 	sxth.w	r3, lr
 802a056:	9a08      	ldr	r2, [sp, #32]
 802a058:	9301      	str	r3, [sp, #4]
 802a05a:	fa0f f38c 	sxth.w	r3, ip
 802a05e:	9105      	str	r1, [sp, #20]
 802a060:	4641      	mov	r1, r8
 802a062:	9300      	str	r3, [sp, #0]
 802a064:	4653      	mov	r3, sl
 802a066:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a06a:	463a      	mov	r2, r7
 802a06c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802a06e:	f7ff fd57 	bl	8029b20 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a072:	e718      	b.n	8029ea6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a074:	1422      	asrs	r2, r4, #16
 802a076:	9906      	ldr	r1, [sp, #24]
 802a078:	1433      	asrs	r3, r6, #16
 802a07a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a07e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a082:	fb01 2303 	mla	r3, r1, r3, r2
 802a086:	085a      	lsrs	r2, r3, #1
 802a088:	07d9      	lsls	r1, r3, #31
 802a08a:	5cba      	ldrb	r2, [r7, r2]
 802a08c:	bf54      	ite	pl
 802a08e:	f002 020f 	andpl.w	r2, r2, #15
 802a092:	1112      	asrmi	r2, r2, #4
 802a094:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a098:	b2d2      	uxtb	r2, r2
 802a09a:	2800      	cmp	r0, #0
 802a09c:	d063      	beq.n	802a166 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802a09e:	f103 0a01 	add.w	sl, r3, #1
 802a0a2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a0a6:	f01a 0f01 	tst.w	sl, #1
 802a0aa:	5c79      	ldrb	r1, [r7, r1]
 802a0ac:	bf0c      	ite	eq
 802a0ae:	f001 010f 	andeq.w	r1, r1, #15
 802a0b2:	1109      	asrne	r1, r1, #4
 802a0b4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a0b8:	b2c9      	uxtb	r1, r1
 802a0ba:	910f      	str	r1, [sp, #60]	; 0x3c
 802a0bc:	f1bc 0f00 	cmp.w	ip, #0
 802a0c0:	d01a      	beq.n	802a0f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a0c2:	9908      	ldr	r1, [sp, #32]
 802a0c4:	440b      	add	r3, r1
 802a0c6:	0859      	lsrs	r1, r3, #1
 802a0c8:	f013 0f01 	tst.w	r3, #1
 802a0cc:	f103 0301 	add.w	r3, r3, #1
 802a0d0:	5c79      	ldrb	r1, [r7, r1]
 802a0d2:	bf0c      	ite	eq
 802a0d4:	f001 010f 	andeq.w	r1, r1, #15
 802a0d8:	1109      	asrne	r1, r1, #4
 802a0da:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a0de:	b2c9      	uxtb	r1, r1
 802a0e0:	910b      	str	r1, [sp, #44]	; 0x2c
 802a0e2:	0859      	lsrs	r1, r3, #1
 802a0e4:	07db      	lsls	r3, r3, #31
 802a0e6:	5c79      	ldrb	r1, [r7, r1]
 802a0e8:	bf54      	ite	pl
 802a0ea:	f001 010f 	andpl.w	r1, r1, #15
 802a0ee:	1109      	asrmi	r1, r1, #4
 802a0f0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a0f4:	b2c9      	uxtb	r1, r1
 802a0f6:	9110      	str	r1, [sp, #64]	; 0x40
 802a0f8:	b280      	uxth	r0, r0
 802a0fa:	fa1f fc8c 	uxth.w	ip, ip
 802a0fe:	fb00 f30c 	mul.w	r3, r0, ip
 802a102:	0100      	lsls	r0, r0, #4
 802a104:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802a108:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802a10c:	1ac0      	subs	r0, r0, r3
 802a10e:	fa1f fc8c 	uxth.w	ip, ip
 802a112:	b280      	uxth	r0, r0
 802a114:	eba1 010c 	sub.w	r1, r1, ip
 802a118:	fa1f fa81 	uxth.w	sl, r1
 802a11c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a11e:	4348      	muls	r0, r1
 802a120:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802a122:	fb02 020a 	mla	r2, r2, sl, r0
 802a126:	fb0c 2c01 	mla	ip, ip, r1, r2
 802a12a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a12c:	fb03 c302 	mla	r3, r3, r2, ip
 802a130:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a134:	2bff      	cmp	r3, #255	; 0xff
 802a136:	d12b      	bne.n	802a190 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802a138:	4b13      	ldr	r3, [pc, #76]	; (802a188 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a13a:	681a      	ldr	r2, [r3, #0]
 802a13c:	4b13      	ldr	r3, [pc, #76]	; (802a18c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a13e:	0951      	lsrs	r1, r2, #5
 802a140:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a144:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a148:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a14c:	430b      	orrs	r3, r1
 802a14e:	4313      	orrs	r3, r2
 802a150:	f8ae 3000 	strh.w	r3, [lr]
 802a154:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a156:	f10e 0e02 	add.w	lr, lr, #2
 802a15a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 802a15e:	441c      	add	r4, r3
 802a160:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a162:	441e      	add	r6, r3
 802a164:	e6cc      	b.n	8029f00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802a166:	f1bc 0f00 	cmp.w	ip, #0
 802a16a:	d0c5      	beq.n	802a0f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a16c:	9908      	ldr	r1, [sp, #32]
 802a16e:	440b      	add	r3, r1
 802a170:	0859      	lsrs	r1, r3, #1
 802a172:	07db      	lsls	r3, r3, #31
 802a174:	5c79      	ldrb	r1, [r7, r1]
 802a176:	bf54      	ite	pl
 802a178:	f001 010f 	andpl.w	r1, r1, #15
 802a17c:	1109      	asrmi	r1, r1, #4
 802a17e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a182:	b2c9      	uxtb	r1, r1
 802a184:	910b      	str	r1, [sp, #44]	; 0x2c
 802a186:	e7b7      	b.n	802a0f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a188:	200153a8 	.word	0x200153a8
 802a18c:	fffff800 	.word	0xfffff800
 802a190:	2b00      	cmp	r3, #0
 802a192:	d0df      	beq.n	802a154 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802a194:	4a22      	ldr	r2, [pc, #136]	; (802a220 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802a196:	fa1f fa83 	uxth.w	sl, r3
 802a19a:	f8be c000 	ldrh.w	ip, [lr]
 802a19e:	43db      	mvns	r3, r3
 802a1a0:	6810      	ldr	r0, [r2, #0]
 802a1a2:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a1a6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a1aa:	b2db      	uxtb	r3, r3
 802a1ac:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a1b0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a1b4:	fb12 f20a 	smulbb	r2, r2, sl
 802a1b8:	b2c0      	uxtb	r0, r0
 802a1ba:	fb1b fb0a 	smulbb	fp, fp, sl
 802a1be:	fb01 2103 	mla	r1, r1, r3, r2
 802a1c2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a1c6:	fb10 f00a 	smulbb	r0, r0, sl
 802a1ca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a1ce:	b289      	uxth	r1, r1
 802a1d0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a1d4:	fa5f fc8c 	uxtb.w	ip, ip
 802a1d8:	fb02 b203 	mla	r2, r2, r3, fp
 802a1dc:	fb0c 0003 	mla	r0, ip, r3, r0
 802a1e0:	1c4b      	adds	r3, r1, #1
 802a1e2:	b292      	uxth	r2, r2
 802a1e4:	b280      	uxth	r0, r0
 802a1e6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a1ea:	f100 0b01 	add.w	fp, r0, #1
 802a1ee:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802a1f2:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802a1f6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802a1fa:	ea4b 0101 	orr.w	r1, fp, r1
 802a1fe:	f102 0b01 	add.w	fp, r2, #1
 802a202:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a206:	0952      	lsrs	r2, r2, #5
 802a208:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a20c:	4311      	orrs	r1, r2
 802a20e:	f8ae 1000 	strh.w	r1, [lr]
 802a212:	e79f      	b.n	802a154 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802a214:	b013      	add	sp, #76	; 0x4c
 802a216:	ecbd 8b08 	vpop	{d8-d11}
 802a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a21e:	bf00      	nop
 802a220:	200153a8 	.word	0x200153a8

0802a224 <CRC_Lock>:
 802a224:	4a20      	ldr	r2, [pc, #128]	; (802a2a8 <CRC_Lock+0x84>)
 802a226:	b530      	push	{r4, r5, lr}
 802a228:	6813      	ldr	r3, [r2, #0]
 802a22a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802a22e:	f24c 2540 	movw	r5, #49728	; 0xc240
 802a232:	f023 0301 	bic.w	r3, r3, #1
 802a236:	6013      	str	r3, [r2, #0]
 802a238:	4b1c      	ldr	r3, [pc, #112]	; (802a2ac <CRC_Lock+0x88>)
 802a23a:	681a      	ldr	r2, [r3, #0]
 802a23c:	4022      	ands	r2, r4
 802a23e:	42aa      	cmp	r2, r5
 802a240:	d005      	beq.n	802a24e <CRC_Lock+0x2a>
 802a242:	681b      	ldr	r3, [r3, #0]
 802a244:	f24c 2270 	movw	r2, #49776	; 0xc270
 802a248:	4023      	ands	r3, r4
 802a24a:	4293      	cmp	r3, r2
 802a24c:	d124      	bne.n	802a298 <CRC_Lock+0x74>
 802a24e:	4b18      	ldr	r3, [pc, #96]	; (802a2b0 <CRC_Lock+0x8c>)
 802a250:	681b      	ldr	r3, [r3, #0]
 802a252:	bb0b      	cbnz	r3, 802a298 <CRC_Lock+0x74>
 802a254:	4b17      	ldr	r3, [pc, #92]	; (802a2b4 <CRC_Lock+0x90>)
 802a256:	681a      	ldr	r2, [r3, #0]
 802a258:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a25c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802a260:	d00d      	beq.n	802a27e <CRC_Lock+0x5a>
 802a262:	681a      	ldr	r2, [r3, #0]
 802a264:	f240 4483 	movw	r4, #1155	; 0x483
 802a268:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a26c:	42a2      	cmp	r2, r4
 802a26e:	d006      	beq.n	802a27e <CRC_Lock+0x5a>
 802a270:	681b      	ldr	r3, [r3, #0]
 802a272:	f240 4285 	movw	r2, #1157	; 0x485
 802a276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a27a:	4293      	cmp	r3, r2
 802a27c:	d10c      	bne.n	802a298 <CRC_Lock+0x74>
 802a27e:	4b0e      	ldr	r3, [pc, #56]	; (802a2b8 <CRC_Lock+0x94>)
 802a280:	2201      	movs	r2, #1
 802a282:	601a      	str	r2, [r3, #0]
 802a284:	681a      	ldr	r2, [r3, #0]
 802a286:	2a00      	cmp	r2, #0
 802a288:	d1fc      	bne.n	802a284 <CRC_Lock+0x60>
 802a28a:	4b0c      	ldr	r3, [pc, #48]	; (802a2bc <CRC_Lock+0x98>)
 802a28c:	6018      	str	r0, [r3, #0]
 802a28e:	6818      	ldr	r0, [r3, #0]
 802a290:	1a43      	subs	r3, r0, r1
 802a292:	4258      	negs	r0, r3
 802a294:	4158      	adcs	r0, r3
 802a296:	bd30      	pop	{r4, r5, pc}
 802a298:	4b09      	ldr	r3, [pc, #36]	; (802a2c0 <CRC_Lock+0x9c>)
 802a29a:	2201      	movs	r2, #1
 802a29c:	601a      	str	r2, [r3, #0]
 802a29e:	681a      	ldr	r2, [r3, #0]
 802a2a0:	2a00      	cmp	r2, #0
 802a2a2:	d1fc      	bne.n	802a29e <CRC_Lock+0x7a>
 802a2a4:	4b07      	ldr	r3, [pc, #28]	; (802a2c4 <CRC_Lock+0xa0>)
 802a2a6:	e7f1      	b.n	802a28c <CRC_Lock+0x68>
 802a2a8:	e0002000 	.word	0xe0002000
 802a2ac:	e000ed00 	.word	0xe000ed00
 802a2b0:	e0042000 	.word	0xe0042000
 802a2b4:	5c001000 	.word	0x5c001000
 802a2b8:	58024c08 	.word	0x58024c08
 802a2bc:	58024c00 	.word	0x58024c00
 802a2c0:	40023008 	.word	0x40023008
 802a2c4:	40023000 	.word	0x40023000

0802a2c8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802a2c8:	6101      	str	r1, [r0, #16]
 802a2ca:	4770      	bx	lr

0802a2cc <_ZN8touchgfx8Gestures4tickEv>:
 802a2cc:	7b83      	ldrb	r3, [r0, #14]
 802a2ce:	b14b      	cbz	r3, 802a2e4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802a2d0:	8903      	ldrh	r3, [r0, #8]
 802a2d2:	3301      	adds	r3, #1
 802a2d4:	b29b      	uxth	r3, r3
 802a2d6:	2b07      	cmp	r3, #7
 802a2d8:	8103      	strh	r3, [r0, #8]
 802a2da:	bf81      	itttt	hi
 802a2dc:	2300      	movhi	r3, #0
 802a2de:	8143      	strhhi	r3, [r0, #10]
 802a2e0:	8183      	strhhi	r3, [r0, #12]
 802a2e2:	7383      	strbhi	r3, [r0, #14]
 802a2e4:	4770      	bx	lr
	...

0802a2e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802a2e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802a2ec:	4698      	mov	r8, r3
 802a2ee:	8883      	ldrh	r3, [r0, #4]
 802a2f0:	4604      	mov	r4, r0
 802a2f2:	4617      	mov	r7, r2
 802a2f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 802a2f8:	eba8 0303 	sub.w	r3, r8, r3
 802a2fc:	4a19      	ldr	r2, [pc, #100]	; (802a364 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802a2fe:	460e      	mov	r6, r1
 802a300:	b21b      	sxth	r3, r3
 802a302:	88c1      	ldrh	r1, [r0, #6]
 802a304:	9200      	str	r2, [sp, #0]
 802a306:	2000      	movs	r0, #0
 802a308:	2b00      	cmp	r3, #0
 802a30a:	8aa2      	ldrh	r2, [r4, #20]
 802a30c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802a310:	bfb8      	it	lt
 802a312:	425b      	neglt	r3, r3
 802a314:	f88d 0004 	strb.w	r0, [sp, #4]
 802a318:	f8ad 1008 	strh.w	r1, [sp, #8]
 802a31c:	b21b      	sxth	r3, r3
 802a31e:	f8ad 800a 	strh.w	r8, [sp, #10]
 802a322:	f8ad 500c 	strh.w	r5, [sp, #12]
 802a326:	4293      	cmp	r3, r2
 802a328:	dc07      	bgt.n	802a33a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802a32a:	1a69      	subs	r1, r5, r1
 802a32c:	b209      	sxth	r1, r1
 802a32e:	2900      	cmp	r1, #0
 802a330:	bfb8      	it	lt
 802a332:	4249      	neglt	r1, r1
 802a334:	b209      	sxth	r1, r1
 802a336:	428a      	cmp	r2, r1
 802a338:	da10      	bge.n	802a35c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802a33a:	6920      	ldr	r0, [r4, #16]
 802a33c:	4669      	mov	r1, sp
 802a33e:	eba8 0606 	sub.w	r6, r8, r6
 802a342:	1bef      	subs	r7, r5, r7
 802a344:	6803      	ldr	r3, [r0, #0]
 802a346:	685b      	ldr	r3, [r3, #4]
 802a348:	4798      	blx	r3
 802a34a:	2300      	movs	r3, #0
 802a34c:	2001      	movs	r0, #1
 802a34e:	8166      	strh	r6, [r4, #10]
 802a350:	8123      	strh	r3, [r4, #8]
 802a352:	81a7      	strh	r7, [r4, #12]
 802a354:	f8a4 8004 	strh.w	r8, [r4, #4]
 802a358:	80e5      	strh	r5, [r4, #6]
 802a35a:	73a0      	strb	r0, [r4, #14]
 802a35c:	b004      	add	sp, #16
 802a35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a362:	bf00      	nop
 802a364:	0803158c 	.word	0x0803158c

0802a368 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802a368:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a36a:	461e      	mov	r6, r3
 802a36c:	1e4b      	subs	r3, r1, #1
 802a36e:	b085      	sub	sp, #20
 802a370:	4604      	mov	r4, r0
 802a372:	2b01      	cmp	r3, #1
 802a374:	460d      	mov	r5, r1
 802a376:	4617      	mov	r7, r2
 802a378:	d84b      	bhi.n	802a412 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802a37a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802a37e:	1cd3      	adds	r3, r2, #3
 802a380:	b29b      	uxth	r3, r3
 802a382:	2b06      	cmp	r3, #6
 802a384:	d916      	bls.n	802a3b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802a386:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802a428 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a38a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a38e:	f8cd c004 	str.w	ip, [sp, #4]
 802a392:	f04f 0c00 	mov.w	ip, #0
 802a396:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a39a:	6900      	ldr	r0, [r0, #16]
 802a39c:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a3a0:	a901      	add	r1, sp, #4
 802a3a2:	f88d c008 	strb.w	ip, [sp, #8]
 802a3a6:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a3aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a3ae:	6803      	ldr	r3, [r0, #0]
 802a3b0:	689b      	ldr	r3, [r3, #8]
 802a3b2:	4798      	blx	r3
 802a3b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a3b8:	1cd3      	adds	r3, r2, #3
 802a3ba:	b29b      	uxth	r3, r3
 802a3bc:	2b06      	cmp	r3, #6
 802a3be:	d916      	bls.n	802a3ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a3c0:	f8df c064 	ldr.w	ip, [pc, #100]	; 802a428 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a3c4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a3c8:	f8cd c004 	str.w	ip, [sp, #4]
 802a3cc:	f04f 0c01 	mov.w	ip, #1
 802a3d0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a3d4:	6920      	ldr	r0, [r4, #16]
 802a3d6:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a3da:	a901      	add	r1, sp, #4
 802a3dc:	f88d c008 	strb.w	ip, [sp, #8]
 802a3e0:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a3e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a3e8:	6803      	ldr	r3, [r0, #0]
 802a3ea:	689b      	ldr	r3, [r3, #8]
 802a3ec:	4798      	blx	r3
 802a3ee:	4b0d      	ldr	r3, [pc, #52]	; (802a424 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802a3f0:	a901      	add	r1, sp, #4
 802a3f2:	6920      	ldr	r0, [r4, #16]
 802a3f4:	9301      	str	r3, [sp, #4]
 802a3f6:	2300      	movs	r3, #0
 802a3f8:	f88d 5008 	strb.w	r5, [sp, #8]
 802a3fc:	f8ad 700a 	strh.w	r7, [sp, #10]
 802a400:	f8ad 600c 	strh.w	r6, [sp, #12]
 802a404:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a408:	6803      	ldr	r3, [r0, #0]
 802a40a:	681b      	ldr	r3, [r3, #0]
 802a40c:	4798      	blx	r3
 802a40e:	b005      	add	sp, #20
 802a410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a412:	2900      	cmp	r1, #0
 802a414:	d1eb      	bne.n	802a3ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a416:	80a2      	strh	r2, [r4, #4]
 802a418:	80c6      	strh	r6, [r0, #6]
 802a41a:	60a1      	str	r1, [r4, #8]
 802a41c:	81a1      	strh	r1, [r4, #12]
 802a41e:	73a1      	strb	r1, [r4, #14]
 802a420:	e7e5      	b.n	802a3ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a422:	bf00      	nop
 802a424:	08031578 	.word	0x08031578
 802a428:	080315a0 	.word	0x080315a0

0802a42c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 802a42c:	790b      	ldrb	r3, [r1, #4]
 802a42e:	2b00      	cmp	r3, #0
 802a430:	bf0c      	ite	eq
 802a432:	2301      	moveq	r3, #1
 802a434:	2300      	movne	r3, #0
 802a436:	b570      	push	{r4, r5, r6, lr}
 802a438:	4604      	mov	r4, r0
 802a43a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 802a43e:	460e      	mov	r6, r1
 802a440:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 802a444:	d109      	bne.n	802a45a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802a446:	b14d      	cbz	r5, 802a45c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802a448:	7933      	ldrb	r3, [r6, #4]
 802a44a:	2b01      	cmp	r3, #1
 802a44c:	d10c      	bne.n	802a468 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a44e:	6823      	ldr	r3, [r4, #0]
 802a450:	4620      	mov	r0, r4
 802a452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a458:	4718      	bx	r3
 802a45a:	b12d      	cbz	r5, 802a468 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a45c:	6823      	ldr	r3, [r4, #0]
 802a45e:	4620      	mov	r0, r4
 802a460:	695b      	ldr	r3, [r3, #20]
 802a462:	4798      	blx	r3
 802a464:	2d00      	cmp	r5, #0
 802a466:	d1ef      	bne.n	802a448 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 802a468:	bd70      	pop	{r4, r5, r6, pc}

0802a46a <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 802a46a:	b570      	push	{r4, r5, r6, lr}
 802a46c:	880b      	ldrh	r3, [r1, #0]
 802a46e:	4605      	mov	r5, r0
 802a470:	4604      	mov	r4, r0
 802a472:	85c3      	strh	r3, [r0, #46]	; 0x2e
 802a474:	8813      	ldrh	r3, [r2, #0]
 802a476:	f825 3f30 	strh.w	r3, [r5, #48]!
 802a47a:	4628      	mov	r0, r5
 802a47c:	f7f3 feb6 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 802a480:	4606      	mov	r6, r0
 802a482:	4628      	mov	r0, r5
 802a484:	f7f3 fef6 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802a488:	6823      	ldr	r3, [r4, #0]
 802a48a:	4605      	mov	r5, r0
 802a48c:	b231      	sxth	r1, r6
 802a48e:	4620      	mov	r0, r4
 802a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a492:	4798      	blx	r3
 802a494:	6823      	ldr	r3, [r4, #0]
 802a496:	b229      	sxth	r1, r5
 802a498:	4620      	mov	r0, r4
 802a49a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a4a0:	4718      	bx	r3

0802a4a2 <_ZNK8touchgfx6Button12getSolidRectEv>:
 802a4a2:	b510      	push	{r4, lr}
 802a4a4:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 802a4a8:	4604      	mov	r4, r0
 802a4aa:	2bff      	cmp	r3, #255	; 0xff
 802a4ac:	d006      	beq.n	802a4bc <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 802a4ae:	2300      	movs	r3, #0
 802a4b0:	8003      	strh	r3, [r0, #0]
 802a4b2:	8043      	strh	r3, [r0, #2]
 802a4b4:	8083      	strh	r3, [r0, #4]
 802a4b6:	80c3      	strh	r3, [r0, #6]
 802a4b8:	4620      	mov	r0, r4
 802a4ba:	bd10      	pop	{r4, pc}
 802a4bc:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 802a4c0:	b11b      	cbz	r3, 802a4ca <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 802a4c2:	3130      	adds	r1, #48	; 0x30
 802a4c4:	f7f3 ff1a 	bl	801e2fc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 802a4c8:	e7f6      	b.n	802a4b8 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 802a4ca:	312e      	adds	r1, #46	; 0x2e
 802a4cc:	e7fa      	b.n	802a4c4 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0802a4d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 802a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a4d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 802a4d8:	b08a      	sub	sp, #40	; 0x28
 802a4da:	4604      	mov	r4, r0
 802a4dc:	4688      	mov	r8, r1
 802a4de:	2b00      	cmp	r3, #0
 802a4e0:	d044      	beq.n	802a56c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 802a4e2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 802a4e4:	a805      	add	r0, sp, #20
 802a4e6:	f8ad 3014 	strh.w	r3, [sp, #20]
 802a4ea:	f7f3 fe7f 	bl	801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv>
 802a4ee:	4605      	mov	r5, r0
 802a4f0:	b206      	sxth	r6, r0
 802a4f2:	a805      	add	r0, sp, #20
 802a4f4:	f7f3 febe 	bl	801e274 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802a4f8:	f9b8 2000 	ldrsh.w	r2, [r8]
 802a4fc:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 802a500:	2300      	movs	r3, #0
 802a502:	fa0f fc80 	sxth.w	ip, r0
 802a506:	4417      	add	r7, r2
 802a508:	9306      	str	r3, [sp, #24]
 802a50a:	b2bf      	uxth	r7, r7
 802a50c:	fa0f fe87 	sxth.w	lr, r7
 802a510:	459e      	cmp	lr, r3
 802a512:	dd2d      	ble.n	802a570 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 802a514:	4296      	cmp	r6, r2
 802a516:	dd2b      	ble.n	802a570 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 802a518:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 802a51c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 802a520:	4419      	add	r1, r3
 802a522:	b289      	uxth	r1, r1
 802a524:	fa0f f881 	sxth.w	r8, r1
 802a528:	f1b8 0f00 	cmp.w	r8, #0
 802a52c:	dd20      	ble.n	802a570 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 802a52e:	459c      	cmp	ip, r3
 802a530:	dd1e      	ble.n	802a570 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 802a532:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802a536:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802a53a:	4576      	cmp	r6, lr
 802a53c:	bfa8      	it	ge
 802a53e:	463d      	movge	r5, r7
 802a540:	45c4      	cmp	ip, r8
 802a542:	bfa8      	it	ge
 802a544:	4608      	movge	r0, r1
 802a546:	f8ad 2018 	strh.w	r2, [sp, #24]
 802a54a:	1aad      	subs	r5, r5, r2
 802a54c:	1ac0      	subs	r0, r0, r3
 802a54e:	f8ad 301a 	strh.w	r3, [sp, #26]
 802a552:	f8ad 501c 	strh.w	r5, [sp, #28]
 802a556:	f8ad 001e 	strh.w	r0, [sp, #30]
 802a55a:	4b1f      	ldr	r3, [pc, #124]	; (802a5d8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 802a55c:	681b      	ldr	r3, [r3, #0]
 802a55e:	b953      	cbnz	r3, 802a576 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 802a560:	4b1e      	ldr	r3, [pc, #120]	; (802a5dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 802a562:	2187      	movs	r1, #135	; 0x87
 802a564:	4a1e      	ldr	r2, [pc, #120]	; (802a5e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 802a566:	481f      	ldr	r0, [pc, #124]	; (802a5e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 802a568:	f000 f874 	bl	802a654 <__assert_func>
 802a56c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 802a56e:	e7b9      	b.n	802a4e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 802a570:	2300      	movs	r3, #0
 802a572:	9307      	str	r3, [sp, #28]
 802a574:	e7f1      	b.n	802a55a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 802a576:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 802a57a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802a57e:	429a      	cmp	r2, r3
 802a580:	d026      	beq.n	802a5d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 802a582:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802a586:	2b00      	cmp	r3, #0
 802a588:	dd22      	ble.n	802a5d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 802a58a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 802a58e:	2b00      	cmp	r3, #0
 802a590:	dd1e      	ble.n	802a5d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 802a592:	2300      	movs	r3, #0
 802a594:	a908      	add	r1, sp, #32
 802a596:	4620      	mov	r0, r4
 802a598:	e9cd 3308 	strd	r3, r3, [sp, #32]
 802a59c:	6823      	ldr	r3, [r4, #0]
 802a59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a5a0:	4798      	blx	r3
 802a5a2:	4b11      	ldr	r3, [pc, #68]	; (802a5e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 802a5a4:	681b      	ldr	r3, [r3, #0]
 802a5a6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 802a5aa:	b10a      	cbz	r2, 802a5b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 802a5ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 802a5ae:	b900      	cbnz	r0, 802a5b2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 802a5b0:	6898      	ldr	r0, [r3, #8]
 802a5b2:	2501      	movs	r5, #1
 802a5b4:	6801      	ldr	r1, [r0, #0]
 802a5b6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802a5ba:	9502      	str	r5, [sp, #8]
 802a5bc:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 802a5c0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802a5c4:	9401      	str	r4, [sp, #4]
 802a5c6:	ac06      	add	r4, sp, #24
 802a5c8:	9400      	str	r4, [sp, #0]
 802a5ca:	688c      	ldr	r4, [r1, #8]
 802a5cc:	a905      	add	r1, sp, #20
 802a5ce:	47a0      	blx	r4
 802a5d0:	b00a      	add	sp, #40	; 0x28
 802a5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a5d6:	bf00      	nop
 802a5d8:	20015428 	.word	0x20015428
 802a5dc:	08030372 	.word	0x08030372
 802a5e0:	0803295c 	.word	0x0803295c
 802a5e4:	080303ae 	.word	0x080303ae
 802a5e8:	200153a0 	.word	0x200153a0

0802a5ec <__aeabi_atexit>:
 802a5ec:	460b      	mov	r3, r1
 802a5ee:	4601      	mov	r1, r0
 802a5f0:	4618      	mov	r0, r3
 802a5f2:	f000 b853 	b.w	802a69c <__cxa_atexit>

0802a5f6 <_ZdlPvj>:
 802a5f6:	f000 b812 	b.w	802a61e <_ZdlPv>

0802a5fa <__cxa_guard_acquire>:
 802a5fa:	6803      	ldr	r3, [r0, #0]
 802a5fc:	07db      	lsls	r3, r3, #31
 802a5fe:	d406      	bmi.n	802a60e <__cxa_guard_acquire+0x14>
 802a600:	7843      	ldrb	r3, [r0, #1]
 802a602:	b103      	cbz	r3, 802a606 <__cxa_guard_acquire+0xc>
 802a604:	deff      	udf	#255	; 0xff
 802a606:	2301      	movs	r3, #1
 802a608:	7043      	strb	r3, [r0, #1]
 802a60a:	4618      	mov	r0, r3
 802a60c:	4770      	bx	lr
 802a60e:	2000      	movs	r0, #0
 802a610:	4770      	bx	lr

0802a612 <__cxa_guard_release>:
 802a612:	2301      	movs	r3, #1
 802a614:	6003      	str	r3, [r0, #0]
 802a616:	4770      	bx	lr

0802a618 <__cxa_pure_virtual>:
 802a618:	b508      	push	{r3, lr}
 802a61a:	f000 f80f 	bl	802a63c <_ZSt9terminatev>

0802a61e <_ZdlPv>:
 802a61e:	f000 b893 	b.w	802a748 <free>

0802a622 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a622:	b508      	push	{r3, lr}
 802a624:	4780      	blx	r0
 802a626:	f000 f80e 	bl	802a646 <abort>
	...

0802a62c <_ZSt13get_terminatev>:
 802a62c:	4b02      	ldr	r3, [pc, #8]	; (802a638 <_ZSt13get_terminatev+0xc>)
 802a62e:	6818      	ldr	r0, [r3, #0]
 802a630:	f3bf 8f5b 	dmb	ish
 802a634:	4770      	bx	lr
 802a636:	bf00      	nop
 802a638:	200000b8 	.word	0x200000b8

0802a63c <_ZSt9terminatev>:
 802a63c:	b508      	push	{r3, lr}
 802a63e:	f7ff fff5 	bl	802a62c <_ZSt13get_terminatev>
 802a642:	f7ff ffee 	bl	802a622 <_ZN10__cxxabiv111__terminateEPFvvE>

0802a646 <abort>:
 802a646:	b508      	push	{r3, lr}
 802a648:	2006      	movs	r0, #6
 802a64a:	f000 fca1 	bl	802af90 <raise>
 802a64e:	2001      	movs	r0, #1
 802a650:	f7d7 f94c 	bl	80018ec <_exit>

0802a654 <__assert_func>:
 802a654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a656:	4614      	mov	r4, r2
 802a658:	461a      	mov	r2, r3
 802a65a:	4b09      	ldr	r3, [pc, #36]	; (802a680 <__assert_func+0x2c>)
 802a65c:	681b      	ldr	r3, [r3, #0]
 802a65e:	4605      	mov	r5, r0
 802a660:	68d8      	ldr	r0, [r3, #12]
 802a662:	b14c      	cbz	r4, 802a678 <__assert_func+0x24>
 802a664:	4b07      	ldr	r3, [pc, #28]	; (802a684 <__assert_func+0x30>)
 802a666:	9100      	str	r1, [sp, #0]
 802a668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a66c:	4906      	ldr	r1, [pc, #24]	; (802a688 <__assert_func+0x34>)
 802a66e:	462b      	mov	r3, r5
 802a670:	f000 f828 	bl	802a6c4 <fiprintf>
 802a674:	f7ff ffe7 	bl	802a646 <abort>
 802a678:	4b04      	ldr	r3, [pc, #16]	; (802a68c <__assert_func+0x38>)
 802a67a:	461c      	mov	r4, r3
 802a67c:	e7f3      	b.n	802a666 <__assert_func+0x12>
 802a67e:	bf00      	nop
 802a680:	200000bc 	.word	0x200000bc
 802a684:	0803298f 	.word	0x0803298f
 802a688:	0803299c 	.word	0x0803299c
 802a68c:	080329ca 	.word	0x080329ca

0802a690 <atexit>:
 802a690:	2300      	movs	r3, #0
 802a692:	4601      	mov	r1, r0
 802a694:	461a      	mov	r2, r3
 802a696:	4618      	mov	r0, r3
 802a698:	f000 bd8a 	b.w	802b1b0 <__register_exitproc>

0802a69c <__cxa_atexit>:
 802a69c:	b510      	push	{r4, lr}
 802a69e:	4c05      	ldr	r4, [pc, #20]	; (802a6b4 <__cxa_atexit+0x18>)
 802a6a0:	4613      	mov	r3, r2
 802a6a2:	b12c      	cbz	r4, 802a6b0 <__cxa_atexit+0x14>
 802a6a4:	460a      	mov	r2, r1
 802a6a6:	4601      	mov	r1, r0
 802a6a8:	2002      	movs	r0, #2
 802a6aa:	f000 fd81 	bl	802b1b0 <__register_exitproc>
 802a6ae:	bd10      	pop	{r4, pc}
 802a6b0:	4620      	mov	r0, r4
 802a6b2:	e7fc      	b.n	802a6ae <__cxa_atexit+0x12>
 802a6b4:	0802b1b1 	.word	0x0802b1b1

0802a6b8 <__errno>:
 802a6b8:	4b01      	ldr	r3, [pc, #4]	; (802a6c0 <__errno+0x8>)
 802a6ba:	6818      	ldr	r0, [r3, #0]
 802a6bc:	4770      	bx	lr
 802a6be:	bf00      	nop
 802a6c0:	200000bc 	.word	0x200000bc

0802a6c4 <fiprintf>:
 802a6c4:	b40e      	push	{r1, r2, r3}
 802a6c6:	b503      	push	{r0, r1, lr}
 802a6c8:	4601      	mov	r1, r0
 802a6ca:	ab03      	add	r3, sp, #12
 802a6cc:	4805      	ldr	r0, [pc, #20]	; (802a6e4 <fiprintf+0x20>)
 802a6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 802a6d2:	6800      	ldr	r0, [r0, #0]
 802a6d4:	9301      	str	r3, [sp, #4]
 802a6d6:	f000 f95f 	bl	802a998 <_vfiprintf_r>
 802a6da:	b002      	add	sp, #8
 802a6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 802a6e0:	b003      	add	sp, #12
 802a6e2:	4770      	bx	lr
 802a6e4:	200000bc 	.word	0x200000bc

0802a6e8 <__libc_init_array>:
 802a6e8:	b570      	push	{r4, r5, r6, lr}
 802a6ea:	4d0d      	ldr	r5, [pc, #52]	; (802a720 <__libc_init_array+0x38>)
 802a6ec:	4c0d      	ldr	r4, [pc, #52]	; (802a724 <__libc_init_array+0x3c>)
 802a6ee:	1b64      	subs	r4, r4, r5
 802a6f0:	10a4      	asrs	r4, r4, #2
 802a6f2:	2600      	movs	r6, #0
 802a6f4:	42a6      	cmp	r6, r4
 802a6f6:	d109      	bne.n	802a70c <__libc_init_array+0x24>
 802a6f8:	4d0b      	ldr	r5, [pc, #44]	; (802a728 <__libc_init_array+0x40>)
 802a6fa:	4c0c      	ldr	r4, [pc, #48]	; (802a72c <__libc_init_array+0x44>)
 802a6fc:	f001 fa3a 	bl	802bb74 <_init>
 802a700:	1b64      	subs	r4, r4, r5
 802a702:	10a4      	asrs	r4, r4, #2
 802a704:	2600      	movs	r6, #0
 802a706:	42a6      	cmp	r6, r4
 802a708:	d105      	bne.n	802a716 <__libc_init_array+0x2e>
 802a70a:	bd70      	pop	{r4, r5, r6, pc}
 802a70c:	f855 3b04 	ldr.w	r3, [r5], #4
 802a710:	4798      	blx	r3
 802a712:	3601      	adds	r6, #1
 802a714:	e7ee      	b.n	802a6f4 <__libc_init_array+0xc>
 802a716:	f855 3b04 	ldr.w	r3, [r5], #4
 802a71a:	4798      	blx	r3
 802a71c:	3601      	adds	r6, #1
 802a71e:	e7f2      	b.n	802a706 <__libc_init_array+0x1e>
 802a720:	08032a8c 	.word	0x08032a8c
 802a724:	08032a8c 	.word	0x08032a8c
 802a728:	08032a8c 	.word	0x08032a8c
 802a72c:	08032aa8 	.word	0x08032aa8

0802a730 <__retarget_lock_init_recursive>:
 802a730:	4770      	bx	lr

0802a732 <__retarget_lock_acquire_recursive>:
 802a732:	4770      	bx	lr

0802a734 <__retarget_lock_release>:
 802a734:	4770      	bx	lr

0802a736 <__retarget_lock_release_recursive>:
 802a736:	4770      	bx	lr

0802a738 <malloc>:
 802a738:	4b02      	ldr	r3, [pc, #8]	; (802a744 <malloc+0xc>)
 802a73a:	4601      	mov	r1, r0
 802a73c:	6818      	ldr	r0, [r3, #0]
 802a73e:	f000 b88d 	b.w	802a85c <_malloc_r>
 802a742:	bf00      	nop
 802a744:	200000bc 	.word	0x200000bc

0802a748 <free>:
 802a748:	4b02      	ldr	r3, [pc, #8]	; (802a754 <free+0xc>)
 802a74a:	4601      	mov	r1, r0
 802a74c:	6818      	ldr	r0, [r3, #0]
 802a74e:	f000 b819 	b.w	802a784 <_free_r>
 802a752:	bf00      	nop
 802a754:	200000bc 	.word	0x200000bc

0802a758 <memcpy>:
 802a758:	440a      	add	r2, r1
 802a75a:	4291      	cmp	r1, r2
 802a75c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802a760:	d100      	bne.n	802a764 <memcpy+0xc>
 802a762:	4770      	bx	lr
 802a764:	b510      	push	{r4, lr}
 802a766:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a76a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a76e:	4291      	cmp	r1, r2
 802a770:	d1f9      	bne.n	802a766 <memcpy+0xe>
 802a772:	bd10      	pop	{r4, pc}

0802a774 <memset>:
 802a774:	4402      	add	r2, r0
 802a776:	4603      	mov	r3, r0
 802a778:	4293      	cmp	r3, r2
 802a77a:	d100      	bne.n	802a77e <memset+0xa>
 802a77c:	4770      	bx	lr
 802a77e:	f803 1b01 	strb.w	r1, [r3], #1
 802a782:	e7f9      	b.n	802a778 <memset+0x4>

0802a784 <_free_r>:
 802a784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a786:	2900      	cmp	r1, #0
 802a788:	d044      	beq.n	802a814 <_free_r+0x90>
 802a78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a78e:	9001      	str	r0, [sp, #4]
 802a790:	2b00      	cmp	r3, #0
 802a792:	f1a1 0404 	sub.w	r4, r1, #4
 802a796:	bfb8      	it	lt
 802a798:	18e4      	addlt	r4, r4, r3
 802a79a:	f000 ffa1 	bl	802b6e0 <__malloc_lock>
 802a79e:	4a1e      	ldr	r2, [pc, #120]	; (802a818 <_free_r+0x94>)
 802a7a0:	9801      	ldr	r0, [sp, #4]
 802a7a2:	6813      	ldr	r3, [r2, #0]
 802a7a4:	b933      	cbnz	r3, 802a7b4 <_free_r+0x30>
 802a7a6:	6063      	str	r3, [r4, #4]
 802a7a8:	6014      	str	r4, [r2, #0]
 802a7aa:	b003      	add	sp, #12
 802a7ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a7b0:	f000 bf9c 	b.w	802b6ec <__malloc_unlock>
 802a7b4:	42a3      	cmp	r3, r4
 802a7b6:	d908      	bls.n	802a7ca <_free_r+0x46>
 802a7b8:	6825      	ldr	r5, [r4, #0]
 802a7ba:	1961      	adds	r1, r4, r5
 802a7bc:	428b      	cmp	r3, r1
 802a7be:	bf01      	itttt	eq
 802a7c0:	6819      	ldreq	r1, [r3, #0]
 802a7c2:	685b      	ldreq	r3, [r3, #4]
 802a7c4:	1949      	addeq	r1, r1, r5
 802a7c6:	6021      	streq	r1, [r4, #0]
 802a7c8:	e7ed      	b.n	802a7a6 <_free_r+0x22>
 802a7ca:	461a      	mov	r2, r3
 802a7cc:	685b      	ldr	r3, [r3, #4]
 802a7ce:	b10b      	cbz	r3, 802a7d4 <_free_r+0x50>
 802a7d0:	42a3      	cmp	r3, r4
 802a7d2:	d9fa      	bls.n	802a7ca <_free_r+0x46>
 802a7d4:	6811      	ldr	r1, [r2, #0]
 802a7d6:	1855      	adds	r5, r2, r1
 802a7d8:	42a5      	cmp	r5, r4
 802a7da:	d10b      	bne.n	802a7f4 <_free_r+0x70>
 802a7dc:	6824      	ldr	r4, [r4, #0]
 802a7de:	4421      	add	r1, r4
 802a7e0:	1854      	adds	r4, r2, r1
 802a7e2:	42a3      	cmp	r3, r4
 802a7e4:	6011      	str	r1, [r2, #0]
 802a7e6:	d1e0      	bne.n	802a7aa <_free_r+0x26>
 802a7e8:	681c      	ldr	r4, [r3, #0]
 802a7ea:	685b      	ldr	r3, [r3, #4]
 802a7ec:	6053      	str	r3, [r2, #4]
 802a7ee:	4421      	add	r1, r4
 802a7f0:	6011      	str	r1, [r2, #0]
 802a7f2:	e7da      	b.n	802a7aa <_free_r+0x26>
 802a7f4:	d902      	bls.n	802a7fc <_free_r+0x78>
 802a7f6:	230c      	movs	r3, #12
 802a7f8:	6003      	str	r3, [r0, #0]
 802a7fa:	e7d6      	b.n	802a7aa <_free_r+0x26>
 802a7fc:	6825      	ldr	r5, [r4, #0]
 802a7fe:	1961      	adds	r1, r4, r5
 802a800:	428b      	cmp	r3, r1
 802a802:	bf04      	itt	eq
 802a804:	6819      	ldreq	r1, [r3, #0]
 802a806:	685b      	ldreq	r3, [r3, #4]
 802a808:	6063      	str	r3, [r4, #4]
 802a80a:	bf04      	itt	eq
 802a80c:	1949      	addeq	r1, r1, r5
 802a80e:	6021      	streq	r1, [r4, #0]
 802a810:	6054      	str	r4, [r2, #4]
 802a812:	e7ca      	b.n	802a7aa <_free_r+0x26>
 802a814:	b003      	add	sp, #12
 802a816:	bd30      	pop	{r4, r5, pc}
 802a818:	200154a0 	.word	0x200154a0

0802a81c <sbrk_aligned>:
 802a81c:	b570      	push	{r4, r5, r6, lr}
 802a81e:	4e0e      	ldr	r6, [pc, #56]	; (802a858 <sbrk_aligned+0x3c>)
 802a820:	460c      	mov	r4, r1
 802a822:	6831      	ldr	r1, [r6, #0]
 802a824:	4605      	mov	r5, r0
 802a826:	b911      	cbnz	r1, 802a82e <sbrk_aligned+0x12>
 802a828:	f000 fb7a 	bl	802af20 <_sbrk_r>
 802a82c:	6030      	str	r0, [r6, #0]
 802a82e:	4621      	mov	r1, r4
 802a830:	4628      	mov	r0, r5
 802a832:	f000 fb75 	bl	802af20 <_sbrk_r>
 802a836:	1c43      	adds	r3, r0, #1
 802a838:	d00a      	beq.n	802a850 <sbrk_aligned+0x34>
 802a83a:	1cc4      	adds	r4, r0, #3
 802a83c:	f024 0403 	bic.w	r4, r4, #3
 802a840:	42a0      	cmp	r0, r4
 802a842:	d007      	beq.n	802a854 <sbrk_aligned+0x38>
 802a844:	1a21      	subs	r1, r4, r0
 802a846:	4628      	mov	r0, r5
 802a848:	f000 fb6a 	bl	802af20 <_sbrk_r>
 802a84c:	3001      	adds	r0, #1
 802a84e:	d101      	bne.n	802a854 <sbrk_aligned+0x38>
 802a850:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 802a854:	4620      	mov	r0, r4
 802a856:	bd70      	pop	{r4, r5, r6, pc}
 802a858:	200154a4 	.word	0x200154a4

0802a85c <_malloc_r>:
 802a85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a860:	1ccd      	adds	r5, r1, #3
 802a862:	f025 0503 	bic.w	r5, r5, #3
 802a866:	3508      	adds	r5, #8
 802a868:	2d0c      	cmp	r5, #12
 802a86a:	bf38      	it	cc
 802a86c:	250c      	movcc	r5, #12
 802a86e:	2d00      	cmp	r5, #0
 802a870:	4607      	mov	r7, r0
 802a872:	db01      	blt.n	802a878 <_malloc_r+0x1c>
 802a874:	42a9      	cmp	r1, r5
 802a876:	d905      	bls.n	802a884 <_malloc_r+0x28>
 802a878:	230c      	movs	r3, #12
 802a87a:	603b      	str	r3, [r7, #0]
 802a87c:	2600      	movs	r6, #0
 802a87e:	4630      	mov	r0, r6
 802a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a884:	4e2e      	ldr	r6, [pc, #184]	; (802a940 <_malloc_r+0xe4>)
 802a886:	f000 ff2b 	bl	802b6e0 <__malloc_lock>
 802a88a:	6833      	ldr	r3, [r6, #0]
 802a88c:	461c      	mov	r4, r3
 802a88e:	bb34      	cbnz	r4, 802a8de <_malloc_r+0x82>
 802a890:	4629      	mov	r1, r5
 802a892:	4638      	mov	r0, r7
 802a894:	f7ff ffc2 	bl	802a81c <sbrk_aligned>
 802a898:	1c43      	adds	r3, r0, #1
 802a89a:	4604      	mov	r4, r0
 802a89c:	d14d      	bne.n	802a93a <_malloc_r+0xde>
 802a89e:	6834      	ldr	r4, [r6, #0]
 802a8a0:	4626      	mov	r6, r4
 802a8a2:	2e00      	cmp	r6, #0
 802a8a4:	d140      	bne.n	802a928 <_malloc_r+0xcc>
 802a8a6:	6823      	ldr	r3, [r4, #0]
 802a8a8:	4631      	mov	r1, r6
 802a8aa:	4638      	mov	r0, r7
 802a8ac:	eb04 0803 	add.w	r8, r4, r3
 802a8b0:	f000 fb36 	bl	802af20 <_sbrk_r>
 802a8b4:	4580      	cmp	r8, r0
 802a8b6:	d13a      	bne.n	802a92e <_malloc_r+0xd2>
 802a8b8:	6821      	ldr	r1, [r4, #0]
 802a8ba:	3503      	adds	r5, #3
 802a8bc:	1a6d      	subs	r5, r5, r1
 802a8be:	f025 0503 	bic.w	r5, r5, #3
 802a8c2:	3508      	adds	r5, #8
 802a8c4:	2d0c      	cmp	r5, #12
 802a8c6:	bf38      	it	cc
 802a8c8:	250c      	movcc	r5, #12
 802a8ca:	4629      	mov	r1, r5
 802a8cc:	4638      	mov	r0, r7
 802a8ce:	f7ff ffa5 	bl	802a81c <sbrk_aligned>
 802a8d2:	3001      	adds	r0, #1
 802a8d4:	d02b      	beq.n	802a92e <_malloc_r+0xd2>
 802a8d6:	6823      	ldr	r3, [r4, #0]
 802a8d8:	442b      	add	r3, r5
 802a8da:	6023      	str	r3, [r4, #0]
 802a8dc:	e00e      	b.n	802a8fc <_malloc_r+0xa0>
 802a8de:	6822      	ldr	r2, [r4, #0]
 802a8e0:	1b52      	subs	r2, r2, r5
 802a8e2:	d41e      	bmi.n	802a922 <_malloc_r+0xc6>
 802a8e4:	2a0b      	cmp	r2, #11
 802a8e6:	d916      	bls.n	802a916 <_malloc_r+0xba>
 802a8e8:	1961      	adds	r1, r4, r5
 802a8ea:	42a3      	cmp	r3, r4
 802a8ec:	6025      	str	r5, [r4, #0]
 802a8ee:	bf18      	it	ne
 802a8f0:	6059      	strne	r1, [r3, #4]
 802a8f2:	6863      	ldr	r3, [r4, #4]
 802a8f4:	bf08      	it	eq
 802a8f6:	6031      	streq	r1, [r6, #0]
 802a8f8:	5162      	str	r2, [r4, r5]
 802a8fa:	604b      	str	r3, [r1, #4]
 802a8fc:	4638      	mov	r0, r7
 802a8fe:	f104 060b 	add.w	r6, r4, #11
 802a902:	f000 fef3 	bl	802b6ec <__malloc_unlock>
 802a906:	f026 0607 	bic.w	r6, r6, #7
 802a90a:	1d23      	adds	r3, r4, #4
 802a90c:	1af2      	subs	r2, r6, r3
 802a90e:	d0b6      	beq.n	802a87e <_malloc_r+0x22>
 802a910:	1b9b      	subs	r3, r3, r6
 802a912:	50a3      	str	r3, [r4, r2]
 802a914:	e7b3      	b.n	802a87e <_malloc_r+0x22>
 802a916:	6862      	ldr	r2, [r4, #4]
 802a918:	42a3      	cmp	r3, r4
 802a91a:	bf0c      	ite	eq
 802a91c:	6032      	streq	r2, [r6, #0]
 802a91e:	605a      	strne	r2, [r3, #4]
 802a920:	e7ec      	b.n	802a8fc <_malloc_r+0xa0>
 802a922:	4623      	mov	r3, r4
 802a924:	6864      	ldr	r4, [r4, #4]
 802a926:	e7b2      	b.n	802a88e <_malloc_r+0x32>
 802a928:	4634      	mov	r4, r6
 802a92a:	6876      	ldr	r6, [r6, #4]
 802a92c:	e7b9      	b.n	802a8a2 <_malloc_r+0x46>
 802a92e:	230c      	movs	r3, #12
 802a930:	603b      	str	r3, [r7, #0]
 802a932:	4638      	mov	r0, r7
 802a934:	f000 feda 	bl	802b6ec <__malloc_unlock>
 802a938:	e7a1      	b.n	802a87e <_malloc_r+0x22>
 802a93a:	6025      	str	r5, [r4, #0]
 802a93c:	e7de      	b.n	802a8fc <_malloc_r+0xa0>
 802a93e:	bf00      	nop
 802a940:	200154a0 	.word	0x200154a0

0802a944 <__sfputc_r>:
 802a944:	6893      	ldr	r3, [r2, #8]
 802a946:	3b01      	subs	r3, #1
 802a948:	2b00      	cmp	r3, #0
 802a94a:	b410      	push	{r4}
 802a94c:	6093      	str	r3, [r2, #8]
 802a94e:	da08      	bge.n	802a962 <__sfputc_r+0x1e>
 802a950:	6994      	ldr	r4, [r2, #24]
 802a952:	42a3      	cmp	r3, r4
 802a954:	db01      	blt.n	802a95a <__sfputc_r+0x16>
 802a956:	290a      	cmp	r1, #10
 802a958:	d103      	bne.n	802a962 <__sfputc_r+0x1e>
 802a95a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a95e:	f000 bb67 	b.w	802b030 <__swbuf_r>
 802a962:	6813      	ldr	r3, [r2, #0]
 802a964:	1c58      	adds	r0, r3, #1
 802a966:	6010      	str	r0, [r2, #0]
 802a968:	7019      	strb	r1, [r3, #0]
 802a96a:	4608      	mov	r0, r1
 802a96c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a970:	4770      	bx	lr

0802a972 <__sfputs_r>:
 802a972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a974:	4606      	mov	r6, r0
 802a976:	460f      	mov	r7, r1
 802a978:	4614      	mov	r4, r2
 802a97a:	18d5      	adds	r5, r2, r3
 802a97c:	42ac      	cmp	r4, r5
 802a97e:	d101      	bne.n	802a984 <__sfputs_r+0x12>
 802a980:	2000      	movs	r0, #0
 802a982:	e007      	b.n	802a994 <__sfputs_r+0x22>
 802a984:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a988:	463a      	mov	r2, r7
 802a98a:	4630      	mov	r0, r6
 802a98c:	f7ff ffda 	bl	802a944 <__sfputc_r>
 802a990:	1c43      	adds	r3, r0, #1
 802a992:	d1f3      	bne.n	802a97c <__sfputs_r+0xa>
 802a994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a998 <_vfiprintf_r>:
 802a998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a99c:	460d      	mov	r5, r1
 802a99e:	b09d      	sub	sp, #116	; 0x74
 802a9a0:	4614      	mov	r4, r2
 802a9a2:	4698      	mov	r8, r3
 802a9a4:	4606      	mov	r6, r0
 802a9a6:	b118      	cbz	r0, 802a9b0 <_vfiprintf_r+0x18>
 802a9a8:	6983      	ldr	r3, [r0, #24]
 802a9aa:	b90b      	cbnz	r3, 802a9b0 <_vfiprintf_r+0x18>
 802a9ac:	f000 fd7c 	bl	802b4a8 <__sinit>
 802a9b0:	4b89      	ldr	r3, [pc, #548]	; (802abd8 <_vfiprintf_r+0x240>)
 802a9b2:	429d      	cmp	r5, r3
 802a9b4:	d11b      	bne.n	802a9ee <_vfiprintf_r+0x56>
 802a9b6:	6875      	ldr	r5, [r6, #4]
 802a9b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a9ba:	07d9      	lsls	r1, r3, #31
 802a9bc:	d405      	bmi.n	802a9ca <_vfiprintf_r+0x32>
 802a9be:	89ab      	ldrh	r3, [r5, #12]
 802a9c0:	059a      	lsls	r2, r3, #22
 802a9c2:	d402      	bmi.n	802a9ca <_vfiprintf_r+0x32>
 802a9c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a9c6:	f7ff feb4 	bl	802a732 <__retarget_lock_acquire_recursive>
 802a9ca:	89ab      	ldrh	r3, [r5, #12]
 802a9cc:	071b      	lsls	r3, r3, #28
 802a9ce:	d501      	bpl.n	802a9d4 <_vfiprintf_r+0x3c>
 802a9d0:	692b      	ldr	r3, [r5, #16]
 802a9d2:	b9eb      	cbnz	r3, 802aa10 <_vfiprintf_r+0x78>
 802a9d4:	4629      	mov	r1, r5
 802a9d6:	4630      	mov	r0, r6
 802a9d8:	f000 fb7c 	bl	802b0d4 <__swsetup_r>
 802a9dc:	b1c0      	cbz	r0, 802aa10 <_vfiprintf_r+0x78>
 802a9de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a9e0:	07dc      	lsls	r4, r3, #31
 802a9e2:	d50e      	bpl.n	802aa02 <_vfiprintf_r+0x6a>
 802a9e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802a9e8:	b01d      	add	sp, #116	; 0x74
 802a9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a9ee:	4b7b      	ldr	r3, [pc, #492]	; (802abdc <_vfiprintf_r+0x244>)
 802a9f0:	429d      	cmp	r5, r3
 802a9f2:	d101      	bne.n	802a9f8 <_vfiprintf_r+0x60>
 802a9f4:	68b5      	ldr	r5, [r6, #8]
 802a9f6:	e7df      	b.n	802a9b8 <_vfiprintf_r+0x20>
 802a9f8:	4b79      	ldr	r3, [pc, #484]	; (802abe0 <_vfiprintf_r+0x248>)
 802a9fa:	429d      	cmp	r5, r3
 802a9fc:	bf08      	it	eq
 802a9fe:	68f5      	ldreq	r5, [r6, #12]
 802aa00:	e7da      	b.n	802a9b8 <_vfiprintf_r+0x20>
 802aa02:	89ab      	ldrh	r3, [r5, #12]
 802aa04:	0598      	lsls	r0, r3, #22
 802aa06:	d4ed      	bmi.n	802a9e4 <_vfiprintf_r+0x4c>
 802aa08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802aa0a:	f7ff fe94 	bl	802a736 <__retarget_lock_release_recursive>
 802aa0e:	e7e9      	b.n	802a9e4 <_vfiprintf_r+0x4c>
 802aa10:	2300      	movs	r3, #0
 802aa12:	9309      	str	r3, [sp, #36]	; 0x24
 802aa14:	2320      	movs	r3, #32
 802aa16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802aa1a:	f8cd 800c 	str.w	r8, [sp, #12]
 802aa1e:	2330      	movs	r3, #48	; 0x30
 802aa20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802abe4 <_vfiprintf_r+0x24c>
 802aa24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802aa28:	f04f 0901 	mov.w	r9, #1
 802aa2c:	4623      	mov	r3, r4
 802aa2e:	469a      	mov	sl, r3
 802aa30:	f813 2b01 	ldrb.w	r2, [r3], #1
 802aa34:	b10a      	cbz	r2, 802aa3a <_vfiprintf_r+0xa2>
 802aa36:	2a25      	cmp	r2, #37	; 0x25
 802aa38:	d1f9      	bne.n	802aa2e <_vfiprintf_r+0x96>
 802aa3a:	ebba 0b04 	subs.w	fp, sl, r4
 802aa3e:	d00b      	beq.n	802aa58 <_vfiprintf_r+0xc0>
 802aa40:	465b      	mov	r3, fp
 802aa42:	4622      	mov	r2, r4
 802aa44:	4629      	mov	r1, r5
 802aa46:	4630      	mov	r0, r6
 802aa48:	f7ff ff93 	bl	802a972 <__sfputs_r>
 802aa4c:	3001      	adds	r0, #1
 802aa4e:	f000 80aa 	beq.w	802aba6 <_vfiprintf_r+0x20e>
 802aa52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802aa54:	445a      	add	r2, fp
 802aa56:	9209      	str	r2, [sp, #36]	; 0x24
 802aa58:	f89a 3000 	ldrb.w	r3, [sl]
 802aa5c:	2b00      	cmp	r3, #0
 802aa5e:	f000 80a2 	beq.w	802aba6 <_vfiprintf_r+0x20e>
 802aa62:	2300      	movs	r3, #0
 802aa64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802aa68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802aa6c:	f10a 0a01 	add.w	sl, sl, #1
 802aa70:	9304      	str	r3, [sp, #16]
 802aa72:	9307      	str	r3, [sp, #28]
 802aa74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802aa78:	931a      	str	r3, [sp, #104]	; 0x68
 802aa7a:	4654      	mov	r4, sl
 802aa7c:	2205      	movs	r2, #5
 802aa7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aa82:	4858      	ldr	r0, [pc, #352]	; (802abe4 <_vfiprintf_r+0x24c>)
 802aa84:	f7d5 fbc4 	bl	8000210 <memchr>
 802aa88:	9a04      	ldr	r2, [sp, #16]
 802aa8a:	b9d8      	cbnz	r0, 802aac4 <_vfiprintf_r+0x12c>
 802aa8c:	06d1      	lsls	r1, r2, #27
 802aa8e:	bf44      	itt	mi
 802aa90:	2320      	movmi	r3, #32
 802aa92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802aa96:	0713      	lsls	r3, r2, #28
 802aa98:	bf44      	itt	mi
 802aa9a:	232b      	movmi	r3, #43	; 0x2b
 802aa9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802aaa0:	f89a 3000 	ldrb.w	r3, [sl]
 802aaa4:	2b2a      	cmp	r3, #42	; 0x2a
 802aaa6:	d015      	beq.n	802aad4 <_vfiprintf_r+0x13c>
 802aaa8:	9a07      	ldr	r2, [sp, #28]
 802aaaa:	4654      	mov	r4, sl
 802aaac:	2000      	movs	r0, #0
 802aaae:	f04f 0c0a 	mov.w	ip, #10
 802aab2:	4621      	mov	r1, r4
 802aab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802aab8:	3b30      	subs	r3, #48	; 0x30
 802aaba:	2b09      	cmp	r3, #9
 802aabc:	d94e      	bls.n	802ab5c <_vfiprintf_r+0x1c4>
 802aabe:	b1b0      	cbz	r0, 802aaee <_vfiprintf_r+0x156>
 802aac0:	9207      	str	r2, [sp, #28]
 802aac2:	e014      	b.n	802aaee <_vfiprintf_r+0x156>
 802aac4:	eba0 0308 	sub.w	r3, r0, r8
 802aac8:	fa09 f303 	lsl.w	r3, r9, r3
 802aacc:	4313      	orrs	r3, r2
 802aace:	9304      	str	r3, [sp, #16]
 802aad0:	46a2      	mov	sl, r4
 802aad2:	e7d2      	b.n	802aa7a <_vfiprintf_r+0xe2>
 802aad4:	9b03      	ldr	r3, [sp, #12]
 802aad6:	1d19      	adds	r1, r3, #4
 802aad8:	681b      	ldr	r3, [r3, #0]
 802aada:	9103      	str	r1, [sp, #12]
 802aadc:	2b00      	cmp	r3, #0
 802aade:	bfbb      	ittet	lt
 802aae0:	425b      	neglt	r3, r3
 802aae2:	f042 0202 	orrlt.w	r2, r2, #2
 802aae6:	9307      	strge	r3, [sp, #28]
 802aae8:	9307      	strlt	r3, [sp, #28]
 802aaea:	bfb8      	it	lt
 802aaec:	9204      	strlt	r2, [sp, #16]
 802aaee:	7823      	ldrb	r3, [r4, #0]
 802aaf0:	2b2e      	cmp	r3, #46	; 0x2e
 802aaf2:	d10c      	bne.n	802ab0e <_vfiprintf_r+0x176>
 802aaf4:	7863      	ldrb	r3, [r4, #1]
 802aaf6:	2b2a      	cmp	r3, #42	; 0x2a
 802aaf8:	d135      	bne.n	802ab66 <_vfiprintf_r+0x1ce>
 802aafa:	9b03      	ldr	r3, [sp, #12]
 802aafc:	1d1a      	adds	r2, r3, #4
 802aafe:	681b      	ldr	r3, [r3, #0]
 802ab00:	9203      	str	r2, [sp, #12]
 802ab02:	2b00      	cmp	r3, #0
 802ab04:	bfb8      	it	lt
 802ab06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802ab0a:	3402      	adds	r4, #2
 802ab0c:	9305      	str	r3, [sp, #20]
 802ab0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802abf4 <_vfiprintf_r+0x25c>
 802ab12:	7821      	ldrb	r1, [r4, #0]
 802ab14:	2203      	movs	r2, #3
 802ab16:	4650      	mov	r0, sl
 802ab18:	f7d5 fb7a 	bl	8000210 <memchr>
 802ab1c:	b140      	cbz	r0, 802ab30 <_vfiprintf_r+0x198>
 802ab1e:	2340      	movs	r3, #64	; 0x40
 802ab20:	eba0 000a 	sub.w	r0, r0, sl
 802ab24:	fa03 f000 	lsl.w	r0, r3, r0
 802ab28:	9b04      	ldr	r3, [sp, #16]
 802ab2a:	4303      	orrs	r3, r0
 802ab2c:	3401      	adds	r4, #1
 802ab2e:	9304      	str	r3, [sp, #16]
 802ab30:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ab34:	482c      	ldr	r0, [pc, #176]	; (802abe8 <_vfiprintf_r+0x250>)
 802ab36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ab3a:	2206      	movs	r2, #6
 802ab3c:	f7d5 fb68 	bl	8000210 <memchr>
 802ab40:	2800      	cmp	r0, #0
 802ab42:	d03f      	beq.n	802abc4 <_vfiprintf_r+0x22c>
 802ab44:	4b29      	ldr	r3, [pc, #164]	; (802abec <_vfiprintf_r+0x254>)
 802ab46:	bb1b      	cbnz	r3, 802ab90 <_vfiprintf_r+0x1f8>
 802ab48:	9b03      	ldr	r3, [sp, #12]
 802ab4a:	3307      	adds	r3, #7
 802ab4c:	f023 0307 	bic.w	r3, r3, #7
 802ab50:	3308      	adds	r3, #8
 802ab52:	9303      	str	r3, [sp, #12]
 802ab54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ab56:	443b      	add	r3, r7
 802ab58:	9309      	str	r3, [sp, #36]	; 0x24
 802ab5a:	e767      	b.n	802aa2c <_vfiprintf_r+0x94>
 802ab5c:	fb0c 3202 	mla	r2, ip, r2, r3
 802ab60:	460c      	mov	r4, r1
 802ab62:	2001      	movs	r0, #1
 802ab64:	e7a5      	b.n	802aab2 <_vfiprintf_r+0x11a>
 802ab66:	2300      	movs	r3, #0
 802ab68:	3401      	adds	r4, #1
 802ab6a:	9305      	str	r3, [sp, #20]
 802ab6c:	4619      	mov	r1, r3
 802ab6e:	f04f 0c0a 	mov.w	ip, #10
 802ab72:	4620      	mov	r0, r4
 802ab74:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ab78:	3a30      	subs	r2, #48	; 0x30
 802ab7a:	2a09      	cmp	r2, #9
 802ab7c:	d903      	bls.n	802ab86 <_vfiprintf_r+0x1ee>
 802ab7e:	2b00      	cmp	r3, #0
 802ab80:	d0c5      	beq.n	802ab0e <_vfiprintf_r+0x176>
 802ab82:	9105      	str	r1, [sp, #20]
 802ab84:	e7c3      	b.n	802ab0e <_vfiprintf_r+0x176>
 802ab86:	fb0c 2101 	mla	r1, ip, r1, r2
 802ab8a:	4604      	mov	r4, r0
 802ab8c:	2301      	movs	r3, #1
 802ab8e:	e7f0      	b.n	802ab72 <_vfiprintf_r+0x1da>
 802ab90:	ab03      	add	r3, sp, #12
 802ab92:	9300      	str	r3, [sp, #0]
 802ab94:	462a      	mov	r2, r5
 802ab96:	4b16      	ldr	r3, [pc, #88]	; (802abf0 <_vfiprintf_r+0x258>)
 802ab98:	a904      	add	r1, sp, #16
 802ab9a:	4630      	mov	r0, r6
 802ab9c:	f3af 8000 	nop.w
 802aba0:	4607      	mov	r7, r0
 802aba2:	1c78      	adds	r0, r7, #1
 802aba4:	d1d6      	bne.n	802ab54 <_vfiprintf_r+0x1bc>
 802aba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802aba8:	07d9      	lsls	r1, r3, #31
 802abaa:	d405      	bmi.n	802abb8 <_vfiprintf_r+0x220>
 802abac:	89ab      	ldrh	r3, [r5, #12]
 802abae:	059a      	lsls	r2, r3, #22
 802abb0:	d402      	bmi.n	802abb8 <_vfiprintf_r+0x220>
 802abb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802abb4:	f7ff fdbf 	bl	802a736 <__retarget_lock_release_recursive>
 802abb8:	89ab      	ldrh	r3, [r5, #12]
 802abba:	065b      	lsls	r3, r3, #25
 802abbc:	f53f af12 	bmi.w	802a9e4 <_vfiprintf_r+0x4c>
 802abc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802abc2:	e711      	b.n	802a9e8 <_vfiprintf_r+0x50>
 802abc4:	ab03      	add	r3, sp, #12
 802abc6:	9300      	str	r3, [sp, #0]
 802abc8:	462a      	mov	r2, r5
 802abca:	4b09      	ldr	r3, [pc, #36]	; (802abf0 <_vfiprintf_r+0x258>)
 802abcc:	a904      	add	r1, sp, #16
 802abce:	4630      	mov	r0, r6
 802abd0:	f000 f880 	bl	802acd4 <_printf_i>
 802abd4:	e7e4      	b.n	802aba0 <_vfiprintf_r+0x208>
 802abd6:	bf00      	nop
 802abd8:	08032a28 	.word	0x08032a28
 802abdc:	08032a48 	.word	0x08032a48
 802abe0:	08032a08 	.word	0x08032a08
 802abe4:	080329d0 	.word	0x080329d0
 802abe8:	080329da 	.word	0x080329da
 802abec:	00000000 	.word	0x00000000
 802abf0:	0802a973 	.word	0x0802a973
 802abf4:	080329d6 	.word	0x080329d6

0802abf8 <_printf_common>:
 802abf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802abfc:	4616      	mov	r6, r2
 802abfe:	4699      	mov	r9, r3
 802ac00:	688a      	ldr	r2, [r1, #8]
 802ac02:	690b      	ldr	r3, [r1, #16]
 802ac04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802ac08:	4293      	cmp	r3, r2
 802ac0a:	bfb8      	it	lt
 802ac0c:	4613      	movlt	r3, r2
 802ac0e:	6033      	str	r3, [r6, #0]
 802ac10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802ac14:	4607      	mov	r7, r0
 802ac16:	460c      	mov	r4, r1
 802ac18:	b10a      	cbz	r2, 802ac1e <_printf_common+0x26>
 802ac1a:	3301      	adds	r3, #1
 802ac1c:	6033      	str	r3, [r6, #0]
 802ac1e:	6823      	ldr	r3, [r4, #0]
 802ac20:	0699      	lsls	r1, r3, #26
 802ac22:	bf42      	ittt	mi
 802ac24:	6833      	ldrmi	r3, [r6, #0]
 802ac26:	3302      	addmi	r3, #2
 802ac28:	6033      	strmi	r3, [r6, #0]
 802ac2a:	6825      	ldr	r5, [r4, #0]
 802ac2c:	f015 0506 	ands.w	r5, r5, #6
 802ac30:	d106      	bne.n	802ac40 <_printf_common+0x48>
 802ac32:	f104 0a19 	add.w	sl, r4, #25
 802ac36:	68e3      	ldr	r3, [r4, #12]
 802ac38:	6832      	ldr	r2, [r6, #0]
 802ac3a:	1a9b      	subs	r3, r3, r2
 802ac3c:	42ab      	cmp	r3, r5
 802ac3e:	dc26      	bgt.n	802ac8e <_printf_common+0x96>
 802ac40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802ac44:	1e13      	subs	r3, r2, #0
 802ac46:	6822      	ldr	r2, [r4, #0]
 802ac48:	bf18      	it	ne
 802ac4a:	2301      	movne	r3, #1
 802ac4c:	0692      	lsls	r2, r2, #26
 802ac4e:	d42b      	bmi.n	802aca8 <_printf_common+0xb0>
 802ac50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802ac54:	4649      	mov	r1, r9
 802ac56:	4638      	mov	r0, r7
 802ac58:	47c0      	blx	r8
 802ac5a:	3001      	adds	r0, #1
 802ac5c:	d01e      	beq.n	802ac9c <_printf_common+0xa4>
 802ac5e:	6823      	ldr	r3, [r4, #0]
 802ac60:	68e5      	ldr	r5, [r4, #12]
 802ac62:	6832      	ldr	r2, [r6, #0]
 802ac64:	f003 0306 	and.w	r3, r3, #6
 802ac68:	2b04      	cmp	r3, #4
 802ac6a:	bf08      	it	eq
 802ac6c:	1aad      	subeq	r5, r5, r2
 802ac6e:	68a3      	ldr	r3, [r4, #8]
 802ac70:	6922      	ldr	r2, [r4, #16]
 802ac72:	bf0c      	ite	eq
 802ac74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802ac78:	2500      	movne	r5, #0
 802ac7a:	4293      	cmp	r3, r2
 802ac7c:	bfc4      	itt	gt
 802ac7e:	1a9b      	subgt	r3, r3, r2
 802ac80:	18ed      	addgt	r5, r5, r3
 802ac82:	2600      	movs	r6, #0
 802ac84:	341a      	adds	r4, #26
 802ac86:	42b5      	cmp	r5, r6
 802ac88:	d11a      	bne.n	802acc0 <_printf_common+0xc8>
 802ac8a:	2000      	movs	r0, #0
 802ac8c:	e008      	b.n	802aca0 <_printf_common+0xa8>
 802ac8e:	2301      	movs	r3, #1
 802ac90:	4652      	mov	r2, sl
 802ac92:	4649      	mov	r1, r9
 802ac94:	4638      	mov	r0, r7
 802ac96:	47c0      	blx	r8
 802ac98:	3001      	adds	r0, #1
 802ac9a:	d103      	bne.n	802aca4 <_printf_common+0xac>
 802ac9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802aca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802aca4:	3501      	adds	r5, #1
 802aca6:	e7c6      	b.n	802ac36 <_printf_common+0x3e>
 802aca8:	18e1      	adds	r1, r4, r3
 802acaa:	1c5a      	adds	r2, r3, #1
 802acac:	2030      	movs	r0, #48	; 0x30
 802acae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802acb2:	4422      	add	r2, r4
 802acb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802acb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802acbc:	3302      	adds	r3, #2
 802acbe:	e7c7      	b.n	802ac50 <_printf_common+0x58>
 802acc0:	2301      	movs	r3, #1
 802acc2:	4622      	mov	r2, r4
 802acc4:	4649      	mov	r1, r9
 802acc6:	4638      	mov	r0, r7
 802acc8:	47c0      	blx	r8
 802acca:	3001      	adds	r0, #1
 802accc:	d0e6      	beq.n	802ac9c <_printf_common+0xa4>
 802acce:	3601      	adds	r6, #1
 802acd0:	e7d9      	b.n	802ac86 <_printf_common+0x8e>
	...

0802acd4 <_printf_i>:
 802acd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802acd8:	7e0f      	ldrb	r7, [r1, #24]
 802acda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802acdc:	2f78      	cmp	r7, #120	; 0x78
 802acde:	4691      	mov	r9, r2
 802ace0:	4680      	mov	r8, r0
 802ace2:	460c      	mov	r4, r1
 802ace4:	469a      	mov	sl, r3
 802ace6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802acea:	d807      	bhi.n	802acfc <_printf_i+0x28>
 802acec:	2f62      	cmp	r7, #98	; 0x62
 802acee:	d80a      	bhi.n	802ad06 <_printf_i+0x32>
 802acf0:	2f00      	cmp	r7, #0
 802acf2:	f000 80d8 	beq.w	802aea6 <_printf_i+0x1d2>
 802acf6:	2f58      	cmp	r7, #88	; 0x58
 802acf8:	f000 80a3 	beq.w	802ae42 <_printf_i+0x16e>
 802acfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ad00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802ad04:	e03a      	b.n	802ad7c <_printf_i+0xa8>
 802ad06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802ad0a:	2b15      	cmp	r3, #21
 802ad0c:	d8f6      	bhi.n	802acfc <_printf_i+0x28>
 802ad0e:	a101      	add	r1, pc, #4	; (adr r1, 802ad14 <_printf_i+0x40>)
 802ad10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ad14:	0802ad6d 	.word	0x0802ad6d
 802ad18:	0802ad81 	.word	0x0802ad81
 802ad1c:	0802acfd 	.word	0x0802acfd
 802ad20:	0802acfd 	.word	0x0802acfd
 802ad24:	0802acfd 	.word	0x0802acfd
 802ad28:	0802acfd 	.word	0x0802acfd
 802ad2c:	0802ad81 	.word	0x0802ad81
 802ad30:	0802acfd 	.word	0x0802acfd
 802ad34:	0802acfd 	.word	0x0802acfd
 802ad38:	0802acfd 	.word	0x0802acfd
 802ad3c:	0802acfd 	.word	0x0802acfd
 802ad40:	0802ae8d 	.word	0x0802ae8d
 802ad44:	0802adb1 	.word	0x0802adb1
 802ad48:	0802ae6f 	.word	0x0802ae6f
 802ad4c:	0802acfd 	.word	0x0802acfd
 802ad50:	0802acfd 	.word	0x0802acfd
 802ad54:	0802aeaf 	.word	0x0802aeaf
 802ad58:	0802acfd 	.word	0x0802acfd
 802ad5c:	0802adb1 	.word	0x0802adb1
 802ad60:	0802acfd 	.word	0x0802acfd
 802ad64:	0802acfd 	.word	0x0802acfd
 802ad68:	0802ae77 	.word	0x0802ae77
 802ad6c:	682b      	ldr	r3, [r5, #0]
 802ad6e:	1d1a      	adds	r2, r3, #4
 802ad70:	681b      	ldr	r3, [r3, #0]
 802ad72:	602a      	str	r2, [r5, #0]
 802ad74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ad78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ad7c:	2301      	movs	r3, #1
 802ad7e:	e0a3      	b.n	802aec8 <_printf_i+0x1f4>
 802ad80:	6820      	ldr	r0, [r4, #0]
 802ad82:	6829      	ldr	r1, [r5, #0]
 802ad84:	0606      	lsls	r6, r0, #24
 802ad86:	f101 0304 	add.w	r3, r1, #4
 802ad8a:	d50a      	bpl.n	802ada2 <_printf_i+0xce>
 802ad8c:	680e      	ldr	r6, [r1, #0]
 802ad8e:	602b      	str	r3, [r5, #0]
 802ad90:	2e00      	cmp	r6, #0
 802ad92:	da03      	bge.n	802ad9c <_printf_i+0xc8>
 802ad94:	232d      	movs	r3, #45	; 0x2d
 802ad96:	4276      	negs	r6, r6
 802ad98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ad9c:	485e      	ldr	r0, [pc, #376]	; (802af18 <_printf_i+0x244>)
 802ad9e:	230a      	movs	r3, #10
 802ada0:	e019      	b.n	802add6 <_printf_i+0x102>
 802ada2:	680e      	ldr	r6, [r1, #0]
 802ada4:	602b      	str	r3, [r5, #0]
 802ada6:	f010 0f40 	tst.w	r0, #64	; 0x40
 802adaa:	bf18      	it	ne
 802adac:	b236      	sxthne	r6, r6
 802adae:	e7ef      	b.n	802ad90 <_printf_i+0xbc>
 802adb0:	682b      	ldr	r3, [r5, #0]
 802adb2:	6820      	ldr	r0, [r4, #0]
 802adb4:	1d19      	adds	r1, r3, #4
 802adb6:	6029      	str	r1, [r5, #0]
 802adb8:	0601      	lsls	r1, r0, #24
 802adba:	d501      	bpl.n	802adc0 <_printf_i+0xec>
 802adbc:	681e      	ldr	r6, [r3, #0]
 802adbe:	e002      	b.n	802adc6 <_printf_i+0xf2>
 802adc0:	0646      	lsls	r6, r0, #25
 802adc2:	d5fb      	bpl.n	802adbc <_printf_i+0xe8>
 802adc4:	881e      	ldrh	r6, [r3, #0]
 802adc6:	4854      	ldr	r0, [pc, #336]	; (802af18 <_printf_i+0x244>)
 802adc8:	2f6f      	cmp	r7, #111	; 0x6f
 802adca:	bf0c      	ite	eq
 802adcc:	2308      	moveq	r3, #8
 802adce:	230a      	movne	r3, #10
 802add0:	2100      	movs	r1, #0
 802add2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802add6:	6865      	ldr	r5, [r4, #4]
 802add8:	60a5      	str	r5, [r4, #8]
 802adda:	2d00      	cmp	r5, #0
 802addc:	bfa2      	ittt	ge
 802adde:	6821      	ldrge	r1, [r4, #0]
 802ade0:	f021 0104 	bicge.w	r1, r1, #4
 802ade4:	6021      	strge	r1, [r4, #0]
 802ade6:	b90e      	cbnz	r6, 802adec <_printf_i+0x118>
 802ade8:	2d00      	cmp	r5, #0
 802adea:	d04d      	beq.n	802ae88 <_printf_i+0x1b4>
 802adec:	4615      	mov	r5, r2
 802adee:	fbb6 f1f3 	udiv	r1, r6, r3
 802adf2:	fb03 6711 	mls	r7, r3, r1, r6
 802adf6:	5dc7      	ldrb	r7, [r0, r7]
 802adf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802adfc:	4637      	mov	r7, r6
 802adfe:	42bb      	cmp	r3, r7
 802ae00:	460e      	mov	r6, r1
 802ae02:	d9f4      	bls.n	802adee <_printf_i+0x11a>
 802ae04:	2b08      	cmp	r3, #8
 802ae06:	d10b      	bne.n	802ae20 <_printf_i+0x14c>
 802ae08:	6823      	ldr	r3, [r4, #0]
 802ae0a:	07de      	lsls	r6, r3, #31
 802ae0c:	d508      	bpl.n	802ae20 <_printf_i+0x14c>
 802ae0e:	6923      	ldr	r3, [r4, #16]
 802ae10:	6861      	ldr	r1, [r4, #4]
 802ae12:	4299      	cmp	r1, r3
 802ae14:	bfde      	ittt	le
 802ae16:	2330      	movle	r3, #48	; 0x30
 802ae18:	f805 3c01 	strble.w	r3, [r5, #-1]
 802ae1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 802ae20:	1b52      	subs	r2, r2, r5
 802ae22:	6122      	str	r2, [r4, #16]
 802ae24:	f8cd a000 	str.w	sl, [sp]
 802ae28:	464b      	mov	r3, r9
 802ae2a:	aa03      	add	r2, sp, #12
 802ae2c:	4621      	mov	r1, r4
 802ae2e:	4640      	mov	r0, r8
 802ae30:	f7ff fee2 	bl	802abf8 <_printf_common>
 802ae34:	3001      	adds	r0, #1
 802ae36:	d14c      	bne.n	802aed2 <_printf_i+0x1fe>
 802ae38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802ae3c:	b004      	add	sp, #16
 802ae3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ae42:	4835      	ldr	r0, [pc, #212]	; (802af18 <_printf_i+0x244>)
 802ae44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802ae48:	6829      	ldr	r1, [r5, #0]
 802ae4a:	6823      	ldr	r3, [r4, #0]
 802ae4c:	f851 6b04 	ldr.w	r6, [r1], #4
 802ae50:	6029      	str	r1, [r5, #0]
 802ae52:	061d      	lsls	r5, r3, #24
 802ae54:	d514      	bpl.n	802ae80 <_printf_i+0x1ac>
 802ae56:	07df      	lsls	r7, r3, #31
 802ae58:	bf44      	itt	mi
 802ae5a:	f043 0320 	orrmi.w	r3, r3, #32
 802ae5e:	6023      	strmi	r3, [r4, #0]
 802ae60:	b91e      	cbnz	r6, 802ae6a <_printf_i+0x196>
 802ae62:	6823      	ldr	r3, [r4, #0]
 802ae64:	f023 0320 	bic.w	r3, r3, #32
 802ae68:	6023      	str	r3, [r4, #0]
 802ae6a:	2310      	movs	r3, #16
 802ae6c:	e7b0      	b.n	802add0 <_printf_i+0xfc>
 802ae6e:	6823      	ldr	r3, [r4, #0]
 802ae70:	f043 0320 	orr.w	r3, r3, #32
 802ae74:	6023      	str	r3, [r4, #0]
 802ae76:	2378      	movs	r3, #120	; 0x78
 802ae78:	4828      	ldr	r0, [pc, #160]	; (802af1c <_printf_i+0x248>)
 802ae7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802ae7e:	e7e3      	b.n	802ae48 <_printf_i+0x174>
 802ae80:	0659      	lsls	r1, r3, #25
 802ae82:	bf48      	it	mi
 802ae84:	b2b6      	uxthmi	r6, r6
 802ae86:	e7e6      	b.n	802ae56 <_printf_i+0x182>
 802ae88:	4615      	mov	r5, r2
 802ae8a:	e7bb      	b.n	802ae04 <_printf_i+0x130>
 802ae8c:	682b      	ldr	r3, [r5, #0]
 802ae8e:	6826      	ldr	r6, [r4, #0]
 802ae90:	6961      	ldr	r1, [r4, #20]
 802ae92:	1d18      	adds	r0, r3, #4
 802ae94:	6028      	str	r0, [r5, #0]
 802ae96:	0635      	lsls	r5, r6, #24
 802ae98:	681b      	ldr	r3, [r3, #0]
 802ae9a:	d501      	bpl.n	802aea0 <_printf_i+0x1cc>
 802ae9c:	6019      	str	r1, [r3, #0]
 802ae9e:	e002      	b.n	802aea6 <_printf_i+0x1d2>
 802aea0:	0670      	lsls	r0, r6, #25
 802aea2:	d5fb      	bpl.n	802ae9c <_printf_i+0x1c8>
 802aea4:	8019      	strh	r1, [r3, #0]
 802aea6:	2300      	movs	r3, #0
 802aea8:	6123      	str	r3, [r4, #16]
 802aeaa:	4615      	mov	r5, r2
 802aeac:	e7ba      	b.n	802ae24 <_printf_i+0x150>
 802aeae:	682b      	ldr	r3, [r5, #0]
 802aeb0:	1d1a      	adds	r2, r3, #4
 802aeb2:	602a      	str	r2, [r5, #0]
 802aeb4:	681d      	ldr	r5, [r3, #0]
 802aeb6:	6862      	ldr	r2, [r4, #4]
 802aeb8:	2100      	movs	r1, #0
 802aeba:	4628      	mov	r0, r5
 802aebc:	f7d5 f9a8 	bl	8000210 <memchr>
 802aec0:	b108      	cbz	r0, 802aec6 <_printf_i+0x1f2>
 802aec2:	1b40      	subs	r0, r0, r5
 802aec4:	6060      	str	r0, [r4, #4]
 802aec6:	6863      	ldr	r3, [r4, #4]
 802aec8:	6123      	str	r3, [r4, #16]
 802aeca:	2300      	movs	r3, #0
 802aecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802aed0:	e7a8      	b.n	802ae24 <_printf_i+0x150>
 802aed2:	6923      	ldr	r3, [r4, #16]
 802aed4:	462a      	mov	r2, r5
 802aed6:	4649      	mov	r1, r9
 802aed8:	4640      	mov	r0, r8
 802aeda:	47d0      	blx	sl
 802aedc:	3001      	adds	r0, #1
 802aede:	d0ab      	beq.n	802ae38 <_printf_i+0x164>
 802aee0:	6823      	ldr	r3, [r4, #0]
 802aee2:	079b      	lsls	r3, r3, #30
 802aee4:	d413      	bmi.n	802af0e <_printf_i+0x23a>
 802aee6:	68e0      	ldr	r0, [r4, #12]
 802aee8:	9b03      	ldr	r3, [sp, #12]
 802aeea:	4298      	cmp	r0, r3
 802aeec:	bfb8      	it	lt
 802aeee:	4618      	movlt	r0, r3
 802aef0:	e7a4      	b.n	802ae3c <_printf_i+0x168>
 802aef2:	2301      	movs	r3, #1
 802aef4:	4632      	mov	r2, r6
 802aef6:	4649      	mov	r1, r9
 802aef8:	4640      	mov	r0, r8
 802aefa:	47d0      	blx	sl
 802aefc:	3001      	adds	r0, #1
 802aefe:	d09b      	beq.n	802ae38 <_printf_i+0x164>
 802af00:	3501      	adds	r5, #1
 802af02:	68e3      	ldr	r3, [r4, #12]
 802af04:	9903      	ldr	r1, [sp, #12]
 802af06:	1a5b      	subs	r3, r3, r1
 802af08:	42ab      	cmp	r3, r5
 802af0a:	dcf2      	bgt.n	802aef2 <_printf_i+0x21e>
 802af0c:	e7eb      	b.n	802aee6 <_printf_i+0x212>
 802af0e:	2500      	movs	r5, #0
 802af10:	f104 0619 	add.w	r6, r4, #25
 802af14:	e7f5      	b.n	802af02 <_printf_i+0x22e>
 802af16:	bf00      	nop
 802af18:	080329e1 	.word	0x080329e1
 802af1c:	080329f2 	.word	0x080329f2

0802af20 <_sbrk_r>:
 802af20:	b538      	push	{r3, r4, r5, lr}
 802af22:	4d06      	ldr	r5, [pc, #24]	; (802af3c <_sbrk_r+0x1c>)
 802af24:	2300      	movs	r3, #0
 802af26:	4604      	mov	r4, r0
 802af28:	4608      	mov	r0, r1
 802af2a:	602b      	str	r3, [r5, #0]
 802af2c:	f7d6 fd0c 	bl	8001948 <_sbrk>
 802af30:	1c43      	adds	r3, r0, #1
 802af32:	d102      	bne.n	802af3a <_sbrk_r+0x1a>
 802af34:	682b      	ldr	r3, [r5, #0]
 802af36:	b103      	cbz	r3, 802af3a <_sbrk_r+0x1a>
 802af38:	6023      	str	r3, [r4, #0]
 802af3a:	bd38      	pop	{r3, r4, r5, pc}
 802af3c:	20015640 	.word	0x20015640

0802af40 <_raise_r>:
 802af40:	291f      	cmp	r1, #31
 802af42:	b538      	push	{r3, r4, r5, lr}
 802af44:	4604      	mov	r4, r0
 802af46:	460d      	mov	r5, r1
 802af48:	d904      	bls.n	802af54 <_raise_r+0x14>
 802af4a:	2316      	movs	r3, #22
 802af4c:	6003      	str	r3, [r0, #0]
 802af4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802af52:	bd38      	pop	{r3, r4, r5, pc}
 802af54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802af56:	b112      	cbz	r2, 802af5e <_raise_r+0x1e>
 802af58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802af5c:	b94b      	cbnz	r3, 802af72 <_raise_r+0x32>
 802af5e:	4620      	mov	r0, r4
 802af60:	f000 f830 	bl	802afc4 <_getpid_r>
 802af64:	462a      	mov	r2, r5
 802af66:	4601      	mov	r1, r0
 802af68:	4620      	mov	r0, r4
 802af6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802af6e:	f000 b817 	b.w	802afa0 <_kill_r>
 802af72:	2b01      	cmp	r3, #1
 802af74:	d00a      	beq.n	802af8c <_raise_r+0x4c>
 802af76:	1c59      	adds	r1, r3, #1
 802af78:	d103      	bne.n	802af82 <_raise_r+0x42>
 802af7a:	2316      	movs	r3, #22
 802af7c:	6003      	str	r3, [r0, #0]
 802af7e:	2001      	movs	r0, #1
 802af80:	e7e7      	b.n	802af52 <_raise_r+0x12>
 802af82:	2400      	movs	r4, #0
 802af84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802af88:	4628      	mov	r0, r5
 802af8a:	4798      	blx	r3
 802af8c:	2000      	movs	r0, #0
 802af8e:	e7e0      	b.n	802af52 <_raise_r+0x12>

0802af90 <raise>:
 802af90:	4b02      	ldr	r3, [pc, #8]	; (802af9c <raise+0xc>)
 802af92:	4601      	mov	r1, r0
 802af94:	6818      	ldr	r0, [r3, #0]
 802af96:	f7ff bfd3 	b.w	802af40 <_raise_r>
 802af9a:	bf00      	nop
 802af9c:	200000bc 	.word	0x200000bc

0802afa0 <_kill_r>:
 802afa0:	b538      	push	{r3, r4, r5, lr}
 802afa2:	4d07      	ldr	r5, [pc, #28]	; (802afc0 <_kill_r+0x20>)
 802afa4:	2300      	movs	r3, #0
 802afa6:	4604      	mov	r4, r0
 802afa8:	4608      	mov	r0, r1
 802afaa:	4611      	mov	r1, r2
 802afac:	602b      	str	r3, [r5, #0]
 802afae:	f7d6 fc95 	bl	80018dc <_kill>
 802afb2:	1c43      	adds	r3, r0, #1
 802afb4:	d102      	bne.n	802afbc <_kill_r+0x1c>
 802afb6:	682b      	ldr	r3, [r5, #0]
 802afb8:	b103      	cbz	r3, 802afbc <_kill_r+0x1c>
 802afba:	6023      	str	r3, [r4, #0]
 802afbc:	bd38      	pop	{r3, r4, r5, pc}
 802afbe:	bf00      	nop
 802afc0:	20015640 	.word	0x20015640

0802afc4 <_getpid_r>:
 802afc4:	f7d6 bc88 	b.w	80018d8 <_getpid>

0802afc8 <siprintf>:
 802afc8:	b40e      	push	{r1, r2, r3}
 802afca:	b500      	push	{lr}
 802afcc:	b09c      	sub	sp, #112	; 0x70
 802afce:	ab1d      	add	r3, sp, #116	; 0x74
 802afd0:	9002      	str	r0, [sp, #8]
 802afd2:	9006      	str	r0, [sp, #24]
 802afd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802afd8:	4809      	ldr	r0, [pc, #36]	; (802b000 <siprintf+0x38>)
 802afda:	9107      	str	r1, [sp, #28]
 802afdc:	9104      	str	r1, [sp, #16]
 802afde:	4909      	ldr	r1, [pc, #36]	; (802b004 <siprintf+0x3c>)
 802afe0:	f853 2b04 	ldr.w	r2, [r3], #4
 802afe4:	9105      	str	r1, [sp, #20]
 802afe6:	6800      	ldr	r0, [r0, #0]
 802afe8:	9301      	str	r3, [sp, #4]
 802afea:	a902      	add	r1, sp, #8
 802afec:	f000 fc0e 	bl	802b80c <_svfiprintf_r>
 802aff0:	9b02      	ldr	r3, [sp, #8]
 802aff2:	2200      	movs	r2, #0
 802aff4:	701a      	strb	r2, [r3, #0]
 802aff6:	b01c      	add	sp, #112	; 0x70
 802aff8:	f85d eb04 	ldr.w	lr, [sp], #4
 802affc:	b003      	add	sp, #12
 802affe:	4770      	bx	lr
 802b000:	200000bc 	.word	0x200000bc
 802b004:	ffff0208 	.word	0xffff0208

0802b008 <strncmp>:
 802b008:	b510      	push	{r4, lr}
 802b00a:	b17a      	cbz	r2, 802b02c <strncmp+0x24>
 802b00c:	4603      	mov	r3, r0
 802b00e:	3901      	subs	r1, #1
 802b010:	1884      	adds	r4, r0, r2
 802b012:	f813 0b01 	ldrb.w	r0, [r3], #1
 802b016:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802b01a:	4290      	cmp	r0, r2
 802b01c:	d101      	bne.n	802b022 <strncmp+0x1a>
 802b01e:	42a3      	cmp	r3, r4
 802b020:	d101      	bne.n	802b026 <strncmp+0x1e>
 802b022:	1a80      	subs	r0, r0, r2
 802b024:	bd10      	pop	{r4, pc}
 802b026:	2800      	cmp	r0, #0
 802b028:	d1f3      	bne.n	802b012 <strncmp+0xa>
 802b02a:	e7fa      	b.n	802b022 <strncmp+0x1a>
 802b02c:	4610      	mov	r0, r2
 802b02e:	e7f9      	b.n	802b024 <strncmp+0x1c>

0802b030 <__swbuf_r>:
 802b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b032:	460e      	mov	r6, r1
 802b034:	4614      	mov	r4, r2
 802b036:	4605      	mov	r5, r0
 802b038:	b118      	cbz	r0, 802b042 <__swbuf_r+0x12>
 802b03a:	6983      	ldr	r3, [r0, #24]
 802b03c:	b90b      	cbnz	r3, 802b042 <__swbuf_r+0x12>
 802b03e:	f000 fa33 	bl	802b4a8 <__sinit>
 802b042:	4b21      	ldr	r3, [pc, #132]	; (802b0c8 <__swbuf_r+0x98>)
 802b044:	429c      	cmp	r4, r3
 802b046:	d12b      	bne.n	802b0a0 <__swbuf_r+0x70>
 802b048:	686c      	ldr	r4, [r5, #4]
 802b04a:	69a3      	ldr	r3, [r4, #24]
 802b04c:	60a3      	str	r3, [r4, #8]
 802b04e:	89a3      	ldrh	r3, [r4, #12]
 802b050:	071a      	lsls	r2, r3, #28
 802b052:	d52f      	bpl.n	802b0b4 <__swbuf_r+0x84>
 802b054:	6923      	ldr	r3, [r4, #16]
 802b056:	b36b      	cbz	r3, 802b0b4 <__swbuf_r+0x84>
 802b058:	6923      	ldr	r3, [r4, #16]
 802b05a:	6820      	ldr	r0, [r4, #0]
 802b05c:	1ac0      	subs	r0, r0, r3
 802b05e:	6963      	ldr	r3, [r4, #20]
 802b060:	b2f6      	uxtb	r6, r6
 802b062:	4283      	cmp	r3, r0
 802b064:	4637      	mov	r7, r6
 802b066:	dc04      	bgt.n	802b072 <__swbuf_r+0x42>
 802b068:	4621      	mov	r1, r4
 802b06a:	4628      	mov	r0, r5
 802b06c:	f000 f988 	bl	802b380 <_fflush_r>
 802b070:	bb30      	cbnz	r0, 802b0c0 <__swbuf_r+0x90>
 802b072:	68a3      	ldr	r3, [r4, #8]
 802b074:	3b01      	subs	r3, #1
 802b076:	60a3      	str	r3, [r4, #8]
 802b078:	6823      	ldr	r3, [r4, #0]
 802b07a:	1c5a      	adds	r2, r3, #1
 802b07c:	6022      	str	r2, [r4, #0]
 802b07e:	701e      	strb	r6, [r3, #0]
 802b080:	6963      	ldr	r3, [r4, #20]
 802b082:	3001      	adds	r0, #1
 802b084:	4283      	cmp	r3, r0
 802b086:	d004      	beq.n	802b092 <__swbuf_r+0x62>
 802b088:	89a3      	ldrh	r3, [r4, #12]
 802b08a:	07db      	lsls	r3, r3, #31
 802b08c:	d506      	bpl.n	802b09c <__swbuf_r+0x6c>
 802b08e:	2e0a      	cmp	r6, #10
 802b090:	d104      	bne.n	802b09c <__swbuf_r+0x6c>
 802b092:	4621      	mov	r1, r4
 802b094:	4628      	mov	r0, r5
 802b096:	f000 f973 	bl	802b380 <_fflush_r>
 802b09a:	b988      	cbnz	r0, 802b0c0 <__swbuf_r+0x90>
 802b09c:	4638      	mov	r0, r7
 802b09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b0a0:	4b0a      	ldr	r3, [pc, #40]	; (802b0cc <__swbuf_r+0x9c>)
 802b0a2:	429c      	cmp	r4, r3
 802b0a4:	d101      	bne.n	802b0aa <__swbuf_r+0x7a>
 802b0a6:	68ac      	ldr	r4, [r5, #8]
 802b0a8:	e7cf      	b.n	802b04a <__swbuf_r+0x1a>
 802b0aa:	4b09      	ldr	r3, [pc, #36]	; (802b0d0 <__swbuf_r+0xa0>)
 802b0ac:	429c      	cmp	r4, r3
 802b0ae:	bf08      	it	eq
 802b0b0:	68ec      	ldreq	r4, [r5, #12]
 802b0b2:	e7ca      	b.n	802b04a <__swbuf_r+0x1a>
 802b0b4:	4621      	mov	r1, r4
 802b0b6:	4628      	mov	r0, r5
 802b0b8:	f000 f80c 	bl	802b0d4 <__swsetup_r>
 802b0bc:	2800      	cmp	r0, #0
 802b0be:	d0cb      	beq.n	802b058 <__swbuf_r+0x28>
 802b0c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802b0c4:	e7ea      	b.n	802b09c <__swbuf_r+0x6c>
 802b0c6:	bf00      	nop
 802b0c8:	08032a28 	.word	0x08032a28
 802b0cc:	08032a48 	.word	0x08032a48
 802b0d0:	08032a08 	.word	0x08032a08

0802b0d4 <__swsetup_r>:
 802b0d4:	4b32      	ldr	r3, [pc, #200]	; (802b1a0 <__swsetup_r+0xcc>)
 802b0d6:	b570      	push	{r4, r5, r6, lr}
 802b0d8:	681d      	ldr	r5, [r3, #0]
 802b0da:	4606      	mov	r6, r0
 802b0dc:	460c      	mov	r4, r1
 802b0de:	b125      	cbz	r5, 802b0ea <__swsetup_r+0x16>
 802b0e0:	69ab      	ldr	r3, [r5, #24]
 802b0e2:	b913      	cbnz	r3, 802b0ea <__swsetup_r+0x16>
 802b0e4:	4628      	mov	r0, r5
 802b0e6:	f000 f9df 	bl	802b4a8 <__sinit>
 802b0ea:	4b2e      	ldr	r3, [pc, #184]	; (802b1a4 <__swsetup_r+0xd0>)
 802b0ec:	429c      	cmp	r4, r3
 802b0ee:	d10f      	bne.n	802b110 <__swsetup_r+0x3c>
 802b0f0:	686c      	ldr	r4, [r5, #4]
 802b0f2:	89a3      	ldrh	r3, [r4, #12]
 802b0f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b0f8:	0719      	lsls	r1, r3, #28
 802b0fa:	d42c      	bmi.n	802b156 <__swsetup_r+0x82>
 802b0fc:	06dd      	lsls	r5, r3, #27
 802b0fe:	d411      	bmi.n	802b124 <__swsetup_r+0x50>
 802b100:	2309      	movs	r3, #9
 802b102:	6033      	str	r3, [r6, #0]
 802b104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b108:	81a3      	strh	r3, [r4, #12]
 802b10a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b10e:	e03e      	b.n	802b18e <__swsetup_r+0xba>
 802b110:	4b25      	ldr	r3, [pc, #148]	; (802b1a8 <__swsetup_r+0xd4>)
 802b112:	429c      	cmp	r4, r3
 802b114:	d101      	bne.n	802b11a <__swsetup_r+0x46>
 802b116:	68ac      	ldr	r4, [r5, #8]
 802b118:	e7eb      	b.n	802b0f2 <__swsetup_r+0x1e>
 802b11a:	4b24      	ldr	r3, [pc, #144]	; (802b1ac <__swsetup_r+0xd8>)
 802b11c:	429c      	cmp	r4, r3
 802b11e:	bf08      	it	eq
 802b120:	68ec      	ldreq	r4, [r5, #12]
 802b122:	e7e6      	b.n	802b0f2 <__swsetup_r+0x1e>
 802b124:	0758      	lsls	r0, r3, #29
 802b126:	d512      	bpl.n	802b14e <__swsetup_r+0x7a>
 802b128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b12a:	b141      	cbz	r1, 802b13e <__swsetup_r+0x6a>
 802b12c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b130:	4299      	cmp	r1, r3
 802b132:	d002      	beq.n	802b13a <__swsetup_r+0x66>
 802b134:	4630      	mov	r0, r6
 802b136:	f7ff fb25 	bl	802a784 <_free_r>
 802b13a:	2300      	movs	r3, #0
 802b13c:	6363      	str	r3, [r4, #52]	; 0x34
 802b13e:	89a3      	ldrh	r3, [r4, #12]
 802b140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b144:	81a3      	strh	r3, [r4, #12]
 802b146:	2300      	movs	r3, #0
 802b148:	6063      	str	r3, [r4, #4]
 802b14a:	6923      	ldr	r3, [r4, #16]
 802b14c:	6023      	str	r3, [r4, #0]
 802b14e:	89a3      	ldrh	r3, [r4, #12]
 802b150:	f043 0308 	orr.w	r3, r3, #8
 802b154:	81a3      	strh	r3, [r4, #12]
 802b156:	6923      	ldr	r3, [r4, #16]
 802b158:	b94b      	cbnz	r3, 802b16e <__swsetup_r+0x9a>
 802b15a:	89a3      	ldrh	r3, [r4, #12]
 802b15c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b164:	d003      	beq.n	802b16e <__swsetup_r+0x9a>
 802b166:	4621      	mov	r1, r4
 802b168:	4630      	mov	r0, r6
 802b16a:	f000 fa5f 	bl	802b62c <__smakebuf_r>
 802b16e:	89a0      	ldrh	r0, [r4, #12]
 802b170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b174:	f010 0301 	ands.w	r3, r0, #1
 802b178:	d00a      	beq.n	802b190 <__swsetup_r+0xbc>
 802b17a:	2300      	movs	r3, #0
 802b17c:	60a3      	str	r3, [r4, #8]
 802b17e:	6963      	ldr	r3, [r4, #20]
 802b180:	425b      	negs	r3, r3
 802b182:	61a3      	str	r3, [r4, #24]
 802b184:	6923      	ldr	r3, [r4, #16]
 802b186:	b943      	cbnz	r3, 802b19a <__swsetup_r+0xc6>
 802b188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b18c:	d1ba      	bne.n	802b104 <__swsetup_r+0x30>
 802b18e:	bd70      	pop	{r4, r5, r6, pc}
 802b190:	0781      	lsls	r1, r0, #30
 802b192:	bf58      	it	pl
 802b194:	6963      	ldrpl	r3, [r4, #20]
 802b196:	60a3      	str	r3, [r4, #8]
 802b198:	e7f4      	b.n	802b184 <__swsetup_r+0xb0>
 802b19a:	2000      	movs	r0, #0
 802b19c:	e7f7      	b.n	802b18e <__swsetup_r+0xba>
 802b19e:	bf00      	nop
 802b1a0:	200000bc 	.word	0x200000bc
 802b1a4:	08032a28 	.word	0x08032a28
 802b1a8:	08032a48 	.word	0x08032a48
 802b1ac:	08032a08 	.word	0x08032a08

0802b1b0 <__register_exitproc>:
 802b1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b1b4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802b270 <__register_exitproc+0xc0>
 802b1b8:	4606      	mov	r6, r0
 802b1ba:	f8d8 0000 	ldr.w	r0, [r8]
 802b1be:	461f      	mov	r7, r3
 802b1c0:	460d      	mov	r5, r1
 802b1c2:	4691      	mov	r9, r2
 802b1c4:	f7ff fab5 	bl	802a732 <__retarget_lock_acquire_recursive>
 802b1c8:	4b25      	ldr	r3, [pc, #148]	; (802b260 <__register_exitproc+0xb0>)
 802b1ca:	681c      	ldr	r4, [r3, #0]
 802b1cc:	b934      	cbnz	r4, 802b1dc <__register_exitproc+0x2c>
 802b1ce:	4c25      	ldr	r4, [pc, #148]	; (802b264 <__register_exitproc+0xb4>)
 802b1d0:	601c      	str	r4, [r3, #0]
 802b1d2:	4b25      	ldr	r3, [pc, #148]	; (802b268 <__register_exitproc+0xb8>)
 802b1d4:	b113      	cbz	r3, 802b1dc <__register_exitproc+0x2c>
 802b1d6:	681b      	ldr	r3, [r3, #0]
 802b1d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802b1dc:	6863      	ldr	r3, [r4, #4]
 802b1de:	2b1f      	cmp	r3, #31
 802b1e0:	dd07      	ble.n	802b1f2 <__register_exitproc+0x42>
 802b1e2:	f8d8 0000 	ldr.w	r0, [r8]
 802b1e6:	f7ff faa6 	bl	802a736 <__retarget_lock_release_recursive>
 802b1ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b1f2:	b34e      	cbz	r6, 802b248 <__register_exitproc+0x98>
 802b1f4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802b1f8:	b988      	cbnz	r0, 802b21e <__register_exitproc+0x6e>
 802b1fa:	4b1c      	ldr	r3, [pc, #112]	; (802b26c <__register_exitproc+0xbc>)
 802b1fc:	b923      	cbnz	r3, 802b208 <__register_exitproc+0x58>
 802b1fe:	f8d8 0000 	ldr.w	r0, [r8]
 802b202:	f7ff fa97 	bl	802a734 <__retarget_lock_release>
 802b206:	e7f0      	b.n	802b1ea <__register_exitproc+0x3a>
 802b208:	f44f 7084 	mov.w	r0, #264	; 0x108
 802b20c:	f7ff fa94 	bl	802a738 <malloc>
 802b210:	2800      	cmp	r0, #0
 802b212:	d0f4      	beq.n	802b1fe <__register_exitproc+0x4e>
 802b214:	2300      	movs	r3, #0
 802b216:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802b21a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802b21e:	6863      	ldr	r3, [r4, #4]
 802b220:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b224:	2201      	movs	r2, #1
 802b226:	409a      	lsls	r2, r3
 802b228:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b22c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802b230:	4313      	orrs	r3, r2
 802b232:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802b236:	2e02      	cmp	r6, #2
 802b238:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802b23c:	bf02      	ittt	eq
 802b23e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802b242:	4313      	orreq	r3, r2
 802b244:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802b248:	6863      	ldr	r3, [r4, #4]
 802b24a:	f8d8 0000 	ldr.w	r0, [r8]
 802b24e:	1c5a      	adds	r2, r3, #1
 802b250:	3302      	adds	r3, #2
 802b252:	6062      	str	r2, [r4, #4]
 802b254:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802b258:	f7ff fa6d 	bl	802a736 <__retarget_lock_release_recursive>
 802b25c:	2000      	movs	r0, #0
 802b25e:	e7c6      	b.n	802b1ee <__register_exitproc+0x3e>
 802b260:	2001563c 	.word	0x2001563c
 802b264:	200155b0 	.word	0x200155b0
 802b268:	08032a04 	.word	0x08032a04
 802b26c:	0802a739 	.word	0x0802a739
 802b270:	20000120 	.word	0x20000120

0802b274 <__sflush_r>:
 802b274:	898a      	ldrh	r2, [r1, #12]
 802b276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b27a:	4605      	mov	r5, r0
 802b27c:	0710      	lsls	r0, r2, #28
 802b27e:	460c      	mov	r4, r1
 802b280:	d458      	bmi.n	802b334 <__sflush_r+0xc0>
 802b282:	684b      	ldr	r3, [r1, #4]
 802b284:	2b00      	cmp	r3, #0
 802b286:	dc05      	bgt.n	802b294 <__sflush_r+0x20>
 802b288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b28a:	2b00      	cmp	r3, #0
 802b28c:	dc02      	bgt.n	802b294 <__sflush_r+0x20>
 802b28e:	2000      	movs	r0, #0
 802b290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b296:	2e00      	cmp	r6, #0
 802b298:	d0f9      	beq.n	802b28e <__sflush_r+0x1a>
 802b29a:	2300      	movs	r3, #0
 802b29c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b2a0:	682f      	ldr	r7, [r5, #0]
 802b2a2:	602b      	str	r3, [r5, #0]
 802b2a4:	d032      	beq.n	802b30c <__sflush_r+0x98>
 802b2a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b2a8:	89a3      	ldrh	r3, [r4, #12]
 802b2aa:	075a      	lsls	r2, r3, #29
 802b2ac:	d505      	bpl.n	802b2ba <__sflush_r+0x46>
 802b2ae:	6863      	ldr	r3, [r4, #4]
 802b2b0:	1ac0      	subs	r0, r0, r3
 802b2b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b2b4:	b10b      	cbz	r3, 802b2ba <__sflush_r+0x46>
 802b2b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b2b8:	1ac0      	subs	r0, r0, r3
 802b2ba:	2300      	movs	r3, #0
 802b2bc:	4602      	mov	r2, r0
 802b2be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b2c0:	6a21      	ldr	r1, [r4, #32]
 802b2c2:	4628      	mov	r0, r5
 802b2c4:	47b0      	blx	r6
 802b2c6:	1c43      	adds	r3, r0, #1
 802b2c8:	89a3      	ldrh	r3, [r4, #12]
 802b2ca:	d106      	bne.n	802b2da <__sflush_r+0x66>
 802b2cc:	6829      	ldr	r1, [r5, #0]
 802b2ce:	291d      	cmp	r1, #29
 802b2d0:	d82c      	bhi.n	802b32c <__sflush_r+0xb8>
 802b2d2:	4a2a      	ldr	r2, [pc, #168]	; (802b37c <__sflush_r+0x108>)
 802b2d4:	40ca      	lsrs	r2, r1
 802b2d6:	07d6      	lsls	r6, r2, #31
 802b2d8:	d528      	bpl.n	802b32c <__sflush_r+0xb8>
 802b2da:	2200      	movs	r2, #0
 802b2dc:	6062      	str	r2, [r4, #4]
 802b2de:	04d9      	lsls	r1, r3, #19
 802b2e0:	6922      	ldr	r2, [r4, #16]
 802b2e2:	6022      	str	r2, [r4, #0]
 802b2e4:	d504      	bpl.n	802b2f0 <__sflush_r+0x7c>
 802b2e6:	1c42      	adds	r2, r0, #1
 802b2e8:	d101      	bne.n	802b2ee <__sflush_r+0x7a>
 802b2ea:	682b      	ldr	r3, [r5, #0]
 802b2ec:	b903      	cbnz	r3, 802b2f0 <__sflush_r+0x7c>
 802b2ee:	6560      	str	r0, [r4, #84]	; 0x54
 802b2f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b2f2:	602f      	str	r7, [r5, #0]
 802b2f4:	2900      	cmp	r1, #0
 802b2f6:	d0ca      	beq.n	802b28e <__sflush_r+0x1a>
 802b2f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b2fc:	4299      	cmp	r1, r3
 802b2fe:	d002      	beq.n	802b306 <__sflush_r+0x92>
 802b300:	4628      	mov	r0, r5
 802b302:	f7ff fa3f 	bl	802a784 <_free_r>
 802b306:	2000      	movs	r0, #0
 802b308:	6360      	str	r0, [r4, #52]	; 0x34
 802b30a:	e7c1      	b.n	802b290 <__sflush_r+0x1c>
 802b30c:	6a21      	ldr	r1, [r4, #32]
 802b30e:	2301      	movs	r3, #1
 802b310:	4628      	mov	r0, r5
 802b312:	47b0      	blx	r6
 802b314:	1c41      	adds	r1, r0, #1
 802b316:	d1c7      	bne.n	802b2a8 <__sflush_r+0x34>
 802b318:	682b      	ldr	r3, [r5, #0]
 802b31a:	2b00      	cmp	r3, #0
 802b31c:	d0c4      	beq.n	802b2a8 <__sflush_r+0x34>
 802b31e:	2b1d      	cmp	r3, #29
 802b320:	d001      	beq.n	802b326 <__sflush_r+0xb2>
 802b322:	2b16      	cmp	r3, #22
 802b324:	d101      	bne.n	802b32a <__sflush_r+0xb6>
 802b326:	602f      	str	r7, [r5, #0]
 802b328:	e7b1      	b.n	802b28e <__sflush_r+0x1a>
 802b32a:	89a3      	ldrh	r3, [r4, #12]
 802b32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b330:	81a3      	strh	r3, [r4, #12]
 802b332:	e7ad      	b.n	802b290 <__sflush_r+0x1c>
 802b334:	690f      	ldr	r7, [r1, #16]
 802b336:	2f00      	cmp	r7, #0
 802b338:	d0a9      	beq.n	802b28e <__sflush_r+0x1a>
 802b33a:	0793      	lsls	r3, r2, #30
 802b33c:	680e      	ldr	r6, [r1, #0]
 802b33e:	bf08      	it	eq
 802b340:	694b      	ldreq	r3, [r1, #20]
 802b342:	600f      	str	r7, [r1, #0]
 802b344:	bf18      	it	ne
 802b346:	2300      	movne	r3, #0
 802b348:	eba6 0807 	sub.w	r8, r6, r7
 802b34c:	608b      	str	r3, [r1, #8]
 802b34e:	f1b8 0f00 	cmp.w	r8, #0
 802b352:	dd9c      	ble.n	802b28e <__sflush_r+0x1a>
 802b354:	6a21      	ldr	r1, [r4, #32]
 802b356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b358:	4643      	mov	r3, r8
 802b35a:	463a      	mov	r2, r7
 802b35c:	4628      	mov	r0, r5
 802b35e:	47b0      	blx	r6
 802b360:	2800      	cmp	r0, #0
 802b362:	dc06      	bgt.n	802b372 <__sflush_r+0xfe>
 802b364:	89a3      	ldrh	r3, [r4, #12]
 802b366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b36a:	81a3      	strh	r3, [r4, #12]
 802b36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b370:	e78e      	b.n	802b290 <__sflush_r+0x1c>
 802b372:	4407      	add	r7, r0
 802b374:	eba8 0800 	sub.w	r8, r8, r0
 802b378:	e7e9      	b.n	802b34e <__sflush_r+0xda>
 802b37a:	bf00      	nop
 802b37c:	20400001 	.word	0x20400001

0802b380 <_fflush_r>:
 802b380:	b538      	push	{r3, r4, r5, lr}
 802b382:	690b      	ldr	r3, [r1, #16]
 802b384:	4605      	mov	r5, r0
 802b386:	460c      	mov	r4, r1
 802b388:	b913      	cbnz	r3, 802b390 <_fflush_r+0x10>
 802b38a:	2500      	movs	r5, #0
 802b38c:	4628      	mov	r0, r5
 802b38e:	bd38      	pop	{r3, r4, r5, pc}
 802b390:	b118      	cbz	r0, 802b39a <_fflush_r+0x1a>
 802b392:	6983      	ldr	r3, [r0, #24]
 802b394:	b90b      	cbnz	r3, 802b39a <_fflush_r+0x1a>
 802b396:	f000 f887 	bl	802b4a8 <__sinit>
 802b39a:	4b14      	ldr	r3, [pc, #80]	; (802b3ec <_fflush_r+0x6c>)
 802b39c:	429c      	cmp	r4, r3
 802b39e:	d11b      	bne.n	802b3d8 <_fflush_r+0x58>
 802b3a0:	686c      	ldr	r4, [r5, #4]
 802b3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b3a6:	2b00      	cmp	r3, #0
 802b3a8:	d0ef      	beq.n	802b38a <_fflush_r+0xa>
 802b3aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802b3ac:	07d0      	lsls	r0, r2, #31
 802b3ae:	d404      	bmi.n	802b3ba <_fflush_r+0x3a>
 802b3b0:	0599      	lsls	r1, r3, #22
 802b3b2:	d402      	bmi.n	802b3ba <_fflush_r+0x3a>
 802b3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b3b6:	f7ff f9bc 	bl	802a732 <__retarget_lock_acquire_recursive>
 802b3ba:	4628      	mov	r0, r5
 802b3bc:	4621      	mov	r1, r4
 802b3be:	f7ff ff59 	bl	802b274 <__sflush_r>
 802b3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b3c4:	07da      	lsls	r2, r3, #31
 802b3c6:	4605      	mov	r5, r0
 802b3c8:	d4e0      	bmi.n	802b38c <_fflush_r+0xc>
 802b3ca:	89a3      	ldrh	r3, [r4, #12]
 802b3cc:	059b      	lsls	r3, r3, #22
 802b3ce:	d4dd      	bmi.n	802b38c <_fflush_r+0xc>
 802b3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b3d2:	f7ff f9b0 	bl	802a736 <__retarget_lock_release_recursive>
 802b3d6:	e7d9      	b.n	802b38c <_fflush_r+0xc>
 802b3d8:	4b05      	ldr	r3, [pc, #20]	; (802b3f0 <_fflush_r+0x70>)
 802b3da:	429c      	cmp	r4, r3
 802b3dc:	d101      	bne.n	802b3e2 <_fflush_r+0x62>
 802b3de:	68ac      	ldr	r4, [r5, #8]
 802b3e0:	e7df      	b.n	802b3a2 <_fflush_r+0x22>
 802b3e2:	4b04      	ldr	r3, [pc, #16]	; (802b3f4 <_fflush_r+0x74>)
 802b3e4:	429c      	cmp	r4, r3
 802b3e6:	bf08      	it	eq
 802b3e8:	68ec      	ldreq	r4, [r5, #12]
 802b3ea:	e7da      	b.n	802b3a2 <_fflush_r+0x22>
 802b3ec:	08032a28 	.word	0x08032a28
 802b3f0:	08032a48 	.word	0x08032a48
 802b3f4:	08032a08 	.word	0x08032a08

0802b3f8 <std>:
 802b3f8:	2300      	movs	r3, #0
 802b3fa:	b510      	push	{r4, lr}
 802b3fc:	4604      	mov	r4, r0
 802b3fe:	e9c0 3300 	strd	r3, r3, [r0]
 802b402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b406:	6083      	str	r3, [r0, #8]
 802b408:	8181      	strh	r1, [r0, #12]
 802b40a:	6643      	str	r3, [r0, #100]	; 0x64
 802b40c:	81c2      	strh	r2, [r0, #14]
 802b40e:	6183      	str	r3, [r0, #24]
 802b410:	4619      	mov	r1, r3
 802b412:	2208      	movs	r2, #8
 802b414:	305c      	adds	r0, #92	; 0x5c
 802b416:	f7ff f9ad 	bl	802a774 <memset>
 802b41a:	4b05      	ldr	r3, [pc, #20]	; (802b430 <std+0x38>)
 802b41c:	6263      	str	r3, [r4, #36]	; 0x24
 802b41e:	4b05      	ldr	r3, [pc, #20]	; (802b434 <std+0x3c>)
 802b420:	62a3      	str	r3, [r4, #40]	; 0x28
 802b422:	4b05      	ldr	r3, [pc, #20]	; (802b438 <std+0x40>)
 802b424:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b426:	4b05      	ldr	r3, [pc, #20]	; (802b43c <std+0x44>)
 802b428:	6224      	str	r4, [r4, #32]
 802b42a:	6323      	str	r3, [r4, #48]	; 0x30
 802b42c:	bd10      	pop	{r4, pc}
 802b42e:	bf00      	nop
 802b430:	0802ba0d 	.word	0x0802ba0d
 802b434:	0802ba2f 	.word	0x0802ba2f
 802b438:	0802ba67 	.word	0x0802ba67
 802b43c:	0802ba8b 	.word	0x0802ba8b

0802b440 <_cleanup_r>:
 802b440:	4901      	ldr	r1, [pc, #4]	; (802b448 <_cleanup_r+0x8>)
 802b442:	f000 b8af 	b.w	802b5a4 <_fwalk_reent>
 802b446:	bf00      	nop
 802b448:	0802b381 	.word	0x0802b381

0802b44c <__sfmoreglue>:
 802b44c:	b570      	push	{r4, r5, r6, lr}
 802b44e:	2268      	movs	r2, #104	; 0x68
 802b450:	1e4d      	subs	r5, r1, #1
 802b452:	4355      	muls	r5, r2
 802b454:	460e      	mov	r6, r1
 802b456:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802b45a:	f7ff f9ff 	bl	802a85c <_malloc_r>
 802b45e:	4604      	mov	r4, r0
 802b460:	b140      	cbz	r0, 802b474 <__sfmoreglue+0x28>
 802b462:	2100      	movs	r1, #0
 802b464:	e9c0 1600 	strd	r1, r6, [r0]
 802b468:	300c      	adds	r0, #12
 802b46a:	60a0      	str	r0, [r4, #8]
 802b46c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802b470:	f7ff f980 	bl	802a774 <memset>
 802b474:	4620      	mov	r0, r4
 802b476:	bd70      	pop	{r4, r5, r6, pc}

0802b478 <__sfp_lock_acquire>:
 802b478:	4801      	ldr	r0, [pc, #4]	; (802b480 <__sfp_lock_acquire+0x8>)
 802b47a:	f7ff b95a 	b.w	802a732 <__retarget_lock_acquire_recursive>
 802b47e:	bf00      	nop
 802b480:	2001549e 	.word	0x2001549e

0802b484 <__sfp_lock_release>:
 802b484:	4801      	ldr	r0, [pc, #4]	; (802b48c <__sfp_lock_release+0x8>)
 802b486:	f7ff b956 	b.w	802a736 <__retarget_lock_release_recursive>
 802b48a:	bf00      	nop
 802b48c:	2001549e 	.word	0x2001549e

0802b490 <__sinit_lock_acquire>:
 802b490:	4801      	ldr	r0, [pc, #4]	; (802b498 <__sinit_lock_acquire+0x8>)
 802b492:	f7ff b94e 	b.w	802a732 <__retarget_lock_acquire_recursive>
 802b496:	bf00      	nop
 802b498:	2001549f 	.word	0x2001549f

0802b49c <__sinit_lock_release>:
 802b49c:	4801      	ldr	r0, [pc, #4]	; (802b4a4 <__sinit_lock_release+0x8>)
 802b49e:	f7ff b94a 	b.w	802a736 <__retarget_lock_release_recursive>
 802b4a2:	bf00      	nop
 802b4a4:	2001549f 	.word	0x2001549f

0802b4a8 <__sinit>:
 802b4a8:	b510      	push	{r4, lr}
 802b4aa:	4604      	mov	r4, r0
 802b4ac:	f7ff fff0 	bl	802b490 <__sinit_lock_acquire>
 802b4b0:	69a3      	ldr	r3, [r4, #24]
 802b4b2:	b11b      	cbz	r3, 802b4bc <__sinit+0x14>
 802b4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b4b8:	f7ff bff0 	b.w	802b49c <__sinit_lock_release>
 802b4bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802b4c0:	6523      	str	r3, [r4, #80]	; 0x50
 802b4c2:	4b13      	ldr	r3, [pc, #76]	; (802b510 <__sinit+0x68>)
 802b4c4:	4a13      	ldr	r2, [pc, #76]	; (802b514 <__sinit+0x6c>)
 802b4c6:	681b      	ldr	r3, [r3, #0]
 802b4c8:	62a2      	str	r2, [r4, #40]	; 0x28
 802b4ca:	42a3      	cmp	r3, r4
 802b4cc:	bf04      	itt	eq
 802b4ce:	2301      	moveq	r3, #1
 802b4d0:	61a3      	streq	r3, [r4, #24]
 802b4d2:	4620      	mov	r0, r4
 802b4d4:	f000 f820 	bl	802b518 <__sfp>
 802b4d8:	6060      	str	r0, [r4, #4]
 802b4da:	4620      	mov	r0, r4
 802b4dc:	f000 f81c 	bl	802b518 <__sfp>
 802b4e0:	60a0      	str	r0, [r4, #8]
 802b4e2:	4620      	mov	r0, r4
 802b4e4:	f000 f818 	bl	802b518 <__sfp>
 802b4e8:	2200      	movs	r2, #0
 802b4ea:	60e0      	str	r0, [r4, #12]
 802b4ec:	2104      	movs	r1, #4
 802b4ee:	6860      	ldr	r0, [r4, #4]
 802b4f0:	f7ff ff82 	bl	802b3f8 <std>
 802b4f4:	68a0      	ldr	r0, [r4, #8]
 802b4f6:	2201      	movs	r2, #1
 802b4f8:	2109      	movs	r1, #9
 802b4fa:	f7ff ff7d 	bl	802b3f8 <std>
 802b4fe:	68e0      	ldr	r0, [r4, #12]
 802b500:	2202      	movs	r2, #2
 802b502:	2112      	movs	r1, #18
 802b504:	f7ff ff78 	bl	802b3f8 <std>
 802b508:	2301      	movs	r3, #1
 802b50a:	61a3      	str	r3, [r4, #24]
 802b50c:	e7d2      	b.n	802b4b4 <__sinit+0xc>
 802b50e:	bf00      	nop
 802b510:	080329cc 	.word	0x080329cc
 802b514:	0802b441 	.word	0x0802b441

0802b518 <__sfp>:
 802b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b51a:	4607      	mov	r7, r0
 802b51c:	f7ff ffac 	bl	802b478 <__sfp_lock_acquire>
 802b520:	4b1e      	ldr	r3, [pc, #120]	; (802b59c <__sfp+0x84>)
 802b522:	681e      	ldr	r6, [r3, #0]
 802b524:	69b3      	ldr	r3, [r6, #24]
 802b526:	b913      	cbnz	r3, 802b52e <__sfp+0x16>
 802b528:	4630      	mov	r0, r6
 802b52a:	f7ff ffbd 	bl	802b4a8 <__sinit>
 802b52e:	3648      	adds	r6, #72	; 0x48
 802b530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802b534:	3b01      	subs	r3, #1
 802b536:	d503      	bpl.n	802b540 <__sfp+0x28>
 802b538:	6833      	ldr	r3, [r6, #0]
 802b53a:	b30b      	cbz	r3, 802b580 <__sfp+0x68>
 802b53c:	6836      	ldr	r6, [r6, #0]
 802b53e:	e7f7      	b.n	802b530 <__sfp+0x18>
 802b540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802b544:	b9d5      	cbnz	r5, 802b57c <__sfp+0x64>
 802b546:	4b16      	ldr	r3, [pc, #88]	; (802b5a0 <__sfp+0x88>)
 802b548:	60e3      	str	r3, [r4, #12]
 802b54a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802b54e:	6665      	str	r5, [r4, #100]	; 0x64
 802b550:	f7ff f8ee 	bl	802a730 <__retarget_lock_init_recursive>
 802b554:	f7ff ff96 	bl	802b484 <__sfp_lock_release>
 802b558:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802b55c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802b560:	6025      	str	r5, [r4, #0]
 802b562:	61a5      	str	r5, [r4, #24]
 802b564:	2208      	movs	r2, #8
 802b566:	4629      	mov	r1, r5
 802b568:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802b56c:	f7ff f902 	bl	802a774 <memset>
 802b570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802b574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802b578:	4620      	mov	r0, r4
 802b57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b57c:	3468      	adds	r4, #104	; 0x68
 802b57e:	e7d9      	b.n	802b534 <__sfp+0x1c>
 802b580:	2104      	movs	r1, #4
 802b582:	4638      	mov	r0, r7
 802b584:	f7ff ff62 	bl	802b44c <__sfmoreglue>
 802b588:	4604      	mov	r4, r0
 802b58a:	6030      	str	r0, [r6, #0]
 802b58c:	2800      	cmp	r0, #0
 802b58e:	d1d5      	bne.n	802b53c <__sfp+0x24>
 802b590:	f7ff ff78 	bl	802b484 <__sfp_lock_release>
 802b594:	230c      	movs	r3, #12
 802b596:	603b      	str	r3, [r7, #0]
 802b598:	e7ee      	b.n	802b578 <__sfp+0x60>
 802b59a:	bf00      	nop
 802b59c:	080329cc 	.word	0x080329cc
 802b5a0:	ffff0001 	.word	0xffff0001

0802b5a4 <_fwalk_reent>:
 802b5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b5a8:	4606      	mov	r6, r0
 802b5aa:	4688      	mov	r8, r1
 802b5ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802b5b0:	2700      	movs	r7, #0
 802b5b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b5b6:	f1b9 0901 	subs.w	r9, r9, #1
 802b5ba:	d505      	bpl.n	802b5c8 <_fwalk_reent+0x24>
 802b5bc:	6824      	ldr	r4, [r4, #0]
 802b5be:	2c00      	cmp	r4, #0
 802b5c0:	d1f7      	bne.n	802b5b2 <_fwalk_reent+0xe>
 802b5c2:	4638      	mov	r0, r7
 802b5c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b5c8:	89ab      	ldrh	r3, [r5, #12]
 802b5ca:	2b01      	cmp	r3, #1
 802b5cc:	d907      	bls.n	802b5de <_fwalk_reent+0x3a>
 802b5ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b5d2:	3301      	adds	r3, #1
 802b5d4:	d003      	beq.n	802b5de <_fwalk_reent+0x3a>
 802b5d6:	4629      	mov	r1, r5
 802b5d8:	4630      	mov	r0, r6
 802b5da:	47c0      	blx	r8
 802b5dc:	4307      	orrs	r7, r0
 802b5de:	3568      	adds	r5, #104	; 0x68
 802b5e0:	e7e9      	b.n	802b5b6 <_fwalk_reent+0x12>

0802b5e2 <__swhatbuf_r>:
 802b5e2:	b570      	push	{r4, r5, r6, lr}
 802b5e4:	460e      	mov	r6, r1
 802b5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b5ea:	2900      	cmp	r1, #0
 802b5ec:	b096      	sub	sp, #88	; 0x58
 802b5ee:	4614      	mov	r4, r2
 802b5f0:	461d      	mov	r5, r3
 802b5f2:	da08      	bge.n	802b606 <__swhatbuf_r+0x24>
 802b5f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802b5f8:	2200      	movs	r2, #0
 802b5fa:	602a      	str	r2, [r5, #0]
 802b5fc:	061a      	lsls	r2, r3, #24
 802b5fe:	d410      	bmi.n	802b622 <__swhatbuf_r+0x40>
 802b600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b604:	e00e      	b.n	802b624 <__swhatbuf_r+0x42>
 802b606:	466a      	mov	r2, sp
 802b608:	f000 fa66 	bl	802bad8 <_fstat_r>
 802b60c:	2800      	cmp	r0, #0
 802b60e:	dbf1      	blt.n	802b5f4 <__swhatbuf_r+0x12>
 802b610:	9a01      	ldr	r2, [sp, #4]
 802b612:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b616:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b61a:	425a      	negs	r2, r3
 802b61c:	415a      	adcs	r2, r3
 802b61e:	602a      	str	r2, [r5, #0]
 802b620:	e7ee      	b.n	802b600 <__swhatbuf_r+0x1e>
 802b622:	2340      	movs	r3, #64	; 0x40
 802b624:	2000      	movs	r0, #0
 802b626:	6023      	str	r3, [r4, #0]
 802b628:	b016      	add	sp, #88	; 0x58
 802b62a:	bd70      	pop	{r4, r5, r6, pc}

0802b62c <__smakebuf_r>:
 802b62c:	898b      	ldrh	r3, [r1, #12]
 802b62e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b630:	079d      	lsls	r5, r3, #30
 802b632:	4606      	mov	r6, r0
 802b634:	460c      	mov	r4, r1
 802b636:	d507      	bpl.n	802b648 <__smakebuf_r+0x1c>
 802b638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b63c:	6023      	str	r3, [r4, #0]
 802b63e:	6123      	str	r3, [r4, #16]
 802b640:	2301      	movs	r3, #1
 802b642:	6163      	str	r3, [r4, #20]
 802b644:	b002      	add	sp, #8
 802b646:	bd70      	pop	{r4, r5, r6, pc}
 802b648:	ab01      	add	r3, sp, #4
 802b64a:	466a      	mov	r2, sp
 802b64c:	f7ff ffc9 	bl	802b5e2 <__swhatbuf_r>
 802b650:	9900      	ldr	r1, [sp, #0]
 802b652:	4605      	mov	r5, r0
 802b654:	4630      	mov	r0, r6
 802b656:	f7ff f901 	bl	802a85c <_malloc_r>
 802b65a:	b948      	cbnz	r0, 802b670 <__smakebuf_r+0x44>
 802b65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b660:	059a      	lsls	r2, r3, #22
 802b662:	d4ef      	bmi.n	802b644 <__smakebuf_r+0x18>
 802b664:	f023 0303 	bic.w	r3, r3, #3
 802b668:	f043 0302 	orr.w	r3, r3, #2
 802b66c:	81a3      	strh	r3, [r4, #12]
 802b66e:	e7e3      	b.n	802b638 <__smakebuf_r+0xc>
 802b670:	4b0d      	ldr	r3, [pc, #52]	; (802b6a8 <__smakebuf_r+0x7c>)
 802b672:	62b3      	str	r3, [r6, #40]	; 0x28
 802b674:	89a3      	ldrh	r3, [r4, #12]
 802b676:	6020      	str	r0, [r4, #0]
 802b678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b67c:	81a3      	strh	r3, [r4, #12]
 802b67e:	9b00      	ldr	r3, [sp, #0]
 802b680:	6163      	str	r3, [r4, #20]
 802b682:	9b01      	ldr	r3, [sp, #4]
 802b684:	6120      	str	r0, [r4, #16]
 802b686:	b15b      	cbz	r3, 802b6a0 <__smakebuf_r+0x74>
 802b688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b68c:	4630      	mov	r0, r6
 802b68e:	f000 fa35 	bl	802bafc <_isatty_r>
 802b692:	b128      	cbz	r0, 802b6a0 <__smakebuf_r+0x74>
 802b694:	89a3      	ldrh	r3, [r4, #12]
 802b696:	f023 0303 	bic.w	r3, r3, #3
 802b69a:	f043 0301 	orr.w	r3, r3, #1
 802b69e:	81a3      	strh	r3, [r4, #12]
 802b6a0:	89a0      	ldrh	r0, [r4, #12]
 802b6a2:	4305      	orrs	r5, r0
 802b6a4:	81a5      	strh	r5, [r4, #12]
 802b6a6:	e7cd      	b.n	802b644 <__smakebuf_r+0x18>
 802b6a8:	0802b441 	.word	0x0802b441

0802b6ac <memmove>:
 802b6ac:	4288      	cmp	r0, r1
 802b6ae:	b510      	push	{r4, lr}
 802b6b0:	eb01 0402 	add.w	r4, r1, r2
 802b6b4:	d902      	bls.n	802b6bc <memmove+0x10>
 802b6b6:	4284      	cmp	r4, r0
 802b6b8:	4623      	mov	r3, r4
 802b6ba:	d807      	bhi.n	802b6cc <memmove+0x20>
 802b6bc:	1e43      	subs	r3, r0, #1
 802b6be:	42a1      	cmp	r1, r4
 802b6c0:	d008      	beq.n	802b6d4 <memmove+0x28>
 802b6c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b6c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802b6ca:	e7f8      	b.n	802b6be <memmove+0x12>
 802b6cc:	4402      	add	r2, r0
 802b6ce:	4601      	mov	r1, r0
 802b6d0:	428a      	cmp	r2, r1
 802b6d2:	d100      	bne.n	802b6d6 <memmove+0x2a>
 802b6d4:	bd10      	pop	{r4, pc}
 802b6d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802b6da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802b6de:	e7f7      	b.n	802b6d0 <memmove+0x24>

0802b6e0 <__malloc_lock>:
 802b6e0:	4801      	ldr	r0, [pc, #4]	; (802b6e8 <__malloc_lock+0x8>)
 802b6e2:	f7ff b826 	b.w	802a732 <__retarget_lock_acquire_recursive>
 802b6e6:	bf00      	nop
 802b6e8:	2001549d 	.word	0x2001549d

0802b6ec <__malloc_unlock>:
 802b6ec:	4801      	ldr	r0, [pc, #4]	; (802b6f4 <__malloc_unlock+0x8>)
 802b6ee:	f7ff b822 	b.w	802a736 <__retarget_lock_release_recursive>
 802b6f2:	bf00      	nop
 802b6f4:	2001549d 	.word	0x2001549d

0802b6f8 <_realloc_r>:
 802b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b6fc:	4680      	mov	r8, r0
 802b6fe:	4614      	mov	r4, r2
 802b700:	460e      	mov	r6, r1
 802b702:	b921      	cbnz	r1, 802b70e <_realloc_r+0x16>
 802b704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b708:	4611      	mov	r1, r2
 802b70a:	f7ff b8a7 	b.w	802a85c <_malloc_r>
 802b70e:	b92a      	cbnz	r2, 802b71c <_realloc_r+0x24>
 802b710:	f7ff f838 	bl	802a784 <_free_r>
 802b714:	4625      	mov	r5, r4
 802b716:	4628      	mov	r0, r5
 802b718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b71c:	f000 fa10 	bl	802bb40 <_malloc_usable_size_r>
 802b720:	4284      	cmp	r4, r0
 802b722:	4607      	mov	r7, r0
 802b724:	d802      	bhi.n	802b72c <_realloc_r+0x34>
 802b726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802b72a:	d812      	bhi.n	802b752 <_realloc_r+0x5a>
 802b72c:	4621      	mov	r1, r4
 802b72e:	4640      	mov	r0, r8
 802b730:	f7ff f894 	bl	802a85c <_malloc_r>
 802b734:	4605      	mov	r5, r0
 802b736:	2800      	cmp	r0, #0
 802b738:	d0ed      	beq.n	802b716 <_realloc_r+0x1e>
 802b73a:	42bc      	cmp	r4, r7
 802b73c:	4622      	mov	r2, r4
 802b73e:	4631      	mov	r1, r6
 802b740:	bf28      	it	cs
 802b742:	463a      	movcs	r2, r7
 802b744:	f7ff f808 	bl	802a758 <memcpy>
 802b748:	4631      	mov	r1, r6
 802b74a:	4640      	mov	r0, r8
 802b74c:	f7ff f81a 	bl	802a784 <_free_r>
 802b750:	e7e1      	b.n	802b716 <_realloc_r+0x1e>
 802b752:	4635      	mov	r5, r6
 802b754:	e7df      	b.n	802b716 <_realloc_r+0x1e>

0802b756 <__ssputs_r>:
 802b756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b75a:	688e      	ldr	r6, [r1, #8]
 802b75c:	429e      	cmp	r6, r3
 802b75e:	4682      	mov	sl, r0
 802b760:	460c      	mov	r4, r1
 802b762:	4690      	mov	r8, r2
 802b764:	461f      	mov	r7, r3
 802b766:	d838      	bhi.n	802b7da <__ssputs_r+0x84>
 802b768:	898a      	ldrh	r2, [r1, #12]
 802b76a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802b76e:	d032      	beq.n	802b7d6 <__ssputs_r+0x80>
 802b770:	6825      	ldr	r5, [r4, #0]
 802b772:	6909      	ldr	r1, [r1, #16]
 802b774:	eba5 0901 	sub.w	r9, r5, r1
 802b778:	6965      	ldr	r5, [r4, #20]
 802b77a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802b77e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802b782:	3301      	adds	r3, #1
 802b784:	444b      	add	r3, r9
 802b786:	106d      	asrs	r5, r5, #1
 802b788:	429d      	cmp	r5, r3
 802b78a:	bf38      	it	cc
 802b78c:	461d      	movcc	r5, r3
 802b78e:	0553      	lsls	r3, r2, #21
 802b790:	d531      	bpl.n	802b7f6 <__ssputs_r+0xa0>
 802b792:	4629      	mov	r1, r5
 802b794:	f7ff f862 	bl	802a85c <_malloc_r>
 802b798:	4606      	mov	r6, r0
 802b79a:	b950      	cbnz	r0, 802b7b2 <__ssputs_r+0x5c>
 802b79c:	230c      	movs	r3, #12
 802b79e:	f8ca 3000 	str.w	r3, [sl]
 802b7a2:	89a3      	ldrh	r3, [r4, #12]
 802b7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b7a8:	81a3      	strh	r3, [r4, #12]
 802b7aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b7b2:	6921      	ldr	r1, [r4, #16]
 802b7b4:	464a      	mov	r2, r9
 802b7b6:	f7fe ffcf 	bl	802a758 <memcpy>
 802b7ba:	89a3      	ldrh	r3, [r4, #12]
 802b7bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802b7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b7c4:	81a3      	strh	r3, [r4, #12]
 802b7c6:	6126      	str	r6, [r4, #16]
 802b7c8:	6165      	str	r5, [r4, #20]
 802b7ca:	444e      	add	r6, r9
 802b7cc:	eba5 0509 	sub.w	r5, r5, r9
 802b7d0:	6026      	str	r6, [r4, #0]
 802b7d2:	60a5      	str	r5, [r4, #8]
 802b7d4:	463e      	mov	r6, r7
 802b7d6:	42be      	cmp	r6, r7
 802b7d8:	d900      	bls.n	802b7dc <__ssputs_r+0x86>
 802b7da:	463e      	mov	r6, r7
 802b7dc:	6820      	ldr	r0, [r4, #0]
 802b7de:	4632      	mov	r2, r6
 802b7e0:	4641      	mov	r1, r8
 802b7e2:	f7ff ff63 	bl	802b6ac <memmove>
 802b7e6:	68a3      	ldr	r3, [r4, #8]
 802b7e8:	1b9b      	subs	r3, r3, r6
 802b7ea:	60a3      	str	r3, [r4, #8]
 802b7ec:	6823      	ldr	r3, [r4, #0]
 802b7ee:	4433      	add	r3, r6
 802b7f0:	6023      	str	r3, [r4, #0]
 802b7f2:	2000      	movs	r0, #0
 802b7f4:	e7db      	b.n	802b7ae <__ssputs_r+0x58>
 802b7f6:	462a      	mov	r2, r5
 802b7f8:	f7ff ff7e 	bl	802b6f8 <_realloc_r>
 802b7fc:	4606      	mov	r6, r0
 802b7fe:	2800      	cmp	r0, #0
 802b800:	d1e1      	bne.n	802b7c6 <__ssputs_r+0x70>
 802b802:	6921      	ldr	r1, [r4, #16]
 802b804:	4650      	mov	r0, sl
 802b806:	f7fe ffbd 	bl	802a784 <_free_r>
 802b80a:	e7c7      	b.n	802b79c <__ssputs_r+0x46>

0802b80c <_svfiprintf_r>:
 802b80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b810:	4698      	mov	r8, r3
 802b812:	898b      	ldrh	r3, [r1, #12]
 802b814:	061b      	lsls	r3, r3, #24
 802b816:	b09d      	sub	sp, #116	; 0x74
 802b818:	4607      	mov	r7, r0
 802b81a:	460d      	mov	r5, r1
 802b81c:	4614      	mov	r4, r2
 802b81e:	d50e      	bpl.n	802b83e <_svfiprintf_r+0x32>
 802b820:	690b      	ldr	r3, [r1, #16]
 802b822:	b963      	cbnz	r3, 802b83e <_svfiprintf_r+0x32>
 802b824:	2140      	movs	r1, #64	; 0x40
 802b826:	f7ff f819 	bl	802a85c <_malloc_r>
 802b82a:	6028      	str	r0, [r5, #0]
 802b82c:	6128      	str	r0, [r5, #16]
 802b82e:	b920      	cbnz	r0, 802b83a <_svfiprintf_r+0x2e>
 802b830:	230c      	movs	r3, #12
 802b832:	603b      	str	r3, [r7, #0]
 802b834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b838:	e0d1      	b.n	802b9de <_svfiprintf_r+0x1d2>
 802b83a:	2340      	movs	r3, #64	; 0x40
 802b83c:	616b      	str	r3, [r5, #20]
 802b83e:	2300      	movs	r3, #0
 802b840:	9309      	str	r3, [sp, #36]	; 0x24
 802b842:	2320      	movs	r3, #32
 802b844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b848:	f8cd 800c 	str.w	r8, [sp, #12]
 802b84c:	2330      	movs	r3, #48	; 0x30
 802b84e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802b9f8 <_svfiprintf_r+0x1ec>
 802b852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b856:	f04f 0901 	mov.w	r9, #1
 802b85a:	4623      	mov	r3, r4
 802b85c:	469a      	mov	sl, r3
 802b85e:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b862:	b10a      	cbz	r2, 802b868 <_svfiprintf_r+0x5c>
 802b864:	2a25      	cmp	r2, #37	; 0x25
 802b866:	d1f9      	bne.n	802b85c <_svfiprintf_r+0x50>
 802b868:	ebba 0b04 	subs.w	fp, sl, r4
 802b86c:	d00b      	beq.n	802b886 <_svfiprintf_r+0x7a>
 802b86e:	465b      	mov	r3, fp
 802b870:	4622      	mov	r2, r4
 802b872:	4629      	mov	r1, r5
 802b874:	4638      	mov	r0, r7
 802b876:	f7ff ff6e 	bl	802b756 <__ssputs_r>
 802b87a:	3001      	adds	r0, #1
 802b87c:	f000 80aa 	beq.w	802b9d4 <_svfiprintf_r+0x1c8>
 802b880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b882:	445a      	add	r2, fp
 802b884:	9209      	str	r2, [sp, #36]	; 0x24
 802b886:	f89a 3000 	ldrb.w	r3, [sl]
 802b88a:	2b00      	cmp	r3, #0
 802b88c:	f000 80a2 	beq.w	802b9d4 <_svfiprintf_r+0x1c8>
 802b890:	2300      	movs	r3, #0
 802b892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802b896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b89a:	f10a 0a01 	add.w	sl, sl, #1
 802b89e:	9304      	str	r3, [sp, #16]
 802b8a0:	9307      	str	r3, [sp, #28]
 802b8a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b8a6:	931a      	str	r3, [sp, #104]	; 0x68
 802b8a8:	4654      	mov	r4, sl
 802b8aa:	2205      	movs	r2, #5
 802b8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b8b0:	4851      	ldr	r0, [pc, #324]	; (802b9f8 <_svfiprintf_r+0x1ec>)
 802b8b2:	f7d4 fcad 	bl	8000210 <memchr>
 802b8b6:	9a04      	ldr	r2, [sp, #16]
 802b8b8:	b9d8      	cbnz	r0, 802b8f2 <_svfiprintf_r+0xe6>
 802b8ba:	06d0      	lsls	r0, r2, #27
 802b8bc:	bf44      	itt	mi
 802b8be:	2320      	movmi	r3, #32
 802b8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b8c4:	0711      	lsls	r1, r2, #28
 802b8c6:	bf44      	itt	mi
 802b8c8:	232b      	movmi	r3, #43	; 0x2b
 802b8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b8ce:	f89a 3000 	ldrb.w	r3, [sl]
 802b8d2:	2b2a      	cmp	r3, #42	; 0x2a
 802b8d4:	d015      	beq.n	802b902 <_svfiprintf_r+0xf6>
 802b8d6:	9a07      	ldr	r2, [sp, #28]
 802b8d8:	4654      	mov	r4, sl
 802b8da:	2000      	movs	r0, #0
 802b8dc:	f04f 0c0a 	mov.w	ip, #10
 802b8e0:	4621      	mov	r1, r4
 802b8e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b8e6:	3b30      	subs	r3, #48	; 0x30
 802b8e8:	2b09      	cmp	r3, #9
 802b8ea:	d94e      	bls.n	802b98a <_svfiprintf_r+0x17e>
 802b8ec:	b1b0      	cbz	r0, 802b91c <_svfiprintf_r+0x110>
 802b8ee:	9207      	str	r2, [sp, #28]
 802b8f0:	e014      	b.n	802b91c <_svfiprintf_r+0x110>
 802b8f2:	eba0 0308 	sub.w	r3, r0, r8
 802b8f6:	fa09 f303 	lsl.w	r3, r9, r3
 802b8fa:	4313      	orrs	r3, r2
 802b8fc:	9304      	str	r3, [sp, #16]
 802b8fe:	46a2      	mov	sl, r4
 802b900:	e7d2      	b.n	802b8a8 <_svfiprintf_r+0x9c>
 802b902:	9b03      	ldr	r3, [sp, #12]
 802b904:	1d19      	adds	r1, r3, #4
 802b906:	681b      	ldr	r3, [r3, #0]
 802b908:	9103      	str	r1, [sp, #12]
 802b90a:	2b00      	cmp	r3, #0
 802b90c:	bfbb      	ittet	lt
 802b90e:	425b      	neglt	r3, r3
 802b910:	f042 0202 	orrlt.w	r2, r2, #2
 802b914:	9307      	strge	r3, [sp, #28]
 802b916:	9307      	strlt	r3, [sp, #28]
 802b918:	bfb8      	it	lt
 802b91a:	9204      	strlt	r2, [sp, #16]
 802b91c:	7823      	ldrb	r3, [r4, #0]
 802b91e:	2b2e      	cmp	r3, #46	; 0x2e
 802b920:	d10c      	bne.n	802b93c <_svfiprintf_r+0x130>
 802b922:	7863      	ldrb	r3, [r4, #1]
 802b924:	2b2a      	cmp	r3, #42	; 0x2a
 802b926:	d135      	bne.n	802b994 <_svfiprintf_r+0x188>
 802b928:	9b03      	ldr	r3, [sp, #12]
 802b92a:	1d1a      	adds	r2, r3, #4
 802b92c:	681b      	ldr	r3, [r3, #0]
 802b92e:	9203      	str	r2, [sp, #12]
 802b930:	2b00      	cmp	r3, #0
 802b932:	bfb8      	it	lt
 802b934:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802b938:	3402      	adds	r4, #2
 802b93a:	9305      	str	r3, [sp, #20]
 802b93c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802ba08 <_svfiprintf_r+0x1fc>
 802b940:	7821      	ldrb	r1, [r4, #0]
 802b942:	2203      	movs	r2, #3
 802b944:	4650      	mov	r0, sl
 802b946:	f7d4 fc63 	bl	8000210 <memchr>
 802b94a:	b140      	cbz	r0, 802b95e <_svfiprintf_r+0x152>
 802b94c:	2340      	movs	r3, #64	; 0x40
 802b94e:	eba0 000a 	sub.w	r0, r0, sl
 802b952:	fa03 f000 	lsl.w	r0, r3, r0
 802b956:	9b04      	ldr	r3, [sp, #16]
 802b958:	4303      	orrs	r3, r0
 802b95a:	3401      	adds	r4, #1
 802b95c:	9304      	str	r3, [sp, #16]
 802b95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b962:	4826      	ldr	r0, [pc, #152]	; (802b9fc <_svfiprintf_r+0x1f0>)
 802b964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b968:	2206      	movs	r2, #6
 802b96a:	f7d4 fc51 	bl	8000210 <memchr>
 802b96e:	2800      	cmp	r0, #0
 802b970:	d038      	beq.n	802b9e4 <_svfiprintf_r+0x1d8>
 802b972:	4b23      	ldr	r3, [pc, #140]	; (802ba00 <_svfiprintf_r+0x1f4>)
 802b974:	bb1b      	cbnz	r3, 802b9be <_svfiprintf_r+0x1b2>
 802b976:	9b03      	ldr	r3, [sp, #12]
 802b978:	3307      	adds	r3, #7
 802b97a:	f023 0307 	bic.w	r3, r3, #7
 802b97e:	3308      	adds	r3, #8
 802b980:	9303      	str	r3, [sp, #12]
 802b982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b984:	4433      	add	r3, r6
 802b986:	9309      	str	r3, [sp, #36]	; 0x24
 802b988:	e767      	b.n	802b85a <_svfiprintf_r+0x4e>
 802b98a:	fb0c 3202 	mla	r2, ip, r2, r3
 802b98e:	460c      	mov	r4, r1
 802b990:	2001      	movs	r0, #1
 802b992:	e7a5      	b.n	802b8e0 <_svfiprintf_r+0xd4>
 802b994:	2300      	movs	r3, #0
 802b996:	3401      	adds	r4, #1
 802b998:	9305      	str	r3, [sp, #20]
 802b99a:	4619      	mov	r1, r3
 802b99c:	f04f 0c0a 	mov.w	ip, #10
 802b9a0:	4620      	mov	r0, r4
 802b9a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b9a6:	3a30      	subs	r2, #48	; 0x30
 802b9a8:	2a09      	cmp	r2, #9
 802b9aa:	d903      	bls.n	802b9b4 <_svfiprintf_r+0x1a8>
 802b9ac:	2b00      	cmp	r3, #0
 802b9ae:	d0c5      	beq.n	802b93c <_svfiprintf_r+0x130>
 802b9b0:	9105      	str	r1, [sp, #20]
 802b9b2:	e7c3      	b.n	802b93c <_svfiprintf_r+0x130>
 802b9b4:	fb0c 2101 	mla	r1, ip, r1, r2
 802b9b8:	4604      	mov	r4, r0
 802b9ba:	2301      	movs	r3, #1
 802b9bc:	e7f0      	b.n	802b9a0 <_svfiprintf_r+0x194>
 802b9be:	ab03      	add	r3, sp, #12
 802b9c0:	9300      	str	r3, [sp, #0]
 802b9c2:	462a      	mov	r2, r5
 802b9c4:	4b0f      	ldr	r3, [pc, #60]	; (802ba04 <_svfiprintf_r+0x1f8>)
 802b9c6:	a904      	add	r1, sp, #16
 802b9c8:	4638      	mov	r0, r7
 802b9ca:	f3af 8000 	nop.w
 802b9ce:	1c42      	adds	r2, r0, #1
 802b9d0:	4606      	mov	r6, r0
 802b9d2:	d1d6      	bne.n	802b982 <_svfiprintf_r+0x176>
 802b9d4:	89ab      	ldrh	r3, [r5, #12]
 802b9d6:	065b      	lsls	r3, r3, #25
 802b9d8:	f53f af2c 	bmi.w	802b834 <_svfiprintf_r+0x28>
 802b9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b9de:	b01d      	add	sp, #116	; 0x74
 802b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b9e4:	ab03      	add	r3, sp, #12
 802b9e6:	9300      	str	r3, [sp, #0]
 802b9e8:	462a      	mov	r2, r5
 802b9ea:	4b06      	ldr	r3, [pc, #24]	; (802ba04 <_svfiprintf_r+0x1f8>)
 802b9ec:	a904      	add	r1, sp, #16
 802b9ee:	4638      	mov	r0, r7
 802b9f0:	f7ff f970 	bl	802acd4 <_printf_i>
 802b9f4:	e7eb      	b.n	802b9ce <_svfiprintf_r+0x1c2>
 802b9f6:	bf00      	nop
 802b9f8:	080329d0 	.word	0x080329d0
 802b9fc:	080329da 	.word	0x080329da
 802ba00:	00000000 	.word	0x00000000
 802ba04:	0802b757 	.word	0x0802b757
 802ba08:	080329d6 	.word	0x080329d6

0802ba0c <__sread>:
 802ba0c:	b510      	push	{r4, lr}
 802ba0e:	460c      	mov	r4, r1
 802ba10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ba14:	f000 f89c 	bl	802bb50 <_read_r>
 802ba18:	2800      	cmp	r0, #0
 802ba1a:	bfab      	itete	ge
 802ba1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ba1e:	89a3      	ldrhlt	r3, [r4, #12]
 802ba20:	181b      	addge	r3, r3, r0
 802ba22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ba26:	bfac      	ite	ge
 802ba28:	6563      	strge	r3, [r4, #84]	; 0x54
 802ba2a:	81a3      	strhlt	r3, [r4, #12]
 802ba2c:	bd10      	pop	{r4, pc}

0802ba2e <__swrite>:
 802ba2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ba32:	461f      	mov	r7, r3
 802ba34:	898b      	ldrh	r3, [r1, #12]
 802ba36:	05db      	lsls	r3, r3, #23
 802ba38:	4605      	mov	r5, r0
 802ba3a:	460c      	mov	r4, r1
 802ba3c:	4616      	mov	r6, r2
 802ba3e:	d505      	bpl.n	802ba4c <__swrite+0x1e>
 802ba40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ba44:	2302      	movs	r3, #2
 802ba46:	2200      	movs	r2, #0
 802ba48:	f000 f868 	bl	802bb1c <_lseek_r>
 802ba4c:	89a3      	ldrh	r3, [r4, #12]
 802ba4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ba52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ba56:	81a3      	strh	r3, [r4, #12]
 802ba58:	4632      	mov	r2, r6
 802ba5a:	463b      	mov	r3, r7
 802ba5c:	4628      	mov	r0, r5
 802ba5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ba62:	f000 b817 	b.w	802ba94 <_write_r>

0802ba66 <__sseek>:
 802ba66:	b510      	push	{r4, lr}
 802ba68:	460c      	mov	r4, r1
 802ba6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ba6e:	f000 f855 	bl	802bb1c <_lseek_r>
 802ba72:	1c43      	adds	r3, r0, #1
 802ba74:	89a3      	ldrh	r3, [r4, #12]
 802ba76:	bf15      	itete	ne
 802ba78:	6560      	strne	r0, [r4, #84]	; 0x54
 802ba7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ba7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ba82:	81a3      	strheq	r3, [r4, #12]
 802ba84:	bf18      	it	ne
 802ba86:	81a3      	strhne	r3, [r4, #12]
 802ba88:	bd10      	pop	{r4, pc}

0802ba8a <__sclose>:
 802ba8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ba8e:	f000 b813 	b.w	802bab8 <_close_r>
	...

0802ba94 <_write_r>:
 802ba94:	b538      	push	{r3, r4, r5, lr}
 802ba96:	4d07      	ldr	r5, [pc, #28]	; (802bab4 <_write_r+0x20>)
 802ba98:	4604      	mov	r4, r0
 802ba9a:	4608      	mov	r0, r1
 802ba9c:	4611      	mov	r1, r2
 802ba9e:	2200      	movs	r2, #0
 802baa0:	602a      	str	r2, [r5, #0]
 802baa2:	461a      	mov	r2, r3
 802baa4:	f7d5 ff36 	bl	8001914 <_write>
 802baa8:	1c43      	adds	r3, r0, #1
 802baaa:	d102      	bne.n	802bab2 <_write_r+0x1e>
 802baac:	682b      	ldr	r3, [r5, #0]
 802baae:	b103      	cbz	r3, 802bab2 <_write_r+0x1e>
 802bab0:	6023      	str	r3, [r4, #0]
 802bab2:	bd38      	pop	{r3, r4, r5, pc}
 802bab4:	20015640 	.word	0x20015640

0802bab8 <_close_r>:
 802bab8:	b538      	push	{r3, r4, r5, lr}
 802baba:	4d06      	ldr	r5, [pc, #24]	; (802bad4 <_close_r+0x1c>)
 802babc:	2300      	movs	r3, #0
 802babe:	4604      	mov	r4, r0
 802bac0:	4608      	mov	r0, r1
 802bac2:	602b      	str	r3, [r5, #0]
 802bac4:	f7d5 ff34 	bl	8001930 <_close>
 802bac8:	1c43      	adds	r3, r0, #1
 802baca:	d102      	bne.n	802bad2 <_close_r+0x1a>
 802bacc:	682b      	ldr	r3, [r5, #0]
 802bace:	b103      	cbz	r3, 802bad2 <_close_r+0x1a>
 802bad0:	6023      	str	r3, [r4, #0]
 802bad2:	bd38      	pop	{r3, r4, r5, pc}
 802bad4:	20015640 	.word	0x20015640

0802bad8 <_fstat_r>:
 802bad8:	b538      	push	{r3, r4, r5, lr}
 802bada:	4d07      	ldr	r5, [pc, #28]	; (802baf8 <_fstat_r+0x20>)
 802badc:	2300      	movs	r3, #0
 802bade:	4604      	mov	r4, r0
 802bae0:	4608      	mov	r0, r1
 802bae2:	4611      	mov	r1, r2
 802bae4:	602b      	str	r3, [r5, #0]
 802bae6:	f7d5 ff26 	bl	8001936 <_fstat>
 802baea:	1c43      	adds	r3, r0, #1
 802baec:	d102      	bne.n	802baf4 <_fstat_r+0x1c>
 802baee:	682b      	ldr	r3, [r5, #0]
 802baf0:	b103      	cbz	r3, 802baf4 <_fstat_r+0x1c>
 802baf2:	6023      	str	r3, [r4, #0]
 802baf4:	bd38      	pop	{r3, r4, r5, pc}
 802baf6:	bf00      	nop
 802baf8:	20015640 	.word	0x20015640

0802bafc <_isatty_r>:
 802bafc:	b538      	push	{r3, r4, r5, lr}
 802bafe:	4d06      	ldr	r5, [pc, #24]	; (802bb18 <_isatty_r+0x1c>)
 802bb00:	2300      	movs	r3, #0
 802bb02:	4604      	mov	r4, r0
 802bb04:	4608      	mov	r0, r1
 802bb06:	602b      	str	r3, [r5, #0]
 802bb08:	f7d5 ff1a 	bl	8001940 <_isatty>
 802bb0c:	1c43      	adds	r3, r0, #1
 802bb0e:	d102      	bne.n	802bb16 <_isatty_r+0x1a>
 802bb10:	682b      	ldr	r3, [r5, #0]
 802bb12:	b103      	cbz	r3, 802bb16 <_isatty_r+0x1a>
 802bb14:	6023      	str	r3, [r4, #0]
 802bb16:	bd38      	pop	{r3, r4, r5, pc}
 802bb18:	20015640 	.word	0x20015640

0802bb1c <_lseek_r>:
 802bb1c:	b538      	push	{r3, r4, r5, lr}
 802bb1e:	4d07      	ldr	r5, [pc, #28]	; (802bb3c <_lseek_r+0x20>)
 802bb20:	4604      	mov	r4, r0
 802bb22:	4608      	mov	r0, r1
 802bb24:	4611      	mov	r1, r2
 802bb26:	2200      	movs	r2, #0
 802bb28:	602a      	str	r2, [r5, #0]
 802bb2a:	461a      	mov	r2, r3
 802bb2c:	f7d5 ff0a 	bl	8001944 <_lseek>
 802bb30:	1c43      	adds	r3, r0, #1
 802bb32:	d102      	bne.n	802bb3a <_lseek_r+0x1e>
 802bb34:	682b      	ldr	r3, [r5, #0]
 802bb36:	b103      	cbz	r3, 802bb3a <_lseek_r+0x1e>
 802bb38:	6023      	str	r3, [r4, #0]
 802bb3a:	bd38      	pop	{r3, r4, r5, pc}
 802bb3c:	20015640 	.word	0x20015640

0802bb40 <_malloc_usable_size_r>:
 802bb40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802bb44:	1f18      	subs	r0, r3, #4
 802bb46:	2b00      	cmp	r3, #0
 802bb48:	bfbc      	itt	lt
 802bb4a:	580b      	ldrlt	r3, [r1, r0]
 802bb4c:	18c0      	addlt	r0, r0, r3
 802bb4e:	4770      	bx	lr

0802bb50 <_read_r>:
 802bb50:	b538      	push	{r3, r4, r5, lr}
 802bb52:	4d07      	ldr	r5, [pc, #28]	; (802bb70 <_read_r+0x20>)
 802bb54:	4604      	mov	r4, r0
 802bb56:	4608      	mov	r0, r1
 802bb58:	4611      	mov	r1, r2
 802bb5a:	2200      	movs	r2, #0
 802bb5c:	602a      	str	r2, [r5, #0]
 802bb5e:	461a      	mov	r2, r3
 802bb60:	f7d5 feca 	bl	80018f8 <_read>
 802bb64:	1c43      	adds	r3, r0, #1
 802bb66:	d102      	bne.n	802bb6e <_read_r+0x1e>
 802bb68:	682b      	ldr	r3, [r5, #0]
 802bb6a:	b103      	cbz	r3, 802bb6e <_read_r+0x1e>
 802bb6c:	6023      	str	r3, [r4, #0]
 802bb6e:	bd38      	pop	{r3, r4, r5, pc}
 802bb70:	20015640 	.word	0x20015640

0802bb74 <_init>:
 802bb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bb76:	bf00      	nop
 802bb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bb7a:	bc08      	pop	{r3}
 802bb7c:	469e      	mov	lr, r3
 802bb7e:	4770      	bx	lr

0802bb80 <_fini>:
 802bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bb82:	bf00      	nop
 802bb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bb86:	bc08      	pop	{r3}
 802bb88:	469e      	mov	lr, r3
 802bb8a:	4770      	bx	lr
